import "dart:async";
import "dart:convert";
import "dart:ffi";
import "dart:io" show Platform, File, Directory;
import "dart:isolate";
import "dart:typed_data";
import "package:ffi/ffi.dart";
import "package:matrix_sdk_ffi/matrix_sdk_common.dart";
import "matrix_sdk.dart";
import "matrix_sdk_base.dart";
import "matrix_sdk_crypto.dart";
import "matrix_sdk_ui.dart";

part "part_matrix_sdk_ffi.dart";

class AudioInfo {
  final Duration? duration;
  final int? size;
  final String? mimetype;

  AudioInfo({
    this.duration,
    this.size,
    this.mimetype,
  });
}

class FfiConverterAudioInfo {
  static AudioInfo lift(RustBuffer buf) {
    return FfiConverterAudioInfo.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(AudioInfo value) {
    final total_length =
        FfiConverterOptionalDuration.allocationSize(value.duration) +
            FfiConverterOptionalUInt64.allocationSize(value.size) +
            FfiConverterOptionalString.allocationSize(value.mimetype) +
            0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<AudioInfo> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final duration_lifted = FfiConverterOptionalDuration.read(
        Uint8List.view(buf.buffer, new_offset));
    final duration = duration_lifted.value;
    new_offset += duration_lifted.bytesRead;
    final size_lifted =
        FfiConverterOptionalUInt64.read(Uint8List.view(buf.buffer, new_offset));
    final size = size_lifted.value;
    new_offset += size_lifted.bytesRead;
    final mimetype_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final mimetype = mimetype_lifted.value;
    new_offset += mimetype_lifted.bytesRead;
    return LiftRetVal(
        AudioInfo(
          duration: duration,
          size: size,
          mimetype: mimetype,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(AudioInfo value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterOptionalDuration.write(
        value.duration, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalUInt64.write(
        value.size, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        value.mimetype, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(AudioInfo value) {
    return FfiConverterOptionalDuration.allocationSize(value.duration) +
        FfiConverterOptionalUInt64.allocationSize(value.size) +
        FfiConverterOptionalString.allocationSize(value.mimetype) +
        0;
  }
}

class AudioMessageContent {
  final String filename;
  final String? caption;
  final FormattedBody? formattedCaption;
  final MediaSource source;
  final AudioInfo? info;
  final UnstableAudioDetailsContent? audio;
  final UnstableVoiceContent? voice;

  AudioMessageContent({
    required this.filename,
    this.caption,
    this.formattedCaption,
    required this.source,
    this.info,
    this.audio,
    this.voice,
  });
}

class FfiConverterAudioMessageContent {
  static AudioMessageContent lift(RustBuffer buf) {
    return FfiConverterAudioMessageContent.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(AudioMessageContent value) {
    final total_length = FfiConverterString.allocationSize(value.filename) +
        FfiConverterOptionalString.allocationSize(value.caption) +
        FfiConverterOptionalFormattedBody.allocationSize(
            value.formattedCaption) +
        MediaSource.allocationSize(value.source) +
        FfiConverterOptionalAudioInfo.allocationSize(value.info) +
        FfiConverterOptionalUnstableAudioDetailsContent.allocationSize(
            value.audio) +
        FfiConverterOptionalUnstableVoiceContent.allocationSize(value.voice) +
        0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<AudioMessageContent> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final filename_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final filename = filename_lifted.value;
    new_offset += filename_lifted.bytesRead;
    final caption_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final caption = caption_lifted.value;
    new_offset += caption_lifted.bytesRead;
    final formattedCaption_lifted = FfiConverterOptionalFormattedBody.read(
        Uint8List.view(buf.buffer, new_offset));
    final formattedCaption = formattedCaption_lifted.value;
    new_offset += formattedCaption_lifted.bytesRead;
    final source_lifted =
        MediaSource.read(Uint8List.view(buf.buffer, new_offset));
    final source = source_lifted.value;
    new_offset += source_lifted.bytesRead;
    final info_lifted = FfiConverterOptionalAudioInfo.read(
        Uint8List.view(buf.buffer, new_offset));
    final info = info_lifted.value;
    new_offset += info_lifted.bytesRead;
    final audio_lifted = FfiConverterOptionalUnstableAudioDetailsContent.read(
        Uint8List.view(buf.buffer, new_offset));
    final audio = audio_lifted.value;
    new_offset += audio_lifted.bytesRead;
    final voice_lifted = FfiConverterOptionalUnstableVoiceContent.read(
        Uint8List.view(buf.buffer, new_offset));
    final voice = voice_lifted.value;
    new_offset += voice_lifted.bytesRead;
    return LiftRetVal(
        AudioMessageContent(
          filename: filename,
          caption: caption,
          formattedCaption: formattedCaption,
          source: source,
          info: info,
          audio: audio,
          voice: voice,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(AudioMessageContent value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterString.write(
        value.filename, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        value.caption, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalFormattedBody.write(
        value.formattedCaption, Uint8List.view(buf.buffer, new_offset));
    new_offset +=
        MediaSource.write(value.source, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalAudioInfo.write(
        value.info, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalUnstableAudioDetailsContent.write(
        value.audio, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalUnstableVoiceContent.write(
        value.voice, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(AudioMessageContent value) {
    return FfiConverterString.allocationSize(value.filename) +
        FfiConverterOptionalString.allocationSize(value.caption) +
        FfiConverterOptionalFormattedBody.allocationSize(
            value.formattedCaption) +
        MediaSource.allocationSize(value.source) +
        FfiConverterOptionalAudioInfo.allocationSize(value.info) +
        FfiConverterOptionalUnstableAudioDetailsContent.allocationSize(
            value.audio) +
        FfiConverterOptionalUnstableVoiceContent.allocationSize(value.voice) +
        0;
  }
}

class AuthDataPasswordDetails {
  final String identifier;
  final String password;

  AuthDataPasswordDetails({
    required this.identifier,
    required this.password,
  });
}

class FfiConverterAuthDataPasswordDetails {
  static AuthDataPasswordDetails lift(RustBuffer buf) {
    return FfiConverterAuthDataPasswordDetails.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(AuthDataPasswordDetails value) {
    final total_length = FfiConverterString.allocationSize(value.identifier) +
        FfiConverterString.allocationSize(value.password) +
        0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<AuthDataPasswordDetails> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final identifier_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final identifier = identifier_lifted.value;
    new_offset += identifier_lifted.bytesRead;
    final password_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final password = password_lifted.value;
    new_offset += password_lifted.bytesRead;
    return LiftRetVal(
        AuthDataPasswordDetails(
          identifier: identifier,
          password: password,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(AuthDataPasswordDetails value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterString.write(
        value.identifier, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterString.write(
        value.password, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(AuthDataPasswordDetails value) {
    return FfiConverterString.allocationSize(value.identifier) +
        FfiConverterString.allocationSize(value.password) +
        0;
  }
}

class ClientProperties {
  final String clientId;
  final String? languageTag;
  final String? theme;

  ClientProperties({
    required this.clientId,
    this.languageTag,
    this.theme,
  });
}

class FfiConverterClientProperties {
  static ClientProperties lift(RustBuffer buf) {
    return FfiConverterClientProperties.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(ClientProperties value) {
    final total_length = FfiConverterString.allocationSize(value.clientId) +
        FfiConverterOptionalString.allocationSize(value.languageTag) +
        FfiConverterOptionalString.allocationSize(value.theme) +
        0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<ClientProperties> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final clientId_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final clientId = clientId_lifted.value;
    new_offset += clientId_lifted.bytesRead;
    final languageTag_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final languageTag = languageTag_lifted.value;
    new_offset += languageTag_lifted.bytesRead;
    final theme_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final theme = theme_lifted.value;
    new_offset += theme_lifted.bytesRead;
    return LiftRetVal(
        ClientProperties(
          clientId: clientId,
          languageTag: languageTag,
          theme: theme,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(ClientProperties value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterString.write(
        value.clientId, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        value.languageTag, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        value.theme, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(ClientProperties value) {
    return FfiConverterString.allocationSize(value.clientId) +
        FfiConverterOptionalString.allocationSize(value.languageTag) +
        FfiConverterOptionalString.allocationSize(value.theme) +
        0;
  }
}

class ComposerDraft {
  final String plainText;
  final String? htmlText;
  final ComposerDraftType draftType;

  ComposerDraft({
    required this.plainText,
    this.htmlText,
    required this.draftType,
  });
}

class FfiConverterComposerDraft {
  static ComposerDraft lift(RustBuffer buf) {
    return FfiConverterComposerDraft.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(ComposerDraft value) {
    final total_length = FfiConverterString.allocationSize(value.plainText) +
        FfiConverterOptionalString.allocationSize(value.htmlText) +
        FfiConverterComposerDraftType.allocationSize(value.draftType) +
        0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<ComposerDraft> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final plainText_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final plainText = plainText_lifted.value;
    new_offset += plainText_lifted.bytesRead;
    final htmlText_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final htmlText = htmlText_lifted.value;
    new_offset += htmlText_lifted.bytesRead;
    final draftType_lifted = FfiConverterComposerDraftType.read(
        Uint8List.view(buf.buffer, new_offset));
    final draftType = draftType_lifted.value;
    new_offset += draftType_lifted.bytesRead;
    return LiftRetVal(
        ComposerDraft(
          plainText: plainText,
          htmlText: htmlText,
          draftType: draftType,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(ComposerDraft value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterString.write(
        value.plainText, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        value.htmlText, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterComposerDraftType.write(
        value.draftType, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(ComposerDraft value) {
    return FfiConverterString.allocationSize(value.plainText) +
        FfiConverterOptionalString.allocationSize(value.htmlText) +
        FfiConverterComposerDraftType.allocationSize(value.draftType) +
        0;
  }
}

class ConditionalPushRule {
  final List<Action> actions;
  final bool default_;
  final bool enabled;
  final String ruleId;
  final List<PushCondition> conditions;

  ConditionalPushRule({
    required this.actions,
    required this.default_,
    required this.enabled,
    required this.ruleId,
    required this.conditions,
  });
}

class FfiConverterConditionalPushRule {
  static ConditionalPushRule lift(RustBuffer buf) {
    return FfiConverterConditionalPushRule.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(ConditionalPushRule value) {
    final total_length =
        FfiConverterSequenceAction.allocationSize(value.actions) +
            FfiConverterBool.allocationSize(value.default_) +
            FfiConverterBool.allocationSize(value.enabled) +
            FfiConverterString.allocationSize(value.ruleId) +
            FfiConverterSequencePushCondition.allocationSize(value.conditions) +
            0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<ConditionalPushRule> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final actions_lifted =
        FfiConverterSequenceAction.read(Uint8List.view(buf.buffer, new_offset));
    final actions = actions_lifted.value;
    new_offset += actions_lifted.bytesRead;
    final default__lifted =
        FfiConverterBool.read(Uint8List.view(buf.buffer, new_offset));
    final default_ = default__lifted.value;
    new_offset += default__lifted.bytesRead;
    final enabled_lifted =
        FfiConverterBool.read(Uint8List.view(buf.buffer, new_offset));
    final enabled = enabled_lifted.value;
    new_offset += enabled_lifted.bytesRead;
    final ruleId_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final ruleId = ruleId_lifted.value;
    new_offset += ruleId_lifted.bytesRead;
    final conditions_lifted = FfiConverterSequencePushCondition.read(
        Uint8List.view(buf.buffer, new_offset));
    final conditions = conditions_lifted.value;
    new_offset += conditions_lifted.bytesRead;
    return LiftRetVal(
        ConditionalPushRule(
          actions: actions,
          default_: default_,
          enabled: enabled,
          ruleId: ruleId,
          conditions: conditions,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(ConditionalPushRule value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterSequenceAction.write(
        value.actions, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterBool.write(
        value.default_, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterBool.write(
        value.enabled, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterString.write(
        value.ruleId, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterSequencePushCondition.write(
        value.conditions, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(ConditionalPushRule value) {
    return FfiConverterSequenceAction.allocationSize(value.actions) +
        FfiConverterBool.allocationSize(value.default_) +
        FfiConverterBool.allocationSize(value.enabled) +
        FfiConverterString.allocationSize(value.ruleId) +
        FfiConverterSequencePushCondition.allocationSize(value.conditions) +
        0;
  }
}

class CreateRoomParameters {
  final String? name;
  final String? topic;
  final bool isEncrypted;
  final bool isDirect;
  final RoomVisibility visibility;
  final RoomPreset preset;
  final List<String>? invite;
  final String? avatar;
  final PowerLevels? powerLevelContentOverride;
  final JoinRule? joinRuleOverride;
  final RoomHistoryVisibility? historyVisibilityOverride;
  final String? canonicalAlias;

  CreateRoomParameters({
    this.name,
    this.topic,
    required this.isEncrypted,
    required this.isDirect,
    required this.visibility,
    required this.preset,
    this.invite,
    this.avatar,
    this.powerLevelContentOverride,
    this.joinRuleOverride,
    this.historyVisibilityOverride,
    this.canonicalAlias,
  });
}

class FfiConverterCreateRoomParameters {
  static CreateRoomParameters lift(RustBuffer buf) {
    return FfiConverterCreateRoomParameters.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(CreateRoomParameters value) {
    final total_length = FfiConverterOptionalString.allocationSize(value.name) +
        FfiConverterOptionalString.allocationSize(value.topic) +
        FfiConverterBool.allocationSize(value.isEncrypted) +
        FfiConverterBool.allocationSize(value.isDirect) +
        FfiConverterRoomVisibility.allocationSize(value.visibility) +
        FfiConverterRoomPreset.allocationSize(value.preset) +
        FfiConverterOptionalSequenceString.allocationSize(value.invite) +
        FfiConverterOptionalString.allocationSize(value.avatar) +
        FfiConverterOptionalPowerLevels.allocationSize(
            value.powerLevelContentOverride) +
        FfiConverterOptionalJoinRule.allocationSize(value.joinRuleOverride) +
        FfiConverterOptionalRoomHistoryVisibility.allocationSize(
            value.historyVisibilityOverride) +
        FfiConverterOptionalString.allocationSize(value.canonicalAlias) +
        0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<CreateRoomParameters> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final name_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final name = name_lifted.value;
    new_offset += name_lifted.bytesRead;
    final topic_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final topic = topic_lifted.value;
    new_offset += topic_lifted.bytesRead;
    final isEncrypted_lifted =
        FfiConverterBool.read(Uint8List.view(buf.buffer, new_offset));
    final isEncrypted = isEncrypted_lifted.value;
    new_offset += isEncrypted_lifted.bytesRead;
    final isDirect_lifted =
        FfiConverterBool.read(Uint8List.view(buf.buffer, new_offset));
    final isDirect = isDirect_lifted.value;
    new_offset += isDirect_lifted.bytesRead;
    final visibility_lifted =
        FfiConverterRoomVisibility.read(Uint8List.view(buf.buffer, new_offset));
    final visibility = visibility_lifted.value;
    new_offset += visibility_lifted.bytesRead;
    final preset_lifted =
        FfiConverterRoomPreset.read(Uint8List.view(buf.buffer, new_offset));
    final preset = preset_lifted.value;
    new_offset += preset_lifted.bytesRead;
    final invite_lifted = FfiConverterOptionalSequenceString.read(
        Uint8List.view(buf.buffer, new_offset));
    final invite = invite_lifted.value;
    new_offset += invite_lifted.bytesRead;
    final avatar_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final avatar = avatar_lifted.value;
    new_offset += avatar_lifted.bytesRead;
    final powerLevelContentOverride_lifted =
        FfiConverterOptionalPowerLevels.read(
            Uint8List.view(buf.buffer, new_offset));
    final powerLevelContentOverride = powerLevelContentOverride_lifted.value;
    new_offset += powerLevelContentOverride_lifted.bytesRead;
    final joinRuleOverride_lifted = FfiConverterOptionalJoinRule.read(
        Uint8List.view(buf.buffer, new_offset));
    final joinRuleOverride = joinRuleOverride_lifted.value;
    new_offset += joinRuleOverride_lifted.bytesRead;
    final historyVisibilityOverride_lifted =
        FfiConverterOptionalRoomHistoryVisibility.read(
            Uint8List.view(buf.buffer, new_offset));
    final historyVisibilityOverride = historyVisibilityOverride_lifted.value;
    new_offset += historyVisibilityOverride_lifted.bytesRead;
    final canonicalAlias_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final canonicalAlias = canonicalAlias_lifted.value;
    new_offset += canonicalAlias_lifted.bytesRead;
    return LiftRetVal(
        CreateRoomParameters(
          name: name,
          topic: topic,
          isEncrypted: isEncrypted,
          isDirect: isDirect,
          visibility: visibility,
          preset: preset,
          invite: invite,
          avatar: avatar,
          powerLevelContentOverride: powerLevelContentOverride,
          joinRuleOverride: joinRuleOverride,
          historyVisibilityOverride: historyVisibilityOverride,
          canonicalAlias: canonicalAlias,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(CreateRoomParameters value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterOptionalString.write(
        value.name, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        value.topic, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterBool.write(
        value.isEncrypted, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterBool.write(
        value.isDirect, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterRoomVisibility.write(
        value.visibility, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterRoomPreset.write(
        value.preset, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalSequenceString.write(
        value.invite, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        value.avatar, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalPowerLevels.write(
        value.powerLevelContentOverride,
        Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalJoinRule.write(
        value.joinRuleOverride, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalRoomHistoryVisibility.write(
        value.historyVisibilityOverride,
        Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        value.canonicalAlias, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(CreateRoomParameters value) {
    return FfiConverterOptionalString.allocationSize(value.name) +
        FfiConverterOptionalString.allocationSize(value.topic) +
        FfiConverterBool.allocationSize(value.isEncrypted) +
        FfiConverterBool.allocationSize(value.isDirect) +
        FfiConverterRoomVisibility.allocationSize(value.visibility) +
        FfiConverterRoomPreset.allocationSize(value.preset) +
        FfiConverterOptionalSequenceString.allocationSize(value.invite) +
        FfiConverterOptionalString.allocationSize(value.avatar) +
        FfiConverterOptionalPowerLevels.allocationSize(
            value.powerLevelContentOverride) +
        FfiConverterOptionalJoinRule.allocationSize(value.joinRuleOverride) +
        FfiConverterOptionalRoomHistoryVisibility.allocationSize(
            value.historyVisibilityOverride) +
        FfiConverterOptionalString.allocationSize(value.canonicalAlias) +
        0;
  }
}

class EmoteMessageContent {
  final String body;
  final FormattedBody? formatted;

  EmoteMessageContent({
    required this.body,
    this.formatted,
  });
}

class FfiConverterEmoteMessageContent {
  static EmoteMessageContent lift(RustBuffer buf) {
    return FfiConverterEmoteMessageContent.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(EmoteMessageContent value) {
    final total_length = FfiConverterString.allocationSize(value.body) +
        FfiConverterOptionalFormattedBody.allocationSize(value.formatted) +
        0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<EmoteMessageContent> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final body_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final body = body_lifted.value;
    new_offset += body_lifted.bytesRead;
    final formatted_lifted = FfiConverterOptionalFormattedBody.read(
        Uint8List.view(buf.buffer, new_offset));
    final formatted = formatted_lifted.value;
    new_offset += formatted_lifted.bytesRead;
    return LiftRetVal(
        EmoteMessageContent(
          body: body,
          formatted: formatted,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(EmoteMessageContent value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterString.write(
        value.body, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalFormattedBody.write(
        value.formatted, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(EmoteMessageContent value) {
    return FfiConverterString.allocationSize(value.body) +
        FfiConverterOptionalFormattedBody.allocationSize(value.formatted) +
        0;
  }
}

class EventTimelineItem {
  final bool isRemote;
  final EventOrTransactionId eventOrTransactionId;
  final String sender;
  final ProfileDetails senderProfile;
  final bool isOwn;
  final bool isEditable;
  final TimelineItemContent content;
  final Timestamp timestamp;
  final EventSendState? localSendState;
  final int? localCreatedAt;
  final Map<String, Receipt> readReceipts;
  final EventItemOrigin? origin;
  final bool canBeRepliedTo;
  final LazyTimelineItemProvider lazyProvider;

  EventTimelineItem({
    required this.isRemote,
    required this.eventOrTransactionId,
    required this.sender,
    required this.senderProfile,
    required this.isOwn,
    required this.isEditable,
    required this.content,
    required this.timestamp,
    this.localSendState,
    this.localCreatedAt,
    required this.readReceipts,
    this.origin,
    required this.canBeRepliedTo,
    required this.lazyProvider,
  });
}

class FfiConverterEventTimelineItem {
  static EventTimelineItem lift(RustBuffer buf) {
    return FfiConverterEventTimelineItem.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(EventTimelineItem value) {
    final total_length = FfiConverterBool.allocationSize(value.isRemote) +
        FfiConverterEventOrTransactionId.allocationSize(
            value.eventOrTransactionId) +
        FfiConverterString.allocationSize(value.sender) +
        FfiConverterProfileDetails.allocationSize(value.senderProfile) +
        FfiConverterBool.allocationSize(value.isOwn) +
        FfiConverterBool.allocationSize(value.isEditable) +
        FfiConverterTimelineItemContent.allocationSize(value.content) +
        FfiConverterTimestamp.allocationSize(value.timestamp) +
        FfiConverterOptionalEventSendState.allocationSize(
            value.localSendState) +
        FfiConverterOptionalUInt64.allocationSize(value.localCreatedAt) +
        FfiConverterMapStringReceipt.allocationSize(value.readReceipts) +
        FfiConverterOptionalEventItemOrigin.allocationSize(value.origin) +
        FfiConverterBool.allocationSize(value.canBeRepliedTo) +
        LazyTimelineItemProvider.allocationSize(value.lazyProvider) +
        0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<EventTimelineItem> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final isRemote_lifted =
        FfiConverterBool.read(Uint8List.view(buf.buffer, new_offset));
    final isRemote = isRemote_lifted.value;
    new_offset += isRemote_lifted.bytesRead;
    final eventOrTransactionId_lifted = FfiConverterEventOrTransactionId.read(
        Uint8List.view(buf.buffer, new_offset));
    final eventOrTransactionId = eventOrTransactionId_lifted.value;
    new_offset += eventOrTransactionId_lifted.bytesRead;
    final sender_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final sender = sender_lifted.value;
    new_offset += sender_lifted.bytesRead;
    final senderProfile_lifted =
        FfiConverterProfileDetails.read(Uint8List.view(buf.buffer, new_offset));
    final senderProfile = senderProfile_lifted.value;
    new_offset += senderProfile_lifted.bytesRead;
    final isOwn_lifted =
        FfiConverterBool.read(Uint8List.view(buf.buffer, new_offset));
    final isOwn = isOwn_lifted.value;
    new_offset += isOwn_lifted.bytesRead;
    final isEditable_lifted =
        FfiConverterBool.read(Uint8List.view(buf.buffer, new_offset));
    final isEditable = isEditable_lifted.value;
    new_offset += isEditable_lifted.bytesRead;
    final content_lifted = FfiConverterTimelineItemContent.read(
        Uint8List.view(buf.buffer, new_offset));
    final content = content_lifted.value;
    new_offset += content_lifted.bytesRead;
    final timestamp_lifted =
        FfiConverterTimestamp.read(Uint8List.view(buf.buffer, new_offset));
    final timestamp = timestamp_lifted.value;
    new_offset += timestamp_lifted.bytesRead;
    final localSendState_lifted = FfiConverterOptionalEventSendState.read(
        Uint8List.view(buf.buffer, new_offset));
    final localSendState = localSendState_lifted.value;
    new_offset += localSendState_lifted.bytesRead;
    final localCreatedAt_lifted =
        FfiConverterOptionalUInt64.read(Uint8List.view(buf.buffer, new_offset));
    final localCreatedAt = localCreatedAt_lifted.value;
    new_offset += localCreatedAt_lifted.bytesRead;
    final readReceipts_lifted = FfiConverterMapStringReceipt.read(
        Uint8List.view(buf.buffer, new_offset));
    final readReceipts = readReceipts_lifted.value;
    new_offset += readReceipts_lifted.bytesRead;
    final origin_lifted = FfiConverterOptionalEventItemOrigin.read(
        Uint8List.view(buf.buffer, new_offset));
    final origin = origin_lifted.value;
    new_offset += origin_lifted.bytesRead;
    final canBeRepliedTo_lifted =
        FfiConverterBool.read(Uint8List.view(buf.buffer, new_offset));
    final canBeRepliedTo = canBeRepliedTo_lifted.value;
    new_offset += canBeRepliedTo_lifted.bytesRead;
    final lazyProvider_lifted =
        LazyTimelineItemProvider.read(Uint8List.view(buf.buffer, new_offset));
    final lazyProvider = lazyProvider_lifted.value;
    new_offset += lazyProvider_lifted.bytesRead;
    return LiftRetVal(
        EventTimelineItem(
          isRemote: isRemote,
          eventOrTransactionId: eventOrTransactionId,
          sender: sender,
          senderProfile: senderProfile,
          isOwn: isOwn,
          isEditable: isEditable,
          content: content,
          timestamp: timestamp,
          localSendState: localSendState,
          localCreatedAt: localCreatedAt,
          readReceipts: readReceipts,
          origin: origin,
          canBeRepliedTo: canBeRepliedTo,
          lazyProvider: lazyProvider,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(EventTimelineItem value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterBool.write(
        value.isRemote, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterEventOrTransactionId.write(
        value.eventOrTransactionId, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterString.write(
        value.sender, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterProfileDetails.write(
        value.senderProfile, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterBool.write(
        value.isOwn, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterBool.write(
        value.isEditable, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterTimelineItemContent.write(
        value.content, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterTimestamp.write(
        value.timestamp, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalEventSendState.write(
        value.localSendState, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalUInt64.write(
        value.localCreatedAt, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterMapStringReceipt.write(
        value.readReceipts, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalEventItemOrigin.write(
        value.origin, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterBool.write(
        value.canBeRepliedTo, Uint8List.view(buf.buffer, new_offset));
    new_offset += LazyTimelineItemProvider.write(
        value.lazyProvider, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(EventTimelineItem value) {
    return FfiConverterBool.allocationSize(value.isRemote) +
        FfiConverterEventOrTransactionId.allocationSize(
            value.eventOrTransactionId) +
        FfiConverterString.allocationSize(value.sender) +
        FfiConverterProfileDetails.allocationSize(value.senderProfile) +
        FfiConverterBool.allocationSize(value.isOwn) +
        FfiConverterBool.allocationSize(value.isEditable) +
        FfiConverterTimelineItemContent.allocationSize(value.content) +
        FfiConverterTimestamp.allocationSize(value.timestamp) +
        FfiConverterOptionalEventSendState.allocationSize(
            value.localSendState) +
        FfiConverterOptionalUInt64.allocationSize(value.localCreatedAt) +
        FfiConverterMapStringReceipt.allocationSize(value.readReceipts) +
        FfiConverterOptionalEventItemOrigin.allocationSize(value.origin) +
        FfiConverterBool.allocationSize(value.canBeRepliedTo) +
        LazyTimelineItemProvider.allocationSize(value.lazyProvider) +
        0;
  }
}

class EventTimelineItemDebugInfo {
  final String model;
  final String? originalJson;
  final String? latestEditJson;

  EventTimelineItemDebugInfo({
    required this.model,
    this.originalJson,
    this.latestEditJson,
  });
}

class FfiConverterEventTimelineItemDebugInfo {
  static EventTimelineItemDebugInfo lift(RustBuffer buf) {
    return FfiConverterEventTimelineItemDebugInfo.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(EventTimelineItemDebugInfo value) {
    final total_length = FfiConverterString.allocationSize(value.model) +
        FfiConverterOptionalString.allocationSize(value.originalJson) +
        FfiConverterOptionalString.allocationSize(value.latestEditJson) +
        0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<EventTimelineItemDebugInfo> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final model_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final model = model_lifted.value;
    new_offset += model_lifted.bytesRead;
    final originalJson_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final originalJson = originalJson_lifted.value;
    new_offset += originalJson_lifted.bytesRead;
    final latestEditJson_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final latestEditJson = latestEditJson_lifted.value;
    new_offset += latestEditJson_lifted.bytesRead;
    return LiftRetVal(
        EventTimelineItemDebugInfo(
          model: model,
          originalJson: originalJson,
          latestEditJson: latestEditJson,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(EventTimelineItemDebugInfo value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterString.write(
        value.model, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        value.originalJson, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        value.latestEditJson, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(EventTimelineItemDebugInfo value) {
    return FfiConverterString.allocationSize(value.model) +
        FfiConverterOptionalString.allocationSize(value.originalJson) +
        FfiConverterOptionalString.allocationSize(value.latestEditJson) +
        0;
  }
}

class FileInfo {
  final String? mimetype;
  final int? size;
  final ThumbnailInfo? thumbnailInfo;
  final MediaSource? thumbnailSource;

  FileInfo({
    this.mimetype,
    this.size,
    this.thumbnailInfo,
    this.thumbnailSource,
  });
}

class FfiConverterFileInfo {
  static FileInfo lift(RustBuffer buf) {
    return FfiConverterFileInfo.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(FileInfo value) {
    final total_length = FfiConverterOptionalString.allocationSize(
            value.mimetype) +
        FfiConverterOptionalUInt64.allocationSize(value.size) +
        FfiConverterOptionalThumbnailInfo.allocationSize(value.thumbnailInfo) +
        FfiConverterOptionalMediaSource.allocationSize(value.thumbnailSource) +
        0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<FileInfo> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final mimetype_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final mimetype = mimetype_lifted.value;
    new_offset += mimetype_lifted.bytesRead;
    final size_lifted =
        FfiConverterOptionalUInt64.read(Uint8List.view(buf.buffer, new_offset));
    final size = size_lifted.value;
    new_offset += size_lifted.bytesRead;
    final thumbnailInfo_lifted = FfiConverterOptionalThumbnailInfo.read(
        Uint8List.view(buf.buffer, new_offset));
    final thumbnailInfo = thumbnailInfo_lifted.value;
    new_offset += thumbnailInfo_lifted.bytesRead;
    final thumbnailSource_lifted = FfiConverterOptionalMediaSource.read(
        Uint8List.view(buf.buffer, new_offset));
    final thumbnailSource = thumbnailSource_lifted.value;
    new_offset += thumbnailSource_lifted.bytesRead;
    return LiftRetVal(
        FileInfo(
          mimetype: mimetype,
          size: size,
          thumbnailInfo: thumbnailInfo,
          thumbnailSource: thumbnailSource,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(FileInfo value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterOptionalString.write(
        value.mimetype, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalUInt64.write(
        value.size, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalThumbnailInfo.write(
        value.thumbnailInfo, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalMediaSource.write(
        value.thumbnailSource, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(FileInfo value) {
    return FfiConverterOptionalString.allocationSize(value.mimetype) +
        FfiConverterOptionalUInt64.allocationSize(value.size) +
        FfiConverterOptionalThumbnailInfo.allocationSize(value.thumbnailInfo) +
        FfiConverterOptionalMediaSource.allocationSize(value.thumbnailSource) +
        0;
  }
}

class FileMessageContent {
  final String filename;
  final String? caption;
  final FormattedBody? formattedCaption;
  final MediaSource source;
  final FileInfo? info;

  FileMessageContent({
    required this.filename,
    this.caption,
    this.formattedCaption,
    required this.source,
    this.info,
  });
}

class FfiConverterFileMessageContent {
  static FileMessageContent lift(RustBuffer buf) {
    return FfiConverterFileMessageContent.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(FileMessageContent value) {
    final total_length = FfiConverterString.allocationSize(value.filename) +
        FfiConverterOptionalString.allocationSize(value.caption) +
        FfiConverterOptionalFormattedBody.allocationSize(
            value.formattedCaption) +
        MediaSource.allocationSize(value.source) +
        FfiConverterOptionalFileInfo.allocationSize(value.info) +
        0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<FileMessageContent> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final filename_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final filename = filename_lifted.value;
    new_offset += filename_lifted.bytesRead;
    final caption_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final caption = caption_lifted.value;
    new_offset += caption_lifted.bytesRead;
    final formattedCaption_lifted = FfiConverterOptionalFormattedBody.read(
        Uint8List.view(buf.buffer, new_offset));
    final formattedCaption = formattedCaption_lifted.value;
    new_offset += formattedCaption_lifted.bytesRead;
    final source_lifted =
        MediaSource.read(Uint8List.view(buf.buffer, new_offset));
    final source = source_lifted.value;
    new_offset += source_lifted.bytesRead;
    final info_lifted = FfiConverterOptionalFileInfo.read(
        Uint8List.view(buf.buffer, new_offset));
    final info = info_lifted.value;
    new_offset += info_lifted.bytesRead;
    return LiftRetVal(
        FileMessageContent(
          filename: filename,
          caption: caption,
          formattedCaption: formattedCaption,
          source: source,
          info: info,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(FileMessageContent value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterString.write(
        value.filename, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        value.caption, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalFormattedBody.write(
        value.formattedCaption, Uint8List.view(buf.buffer, new_offset));
    new_offset +=
        MediaSource.write(value.source, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalFileInfo.write(
        value.info, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(FileMessageContent value) {
    return FfiConverterString.allocationSize(value.filename) +
        FfiConverterOptionalString.allocationSize(value.caption) +
        FfiConverterOptionalFormattedBody.allocationSize(
            value.formattedCaption) +
        MediaSource.allocationSize(value.source) +
        FfiConverterOptionalFileInfo.allocationSize(value.info) +
        0;
  }
}

class FormattedBody {
  final MessageFormat format;
  final String body;

  FormattedBody({
    required this.format,
    required this.body,
  });
}

class FfiConverterFormattedBody {
  static FormattedBody lift(RustBuffer buf) {
    return FfiConverterFormattedBody.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(FormattedBody value) {
    final total_length =
        FfiConverterMessageFormat.allocationSize(value.format) +
            FfiConverterString.allocationSize(value.body) +
            0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<FormattedBody> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final format_lifted =
        FfiConverterMessageFormat.read(Uint8List.view(buf.buffer, new_offset));
    final format = format_lifted.value;
    new_offset += format_lifted.bytesRead;
    final body_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final body = body_lifted.value;
    new_offset += body_lifted.bytesRead;
    return LiftRetVal(
        FormattedBody(
          format: format,
          body: body,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(FormattedBody value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterMessageFormat.write(
        value.format, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterString.write(
        value.body, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(FormattedBody value) {
    return FfiConverterMessageFormat.allocationSize(value.format) +
        FfiConverterString.allocationSize(value.body) +
        0;
  }
}

class GalleryMessageContent {
  final String body;
  final FormattedBody? formatted;
  final List<GalleryItemType> itemtypes;

  GalleryMessageContent({
    required this.body,
    this.formatted,
    required this.itemtypes,
  });
}

class FfiConverterGalleryMessageContent {
  static GalleryMessageContent lift(RustBuffer buf) {
    return FfiConverterGalleryMessageContent.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(GalleryMessageContent value) {
    final total_length = FfiConverterString.allocationSize(value.body) +
        FfiConverterOptionalFormattedBody.allocationSize(value.formatted) +
        FfiConverterSequenceGalleryItemType.allocationSize(value.itemtypes) +
        0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<GalleryMessageContent> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final body_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final body = body_lifted.value;
    new_offset += body_lifted.bytesRead;
    final formatted_lifted = FfiConverterOptionalFormattedBody.read(
        Uint8List.view(buf.buffer, new_offset));
    final formatted = formatted_lifted.value;
    new_offset += formatted_lifted.bytesRead;
    final itemtypes_lifted = FfiConverterSequenceGalleryItemType.read(
        Uint8List.view(buf.buffer, new_offset));
    final itemtypes = itemtypes_lifted.value;
    new_offset += itemtypes_lifted.bytesRead;
    return LiftRetVal(
        GalleryMessageContent(
          body: body,
          formatted: formatted,
          itemtypes: itemtypes,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(GalleryMessageContent value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterString.write(
        value.body, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalFormattedBody.write(
        value.formatted, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterSequenceGalleryItemType.write(
        value.itemtypes, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(GalleryMessageContent value) {
    return FfiConverterString.allocationSize(value.body) +
        FfiConverterOptionalFormattedBody.allocationSize(value.formatted) +
        FfiConverterSequenceGalleryItemType.allocationSize(value.itemtypes) +
        0;
  }
}

class GalleryUploadParameters {
  final String? caption;
  final FormattedBody? formattedCaption;
  final Mentions? mentions;
  final String? inReplyTo;

  GalleryUploadParameters({
    this.caption,
    this.formattedCaption,
    this.mentions,
    this.inReplyTo,
  });
}

class FfiConverterGalleryUploadParameters {
  static GalleryUploadParameters lift(RustBuffer buf) {
    return FfiConverterGalleryUploadParameters.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(GalleryUploadParameters value) {
    final total_length =
        FfiConverterOptionalString.allocationSize(value.caption) +
            FfiConverterOptionalFormattedBody.allocationSize(
                value.formattedCaption) +
            FfiConverterOptionalMentions.allocationSize(value.mentions) +
            FfiConverterOptionalString.allocationSize(value.inReplyTo) +
            0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<GalleryUploadParameters> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final caption_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final caption = caption_lifted.value;
    new_offset += caption_lifted.bytesRead;
    final formattedCaption_lifted = FfiConverterOptionalFormattedBody.read(
        Uint8List.view(buf.buffer, new_offset));
    final formattedCaption = formattedCaption_lifted.value;
    new_offset += formattedCaption_lifted.bytesRead;
    final mentions_lifted = FfiConverterOptionalMentions.read(
        Uint8List.view(buf.buffer, new_offset));
    final mentions = mentions_lifted.value;
    new_offset += mentions_lifted.bytesRead;
    final inReplyTo_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final inReplyTo = inReplyTo_lifted.value;
    new_offset += inReplyTo_lifted.bytesRead;
    return LiftRetVal(
        GalleryUploadParameters(
          caption: caption,
          formattedCaption: formattedCaption,
          mentions: mentions,
          inReplyTo: inReplyTo,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(GalleryUploadParameters value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterOptionalString.write(
        value.caption, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalFormattedBody.write(
        value.formattedCaption, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalMentions.write(
        value.mentions, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        value.inReplyTo, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(GalleryUploadParameters value) {
    return FfiConverterOptionalString.allocationSize(value.caption) +
        FfiConverterOptionalFormattedBody.allocationSize(
            value.formattedCaption) +
        FfiConverterOptionalMentions.allocationSize(value.mentions) +
        FfiConverterOptionalString.allocationSize(value.inReplyTo) +
        0;
  }
}

class HttpPusherData {
  final String url;
  final PushFormat? format;
  final String? defaultPayload;

  HttpPusherData({
    required this.url,
    this.format,
    this.defaultPayload,
  });
}

class FfiConverterHttpPusherData {
  static HttpPusherData lift(RustBuffer buf) {
    return FfiConverterHttpPusherData.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(HttpPusherData value) {
    final total_length = FfiConverterString.allocationSize(value.url) +
        FfiConverterOptionalPushFormat.allocationSize(value.format) +
        FfiConverterOptionalString.allocationSize(value.defaultPayload) +
        0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<HttpPusherData> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final url_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final url = url_lifted.value;
    new_offset += url_lifted.bytesRead;
    final format_lifted = FfiConverterOptionalPushFormat.read(
        Uint8List.view(buf.buffer, new_offset));
    final format = format_lifted.value;
    new_offset += format_lifted.bytesRead;
    final defaultPayload_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final defaultPayload = defaultPayload_lifted.value;
    new_offset += defaultPayload_lifted.bytesRead;
    return LiftRetVal(
        HttpPusherData(
          url: url,
          format: format,
          defaultPayload: defaultPayload,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(HttpPusherData value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterString.write(
        value.url, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalPushFormat.write(
        value.format, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        value.defaultPayload, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(HttpPusherData value) {
    return FfiConverterString.allocationSize(value.url) +
        FfiConverterOptionalPushFormat.allocationSize(value.format) +
        FfiConverterOptionalString.allocationSize(value.defaultPayload) +
        0;
  }
}

class IdentityStatusChange {
  final String userId;
  final IdentityState changedTo;

  IdentityStatusChange({
    required this.userId,
    required this.changedTo,
  });
}

class FfiConverterIdentityStatusChange {
  static IdentityStatusChange lift(RustBuffer buf) {
    return FfiConverterIdentityStatusChange.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(IdentityStatusChange value) {
    final total_length = FfiConverterString.allocationSize(value.userId) +
        FfiConverterIdentityState.allocationSize(value.changedTo) +
        0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<IdentityStatusChange> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final userId_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final userId = userId_lifted.value;
    new_offset += userId_lifted.bytesRead;
    final changedTo_lifted =
        FfiConverterIdentityState.read(Uint8List.view(buf.buffer, new_offset));
    final changedTo = changedTo_lifted.value;
    new_offset += changedTo_lifted.bytesRead;
    return LiftRetVal(
        IdentityStatusChange(
          userId: userId,
          changedTo: changedTo,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(IdentityStatusChange value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterString.write(
        value.userId, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterIdentityState.write(
        value.changedTo, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(IdentityStatusChange value) {
    return FfiConverterString.allocationSize(value.userId) +
        FfiConverterIdentityState.allocationSize(value.changedTo) +
        0;
  }
}

class IgnoredUser {
  IgnoredUser();
}

class FfiConverterIgnoredUser {
  static IgnoredUser lift(RustBuffer buf) {
    return FfiConverterIgnoredUser.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(IgnoredUser value) {
    final total_length = 0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<IgnoredUser> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(IgnoredUser(), new_offset - buf.offsetInBytes);
  }

  static int write(IgnoredUser value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(IgnoredUser value) {
    return 0;
  }
}

class ImageInfo {
  final int? height;
  final int? width;
  final String? mimetype;
  final int? size;
  final ThumbnailInfo? thumbnailInfo;
  final MediaSource? thumbnailSource;
  final String? blurhash;
  final bool? isAnimated;

  ImageInfo({
    this.height,
    this.width,
    this.mimetype,
    this.size,
    this.thumbnailInfo,
    this.thumbnailSource,
    this.blurhash,
    this.isAnimated,
  });
}

class FfiConverterImageInfo {
  static ImageInfo lift(RustBuffer buf) {
    return FfiConverterImageInfo.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(ImageInfo value) {
    final total_length = FfiConverterOptionalUInt64.allocationSize(
            value.height) +
        FfiConverterOptionalUInt64.allocationSize(value.width) +
        FfiConverterOptionalString.allocationSize(value.mimetype) +
        FfiConverterOptionalUInt64.allocationSize(value.size) +
        FfiConverterOptionalThumbnailInfo.allocationSize(value.thumbnailInfo) +
        FfiConverterOptionalMediaSource.allocationSize(value.thumbnailSource) +
        FfiConverterOptionalString.allocationSize(value.blurhash) +
        FfiConverterOptionalBool.allocationSize(value.isAnimated) +
        0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<ImageInfo> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final height_lifted =
        FfiConverterOptionalUInt64.read(Uint8List.view(buf.buffer, new_offset));
    final height = height_lifted.value;
    new_offset += height_lifted.bytesRead;
    final width_lifted =
        FfiConverterOptionalUInt64.read(Uint8List.view(buf.buffer, new_offset));
    final width = width_lifted.value;
    new_offset += width_lifted.bytesRead;
    final mimetype_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final mimetype = mimetype_lifted.value;
    new_offset += mimetype_lifted.bytesRead;
    final size_lifted =
        FfiConverterOptionalUInt64.read(Uint8List.view(buf.buffer, new_offset));
    final size = size_lifted.value;
    new_offset += size_lifted.bytesRead;
    final thumbnailInfo_lifted = FfiConverterOptionalThumbnailInfo.read(
        Uint8List.view(buf.buffer, new_offset));
    final thumbnailInfo = thumbnailInfo_lifted.value;
    new_offset += thumbnailInfo_lifted.bytesRead;
    final thumbnailSource_lifted = FfiConverterOptionalMediaSource.read(
        Uint8List.view(buf.buffer, new_offset));
    final thumbnailSource = thumbnailSource_lifted.value;
    new_offset += thumbnailSource_lifted.bytesRead;
    final blurhash_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final blurhash = blurhash_lifted.value;
    new_offset += blurhash_lifted.bytesRead;
    final isAnimated_lifted =
        FfiConverterOptionalBool.read(Uint8List.view(buf.buffer, new_offset));
    final isAnimated = isAnimated_lifted.value;
    new_offset += isAnimated_lifted.bytesRead;
    return LiftRetVal(
        ImageInfo(
          height: height,
          width: width,
          mimetype: mimetype,
          size: size,
          thumbnailInfo: thumbnailInfo,
          thumbnailSource: thumbnailSource,
          blurhash: blurhash,
          isAnimated: isAnimated,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(ImageInfo value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterOptionalUInt64.write(
        value.height, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalUInt64.write(
        value.width, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        value.mimetype, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalUInt64.write(
        value.size, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalThumbnailInfo.write(
        value.thumbnailInfo, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalMediaSource.write(
        value.thumbnailSource, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        value.blurhash, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalBool.write(
        value.isAnimated, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(ImageInfo value) {
    return FfiConverterOptionalUInt64.allocationSize(value.height) +
        FfiConverterOptionalUInt64.allocationSize(value.width) +
        FfiConverterOptionalString.allocationSize(value.mimetype) +
        FfiConverterOptionalUInt64.allocationSize(value.size) +
        FfiConverterOptionalThumbnailInfo.allocationSize(value.thumbnailInfo) +
        FfiConverterOptionalMediaSource.allocationSize(value.thumbnailSource) +
        FfiConverterOptionalString.allocationSize(value.blurhash) +
        FfiConverterOptionalBool.allocationSize(value.isAnimated) +
        0;
  }
}

class ImageMessageContent {
  final String filename;
  final String? caption;
  final FormattedBody? formattedCaption;
  final MediaSource source;
  final ImageInfo? info;

  ImageMessageContent({
    required this.filename,
    this.caption,
    this.formattedCaption,
    required this.source,
    this.info,
  });
}

class FfiConverterImageMessageContent {
  static ImageMessageContent lift(RustBuffer buf) {
    return FfiConverterImageMessageContent.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(ImageMessageContent value) {
    final total_length = FfiConverterString.allocationSize(value.filename) +
        FfiConverterOptionalString.allocationSize(value.caption) +
        FfiConverterOptionalFormattedBody.allocationSize(
            value.formattedCaption) +
        MediaSource.allocationSize(value.source) +
        FfiConverterOptionalImageInfo.allocationSize(value.info) +
        0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<ImageMessageContent> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final filename_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final filename = filename_lifted.value;
    new_offset += filename_lifted.bytesRead;
    final caption_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final caption = caption_lifted.value;
    new_offset += caption_lifted.bytesRead;
    final formattedCaption_lifted = FfiConverterOptionalFormattedBody.read(
        Uint8List.view(buf.buffer, new_offset));
    final formattedCaption = formattedCaption_lifted.value;
    new_offset += formattedCaption_lifted.bytesRead;
    final source_lifted =
        MediaSource.read(Uint8List.view(buf.buffer, new_offset));
    final source = source_lifted.value;
    new_offset += source_lifted.bytesRead;
    final info_lifted = FfiConverterOptionalImageInfo.read(
        Uint8List.view(buf.buffer, new_offset));
    final info = info_lifted.value;
    new_offset += info_lifted.bytesRead;
    return LiftRetVal(
        ImageMessageContent(
          filename: filename,
          caption: caption,
          formattedCaption: formattedCaption,
          source: source,
          info: info,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(ImageMessageContent value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterString.write(
        value.filename, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        value.caption, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalFormattedBody.write(
        value.formattedCaption, Uint8List.view(buf.buffer, new_offset));
    new_offset +=
        MediaSource.write(value.source, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalImageInfo.write(
        value.info, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(ImageMessageContent value) {
    return FfiConverterString.allocationSize(value.filename) +
        FfiConverterOptionalString.allocationSize(value.caption) +
        FfiConverterOptionalFormattedBody.allocationSize(
            value.formattedCaption) +
        MediaSource.allocationSize(value.source) +
        FfiConverterOptionalImageInfo.allocationSize(value.info) +
        0;
  }
}

class InsertData {
  final int index;
  final TimelineItem item;

  InsertData({
    required this.index,
    required this.item,
  });
}

class FfiConverterInsertData {
  static InsertData lift(RustBuffer buf) {
    return FfiConverterInsertData.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(InsertData value) {
    final total_length = FfiConverterUInt32.allocationSize(value.index) +
        TimelineItem.allocationSize(value.item) +
        0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<InsertData> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final index_lifted =
        FfiConverterUInt32.read(Uint8List.view(buf.buffer, new_offset));
    final index = index_lifted.value;
    new_offset += index_lifted.bytesRead;
    final item_lifted =
        TimelineItem.read(Uint8List.view(buf.buffer, new_offset));
    final item = item_lifted.value;
    new_offset += item_lifted.bytesRead;
    return LiftRetVal(
        InsertData(
          index: index,
          item: item,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(InsertData value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterUInt32.write(
        value.index, Uint8List.view(buf.buffer, new_offset));
    new_offset +=
        TimelineItem.write(value.item, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(InsertData value) {
    return FfiConverterUInt32.allocationSize(value.index) +
        TimelineItem.allocationSize(value.item) +
        0;
  }
}

class KnockRequest {
  final String eventId;
  final String userId;
  final String roomId;
  final String? displayName;
  final String? avatarUrl;
  final String? reason;
  final int? timestamp;
  final bool isSeen;
  final KnockRequestActions actions;

  KnockRequest({
    required this.eventId,
    required this.userId,
    required this.roomId,
    this.displayName,
    this.avatarUrl,
    this.reason,
    this.timestamp,
    required this.isSeen,
    required this.actions,
  });
}

class FfiConverterKnockRequest {
  static KnockRequest lift(RustBuffer buf) {
    return FfiConverterKnockRequest.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(KnockRequest value) {
    final total_length = FfiConverterString.allocationSize(value.eventId) +
        FfiConverterString.allocationSize(value.userId) +
        FfiConverterString.allocationSize(value.roomId) +
        FfiConverterOptionalString.allocationSize(value.displayName) +
        FfiConverterOptionalString.allocationSize(value.avatarUrl) +
        FfiConverterOptionalString.allocationSize(value.reason) +
        FfiConverterOptionalUInt64.allocationSize(value.timestamp) +
        FfiConverterBool.allocationSize(value.isSeen) +
        KnockRequestActions.allocationSize(value.actions) +
        0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<KnockRequest> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final eventId_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final eventId = eventId_lifted.value;
    new_offset += eventId_lifted.bytesRead;
    final userId_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final userId = userId_lifted.value;
    new_offset += userId_lifted.bytesRead;
    final roomId_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final roomId = roomId_lifted.value;
    new_offset += roomId_lifted.bytesRead;
    final displayName_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final displayName = displayName_lifted.value;
    new_offset += displayName_lifted.bytesRead;
    final avatarUrl_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final avatarUrl = avatarUrl_lifted.value;
    new_offset += avatarUrl_lifted.bytesRead;
    final reason_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final reason = reason_lifted.value;
    new_offset += reason_lifted.bytesRead;
    final timestamp_lifted =
        FfiConverterOptionalUInt64.read(Uint8List.view(buf.buffer, new_offset));
    final timestamp = timestamp_lifted.value;
    new_offset += timestamp_lifted.bytesRead;
    final isSeen_lifted =
        FfiConverterBool.read(Uint8List.view(buf.buffer, new_offset));
    final isSeen = isSeen_lifted.value;
    new_offset += isSeen_lifted.bytesRead;
    final actions_lifted =
        KnockRequestActions.read(Uint8List.view(buf.buffer, new_offset));
    final actions = actions_lifted.value;
    new_offset += actions_lifted.bytesRead;
    return LiftRetVal(
        KnockRequest(
          eventId: eventId,
          userId: userId,
          roomId: roomId,
          displayName: displayName,
          avatarUrl: avatarUrl,
          reason: reason,
          timestamp: timestamp,
          isSeen: isSeen,
          actions: actions,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(KnockRequest value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterString.write(
        value.eventId, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterString.write(
        value.userId, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterString.write(
        value.roomId, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        value.displayName, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        value.avatarUrl, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        value.reason, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalUInt64.write(
        value.timestamp, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterBool.write(
        value.isSeen, Uint8List.view(buf.buffer, new_offset));
    new_offset += KnockRequestActions.write(
        value.actions, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(KnockRequest value) {
    return FfiConverterString.allocationSize(value.eventId) +
        FfiConverterString.allocationSize(value.userId) +
        FfiConverterString.allocationSize(value.roomId) +
        FfiConverterOptionalString.allocationSize(value.displayName) +
        FfiConverterOptionalString.allocationSize(value.avatarUrl) +
        FfiConverterOptionalString.allocationSize(value.reason) +
        FfiConverterOptionalUInt64.allocationSize(value.timestamp) +
        FfiConverterBool.allocationSize(value.isSeen) +
        KnockRequestActions.allocationSize(value.actions) +
        0;
  }
}

class LastLocation {
  final LocationContent location;
  final int ts;

  LastLocation({
    required this.location,
    required this.ts,
  });
}

class FfiConverterLastLocation {
  static LastLocation lift(RustBuffer buf) {
    return FfiConverterLastLocation.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(LastLocation value) {
    final total_length =
        FfiConverterLocationContent.allocationSize(value.location) +
            FfiConverterUInt64.allocationSize(value.ts) +
            0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<LastLocation> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final location_lifted = FfiConverterLocationContent.read(
        Uint8List.view(buf.buffer, new_offset));
    final location = location_lifted.value;
    new_offset += location_lifted.bytesRead;
    final ts_lifted =
        FfiConverterUInt64.read(Uint8List.view(buf.buffer, new_offset));
    final ts = ts_lifted.value;
    new_offset += ts_lifted.bytesRead;
    return LiftRetVal(
        LastLocation(
          location: location,
          ts: ts,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(LastLocation value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterLocationContent.write(
        value.location, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterUInt64.write(
        value.ts, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(LastLocation value) {
    return FfiConverterLocationContent.allocationSize(value.location) +
        FfiConverterUInt64.allocationSize(value.ts) +
        0;
  }
}

class LiveLocationShare {
  final LastLocation lastLocation;
  final bool isLive;
  final String userId;

  LiveLocationShare({
    required this.lastLocation,
    required this.isLive,
    required this.userId,
  });
}

class FfiConverterLiveLocationShare {
  static LiveLocationShare lift(RustBuffer buf) {
    return FfiConverterLiveLocationShare.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(LiveLocationShare value) {
    final total_length =
        FfiConverterLastLocation.allocationSize(value.lastLocation) +
            FfiConverterBool.allocationSize(value.isLive) +
            FfiConverterString.allocationSize(value.userId) +
            0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<LiveLocationShare> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final lastLocation_lifted =
        FfiConverterLastLocation.read(Uint8List.view(buf.buffer, new_offset));
    final lastLocation = lastLocation_lifted.value;
    new_offset += lastLocation_lifted.bytesRead;
    final isLive_lifted =
        FfiConverterBool.read(Uint8List.view(buf.buffer, new_offset));
    final isLive = isLive_lifted.value;
    new_offset += isLive_lifted.bytesRead;
    final userId_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final userId = userId_lifted.value;
    new_offset += userId_lifted.bytesRead;
    return LiftRetVal(
        LiveLocationShare(
          lastLocation: lastLocation,
          isLive: isLive,
          userId: userId,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(LiveLocationShare value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterLastLocation.write(
        value.lastLocation, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterBool.write(
        value.isLive, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterString.write(
        value.userId, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(LiveLocationShare value) {
    return FfiConverterLastLocation.allocationSize(value.lastLocation) +
        FfiConverterBool.allocationSize(value.isLive) +
        FfiConverterString.allocationSize(value.userId) +
        0;
  }
}

class LocationContent {
  final String body;
  final String geoUri;
  final String? description;
  final int? zoomLevel;
  final AssetType? asset;

  LocationContent({
    required this.body,
    required this.geoUri,
    this.description,
    this.zoomLevel,
    this.asset,
  });
}

class FfiConverterLocationContent {
  static LocationContent lift(RustBuffer buf) {
    return FfiConverterLocationContent.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(LocationContent value) {
    final total_length = FfiConverterString.allocationSize(value.body) +
        FfiConverterString.allocationSize(value.geoUri) +
        FfiConverterOptionalString.allocationSize(value.description) +
        FfiConverterOptionalUInt8.allocationSize(value.zoomLevel) +
        FfiConverterOptionalAssetType.allocationSize(value.asset) +
        0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<LocationContent> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final body_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final body = body_lifted.value;
    new_offset += body_lifted.bytesRead;
    final geoUri_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final geoUri = geoUri_lifted.value;
    new_offset += geoUri_lifted.bytesRead;
    final description_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final description = description_lifted.value;
    new_offset += description_lifted.bytesRead;
    final zoomLevel_lifted =
        FfiConverterOptionalUInt8.read(Uint8List.view(buf.buffer, new_offset));
    final zoomLevel = zoomLevel_lifted.value;
    new_offset += zoomLevel_lifted.bytesRead;
    final asset_lifted = FfiConverterOptionalAssetType.read(
        Uint8List.view(buf.buffer, new_offset));
    final asset = asset_lifted.value;
    new_offset += asset_lifted.bytesRead;
    return LiftRetVal(
        LocationContent(
          body: body,
          geoUri: geoUri,
          description: description,
          zoomLevel: zoomLevel,
          asset: asset,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(LocationContent value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterString.write(
        value.body, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterString.write(
        value.geoUri, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        value.description, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalUInt8.write(
        value.zoomLevel, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalAssetType.write(
        value.asset, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(LocationContent value) {
    return FfiConverterString.allocationSize(value.body) +
        FfiConverterString.allocationSize(value.geoUri) +
        FfiConverterOptionalString.allocationSize(value.description) +
        FfiConverterOptionalUInt8.allocationSize(value.zoomLevel) +
        FfiConverterOptionalAssetType.allocationSize(value.asset) +
        0;
  }
}

class MatrixEntity {
  final MatrixId id;
  final List<String> via;

  MatrixEntity({
    required this.id,
    required this.via,
  });
}

class FfiConverterMatrixEntity {
  static MatrixEntity lift(RustBuffer buf) {
    return FfiConverterMatrixEntity.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(MatrixEntity value) {
    final total_length = FfiConverterMatrixId.allocationSize(value.id) +
        FfiConverterSequenceString.allocationSize(value.via) +
        0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<MatrixEntity> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final id_lifted =
        FfiConverterMatrixId.read(Uint8List.view(buf.buffer, new_offset));
    final id = id_lifted.value;
    new_offset += id_lifted.bytesRead;
    final via_lifted =
        FfiConverterSequenceString.read(Uint8List.view(buf.buffer, new_offset));
    final via = via_lifted.value;
    new_offset += via_lifted.bytesRead;
    return LiftRetVal(
        MatrixEntity(
          id: id,
          via: via,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(MatrixEntity value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterMatrixId.write(
        value.id, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterSequenceString.write(
        value.via, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(MatrixEntity value) {
    return FfiConverterMatrixId.allocationSize(value.id) +
        FfiConverterSequenceString.allocationSize(value.via) +
        0;
  }
}

class MediaPreviewConfig {
  final MediaPreviews? mediaPreviews;
  final InviteAvatars? inviteAvatars;

  MediaPreviewConfig({
    this.mediaPreviews,
    this.inviteAvatars,
  });
}

class FfiConverterMediaPreviewConfig {
  static MediaPreviewConfig lift(RustBuffer buf) {
    return FfiConverterMediaPreviewConfig.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(MediaPreviewConfig value) {
    final total_length = FfiConverterOptionalMediaPreviews.allocationSize(
            value.mediaPreviews) +
        FfiConverterOptionalInviteAvatars.allocationSize(value.inviteAvatars) +
        0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<MediaPreviewConfig> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final mediaPreviews_lifted = FfiConverterOptionalMediaPreviews.read(
        Uint8List.view(buf.buffer, new_offset));
    final mediaPreviews = mediaPreviews_lifted.value;
    new_offset += mediaPreviews_lifted.bytesRead;
    final inviteAvatars_lifted = FfiConverterOptionalInviteAvatars.read(
        Uint8List.view(buf.buffer, new_offset));
    final inviteAvatars = inviteAvatars_lifted.value;
    new_offset += inviteAvatars_lifted.bytesRead;
    return LiftRetVal(
        MediaPreviewConfig(
          mediaPreviews: mediaPreviews,
          inviteAvatars: inviteAvatars,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(MediaPreviewConfig value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterOptionalMediaPreviews.write(
        value.mediaPreviews, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalInviteAvatars.write(
        value.inviteAvatars, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(MediaPreviewConfig value) {
    return FfiConverterOptionalMediaPreviews.allocationSize(
            value.mediaPreviews) +
        FfiConverterOptionalInviteAvatars.allocationSize(value.inviteAvatars) +
        0;
  }
}

class Mentions {
  final List<String> userIds;
  final bool room;

  Mentions({
    required this.userIds,
    required this.room,
  });
}

class FfiConverterMentions {
  static Mentions lift(RustBuffer buf) {
    return FfiConverterMentions.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(Mentions value) {
    final total_length =
        FfiConverterSequenceString.allocationSize(value.userIds) +
            FfiConverterBool.allocationSize(value.room) +
            0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<Mentions> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final userIds_lifted =
        FfiConverterSequenceString.read(Uint8List.view(buf.buffer, new_offset));
    final userIds = userIds_lifted.value;
    new_offset += userIds_lifted.bytesRead;
    final room_lifted =
        FfiConverterBool.read(Uint8List.view(buf.buffer, new_offset));
    final room = room_lifted.value;
    new_offset += room_lifted.bytesRead;
    return LiftRetVal(
        Mentions(
          userIds: userIds,
          room: room,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(Mentions value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterSequenceString.write(
        value.userIds, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterBool.write(
        value.room, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(Mentions value) {
    return FfiConverterSequenceString.allocationSize(value.userIds) +
        FfiConverterBool.allocationSize(value.room) +
        0;
  }
}

class MessageContent {
  final MessageType msgType;
  final String body;
  final bool isEdited;
  final Mentions? mentions;

  MessageContent({
    required this.msgType,
    required this.body,
    required this.isEdited,
    this.mentions,
  });
}

class FfiConverterMessageContent {
  static MessageContent lift(RustBuffer buf) {
    return FfiConverterMessageContent.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(MessageContent value) {
    final total_length = FfiConverterMessageType.allocationSize(value.msgType) +
        FfiConverterString.allocationSize(value.body) +
        FfiConverterBool.allocationSize(value.isEdited) +
        FfiConverterOptionalMentions.allocationSize(value.mentions) +
        0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<MessageContent> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final msgType_lifted =
        FfiConverterMessageType.read(Uint8List.view(buf.buffer, new_offset));
    final msgType = msgType_lifted.value;
    new_offset += msgType_lifted.bytesRead;
    final body_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final body = body_lifted.value;
    new_offset += body_lifted.bytesRead;
    final isEdited_lifted =
        FfiConverterBool.read(Uint8List.view(buf.buffer, new_offset));
    final isEdited = isEdited_lifted.value;
    new_offset += isEdited_lifted.bytesRead;
    final mentions_lifted = FfiConverterOptionalMentions.read(
        Uint8List.view(buf.buffer, new_offset));
    final mentions = mentions_lifted.value;
    new_offset += mentions_lifted.bytesRead;
    return LiftRetVal(
        MessageContent(
          msgType: msgType,
          body: body,
          isEdited: isEdited,
          mentions: mentions,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(MessageContent value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterMessageType.write(
        value.msgType, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterString.write(
        value.body, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterBool.write(
        value.isEdited, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalMentions.write(
        value.mentions, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(MessageContent value) {
    return FfiConverterMessageType.allocationSize(value.msgType) +
        FfiConverterString.allocationSize(value.body) +
        FfiConverterBool.allocationSize(value.isEdited) +
        FfiConverterOptionalMentions.allocationSize(value.mentions) +
        0;
  }
}

class MsgLikeContent {
  final MsgLikeKind kind;
  final List<Reaction> reactions;
  final InReplyToDetails? inReplyTo;
  final String? threadRoot;
  final ThreadSummary? threadSummary;

  MsgLikeContent({
    required this.kind,
    required this.reactions,
    this.inReplyTo,
    this.threadRoot,
    this.threadSummary,
  });
}

class FfiConverterMsgLikeContent {
  static MsgLikeContent lift(RustBuffer buf) {
    return FfiConverterMsgLikeContent.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(MsgLikeContent value) {
    final total_length = FfiConverterMsgLikeKind.allocationSize(value.kind) +
        FfiConverterSequenceReaction.allocationSize(value.reactions) +
        FfiConverterOptionalInReplyToDetails.allocationSize(value.inReplyTo) +
        FfiConverterOptionalString.allocationSize(value.threadRoot) +
        FfiConverterOptionalThreadSummary.allocationSize(value.threadSummary) +
        0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<MsgLikeContent> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final kind_lifted =
        FfiConverterMsgLikeKind.read(Uint8List.view(buf.buffer, new_offset));
    final kind = kind_lifted.value;
    new_offset += kind_lifted.bytesRead;
    final reactions_lifted = FfiConverterSequenceReaction.read(
        Uint8List.view(buf.buffer, new_offset));
    final reactions = reactions_lifted.value;
    new_offset += reactions_lifted.bytesRead;
    final inReplyTo_lifted = FfiConverterOptionalInReplyToDetails.read(
        Uint8List.view(buf.buffer, new_offset));
    final inReplyTo = inReplyTo_lifted.value;
    new_offset += inReplyTo_lifted.bytesRead;
    final threadRoot_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final threadRoot = threadRoot_lifted.value;
    new_offset += threadRoot_lifted.bytesRead;
    final threadSummary_lifted = FfiConverterOptionalThreadSummary.read(
        Uint8List.view(buf.buffer, new_offset));
    final threadSummary = threadSummary_lifted.value;
    new_offset += threadSummary_lifted.bytesRead;
    return LiftRetVal(
        MsgLikeContent(
          kind: kind,
          reactions: reactions,
          inReplyTo: inReplyTo,
          threadRoot: threadRoot,
          threadSummary: threadSummary,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(MsgLikeContent value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterMsgLikeKind.write(
        value.kind, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterSequenceReaction.write(
        value.reactions, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalInReplyToDetails.write(
        value.inReplyTo, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        value.threadRoot, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalThreadSummary.write(
        value.threadSummary, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(MsgLikeContent value) {
    return FfiConverterMsgLikeKind.allocationSize(value.kind) +
        FfiConverterSequenceReaction.allocationSize(value.reactions) +
        FfiConverterOptionalInReplyToDetails.allocationSize(value.inReplyTo) +
        FfiConverterOptionalString.allocationSize(value.threadRoot) +
        FfiConverterOptionalThreadSummary.allocationSize(value.threadSummary) +
        0;
  }
}

class NoticeMessageContent {
  final String body;
  final FormattedBody? formatted;

  NoticeMessageContent({
    required this.body,
    this.formatted,
  });
}

class FfiConverterNoticeMessageContent {
  static NoticeMessageContent lift(RustBuffer buf) {
    return FfiConverterNoticeMessageContent.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(NoticeMessageContent value) {
    final total_length = FfiConverterString.allocationSize(value.body) +
        FfiConverterOptionalFormattedBody.allocationSize(value.formatted) +
        0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<NoticeMessageContent> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final body_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final body = body_lifted.value;
    new_offset += body_lifted.bytesRead;
    final formatted_lifted = FfiConverterOptionalFormattedBody.read(
        Uint8List.view(buf.buffer, new_offset));
    final formatted = formatted_lifted.value;
    new_offset += formatted_lifted.bytesRead;
    return LiftRetVal(
        NoticeMessageContent(
          body: body,
          formatted: formatted,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(NoticeMessageContent value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterString.write(
        value.body, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalFormattedBody.write(
        value.formatted, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(NoticeMessageContent value) {
    return FfiConverterString.allocationSize(value.body) +
        FfiConverterOptionalFormattedBody.allocationSize(value.formatted) +
        0;
  }
}

class NotificationItem {
  final NotificationEvent event;
  final NotificationSenderInfo senderInfo;
  final NotificationRoomInfo roomInfo;
  final bool? isNoisy;
  final bool? hasMention;
  final String? threadId;

  NotificationItem({
    required this.event,
    required this.senderInfo,
    required this.roomInfo,
    this.isNoisy,
    this.hasMention,
    this.threadId,
  });
}

class FfiConverterNotificationItem {
  static NotificationItem lift(RustBuffer buf) {
    return FfiConverterNotificationItem.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(NotificationItem value) {
    final total_length = FfiConverterNotificationEvent.allocationSize(
            value.event) +
        FfiConverterNotificationSenderInfo.allocationSize(value.senderInfo) +
        FfiConverterNotificationRoomInfo.allocationSize(value.roomInfo) +
        FfiConverterOptionalBool.allocationSize(value.isNoisy) +
        FfiConverterOptionalBool.allocationSize(value.hasMention) +
        FfiConverterOptionalString.allocationSize(value.threadId) +
        0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<NotificationItem> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final event_lifted = FfiConverterNotificationEvent.read(
        Uint8List.view(buf.buffer, new_offset));
    final event = event_lifted.value;
    new_offset += event_lifted.bytesRead;
    final senderInfo_lifted = FfiConverterNotificationSenderInfo.read(
        Uint8List.view(buf.buffer, new_offset));
    final senderInfo = senderInfo_lifted.value;
    new_offset += senderInfo_lifted.bytesRead;
    final roomInfo_lifted = FfiConverterNotificationRoomInfo.read(
        Uint8List.view(buf.buffer, new_offset));
    final roomInfo = roomInfo_lifted.value;
    new_offset += roomInfo_lifted.bytesRead;
    final isNoisy_lifted =
        FfiConverterOptionalBool.read(Uint8List.view(buf.buffer, new_offset));
    final isNoisy = isNoisy_lifted.value;
    new_offset += isNoisy_lifted.bytesRead;
    final hasMention_lifted =
        FfiConverterOptionalBool.read(Uint8List.view(buf.buffer, new_offset));
    final hasMention = hasMention_lifted.value;
    new_offset += hasMention_lifted.bytesRead;
    final threadId_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final threadId = threadId_lifted.value;
    new_offset += threadId_lifted.bytesRead;
    return LiftRetVal(
        NotificationItem(
          event: event,
          senderInfo: senderInfo,
          roomInfo: roomInfo,
          isNoisy: isNoisy,
          hasMention: hasMention,
          threadId: threadId,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(NotificationItem value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterNotificationEvent.write(
        value.event, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterNotificationSenderInfo.write(
        value.senderInfo, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterNotificationRoomInfo.write(
        value.roomInfo, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalBool.write(
        value.isNoisy, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalBool.write(
        value.hasMention, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        value.threadId, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(NotificationItem value) {
    return FfiConverterNotificationEvent.allocationSize(value.event) +
        FfiConverterNotificationSenderInfo.allocationSize(value.senderInfo) +
        FfiConverterNotificationRoomInfo.allocationSize(value.roomInfo) +
        FfiConverterOptionalBool.allocationSize(value.isNoisy) +
        FfiConverterOptionalBool.allocationSize(value.hasMention) +
        FfiConverterOptionalString.allocationSize(value.threadId) +
        0;
  }
}

class NotificationItemsRequest {
  final String roomId;
  final List<String> eventIds;

  NotificationItemsRequest({
    required this.roomId,
    required this.eventIds,
  });
}

class FfiConverterNotificationItemsRequest {
  static NotificationItemsRequest lift(RustBuffer buf) {
    return FfiConverterNotificationItemsRequest.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(NotificationItemsRequest value) {
    final total_length = FfiConverterString.allocationSize(value.roomId) +
        FfiConverterSequenceString.allocationSize(value.eventIds) +
        0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<NotificationItemsRequest> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final roomId_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final roomId = roomId_lifted.value;
    new_offset += roomId_lifted.bytesRead;
    final eventIds_lifted =
        FfiConverterSequenceString.read(Uint8List.view(buf.buffer, new_offset));
    final eventIds = eventIds_lifted.value;
    new_offset += eventIds_lifted.bytesRead;
    return LiftRetVal(
        NotificationItemsRequest(
          roomId: roomId,
          eventIds: eventIds,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(NotificationItemsRequest value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterString.write(
        value.roomId, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterSequenceString.write(
        value.eventIds, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(NotificationItemsRequest value) {
    return FfiConverterString.allocationSize(value.roomId) +
        FfiConverterSequenceString.allocationSize(value.eventIds) +
        0;
  }
}

class NotificationPowerLevels {
  final int room;

  NotificationPowerLevels({
    required this.room,
  });
}

class FfiConverterNotificationPowerLevels {
  static NotificationPowerLevels lift(RustBuffer buf) {
    return FfiConverterNotificationPowerLevels.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(NotificationPowerLevels value) {
    final total_length = FfiConverterInt32.allocationSize(value.room) + 0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<NotificationPowerLevels> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final room_lifted =
        FfiConverterInt32.read(Uint8List.view(buf.buffer, new_offset));
    final room = room_lifted.value;
    new_offset += room_lifted.bytesRead;
    return LiftRetVal(
        NotificationPowerLevels(
          room: room,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(NotificationPowerLevels value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterInt32.write(
        value.room, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(NotificationPowerLevels value) {
    return FfiConverterInt32.allocationSize(value.room) + 0;
  }
}

class NotificationRoomInfo {
  final String displayName;
  final String? avatarUrl;
  final String? canonicalAlias;
  final String? topic;
  final JoinRule? joinRule;
  final int joinedMembersCount;
  final bool? isEncrypted;
  final bool isDirect;

  NotificationRoomInfo({
    required this.displayName,
    this.avatarUrl,
    this.canonicalAlias,
    this.topic,
    this.joinRule,
    required this.joinedMembersCount,
    this.isEncrypted,
    required this.isDirect,
  });
}

class FfiConverterNotificationRoomInfo {
  static NotificationRoomInfo lift(RustBuffer buf) {
    return FfiConverterNotificationRoomInfo.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(NotificationRoomInfo value) {
    final total_length = FfiConverterString.allocationSize(value.displayName) +
        FfiConverterOptionalString.allocationSize(value.avatarUrl) +
        FfiConverterOptionalString.allocationSize(value.canonicalAlias) +
        FfiConverterOptionalString.allocationSize(value.topic) +
        FfiConverterOptionalJoinRule.allocationSize(value.joinRule) +
        FfiConverterUInt64.allocationSize(value.joinedMembersCount) +
        FfiConverterOptionalBool.allocationSize(value.isEncrypted) +
        FfiConverterBool.allocationSize(value.isDirect) +
        0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<NotificationRoomInfo> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final displayName_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final displayName = displayName_lifted.value;
    new_offset += displayName_lifted.bytesRead;
    final avatarUrl_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final avatarUrl = avatarUrl_lifted.value;
    new_offset += avatarUrl_lifted.bytesRead;
    final canonicalAlias_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final canonicalAlias = canonicalAlias_lifted.value;
    new_offset += canonicalAlias_lifted.bytesRead;
    final topic_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final topic = topic_lifted.value;
    new_offset += topic_lifted.bytesRead;
    final joinRule_lifted = FfiConverterOptionalJoinRule.read(
        Uint8List.view(buf.buffer, new_offset));
    final joinRule = joinRule_lifted.value;
    new_offset += joinRule_lifted.bytesRead;
    final joinedMembersCount_lifted =
        FfiConverterUInt64.read(Uint8List.view(buf.buffer, new_offset));
    final joinedMembersCount = joinedMembersCount_lifted.value;
    new_offset += joinedMembersCount_lifted.bytesRead;
    final isEncrypted_lifted =
        FfiConverterOptionalBool.read(Uint8List.view(buf.buffer, new_offset));
    final isEncrypted = isEncrypted_lifted.value;
    new_offset += isEncrypted_lifted.bytesRead;
    final isDirect_lifted =
        FfiConverterBool.read(Uint8List.view(buf.buffer, new_offset));
    final isDirect = isDirect_lifted.value;
    new_offset += isDirect_lifted.bytesRead;
    return LiftRetVal(
        NotificationRoomInfo(
          displayName: displayName,
          avatarUrl: avatarUrl,
          canonicalAlias: canonicalAlias,
          topic: topic,
          joinRule: joinRule,
          joinedMembersCount: joinedMembersCount,
          isEncrypted: isEncrypted,
          isDirect: isDirect,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(NotificationRoomInfo value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterString.write(
        value.displayName, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        value.avatarUrl, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        value.canonicalAlias, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        value.topic, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalJoinRule.write(
        value.joinRule, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterUInt64.write(
        value.joinedMembersCount, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalBool.write(
        value.isEncrypted, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterBool.write(
        value.isDirect, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(NotificationRoomInfo value) {
    return FfiConverterString.allocationSize(value.displayName) +
        FfiConverterOptionalString.allocationSize(value.avatarUrl) +
        FfiConverterOptionalString.allocationSize(value.canonicalAlias) +
        FfiConverterOptionalString.allocationSize(value.topic) +
        FfiConverterOptionalJoinRule.allocationSize(value.joinRule) +
        FfiConverterUInt64.allocationSize(value.joinedMembersCount) +
        FfiConverterOptionalBool.allocationSize(value.isEncrypted) +
        FfiConverterBool.allocationSize(value.isDirect) +
        0;
  }
}

class NotificationSenderInfo {
  final String? displayName;
  final String? avatarUrl;
  final bool isNameAmbiguous;

  NotificationSenderInfo({
    this.displayName,
    this.avatarUrl,
    required this.isNameAmbiguous,
  });
}

class FfiConverterNotificationSenderInfo {
  static NotificationSenderInfo lift(RustBuffer buf) {
    return FfiConverterNotificationSenderInfo.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(NotificationSenderInfo value) {
    final total_length =
        FfiConverterOptionalString.allocationSize(value.displayName) +
            FfiConverterOptionalString.allocationSize(value.avatarUrl) +
            FfiConverterBool.allocationSize(value.isNameAmbiguous) +
            0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<NotificationSenderInfo> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final displayName_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final displayName = displayName_lifted.value;
    new_offset += displayName_lifted.bytesRead;
    final avatarUrl_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final avatarUrl = avatarUrl_lifted.value;
    new_offset += avatarUrl_lifted.bytesRead;
    final isNameAmbiguous_lifted =
        FfiConverterBool.read(Uint8List.view(buf.buffer, new_offset));
    final isNameAmbiguous = isNameAmbiguous_lifted.value;
    new_offset += isNameAmbiguous_lifted.bytesRead;
    return LiftRetVal(
        NotificationSenderInfo(
          displayName: displayName,
          avatarUrl: avatarUrl,
          isNameAmbiguous: isNameAmbiguous,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(NotificationSenderInfo value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterOptionalString.write(
        value.displayName, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        value.avatarUrl, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterBool.write(
        value.isNameAmbiguous, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(NotificationSenderInfo value) {
    return FfiConverterOptionalString.allocationSize(value.displayName) +
        FfiConverterOptionalString.allocationSize(value.avatarUrl) +
        FfiConverterBool.allocationSize(value.isNameAmbiguous) +
        0;
  }
}

class OidcConfiguration {
  final String? clientName;
  final String redirectUri;
  final String clientUri;
  final String? logoUri;
  final String? tosUri;
  final String? policyUri;
  final Map<String, String> staticRegistrations;

  OidcConfiguration({
    this.clientName,
    required this.redirectUri,
    required this.clientUri,
    this.logoUri,
    this.tosUri,
    this.policyUri,
    required this.staticRegistrations,
  });
}

class FfiConverterOidcConfiguration {
  static OidcConfiguration lift(RustBuffer buf) {
    return FfiConverterOidcConfiguration.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(OidcConfiguration value) {
    final total_length = FfiConverterOptionalString.allocationSize(
            value.clientName) +
        FfiConverterString.allocationSize(value.redirectUri) +
        FfiConverterString.allocationSize(value.clientUri) +
        FfiConverterOptionalString.allocationSize(value.logoUri) +
        FfiConverterOptionalString.allocationSize(value.tosUri) +
        FfiConverterOptionalString.allocationSize(value.policyUri) +
        FfiConverterMapStringString.allocationSize(value.staticRegistrations) +
        0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<OidcConfiguration> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final clientName_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final clientName = clientName_lifted.value;
    new_offset += clientName_lifted.bytesRead;
    final redirectUri_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final redirectUri = redirectUri_lifted.value;
    new_offset += redirectUri_lifted.bytesRead;
    final clientUri_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final clientUri = clientUri_lifted.value;
    new_offset += clientUri_lifted.bytesRead;
    final logoUri_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final logoUri = logoUri_lifted.value;
    new_offset += logoUri_lifted.bytesRead;
    final tosUri_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final tosUri = tosUri_lifted.value;
    new_offset += tosUri_lifted.bytesRead;
    final policyUri_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final policyUri = policyUri_lifted.value;
    new_offset += policyUri_lifted.bytesRead;
    final staticRegistrations_lifted = FfiConverterMapStringString.read(
        Uint8List.view(buf.buffer, new_offset));
    final staticRegistrations = staticRegistrations_lifted.value;
    new_offset += staticRegistrations_lifted.bytesRead;
    return LiftRetVal(
        OidcConfiguration(
          clientName: clientName,
          redirectUri: redirectUri,
          clientUri: clientUri,
          logoUri: logoUri,
          tosUri: tosUri,
          policyUri: policyUri,
          staticRegistrations: staticRegistrations.cast<String, String>(),
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(OidcConfiguration value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterOptionalString.write(
        value.clientName, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterString.write(
        value.redirectUri, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterString.write(
        value.clientUri, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        value.logoUri, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        value.tosUri, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        value.policyUri, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterMapStringString.write(
        value.staticRegistrations, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(OidcConfiguration value) {
    return FfiConverterOptionalString.allocationSize(value.clientName) +
        FfiConverterString.allocationSize(value.redirectUri) +
        FfiConverterString.allocationSize(value.clientUri) +
        FfiConverterOptionalString.allocationSize(value.logoUri) +
        FfiConverterOptionalString.allocationSize(value.tosUri) +
        FfiConverterOptionalString.allocationSize(value.policyUri) +
        FfiConverterMapStringString.allocationSize(value.staticRegistrations) +
        0;
  }
}

class OidcCrossSigningResetInfo {
  final String approvalUrl;

  OidcCrossSigningResetInfo({
    required this.approvalUrl,
  });
}

class FfiConverterOidcCrossSigningResetInfo {
  static OidcCrossSigningResetInfo lift(RustBuffer buf) {
    return FfiConverterOidcCrossSigningResetInfo.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(OidcCrossSigningResetInfo value) {
    final total_length =
        FfiConverterString.allocationSize(value.approvalUrl) + 0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<OidcCrossSigningResetInfo> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final approvalUrl_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final approvalUrl = approvalUrl_lifted.value;
    new_offset += approvalUrl_lifted.bytesRead;
    return LiftRetVal(
        OidcCrossSigningResetInfo(
          approvalUrl: approvalUrl,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(OidcCrossSigningResetInfo value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterString.write(
        value.approvalUrl, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(OidcCrossSigningResetInfo value) {
    return FfiConverterString.allocationSize(value.approvalUrl) + 0;
  }
}

class PassPhrase {
  final KeyDerivationAlgorithm algorithm;
  final String salt;
  final int iterations;
  final int bits;

  PassPhrase({
    required this.algorithm,
    required this.salt,
    required this.iterations,
    required this.bits,
  });
}

class FfiConverterPassPhrase {
  static PassPhrase lift(RustBuffer buf) {
    return FfiConverterPassPhrase.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(PassPhrase value) {
    final total_length =
        FfiConverterKeyDerivationAlgorithm.allocationSize(value.algorithm) +
            FfiConverterString.allocationSize(value.salt) +
            FfiConverterUInt64.allocationSize(value.iterations) +
            FfiConverterUInt64.allocationSize(value.bits) +
            0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<PassPhrase> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final algorithm_lifted = FfiConverterKeyDerivationAlgorithm.read(
        Uint8List.view(buf.buffer, new_offset));
    final algorithm = algorithm_lifted.value;
    new_offset += algorithm_lifted.bytesRead;
    final salt_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final salt = salt_lifted.value;
    new_offset += salt_lifted.bytesRead;
    final iterations_lifted =
        FfiConverterUInt64.read(Uint8List.view(buf.buffer, new_offset));
    final iterations = iterations_lifted.value;
    new_offset += iterations_lifted.bytesRead;
    final bits_lifted =
        FfiConverterUInt64.read(Uint8List.view(buf.buffer, new_offset));
    final bits = bits_lifted.value;
    new_offset += bits_lifted.bytesRead;
    return LiftRetVal(
        PassPhrase(
          algorithm: algorithm,
          salt: salt,
          iterations: iterations,
          bits: bits,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(PassPhrase value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterKeyDerivationAlgorithm.write(
        value.algorithm, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterString.write(
        value.salt, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterUInt64.write(
        value.iterations, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterUInt64.write(
        value.bits, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(PassPhrase value) {
    return FfiConverterKeyDerivationAlgorithm.allocationSize(value.algorithm) +
        FfiConverterString.allocationSize(value.salt) +
        FfiConverterUInt64.allocationSize(value.iterations) +
        FfiConverterUInt64.allocationSize(value.bits) +
        0;
  }
}

class PatternedPushRule {
  final List<Action> actions;
  final bool default_;
  final bool enabled;
  final String ruleId;
  final String pattern;

  PatternedPushRule({
    required this.actions,
    required this.default_,
    required this.enabled,
    required this.ruleId,
    required this.pattern,
  });
}

class FfiConverterPatternedPushRule {
  static PatternedPushRule lift(RustBuffer buf) {
    return FfiConverterPatternedPushRule.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(PatternedPushRule value) {
    final total_length =
        FfiConverterSequenceAction.allocationSize(value.actions) +
            FfiConverterBool.allocationSize(value.default_) +
            FfiConverterBool.allocationSize(value.enabled) +
            FfiConverterString.allocationSize(value.ruleId) +
            FfiConverterString.allocationSize(value.pattern) +
            0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<PatternedPushRule> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final actions_lifted =
        FfiConverterSequenceAction.read(Uint8List.view(buf.buffer, new_offset));
    final actions = actions_lifted.value;
    new_offset += actions_lifted.bytesRead;
    final default__lifted =
        FfiConverterBool.read(Uint8List.view(buf.buffer, new_offset));
    final default_ = default__lifted.value;
    new_offset += default__lifted.bytesRead;
    final enabled_lifted =
        FfiConverterBool.read(Uint8List.view(buf.buffer, new_offset));
    final enabled = enabled_lifted.value;
    new_offset += enabled_lifted.bytesRead;
    final ruleId_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final ruleId = ruleId_lifted.value;
    new_offset += ruleId_lifted.bytesRead;
    final pattern_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final pattern = pattern_lifted.value;
    new_offset += pattern_lifted.bytesRead;
    return LiftRetVal(
        PatternedPushRule(
          actions: actions,
          default_: default_,
          enabled: enabled,
          ruleId: ruleId,
          pattern: pattern,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(PatternedPushRule value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterSequenceAction.write(
        value.actions, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterBool.write(
        value.default_, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterBool.write(
        value.enabled, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterString.write(
        value.ruleId, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterString.write(
        value.pattern, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(PatternedPushRule value) {
    return FfiConverterSequenceAction.allocationSize(value.actions) +
        FfiConverterBool.allocationSize(value.default_) +
        FfiConverterBool.allocationSize(value.enabled) +
        FfiConverterString.allocationSize(value.ruleId) +
        FfiConverterString.allocationSize(value.pattern) +
        0;
  }
}

class PollAnswer {
  final String id;
  final String text;

  PollAnswer({
    required this.id,
    required this.text,
  });
}

class FfiConverterPollAnswer {
  static PollAnswer lift(RustBuffer buf) {
    return FfiConverterPollAnswer.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(PollAnswer value) {
    final total_length = FfiConverterString.allocationSize(value.id) +
        FfiConverterString.allocationSize(value.text) +
        0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<PollAnswer> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final id_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final id = id_lifted.value;
    new_offset += id_lifted.bytesRead;
    final text_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final text = text_lifted.value;
    new_offset += text_lifted.bytesRead;
    return LiftRetVal(
        PollAnswer(
          id: id,
          text: text,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(PollAnswer value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterString.write(
        value.id, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterString.write(
        value.text, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(PollAnswer value) {
    return FfiConverterString.allocationSize(value.id) +
        FfiConverterString.allocationSize(value.text) +
        0;
  }
}

class PollData {
  final String question;
  final List<String> answers;
  final int maxSelections;
  final PollKind pollKind;

  PollData({
    required this.question,
    required this.answers,
    required this.maxSelections,
    required this.pollKind,
  });
}

class FfiConverterPollData {
  static PollData lift(RustBuffer buf) {
    return FfiConverterPollData.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(PollData value) {
    final total_length = FfiConverterString.allocationSize(value.question) +
        FfiConverterSequenceString.allocationSize(value.answers) +
        FfiConverterUInt8.allocationSize(value.maxSelections) +
        FfiConverterPollKind.allocationSize(value.pollKind) +
        0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<PollData> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final question_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final question = question_lifted.value;
    new_offset += question_lifted.bytesRead;
    final answers_lifted =
        FfiConverterSequenceString.read(Uint8List.view(buf.buffer, new_offset));
    final answers = answers_lifted.value;
    new_offset += answers_lifted.bytesRead;
    final maxSelections_lifted =
        FfiConverterUInt8.read(Uint8List.view(buf.buffer, new_offset));
    final maxSelections = maxSelections_lifted.value;
    new_offset += maxSelections_lifted.bytesRead;
    final pollKind_lifted =
        FfiConverterPollKind.read(Uint8List.view(buf.buffer, new_offset));
    final pollKind = pollKind_lifted.value;
    new_offset += pollKind_lifted.bytesRead;
    return LiftRetVal(
        PollData(
          question: question,
          answers: answers,
          maxSelections: maxSelections,
          pollKind: pollKind,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(PollData value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterString.write(
        value.question, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterSequenceString.write(
        value.answers, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterUInt8.write(
        value.maxSelections, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterPollKind.write(
        value.pollKind, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(PollData value) {
    return FfiConverterString.allocationSize(value.question) +
        FfiConverterSequenceString.allocationSize(value.answers) +
        FfiConverterUInt8.allocationSize(value.maxSelections) +
        FfiConverterPollKind.allocationSize(value.pollKind) +
        0;
  }
}

class PowerLevels {
  final int? usersDefault;
  final int? eventsDefault;
  final int? stateDefault;
  final int? ban;
  final int? kick;
  final int? redact;
  final int? invite;
  final NotificationPowerLevels? notifications;
  final Map<String, int> users;
  final Map<String, int> events;

  PowerLevels({
    this.usersDefault,
    this.eventsDefault,
    this.stateDefault,
    this.ban,
    this.kick,
    this.redact,
    this.invite,
    this.notifications,
    required this.users,
    required this.events,
  });
}

class FfiConverterPowerLevels {
  static PowerLevels lift(RustBuffer buf) {
    return FfiConverterPowerLevels.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(PowerLevels value) {
    final total_length =
        FfiConverterOptionalInt32.allocationSize(value.usersDefault) +
            FfiConverterOptionalInt32.allocationSize(value.eventsDefault) +
            FfiConverterOptionalInt32.allocationSize(value.stateDefault) +
            FfiConverterOptionalInt32.allocationSize(value.ban) +
            FfiConverterOptionalInt32.allocationSize(value.kick) +
            FfiConverterOptionalInt32.allocationSize(value.redact) +
            FfiConverterOptionalInt32.allocationSize(value.invite) +
            FfiConverterOptionalNotificationPowerLevels.allocationSize(
                value.notifications) +
            FfiConverterMapStringInt32.allocationSize(value.users) +
            FfiConverterMapStringInt32.allocationSize(value.events) +
            0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<PowerLevels> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final usersDefault_lifted =
        FfiConverterOptionalInt32.read(Uint8List.view(buf.buffer, new_offset));
    final usersDefault = usersDefault_lifted.value;
    new_offset += usersDefault_lifted.bytesRead;
    final eventsDefault_lifted =
        FfiConverterOptionalInt32.read(Uint8List.view(buf.buffer, new_offset));
    final eventsDefault = eventsDefault_lifted.value;
    new_offset += eventsDefault_lifted.bytesRead;
    final stateDefault_lifted =
        FfiConverterOptionalInt32.read(Uint8List.view(buf.buffer, new_offset));
    final stateDefault = stateDefault_lifted.value;
    new_offset += stateDefault_lifted.bytesRead;
    final ban_lifted =
        FfiConverterOptionalInt32.read(Uint8List.view(buf.buffer, new_offset));
    final ban = ban_lifted.value;
    new_offset += ban_lifted.bytesRead;
    final kick_lifted =
        FfiConverterOptionalInt32.read(Uint8List.view(buf.buffer, new_offset));
    final kick = kick_lifted.value;
    new_offset += kick_lifted.bytesRead;
    final redact_lifted =
        FfiConverterOptionalInt32.read(Uint8List.view(buf.buffer, new_offset));
    final redact = redact_lifted.value;
    new_offset += redact_lifted.bytesRead;
    final invite_lifted =
        FfiConverterOptionalInt32.read(Uint8List.view(buf.buffer, new_offset));
    final invite = invite_lifted.value;
    new_offset += invite_lifted.bytesRead;
    final notifications_lifted =
        FfiConverterOptionalNotificationPowerLevels.read(
            Uint8List.view(buf.buffer, new_offset));
    final notifications = notifications_lifted.value;
    new_offset += notifications_lifted.bytesRead;
    final users_lifted =
        FfiConverterMapStringInt32.read(Uint8List.view(buf.buffer, new_offset));
    final users = users_lifted.value;
    new_offset += users_lifted.bytesRead;
    final events_lifted =
        FfiConverterMapStringInt32.read(Uint8List.view(buf.buffer, new_offset));
    final events = events_lifted.value;
    new_offset += events_lifted.bytesRead;
    return LiftRetVal(
        PowerLevels(
          usersDefault: usersDefault,
          eventsDefault: eventsDefault,
          stateDefault: stateDefault,
          ban: ban,
          kick: kick,
          redact: redact,
          invite: invite,
          notifications: notifications,
          users: users,
          events: events,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(PowerLevels value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterOptionalInt32.write(
        value.usersDefault, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalInt32.write(
        value.eventsDefault, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalInt32.write(
        value.stateDefault, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalInt32.write(
        value.ban, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalInt32.write(
        value.kick, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalInt32.write(
        value.redact, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalInt32.write(
        value.invite, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalNotificationPowerLevels.write(
        value.notifications, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterMapStringInt32.write(
        value.users, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterMapStringInt32.write(
        value.events, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(PowerLevels value) {
    return FfiConverterOptionalInt32.allocationSize(value.usersDefault) +
        FfiConverterOptionalInt32.allocationSize(value.eventsDefault) +
        FfiConverterOptionalInt32.allocationSize(value.stateDefault) +
        FfiConverterOptionalInt32.allocationSize(value.ban) +
        FfiConverterOptionalInt32.allocationSize(value.kick) +
        FfiConverterOptionalInt32.allocationSize(value.redact) +
        FfiConverterOptionalInt32.allocationSize(value.invite) +
        FfiConverterOptionalNotificationPowerLevels.allocationSize(
            value.notifications) +
        FfiConverterMapStringInt32.allocationSize(value.users) +
        FfiConverterMapStringInt32.allocationSize(value.events) +
        0;
  }
}

class PredecessorRoom {
  final String roomId;

  PredecessorRoom({
    required this.roomId,
  });
}

class FfiConverterPredecessorRoom {
  static PredecessorRoom lift(RustBuffer buf) {
    return FfiConverterPredecessorRoom.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(PredecessorRoom value) {
    final total_length = FfiConverterString.allocationSize(value.roomId) + 0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<PredecessorRoom> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final roomId_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final roomId = roomId_lifted.value;
    new_offset += roomId_lifted.bytesRead;
    return LiftRetVal(
        PredecessorRoom(
          roomId: roomId,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(PredecessorRoom value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterString.write(
        value.roomId, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(PredecessorRoom value) {
    return FfiConverterString.allocationSize(value.roomId) + 0;
  }
}

class PusherIdentifiers {
  final String pushkey;
  final String appId;

  PusherIdentifiers({
    required this.pushkey,
    required this.appId,
  });
}

class FfiConverterPusherIdentifiers {
  static PusherIdentifiers lift(RustBuffer buf) {
    return FfiConverterPusherIdentifiers.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(PusherIdentifiers value) {
    final total_length = FfiConverterString.allocationSize(value.pushkey) +
        FfiConverterString.allocationSize(value.appId) +
        0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<PusherIdentifiers> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final pushkey_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final pushkey = pushkey_lifted.value;
    new_offset += pushkey_lifted.bytesRead;
    final appId_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final appId = appId_lifted.value;
    new_offset += appId_lifted.bytesRead;
    return LiftRetVal(
        PusherIdentifiers(
          pushkey: pushkey,
          appId: appId,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(PusherIdentifiers value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterString.write(
        value.pushkey, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterString.write(
        value.appId, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(PusherIdentifiers value) {
    return FfiConverterString.allocationSize(value.pushkey) +
        FfiConverterString.allocationSize(value.appId) +
        0;
  }
}

class Reaction {
  final String key;
  final List<ReactionSenderData> senders;

  Reaction({
    required this.key,
    required this.senders,
  });
}

class FfiConverterReaction {
  static Reaction lift(RustBuffer buf) {
    return FfiConverterReaction.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(Reaction value) {
    final total_length = FfiConverterString.allocationSize(value.key) +
        FfiConverterSequenceReactionSenderData.allocationSize(value.senders) +
        0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<Reaction> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final key_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final key = key_lifted.value;
    new_offset += key_lifted.bytesRead;
    final senders_lifted = FfiConverterSequenceReactionSenderData.read(
        Uint8List.view(buf.buffer, new_offset));
    final senders = senders_lifted.value;
    new_offset += senders_lifted.bytesRead;
    return LiftRetVal(
        Reaction(
          key: key,
          senders: senders,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(Reaction value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterString.write(
        value.key, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterSequenceReactionSenderData.write(
        value.senders, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(Reaction value) {
    return FfiConverterString.allocationSize(value.key) +
        FfiConverterSequenceReactionSenderData.allocationSize(value.senders) +
        0;
  }
}

class ReactionSenderData {
  final String senderId;
  final Timestamp timestamp;

  ReactionSenderData({
    required this.senderId,
    required this.timestamp,
  });
}

class FfiConverterReactionSenderData {
  static ReactionSenderData lift(RustBuffer buf) {
    return FfiConverterReactionSenderData.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(ReactionSenderData value) {
    final total_length = FfiConverterString.allocationSize(value.senderId) +
        FfiConverterTimestamp.allocationSize(value.timestamp) +
        0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<ReactionSenderData> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final senderId_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final senderId = senderId_lifted.value;
    new_offset += senderId_lifted.bytesRead;
    final timestamp_lifted =
        FfiConverterTimestamp.read(Uint8List.view(buf.buffer, new_offset));
    final timestamp = timestamp_lifted.value;
    new_offset += timestamp_lifted.bytesRead;
    return LiftRetVal(
        ReactionSenderData(
          senderId: senderId,
          timestamp: timestamp,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(ReactionSenderData value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterString.write(
        value.senderId, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterTimestamp.write(
        value.timestamp, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(ReactionSenderData value) {
    return FfiConverterString.allocationSize(value.senderId) +
        FfiConverterTimestamp.allocationSize(value.timestamp) +
        0;
  }
}

class Receipt {
  final Timestamp? timestamp;

  Receipt({
    this.timestamp,
  });
}

class FfiConverterReceipt {
  static Receipt lift(RustBuffer buf) {
    return FfiConverterReceipt.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(Receipt value) {
    final total_length =
        FfiConverterOptionalTimestamp.allocationSize(value.timestamp) + 0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<Receipt> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final timestamp_lifted = FfiConverterOptionalTimestamp.read(
        Uint8List.view(buf.buffer, new_offset));
    final timestamp = timestamp_lifted.value;
    new_offset += timestamp_lifted.bytesRead;
    return LiftRetVal(
        Receipt(
          timestamp: timestamp,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(Receipt value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterOptionalTimestamp.write(
        value.timestamp, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(Receipt value) {
    return FfiConverterOptionalTimestamp.allocationSize(value.timestamp) + 0;
  }
}

class RequestConfig {
  final int? retryLimit;
  final int? timeout;
  final int? maxConcurrentRequests;
  final int? maxRetryTime;

  RequestConfig({
    this.retryLimit,
    this.timeout,
    this.maxConcurrentRequests,
    this.maxRetryTime,
  });
}

class FfiConverterRequestConfig {
  static RequestConfig lift(RustBuffer buf) {
    return FfiConverterRequestConfig.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(RequestConfig value) {
    final total_length = FfiConverterOptionalUInt64.allocationSize(
            value.retryLimit) +
        FfiConverterOptionalUInt64.allocationSize(value.timeout) +
        FfiConverterOptionalUInt64.allocationSize(value.maxConcurrentRequests) +
        FfiConverterOptionalUInt64.allocationSize(value.maxRetryTime) +
        0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<RequestConfig> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final retryLimit_lifted =
        FfiConverterOptionalUInt64.read(Uint8List.view(buf.buffer, new_offset));
    final retryLimit = retryLimit_lifted.value;
    new_offset += retryLimit_lifted.bytesRead;
    final timeout_lifted =
        FfiConverterOptionalUInt64.read(Uint8List.view(buf.buffer, new_offset));
    final timeout = timeout_lifted.value;
    new_offset += timeout_lifted.bytesRead;
    final maxConcurrentRequests_lifted =
        FfiConverterOptionalUInt64.read(Uint8List.view(buf.buffer, new_offset));
    final maxConcurrentRequests = maxConcurrentRequests_lifted.value;
    new_offset += maxConcurrentRequests_lifted.bytesRead;
    final maxRetryTime_lifted =
        FfiConverterOptionalUInt64.read(Uint8List.view(buf.buffer, new_offset));
    final maxRetryTime = maxRetryTime_lifted.value;
    new_offset += maxRetryTime_lifted.bytesRead;
    return LiftRetVal(
        RequestConfig(
          retryLimit: retryLimit,
          timeout: timeout,
          maxConcurrentRequests: maxConcurrentRequests,
          maxRetryTime: maxRetryTime,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(RequestConfig value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterOptionalUInt64.write(
        value.retryLimit, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalUInt64.write(
        value.timeout, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalUInt64.write(
        value.maxConcurrentRequests, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalUInt64.write(
        value.maxRetryTime, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(RequestConfig value) {
    return FfiConverterOptionalUInt64.allocationSize(value.retryLimit) +
        FfiConverterOptionalUInt64.allocationSize(value.timeout) +
        FfiConverterOptionalUInt64.allocationSize(value.maxConcurrentRequests) +
        FfiConverterOptionalUInt64.allocationSize(value.maxRetryTime) +
        0;
  }
}

class ResolvedRoomAlias {
  final String roomId;
  final List<String> servers;

  ResolvedRoomAlias({
    required this.roomId,
    required this.servers,
  });
}

class FfiConverterResolvedRoomAlias {
  static ResolvedRoomAlias lift(RustBuffer buf) {
    return FfiConverterResolvedRoomAlias.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(ResolvedRoomAlias value) {
    final total_length = FfiConverterString.allocationSize(value.roomId) +
        FfiConverterSequenceString.allocationSize(value.servers) +
        0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<ResolvedRoomAlias> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final roomId_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final roomId = roomId_lifted.value;
    new_offset += roomId_lifted.bytesRead;
    final servers_lifted =
        FfiConverterSequenceString.read(Uint8List.view(buf.buffer, new_offset));
    final servers = servers_lifted.value;
    new_offset += servers_lifted.bytesRead;
    return LiftRetVal(
        ResolvedRoomAlias(
          roomId: roomId,
          servers: servers,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(ResolvedRoomAlias value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterString.write(
        value.roomId, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterSequenceString.write(
        value.servers, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(ResolvedRoomAlias value) {
    return FfiConverterString.allocationSize(value.roomId) +
        FfiConverterSequenceString.allocationSize(value.servers) +
        0;
  }
}

class RoomDescription {
  final String roomId;
  final String? name;
  final String? topic;
  final String? alias;
  final String? avatarUrl;
  final PublicRoomJoinRule? joinRule;
  final bool isWorldReadable;
  final int joinedMembers;

  RoomDescription({
    required this.roomId,
    this.name,
    this.topic,
    this.alias,
    this.avatarUrl,
    this.joinRule,
    required this.isWorldReadable,
    required this.joinedMembers,
  });
}

class FfiConverterRoomDescription {
  static RoomDescription lift(RustBuffer buf) {
    return FfiConverterRoomDescription.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(RoomDescription value) {
    final total_length = FfiConverterString.allocationSize(value.roomId) +
        FfiConverterOptionalString.allocationSize(value.name) +
        FfiConverterOptionalString.allocationSize(value.topic) +
        FfiConverterOptionalString.allocationSize(value.alias) +
        FfiConverterOptionalString.allocationSize(value.avatarUrl) +
        FfiConverterOptionalPublicRoomJoinRule.allocationSize(value.joinRule) +
        FfiConverterBool.allocationSize(value.isWorldReadable) +
        FfiConverterUInt64.allocationSize(value.joinedMembers) +
        0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<RoomDescription> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final roomId_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final roomId = roomId_lifted.value;
    new_offset += roomId_lifted.bytesRead;
    final name_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final name = name_lifted.value;
    new_offset += name_lifted.bytesRead;
    final topic_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final topic = topic_lifted.value;
    new_offset += topic_lifted.bytesRead;
    final alias_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final alias = alias_lifted.value;
    new_offset += alias_lifted.bytesRead;
    final avatarUrl_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final avatarUrl = avatarUrl_lifted.value;
    new_offset += avatarUrl_lifted.bytesRead;
    final joinRule_lifted = FfiConverterOptionalPublicRoomJoinRule.read(
        Uint8List.view(buf.buffer, new_offset));
    final joinRule = joinRule_lifted.value;
    new_offset += joinRule_lifted.bytesRead;
    final isWorldReadable_lifted =
        FfiConverterBool.read(Uint8List.view(buf.buffer, new_offset));
    final isWorldReadable = isWorldReadable_lifted.value;
    new_offset += isWorldReadable_lifted.bytesRead;
    final joinedMembers_lifted =
        FfiConverterUInt64.read(Uint8List.view(buf.buffer, new_offset));
    final joinedMembers = joinedMembers_lifted.value;
    new_offset += joinedMembers_lifted.bytesRead;
    return LiftRetVal(
        RoomDescription(
          roomId: roomId,
          name: name,
          topic: topic,
          alias: alias,
          avatarUrl: avatarUrl,
          joinRule: joinRule,
          isWorldReadable: isWorldReadable,
          joinedMembers: joinedMembers,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(RoomDescription value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterString.write(
        value.roomId, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        value.name, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        value.topic, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        value.alias, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        value.avatarUrl, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalPublicRoomJoinRule.write(
        value.joinRule, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterBool.write(
        value.isWorldReadable, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterUInt64.write(
        value.joinedMembers, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(RoomDescription value) {
    return FfiConverterString.allocationSize(value.roomId) +
        FfiConverterOptionalString.allocationSize(value.name) +
        FfiConverterOptionalString.allocationSize(value.topic) +
        FfiConverterOptionalString.allocationSize(value.alias) +
        FfiConverterOptionalString.allocationSize(value.avatarUrl) +
        FfiConverterOptionalPublicRoomJoinRule.allocationSize(value.joinRule) +
        FfiConverterBool.allocationSize(value.isWorldReadable) +
        FfiConverterUInt64.allocationSize(value.joinedMembers) +
        0;
  }
}

class RoomDirectorySearchEntriesResult {
  final TaskHandle entriesStream;

  RoomDirectorySearchEntriesResult({
    required this.entriesStream,
  });
}

class FfiConverterRoomDirectorySearchEntriesResult {
  static RoomDirectorySearchEntriesResult lift(RustBuffer buf) {
    return FfiConverterRoomDirectorySearchEntriesResult.read(buf.asUint8List())
        .value;
  }

  static RustBuffer lower(RoomDirectorySearchEntriesResult value) {
    final total_length = TaskHandle.allocationSize(value.entriesStream) + 0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<RoomDirectorySearchEntriesResult> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final entriesStream_lifted =
        TaskHandle.read(Uint8List.view(buf.buffer, new_offset));
    final entriesStream = entriesStream_lifted.value;
    new_offset += entriesStream_lifted.bytesRead;
    return LiftRetVal(
        RoomDirectorySearchEntriesResult(
          entriesStream: entriesStream,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(RoomDirectorySearchEntriesResult value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += TaskHandle.write(
        value.entriesStream, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(RoomDirectorySearchEntriesResult value) {
    return TaskHandle.allocationSize(value.entriesStream) + 0;
  }
}

class RoomHero {
  final String userId;
  final String? displayName;
  final String? avatarUrl;

  RoomHero({
    required this.userId,
    this.displayName,
    this.avatarUrl,
  });
}

class FfiConverterRoomHero {
  static RoomHero lift(RustBuffer buf) {
    return FfiConverterRoomHero.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(RoomHero value) {
    final total_length = FfiConverterString.allocationSize(value.userId) +
        FfiConverterOptionalString.allocationSize(value.displayName) +
        FfiConverterOptionalString.allocationSize(value.avatarUrl) +
        0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<RoomHero> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final userId_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final userId = userId_lifted.value;
    new_offset += userId_lifted.bytesRead;
    final displayName_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final displayName = displayName_lifted.value;
    new_offset += displayName_lifted.bytesRead;
    final avatarUrl_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final avatarUrl = avatarUrl_lifted.value;
    new_offset += avatarUrl_lifted.bytesRead;
    return LiftRetVal(
        RoomHero(
          userId: userId,
          displayName: displayName,
          avatarUrl: avatarUrl,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(RoomHero value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterString.write(
        value.userId, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        value.displayName, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        value.avatarUrl, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(RoomHero value) {
    return FfiConverterString.allocationSize(value.userId) +
        FfiConverterOptionalString.allocationSize(value.displayName) +
        FfiConverterOptionalString.allocationSize(value.avatarUrl) +
        0;
  }
}

class RoomInfo {
  final String id;
  final EncryptionState encryptionState;
  final List<String>? creators;
  final String? displayName;
  final String? rawName;
  final String? topic;
  final String? avatarUrl;
  final bool isDirect;
  final bool? isPublic;
  final bool isSpace;
  final SuccessorRoom? successorRoom;
  final bool isFavourite;
  final String? canonicalAlias;
  final List<String> alternativeAliases;
  final Membership membership;
  final RoomMember? inviter;
  final List<RoomHero> heroes;
  final int activeMembersCount;
  final int invitedMembersCount;
  final int joinedMembersCount;
  final int highlightCount;
  final int notificationCount;
  final RoomNotificationMode? cachedUserDefinedNotificationMode;
  final bool hasRoomCall;
  final List<String> activeRoomCallParticipants;
  final bool isMarkedUnread;
  final int numUnreadMessages;
  final int numUnreadNotifications;
  final int numUnreadMentions;
  final List<String> pinnedEventIds;
  final JoinRule? joinRule;
  final RoomHistoryVisibility historyVisibility;
  final RoomPowerLevels? powerLevels;
  final String? roomVersion;
  final bool privilegedCreatorsRole;

  RoomInfo({
    required this.id,
    required this.encryptionState,
    this.creators,
    this.displayName,
    this.rawName,
    this.topic,
    this.avatarUrl,
    required this.isDirect,
    this.isPublic,
    required this.isSpace,
    this.successorRoom,
    required this.isFavourite,
    this.canonicalAlias,
    required this.alternativeAliases,
    required this.membership,
    this.inviter,
    required this.heroes,
    required this.activeMembersCount,
    required this.invitedMembersCount,
    required this.joinedMembersCount,
    required this.highlightCount,
    required this.notificationCount,
    this.cachedUserDefinedNotificationMode,
    required this.hasRoomCall,
    required this.activeRoomCallParticipants,
    required this.isMarkedUnread,
    required this.numUnreadMessages,
    required this.numUnreadNotifications,
    required this.numUnreadMentions,
    required this.pinnedEventIds,
    this.joinRule,
    required this.historyVisibility,
    this.powerLevels,
    this.roomVersion,
    required this.privilegedCreatorsRole,
  });
}

class FfiConverterRoomInfo {
  static RoomInfo lift(RustBuffer buf) {
    return FfiConverterRoomInfo.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(RoomInfo value) {
    final total_length = FfiConverterString.allocationSize(value.id) +
        FfiConverterEncryptionState.allocationSize(value.encryptionState) +
        FfiConverterOptionalSequenceString.allocationSize(value.creators) +
        FfiConverterOptionalString.allocationSize(value.displayName) +
        FfiConverterOptionalString.allocationSize(value.rawName) +
        FfiConverterOptionalString.allocationSize(value.topic) +
        FfiConverterOptionalString.allocationSize(value.avatarUrl) +
        FfiConverterBool.allocationSize(value.isDirect) +
        FfiConverterOptionalBool.allocationSize(value.isPublic) +
        FfiConverterBool.allocationSize(value.isSpace) +
        FfiConverterOptionalSuccessorRoom.allocationSize(value.successorRoom) +
        FfiConverterBool.allocationSize(value.isFavourite) +
        FfiConverterOptionalString.allocationSize(value.canonicalAlias) +
        FfiConverterSequenceString.allocationSize(value.alternativeAliases) +
        FfiConverterMembership.allocationSize(value.membership) +
        FfiConverterOptionalRoomMember.allocationSize(value.inviter) +
        FfiConverterSequenceRoomHero.allocationSize(value.heroes) +
        FfiConverterUInt64.allocationSize(value.activeMembersCount) +
        FfiConverterUInt64.allocationSize(value.invitedMembersCount) +
        FfiConverterUInt64.allocationSize(value.joinedMembersCount) +
        FfiConverterUInt64.allocationSize(value.highlightCount) +
        FfiConverterUInt64.allocationSize(value.notificationCount) +
        FfiConverterOptionalRoomNotificationMode.allocationSize(
            value.cachedUserDefinedNotificationMode) +
        FfiConverterBool.allocationSize(value.hasRoomCall) +
        FfiConverterSequenceString.allocationSize(
            value.activeRoomCallParticipants) +
        FfiConverterBool.allocationSize(value.isMarkedUnread) +
        FfiConverterUInt64.allocationSize(value.numUnreadMessages) +
        FfiConverterUInt64.allocationSize(value.numUnreadNotifications) +
        FfiConverterUInt64.allocationSize(value.numUnreadMentions) +
        FfiConverterSequenceString.allocationSize(value.pinnedEventIds) +
        FfiConverterOptionalJoinRule.allocationSize(value.joinRule) +
        FfiConverterRoomHistoryVisibility.allocationSize(
            value.historyVisibility) +
        FfiConverterOptionalRoomPowerLevels.allocationSize(value.powerLevels) +
        FfiConverterOptionalString.allocationSize(value.roomVersion) +
        FfiConverterBool.allocationSize(value.privilegedCreatorsRole) +
        0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<RoomInfo> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final id_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final id = id_lifted.value;
    new_offset += id_lifted.bytesRead;
    final encryptionState_lifted = FfiConverterEncryptionState.read(
        Uint8List.view(buf.buffer, new_offset));
    final encryptionState = encryptionState_lifted.value;
    new_offset += encryptionState_lifted.bytesRead;
    final creators_lifted = FfiConverterOptionalSequenceString.read(
        Uint8List.view(buf.buffer, new_offset));
    final creators = creators_lifted.value;
    new_offset += creators_lifted.bytesRead;
    final displayName_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final displayName = displayName_lifted.value;
    new_offset += displayName_lifted.bytesRead;
    final rawName_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final rawName = rawName_lifted.value;
    new_offset += rawName_lifted.bytesRead;
    final topic_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final topic = topic_lifted.value;
    new_offset += topic_lifted.bytesRead;
    final avatarUrl_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final avatarUrl = avatarUrl_lifted.value;
    new_offset += avatarUrl_lifted.bytesRead;
    final isDirect_lifted =
        FfiConverterBool.read(Uint8List.view(buf.buffer, new_offset));
    final isDirect = isDirect_lifted.value;
    new_offset += isDirect_lifted.bytesRead;
    final isPublic_lifted =
        FfiConverterOptionalBool.read(Uint8List.view(buf.buffer, new_offset));
    final isPublic = isPublic_lifted.value;
    new_offset += isPublic_lifted.bytesRead;
    final isSpace_lifted =
        FfiConverterBool.read(Uint8List.view(buf.buffer, new_offset));
    final isSpace = isSpace_lifted.value;
    new_offset += isSpace_lifted.bytesRead;
    final successorRoom_lifted = FfiConverterOptionalSuccessorRoom.read(
        Uint8List.view(buf.buffer, new_offset));
    final successorRoom = successorRoom_lifted.value;
    new_offset += successorRoom_lifted.bytesRead;
    final isFavourite_lifted =
        FfiConverterBool.read(Uint8List.view(buf.buffer, new_offset));
    final isFavourite = isFavourite_lifted.value;
    new_offset += isFavourite_lifted.bytesRead;
    final canonicalAlias_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final canonicalAlias = canonicalAlias_lifted.value;
    new_offset += canonicalAlias_lifted.bytesRead;
    final alternativeAliases_lifted =
        FfiConverterSequenceString.read(Uint8List.view(buf.buffer, new_offset));
    final alternativeAliases = alternativeAliases_lifted.value;
    new_offset += alternativeAliases_lifted.bytesRead;
    final membership_lifted =
        FfiConverterMembership.read(Uint8List.view(buf.buffer, new_offset));
    final membership = membership_lifted.value;
    new_offset += membership_lifted.bytesRead;
    final inviter_lifted = FfiConverterOptionalRoomMember.read(
        Uint8List.view(buf.buffer, new_offset));
    final inviter = inviter_lifted.value;
    new_offset += inviter_lifted.bytesRead;
    final heroes_lifted = FfiConverterSequenceRoomHero.read(
        Uint8List.view(buf.buffer, new_offset));
    final heroes = heroes_lifted.value;
    new_offset += heroes_lifted.bytesRead;
    final activeMembersCount_lifted =
        FfiConverterUInt64.read(Uint8List.view(buf.buffer, new_offset));
    final activeMembersCount = activeMembersCount_lifted.value;
    new_offset += activeMembersCount_lifted.bytesRead;
    final invitedMembersCount_lifted =
        FfiConverterUInt64.read(Uint8List.view(buf.buffer, new_offset));
    final invitedMembersCount = invitedMembersCount_lifted.value;
    new_offset += invitedMembersCount_lifted.bytesRead;
    final joinedMembersCount_lifted =
        FfiConverterUInt64.read(Uint8List.view(buf.buffer, new_offset));
    final joinedMembersCount = joinedMembersCount_lifted.value;
    new_offset += joinedMembersCount_lifted.bytesRead;
    final highlightCount_lifted =
        FfiConverterUInt64.read(Uint8List.view(buf.buffer, new_offset));
    final highlightCount = highlightCount_lifted.value;
    new_offset += highlightCount_lifted.bytesRead;
    final notificationCount_lifted =
        FfiConverterUInt64.read(Uint8List.view(buf.buffer, new_offset));
    final notificationCount = notificationCount_lifted.value;
    new_offset += notificationCount_lifted.bytesRead;
    final cachedUserDefinedNotificationMode_lifted =
        FfiConverterOptionalRoomNotificationMode.read(
            Uint8List.view(buf.buffer, new_offset));
    final cachedUserDefinedNotificationMode =
        cachedUserDefinedNotificationMode_lifted.value;
    new_offset += cachedUserDefinedNotificationMode_lifted.bytesRead;
    final hasRoomCall_lifted =
        FfiConverterBool.read(Uint8List.view(buf.buffer, new_offset));
    final hasRoomCall = hasRoomCall_lifted.value;
    new_offset += hasRoomCall_lifted.bytesRead;
    final activeRoomCallParticipants_lifted =
        FfiConverterSequenceString.read(Uint8List.view(buf.buffer, new_offset));
    final activeRoomCallParticipants = activeRoomCallParticipants_lifted.value;
    new_offset += activeRoomCallParticipants_lifted.bytesRead;
    final isMarkedUnread_lifted =
        FfiConverterBool.read(Uint8List.view(buf.buffer, new_offset));
    final isMarkedUnread = isMarkedUnread_lifted.value;
    new_offset += isMarkedUnread_lifted.bytesRead;
    final numUnreadMessages_lifted =
        FfiConverterUInt64.read(Uint8List.view(buf.buffer, new_offset));
    final numUnreadMessages = numUnreadMessages_lifted.value;
    new_offset += numUnreadMessages_lifted.bytesRead;
    final numUnreadNotifications_lifted =
        FfiConverterUInt64.read(Uint8List.view(buf.buffer, new_offset));
    final numUnreadNotifications = numUnreadNotifications_lifted.value;
    new_offset += numUnreadNotifications_lifted.bytesRead;
    final numUnreadMentions_lifted =
        FfiConverterUInt64.read(Uint8List.view(buf.buffer, new_offset));
    final numUnreadMentions = numUnreadMentions_lifted.value;
    new_offset += numUnreadMentions_lifted.bytesRead;
    final pinnedEventIds_lifted =
        FfiConverterSequenceString.read(Uint8List.view(buf.buffer, new_offset));
    final pinnedEventIds = pinnedEventIds_lifted.value;
    new_offset += pinnedEventIds_lifted.bytesRead;
    final joinRule_lifted = FfiConverterOptionalJoinRule.read(
        Uint8List.view(buf.buffer, new_offset));
    final joinRule = joinRule_lifted.value;
    new_offset += joinRule_lifted.bytesRead;
    final historyVisibility_lifted = FfiConverterRoomHistoryVisibility.read(
        Uint8List.view(buf.buffer, new_offset));
    final historyVisibility = historyVisibility_lifted.value;
    new_offset += historyVisibility_lifted.bytesRead;
    final powerLevels_lifted = FfiConverterOptionalRoomPowerLevels.read(
        Uint8List.view(buf.buffer, new_offset));
    final powerLevels = powerLevels_lifted.value;
    new_offset += powerLevels_lifted.bytesRead;
    final roomVersion_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final roomVersion = roomVersion_lifted.value;
    new_offset += roomVersion_lifted.bytesRead;
    final privilegedCreatorsRole_lifted =
        FfiConverterBool.read(Uint8List.view(buf.buffer, new_offset));
    final privilegedCreatorsRole = privilegedCreatorsRole_lifted.value;
    new_offset += privilegedCreatorsRole_lifted.bytesRead;
    return LiftRetVal(
        RoomInfo(
          id: id,
          encryptionState: encryptionState,
          creators: creators,
          displayName: displayName,
          rawName: rawName,
          topic: topic,
          avatarUrl: avatarUrl,
          isDirect: isDirect,
          isPublic: isPublic,
          isSpace: isSpace,
          successorRoom: successorRoom,
          isFavourite: isFavourite,
          canonicalAlias: canonicalAlias,
          alternativeAliases: alternativeAliases,
          membership: membership,
          inviter: inviter,
          heroes: heroes,
          activeMembersCount: activeMembersCount,
          invitedMembersCount: invitedMembersCount,
          joinedMembersCount: joinedMembersCount,
          highlightCount: highlightCount,
          notificationCount: notificationCount,
          cachedUserDefinedNotificationMode: cachedUserDefinedNotificationMode,
          hasRoomCall: hasRoomCall,
          activeRoomCallParticipants: activeRoomCallParticipants,
          isMarkedUnread: isMarkedUnread,
          numUnreadMessages: numUnreadMessages,
          numUnreadNotifications: numUnreadNotifications,
          numUnreadMentions: numUnreadMentions,
          pinnedEventIds: pinnedEventIds,
          joinRule: joinRule,
          historyVisibility: historyVisibility,
          powerLevels: powerLevels,
          roomVersion: roomVersion,
          privilegedCreatorsRole: privilegedCreatorsRole,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(RoomInfo value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterString.write(
        value.id, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterEncryptionState.write(
        value.encryptionState, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalSequenceString.write(
        value.creators, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        value.displayName, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        value.rawName, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        value.topic, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        value.avatarUrl, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterBool.write(
        value.isDirect, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalBool.write(
        value.isPublic, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterBool.write(
        value.isSpace, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalSuccessorRoom.write(
        value.successorRoom, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterBool.write(
        value.isFavourite, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        value.canonicalAlias, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterSequenceString.write(
        value.alternativeAliases, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterMembership.write(
        value.membership, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalRoomMember.write(
        value.inviter, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterSequenceRoomHero.write(
        value.heroes, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterUInt64.write(
        value.activeMembersCount, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterUInt64.write(
        value.invitedMembersCount, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterUInt64.write(
        value.joinedMembersCount, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterUInt64.write(
        value.highlightCount, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterUInt64.write(
        value.notificationCount, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalRoomNotificationMode.write(
        value.cachedUserDefinedNotificationMode,
        Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterBool.write(
        value.hasRoomCall, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterSequenceString.write(
        value.activeRoomCallParticipants,
        Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterBool.write(
        value.isMarkedUnread, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterUInt64.write(
        value.numUnreadMessages, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterUInt64.write(
        value.numUnreadNotifications, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterUInt64.write(
        value.numUnreadMentions, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterSequenceString.write(
        value.pinnedEventIds, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalJoinRule.write(
        value.joinRule, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterRoomHistoryVisibility.write(
        value.historyVisibility, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalRoomPowerLevels.write(
        value.powerLevels, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        value.roomVersion, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterBool.write(
        value.privilegedCreatorsRole, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(RoomInfo value) {
    return FfiConverterString.allocationSize(value.id) +
        FfiConverterEncryptionState.allocationSize(value.encryptionState) +
        FfiConverterOptionalSequenceString.allocationSize(value.creators) +
        FfiConverterOptionalString.allocationSize(value.displayName) +
        FfiConverterOptionalString.allocationSize(value.rawName) +
        FfiConverterOptionalString.allocationSize(value.topic) +
        FfiConverterOptionalString.allocationSize(value.avatarUrl) +
        FfiConverterBool.allocationSize(value.isDirect) +
        FfiConverterOptionalBool.allocationSize(value.isPublic) +
        FfiConverterBool.allocationSize(value.isSpace) +
        FfiConverterOptionalSuccessorRoom.allocationSize(value.successorRoom) +
        FfiConverterBool.allocationSize(value.isFavourite) +
        FfiConverterOptionalString.allocationSize(value.canonicalAlias) +
        FfiConverterSequenceString.allocationSize(value.alternativeAliases) +
        FfiConverterMembership.allocationSize(value.membership) +
        FfiConverterOptionalRoomMember.allocationSize(value.inviter) +
        FfiConverterSequenceRoomHero.allocationSize(value.heroes) +
        FfiConverterUInt64.allocationSize(value.activeMembersCount) +
        FfiConverterUInt64.allocationSize(value.invitedMembersCount) +
        FfiConverterUInt64.allocationSize(value.joinedMembersCount) +
        FfiConverterUInt64.allocationSize(value.highlightCount) +
        FfiConverterUInt64.allocationSize(value.notificationCount) +
        FfiConverterOptionalRoomNotificationMode.allocationSize(
            value.cachedUserDefinedNotificationMode) +
        FfiConverterBool.allocationSize(value.hasRoomCall) +
        FfiConverterSequenceString.allocationSize(
            value.activeRoomCallParticipants) +
        FfiConverterBool.allocationSize(value.isMarkedUnread) +
        FfiConverterUInt64.allocationSize(value.numUnreadMessages) +
        FfiConverterUInt64.allocationSize(value.numUnreadNotifications) +
        FfiConverterUInt64.allocationSize(value.numUnreadMentions) +
        FfiConverterSequenceString.allocationSize(value.pinnedEventIds) +
        FfiConverterOptionalJoinRule.allocationSize(value.joinRule) +
        FfiConverterRoomHistoryVisibility.allocationSize(
            value.historyVisibility) +
        FfiConverterOptionalRoomPowerLevels.allocationSize(value.powerLevels) +
        FfiConverterOptionalString.allocationSize(value.roomVersion) +
        FfiConverterBool.allocationSize(value.privilegedCreatorsRole) +
        0;
  }
}

class RoomListLoadingStateResult {
  final RoomListLoadingState state;
  final TaskHandle stateStream;

  RoomListLoadingStateResult({
    required this.state,
    required this.stateStream,
  });
}

class FfiConverterRoomListLoadingStateResult {
  static RoomListLoadingStateResult lift(RustBuffer buf) {
    return FfiConverterRoomListLoadingStateResult.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(RoomListLoadingStateResult value) {
    final total_length =
        FfiConverterRoomListLoadingState.allocationSize(value.state) +
            TaskHandle.allocationSize(value.stateStream) +
            0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<RoomListLoadingStateResult> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final state_lifted = FfiConverterRoomListLoadingState.read(
        Uint8List.view(buf.buffer, new_offset));
    final state = state_lifted.value;
    new_offset += state_lifted.bytesRead;
    final stateStream_lifted =
        TaskHandle.read(Uint8List.view(buf.buffer, new_offset));
    final stateStream = stateStream_lifted.value;
    new_offset += stateStream_lifted.bytesRead;
    return LiftRetVal(
        RoomListLoadingStateResult(
          state: state,
          stateStream: stateStream,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(RoomListLoadingStateResult value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterRoomListLoadingState.write(
        value.state, Uint8List.view(buf.buffer, new_offset));
    new_offset += TaskHandle.write(
        value.stateStream, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(RoomListLoadingStateResult value) {
    return FfiConverterRoomListLoadingState.allocationSize(value.state) +
        TaskHandle.allocationSize(value.stateStream) +
        0;
  }
}

class RoomMember {
  final String userId;
  final String? displayName;
  final String? avatarUrl;
  final MembershipState membership;
  final bool isNameAmbiguous;
  final PowerLevel powerLevel;
  final PowerLevel normalizedPowerLevel;
  final bool isIgnored;
  final RoomMemberRole suggestedRoleForPowerLevel;
  final String? membershipChangeReason;

  RoomMember({
    required this.userId,
    this.displayName,
    this.avatarUrl,
    required this.membership,
    required this.isNameAmbiguous,
    required this.powerLevel,
    required this.normalizedPowerLevel,
    required this.isIgnored,
    required this.suggestedRoleForPowerLevel,
    this.membershipChangeReason,
  });
}

class FfiConverterRoomMember {
  static RoomMember lift(RustBuffer buf) {
    return FfiConverterRoomMember.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(RoomMember value) {
    final total_length = FfiConverterString.allocationSize(value.userId) +
        FfiConverterOptionalString.allocationSize(value.displayName) +
        FfiConverterOptionalString.allocationSize(value.avatarUrl) +
        FfiConverterMembershipState.allocationSize(value.membership) +
        FfiConverterBool.allocationSize(value.isNameAmbiguous) +
        FfiConverterPowerLevel.allocationSize(value.powerLevel) +
        FfiConverterPowerLevel.allocationSize(value.normalizedPowerLevel) +
        FfiConverterBool.allocationSize(value.isIgnored) +
        FfiConverterRoomMemberRole.allocationSize(
            value.suggestedRoleForPowerLevel) +
        FfiConverterOptionalString.allocationSize(
            value.membershipChangeReason) +
        0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<RoomMember> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final userId_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final userId = userId_lifted.value;
    new_offset += userId_lifted.bytesRead;
    final displayName_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final displayName = displayName_lifted.value;
    new_offset += displayName_lifted.bytesRead;
    final avatarUrl_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final avatarUrl = avatarUrl_lifted.value;
    new_offset += avatarUrl_lifted.bytesRead;
    final membership_lifted = FfiConverterMembershipState.read(
        Uint8List.view(buf.buffer, new_offset));
    final membership = membership_lifted.value;
    new_offset += membership_lifted.bytesRead;
    final isNameAmbiguous_lifted =
        FfiConverterBool.read(Uint8List.view(buf.buffer, new_offset));
    final isNameAmbiguous = isNameAmbiguous_lifted.value;
    new_offset += isNameAmbiguous_lifted.bytesRead;
    final powerLevel_lifted =
        FfiConverterPowerLevel.read(Uint8List.view(buf.buffer, new_offset));
    final powerLevel = powerLevel_lifted.value;
    new_offset += powerLevel_lifted.bytesRead;
    final normalizedPowerLevel_lifted =
        FfiConverterPowerLevel.read(Uint8List.view(buf.buffer, new_offset));
    final normalizedPowerLevel = normalizedPowerLevel_lifted.value;
    new_offset += normalizedPowerLevel_lifted.bytesRead;
    final isIgnored_lifted =
        FfiConverterBool.read(Uint8List.view(buf.buffer, new_offset));
    final isIgnored = isIgnored_lifted.value;
    new_offset += isIgnored_lifted.bytesRead;
    final suggestedRoleForPowerLevel_lifted =
        FfiConverterRoomMemberRole.read(Uint8List.view(buf.buffer, new_offset));
    final suggestedRoleForPowerLevel = suggestedRoleForPowerLevel_lifted.value;
    new_offset += suggestedRoleForPowerLevel_lifted.bytesRead;
    final membershipChangeReason_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final membershipChangeReason = membershipChangeReason_lifted.value;
    new_offset += membershipChangeReason_lifted.bytesRead;
    return LiftRetVal(
        RoomMember(
          userId: userId,
          displayName: displayName,
          avatarUrl: avatarUrl,
          membership: membership,
          isNameAmbiguous: isNameAmbiguous,
          powerLevel: powerLevel,
          normalizedPowerLevel: normalizedPowerLevel,
          isIgnored: isIgnored,
          suggestedRoleForPowerLevel: suggestedRoleForPowerLevel,
          membershipChangeReason: membershipChangeReason,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(RoomMember value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterString.write(
        value.userId, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        value.displayName, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        value.avatarUrl, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterMembershipState.write(
        value.membership, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterBool.write(
        value.isNameAmbiguous, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterPowerLevel.write(
        value.powerLevel, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterPowerLevel.write(
        value.normalizedPowerLevel, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterBool.write(
        value.isIgnored, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterRoomMemberRole.write(
        value.suggestedRoleForPowerLevel,
        Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        value.membershipChangeReason, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(RoomMember value) {
    return FfiConverterString.allocationSize(value.userId) +
        FfiConverterOptionalString.allocationSize(value.displayName) +
        FfiConverterOptionalString.allocationSize(value.avatarUrl) +
        FfiConverterMembershipState.allocationSize(value.membership) +
        FfiConverterBool.allocationSize(value.isNameAmbiguous) +
        FfiConverterPowerLevel.allocationSize(value.powerLevel) +
        FfiConverterPowerLevel.allocationSize(value.normalizedPowerLevel) +
        FfiConverterBool.allocationSize(value.isIgnored) +
        FfiConverterRoomMemberRole.allocationSize(
            value.suggestedRoleForPowerLevel) +
        FfiConverterOptionalString.allocationSize(
            value.membershipChangeReason) +
        0;
  }
}

class RoomMemberWithSenderInfo {
  final RoomMember roomMember;
  final RoomMember? senderInfo;

  RoomMemberWithSenderInfo({
    required this.roomMember,
    this.senderInfo,
  });
}

class FfiConverterRoomMemberWithSenderInfo {
  static RoomMemberWithSenderInfo lift(RustBuffer buf) {
    return FfiConverterRoomMemberWithSenderInfo.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(RoomMemberWithSenderInfo value) {
    final total_length =
        FfiConverterRoomMember.allocationSize(value.roomMember) +
            FfiConverterOptionalRoomMember.allocationSize(value.senderInfo) +
            0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<RoomMemberWithSenderInfo> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final roomMember_lifted =
        FfiConverterRoomMember.read(Uint8List.view(buf.buffer, new_offset));
    final roomMember = roomMember_lifted.value;
    new_offset += roomMember_lifted.bytesRead;
    final senderInfo_lifted = FfiConverterOptionalRoomMember.read(
        Uint8List.view(buf.buffer, new_offset));
    final senderInfo = senderInfo_lifted.value;
    new_offset += senderInfo_lifted.bytesRead;
    return LiftRetVal(
        RoomMemberWithSenderInfo(
          roomMember: roomMember,
          senderInfo: senderInfo,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(RoomMemberWithSenderInfo value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterRoomMember.write(
        value.roomMember, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalRoomMember.write(
        value.senderInfo, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(RoomMemberWithSenderInfo value) {
    return FfiConverterRoomMember.allocationSize(value.roomMember) +
        FfiConverterOptionalRoomMember.allocationSize(value.senderInfo) +
        0;
  }
}

class RoomNotificationSettings {
  final RoomNotificationMode mode;
  final bool isDefault;

  RoomNotificationSettings({
    required this.mode,
    required this.isDefault,
  });
}

class FfiConverterRoomNotificationSettings {
  static RoomNotificationSettings lift(RustBuffer buf) {
    return FfiConverterRoomNotificationSettings.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(RoomNotificationSettings value) {
    final total_length =
        FfiConverterRoomNotificationMode.allocationSize(value.mode) +
            FfiConverterBool.allocationSize(value.isDefault) +
            0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<RoomNotificationSettings> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final mode_lifted = FfiConverterRoomNotificationMode.read(
        Uint8List.view(buf.buffer, new_offset));
    final mode = mode_lifted.value;
    new_offset += mode_lifted.bytesRead;
    final isDefault_lifted =
        FfiConverterBool.read(Uint8List.view(buf.buffer, new_offset));
    final isDefault = isDefault_lifted.value;
    new_offset += isDefault_lifted.bytesRead;
    return LiftRetVal(
        RoomNotificationSettings(
          mode: mode,
          isDefault: isDefault,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(RoomNotificationSettings value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterRoomNotificationMode.write(
        value.mode, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterBool.write(
        value.isDefault, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(RoomNotificationSettings value) {
    return FfiConverterRoomNotificationMode.allocationSize(value.mode) +
        FfiConverterBool.allocationSize(value.isDefault) +
        0;
  }
}

class RoomPowerLevelsValues {
  final int ban;
  final int invite;
  final int kick;
  final int redact;
  final int eventsDefault;
  final int stateDefault;
  final int usersDefault;
  final int roomName;
  final int roomAvatar;
  final int roomTopic;

  RoomPowerLevelsValues({
    required this.ban,
    required this.invite,
    required this.kick,
    required this.redact,
    required this.eventsDefault,
    required this.stateDefault,
    required this.usersDefault,
    required this.roomName,
    required this.roomAvatar,
    required this.roomTopic,
  });
}

class FfiConverterRoomPowerLevelsValues {
  static RoomPowerLevelsValues lift(RustBuffer buf) {
    return FfiConverterRoomPowerLevelsValues.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(RoomPowerLevelsValues value) {
    final total_length = FfiConverterInt64.allocationSize(value.ban) +
        FfiConverterInt64.allocationSize(value.invite) +
        FfiConverterInt64.allocationSize(value.kick) +
        FfiConverterInt64.allocationSize(value.redact) +
        FfiConverterInt64.allocationSize(value.eventsDefault) +
        FfiConverterInt64.allocationSize(value.stateDefault) +
        FfiConverterInt64.allocationSize(value.usersDefault) +
        FfiConverterInt64.allocationSize(value.roomName) +
        FfiConverterInt64.allocationSize(value.roomAvatar) +
        FfiConverterInt64.allocationSize(value.roomTopic) +
        0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<RoomPowerLevelsValues> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final ban_lifted =
        FfiConverterInt64.read(Uint8List.view(buf.buffer, new_offset));
    final ban = ban_lifted.value;
    new_offset += ban_lifted.bytesRead;
    final invite_lifted =
        FfiConverterInt64.read(Uint8List.view(buf.buffer, new_offset));
    final invite = invite_lifted.value;
    new_offset += invite_lifted.bytesRead;
    final kick_lifted =
        FfiConverterInt64.read(Uint8List.view(buf.buffer, new_offset));
    final kick = kick_lifted.value;
    new_offset += kick_lifted.bytesRead;
    final redact_lifted =
        FfiConverterInt64.read(Uint8List.view(buf.buffer, new_offset));
    final redact = redact_lifted.value;
    new_offset += redact_lifted.bytesRead;
    final eventsDefault_lifted =
        FfiConverterInt64.read(Uint8List.view(buf.buffer, new_offset));
    final eventsDefault = eventsDefault_lifted.value;
    new_offset += eventsDefault_lifted.bytesRead;
    final stateDefault_lifted =
        FfiConverterInt64.read(Uint8List.view(buf.buffer, new_offset));
    final stateDefault = stateDefault_lifted.value;
    new_offset += stateDefault_lifted.bytesRead;
    final usersDefault_lifted =
        FfiConverterInt64.read(Uint8List.view(buf.buffer, new_offset));
    final usersDefault = usersDefault_lifted.value;
    new_offset += usersDefault_lifted.bytesRead;
    final roomName_lifted =
        FfiConverterInt64.read(Uint8List.view(buf.buffer, new_offset));
    final roomName = roomName_lifted.value;
    new_offset += roomName_lifted.bytesRead;
    final roomAvatar_lifted =
        FfiConverterInt64.read(Uint8List.view(buf.buffer, new_offset));
    final roomAvatar = roomAvatar_lifted.value;
    new_offset += roomAvatar_lifted.bytesRead;
    final roomTopic_lifted =
        FfiConverterInt64.read(Uint8List.view(buf.buffer, new_offset));
    final roomTopic = roomTopic_lifted.value;
    new_offset += roomTopic_lifted.bytesRead;
    return LiftRetVal(
        RoomPowerLevelsValues(
          ban: ban,
          invite: invite,
          kick: kick,
          redact: redact,
          eventsDefault: eventsDefault,
          stateDefault: stateDefault,
          usersDefault: usersDefault,
          roomName: roomName,
          roomAvatar: roomAvatar,
          roomTopic: roomTopic,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(RoomPowerLevelsValues value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterInt64.write(
        value.ban, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterInt64.write(
        value.invite, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterInt64.write(
        value.kick, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterInt64.write(
        value.redact, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterInt64.write(
        value.eventsDefault, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterInt64.write(
        value.stateDefault, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterInt64.write(
        value.usersDefault, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterInt64.write(
        value.roomName, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterInt64.write(
        value.roomAvatar, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterInt64.write(
        value.roomTopic, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(RoomPowerLevelsValues value) {
    return FfiConverterInt64.allocationSize(value.ban) +
        FfiConverterInt64.allocationSize(value.invite) +
        FfiConverterInt64.allocationSize(value.kick) +
        FfiConverterInt64.allocationSize(value.redact) +
        FfiConverterInt64.allocationSize(value.eventsDefault) +
        FfiConverterInt64.allocationSize(value.stateDefault) +
        FfiConverterInt64.allocationSize(value.usersDefault) +
        FfiConverterInt64.allocationSize(value.roomName) +
        FfiConverterInt64.allocationSize(value.roomAvatar) +
        FfiConverterInt64.allocationSize(value.roomTopic) +
        0;
  }
}

class RoomPreviewInfo {
  final String roomId;
  final String? canonicalAlias;
  final String? name;
  final String? topic;
  final String? avatarUrl;
  final int numJoinedMembers;
  final int? numActiveMembers;
  final RoomType roomType;
  final bool? isHistoryWorldReadable;
  final Membership? membership;
  final JoinRule? joinRule;
  final bool? isDirect;
  final List<RoomHero>? heroes;

  RoomPreviewInfo({
    required this.roomId,
    this.canonicalAlias,
    this.name,
    this.topic,
    this.avatarUrl,
    required this.numJoinedMembers,
    this.numActiveMembers,
    required this.roomType,
    this.isHistoryWorldReadable,
    this.membership,
    this.joinRule,
    this.isDirect,
    this.heroes,
  });
}

class FfiConverterRoomPreviewInfo {
  static RoomPreviewInfo lift(RustBuffer buf) {
    return FfiConverterRoomPreviewInfo.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(RoomPreviewInfo value) {
    final total_length = FfiConverterString.allocationSize(value.roomId) +
        FfiConverterOptionalString.allocationSize(value.canonicalAlias) +
        FfiConverterOptionalString.allocationSize(value.name) +
        FfiConverterOptionalString.allocationSize(value.topic) +
        FfiConverterOptionalString.allocationSize(value.avatarUrl) +
        FfiConverterUInt64.allocationSize(value.numJoinedMembers) +
        FfiConverterOptionalUInt64.allocationSize(value.numActiveMembers) +
        FfiConverterRoomType.allocationSize(value.roomType) +
        FfiConverterOptionalBool.allocationSize(value.isHistoryWorldReadable) +
        FfiConverterOptionalMembership.allocationSize(value.membership) +
        FfiConverterOptionalJoinRule.allocationSize(value.joinRule) +
        FfiConverterOptionalBool.allocationSize(value.isDirect) +
        FfiConverterOptionalSequenceRoomHero.allocationSize(value.heroes) +
        0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<RoomPreviewInfo> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final roomId_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final roomId = roomId_lifted.value;
    new_offset += roomId_lifted.bytesRead;
    final canonicalAlias_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final canonicalAlias = canonicalAlias_lifted.value;
    new_offset += canonicalAlias_lifted.bytesRead;
    final name_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final name = name_lifted.value;
    new_offset += name_lifted.bytesRead;
    final topic_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final topic = topic_lifted.value;
    new_offset += topic_lifted.bytesRead;
    final avatarUrl_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final avatarUrl = avatarUrl_lifted.value;
    new_offset += avatarUrl_lifted.bytesRead;
    final numJoinedMembers_lifted =
        FfiConverterUInt64.read(Uint8List.view(buf.buffer, new_offset));
    final numJoinedMembers = numJoinedMembers_lifted.value;
    new_offset += numJoinedMembers_lifted.bytesRead;
    final numActiveMembers_lifted =
        FfiConverterOptionalUInt64.read(Uint8List.view(buf.buffer, new_offset));
    final numActiveMembers = numActiveMembers_lifted.value;
    new_offset += numActiveMembers_lifted.bytesRead;
    final roomType_lifted =
        FfiConverterRoomType.read(Uint8List.view(buf.buffer, new_offset));
    final roomType = roomType_lifted.value;
    new_offset += roomType_lifted.bytesRead;
    final isHistoryWorldReadable_lifted =
        FfiConverterOptionalBool.read(Uint8List.view(buf.buffer, new_offset));
    final isHistoryWorldReadable = isHistoryWorldReadable_lifted.value;
    new_offset += isHistoryWorldReadable_lifted.bytesRead;
    final membership_lifted = FfiConverterOptionalMembership.read(
        Uint8List.view(buf.buffer, new_offset));
    final membership = membership_lifted.value;
    new_offset += membership_lifted.bytesRead;
    final joinRule_lifted = FfiConverterOptionalJoinRule.read(
        Uint8List.view(buf.buffer, new_offset));
    final joinRule = joinRule_lifted.value;
    new_offset += joinRule_lifted.bytesRead;
    final isDirect_lifted =
        FfiConverterOptionalBool.read(Uint8List.view(buf.buffer, new_offset));
    final isDirect = isDirect_lifted.value;
    new_offset += isDirect_lifted.bytesRead;
    final heroes_lifted = FfiConverterOptionalSequenceRoomHero.read(
        Uint8List.view(buf.buffer, new_offset));
    final heroes = heroes_lifted.value;
    new_offset += heroes_lifted.bytesRead;
    return LiftRetVal(
        RoomPreviewInfo(
          roomId: roomId,
          canonicalAlias: canonicalAlias,
          name: name,
          topic: topic,
          avatarUrl: avatarUrl,
          numJoinedMembers: numJoinedMembers,
          numActiveMembers: numActiveMembers,
          roomType: roomType,
          isHistoryWorldReadable: isHistoryWorldReadable,
          membership: membership,
          joinRule: joinRule,
          isDirect: isDirect,
          heroes: heroes,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(RoomPreviewInfo value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterString.write(
        value.roomId, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        value.canonicalAlias, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        value.name, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        value.topic, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        value.avatarUrl, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterUInt64.write(
        value.numJoinedMembers, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalUInt64.write(
        value.numActiveMembers, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterRoomType.write(
        value.roomType, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalBool.write(
        value.isHistoryWorldReadable, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalMembership.write(
        value.membership, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalJoinRule.write(
        value.joinRule, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalBool.write(
        value.isDirect, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalSequenceRoomHero.write(
        value.heroes, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(RoomPreviewInfo value) {
    return FfiConverterString.allocationSize(value.roomId) +
        FfiConverterOptionalString.allocationSize(value.canonicalAlias) +
        FfiConverterOptionalString.allocationSize(value.name) +
        FfiConverterOptionalString.allocationSize(value.topic) +
        FfiConverterOptionalString.allocationSize(value.avatarUrl) +
        FfiConverterUInt64.allocationSize(value.numJoinedMembers) +
        FfiConverterOptionalUInt64.allocationSize(value.numActiveMembers) +
        FfiConverterRoomType.allocationSize(value.roomType) +
        FfiConverterOptionalBool.allocationSize(value.isHistoryWorldReadable) +
        FfiConverterOptionalMembership.allocationSize(value.membership) +
        FfiConverterOptionalJoinRule.allocationSize(value.joinRule) +
        FfiConverterOptionalBool.allocationSize(value.isDirect) +
        FfiConverterOptionalSequenceRoomHero.allocationSize(value.heroes) +
        0;
  }
}

class Ruleset {
  final List<PatternedPushRule> content;
  final List<ConditionalPushRule> override;
  final List<SimplePushRule> room;
  final List<SimplePushRule> sender;
  final List<ConditionalPushRule> underride;

  Ruleset({
    required this.content,
    required this.override,
    required this.room,
    required this.sender,
    required this.underride,
  });
}

class FfiConverterRuleset {
  static Ruleset lift(RustBuffer buf) {
    return FfiConverterRuleset.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(Ruleset value) {
    final total_length = FfiConverterSequencePatternedPushRule.allocationSize(
            value.content) +
        FfiConverterSequenceConditionalPushRule.allocationSize(value.override) +
        FfiConverterSequenceSimplePushRule.allocationSize(value.room) +
        FfiConverterSequenceSimplePushRule.allocationSize(value.sender) +
        FfiConverterSequenceConditionalPushRule.allocationSize(
            value.underride) +
        0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<Ruleset> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final content_lifted = FfiConverterSequencePatternedPushRule.read(
        Uint8List.view(buf.buffer, new_offset));
    final content = content_lifted.value;
    new_offset += content_lifted.bytesRead;
    final override_lifted = FfiConverterSequenceConditionalPushRule.read(
        Uint8List.view(buf.buffer, new_offset));
    final override = override_lifted.value;
    new_offset += override_lifted.bytesRead;
    final room_lifted = FfiConverterSequenceSimplePushRule.read(
        Uint8List.view(buf.buffer, new_offset));
    final room = room_lifted.value;
    new_offset += room_lifted.bytesRead;
    final sender_lifted = FfiConverterSequenceSimplePushRule.read(
        Uint8List.view(buf.buffer, new_offset));
    final sender = sender_lifted.value;
    new_offset += sender_lifted.bytesRead;
    final underride_lifted = FfiConverterSequenceConditionalPushRule.read(
        Uint8List.view(buf.buffer, new_offset));
    final underride = underride_lifted.value;
    new_offset += underride_lifted.bytesRead;
    return LiftRetVal(
        Ruleset(
          content: content,
          override: override,
          room: room,
          sender: sender,
          underride: underride,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(Ruleset value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterSequencePatternedPushRule.write(
        value.content, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterSequenceConditionalPushRule.write(
        value.override, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterSequenceSimplePushRule.write(
        value.room, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterSequenceSimplePushRule.write(
        value.sender, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterSequenceConditionalPushRule.write(
        value.underride, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(Ruleset value) {
    return FfiConverterSequencePatternedPushRule.allocationSize(value.content) +
        FfiConverterSequenceConditionalPushRule.allocationSize(value.override) +
        FfiConverterSequenceSimplePushRule.allocationSize(value.room) +
        FfiConverterSequenceSimplePushRule.allocationSize(value.sender) +
        FfiConverterSequenceConditionalPushRule.allocationSize(
            value.underride) +
        0;
  }
}

class SearchUsersResults {
  final List<UserProfile> results;
  final bool limited;

  SearchUsersResults({
    required this.results,
    required this.limited,
  });
}

class FfiConverterSearchUsersResults {
  static SearchUsersResults lift(RustBuffer buf) {
    return FfiConverterSearchUsersResults.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(SearchUsersResults value) {
    final total_length =
        FfiConverterSequenceUserProfile.allocationSize(value.results) +
            FfiConverterBool.allocationSize(value.limited) +
            0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<SearchUsersResults> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final results_lifted = FfiConverterSequenceUserProfile.read(
        Uint8List.view(buf.buffer, new_offset));
    final results = results_lifted.value;
    new_offset += results_lifted.bytesRead;
    final limited_lifted =
        FfiConverterBool.read(Uint8List.view(buf.buffer, new_offset));
    final limited = limited_lifted.value;
    new_offset += limited_lifted.bytesRead;
    return LiftRetVal(
        SearchUsersResults(
          results: results,
          limited: limited,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(SearchUsersResults value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterSequenceUserProfile.write(
        value.results, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterBool.write(
        value.limited, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(SearchUsersResults value) {
    return FfiConverterSequenceUserProfile.allocationSize(value.results) +
        FfiConverterBool.allocationSize(value.limited) +
        0;
  }
}

class SecretStorageV1AesHmacSha2Properties {
  final String? iv;
  final String? mac;

  SecretStorageV1AesHmacSha2Properties({
    this.iv,
    this.mac,
  });
}

class FfiConverterSecretStorageV1AesHmacSha2Properties {
  static SecretStorageV1AesHmacSha2Properties lift(RustBuffer buf) {
    return FfiConverterSecretStorageV1AesHmacSha2Properties.read(
            buf.asUint8List())
        .value;
  }

  static RustBuffer lower(SecretStorageV1AesHmacSha2Properties value) {
    final total_length = FfiConverterOptionalString.allocationSize(value.iv) +
        FfiConverterOptionalString.allocationSize(value.mac) +
        0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<SecretStorageV1AesHmacSha2Properties> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final iv_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final iv = iv_lifted.value;
    new_offset += iv_lifted.bytesRead;
    final mac_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final mac = mac_lifted.value;
    new_offset += mac_lifted.bytesRead;
    return LiftRetVal(
        SecretStorageV1AesHmacSha2Properties(
          iv: iv,
          mac: mac,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(SecretStorageV1AesHmacSha2Properties value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterOptionalString.write(
        value.iv, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        value.mac, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(SecretStorageV1AesHmacSha2Properties value) {
    return FfiConverterOptionalString.allocationSize(value.iv) +
        FfiConverterOptionalString.allocationSize(value.mac) +
        0;
  }
}

class Session {
  final String accessToken;
  final String? refreshToken;
  final String userId;
  final String deviceId;
  final String homeserverUrl;
  final String? oidcData;
  final SlidingSyncVersion slidingSyncVersion;

  Session({
    required this.accessToken,
    this.refreshToken,
    required this.userId,
    required this.deviceId,
    required this.homeserverUrl,
    this.oidcData,
    required this.slidingSyncVersion,
  });
}

class FfiConverterSession {
  static Session lift(RustBuffer buf) {
    return FfiConverterSession.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(Session value) {
    final total_length = FfiConverterString.allocationSize(value.accessToken) +
        FfiConverterOptionalString.allocationSize(value.refreshToken) +
        FfiConverterString.allocationSize(value.userId) +
        FfiConverterString.allocationSize(value.deviceId) +
        FfiConverterString.allocationSize(value.homeserverUrl) +
        FfiConverterOptionalString.allocationSize(value.oidcData) +
        FfiConverterSlidingSyncVersion.allocationSize(
            value.slidingSyncVersion) +
        0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<Session> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final accessToken_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final accessToken = accessToken_lifted.value;
    new_offset += accessToken_lifted.bytesRead;
    final refreshToken_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final refreshToken = refreshToken_lifted.value;
    new_offset += refreshToken_lifted.bytesRead;
    final userId_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final userId = userId_lifted.value;
    new_offset += userId_lifted.bytesRead;
    final deviceId_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final deviceId = deviceId_lifted.value;
    new_offset += deviceId_lifted.bytesRead;
    final homeserverUrl_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final homeserverUrl = homeserverUrl_lifted.value;
    new_offset += homeserverUrl_lifted.bytesRead;
    final oidcData_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final oidcData = oidcData_lifted.value;
    new_offset += oidcData_lifted.bytesRead;
    final slidingSyncVersion_lifted = FfiConverterSlidingSyncVersion.read(
        Uint8List.view(buf.buffer, new_offset));
    final slidingSyncVersion = slidingSyncVersion_lifted.value;
    new_offset += slidingSyncVersion_lifted.bytesRead;
    return LiftRetVal(
        Session(
          accessToken: accessToken,
          refreshToken: refreshToken,
          userId: userId,
          deviceId: deviceId,
          homeserverUrl: homeserverUrl,
          oidcData: oidcData,
          slidingSyncVersion: slidingSyncVersion,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(Session value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterString.write(
        value.accessToken, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        value.refreshToken, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterString.write(
        value.userId, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterString.write(
        value.deviceId, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterString.write(
        value.homeserverUrl, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        value.oidcData, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterSlidingSyncVersion.write(
        value.slidingSyncVersion, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(Session value) {
    return FfiConverterString.allocationSize(value.accessToken) +
        FfiConverterOptionalString.allocationSize(value.refreshToken) +
        FfiConverterString.allocationSize(value.userId) +
        FfiConverterString.allocationSize(value.deviceId) +
        FfiConverterString.allocationSize(value.homeserverUrl) +
        FfiConverterOptionalString.allocationSize(value.oidcData) +
        FfiConverterSlidingSyncVersion.allocationSize(
            value.slidingSyncVersion) +
        0;
  }
}

class SessionVerificationRequestDetails {
  final UserProfile senderProfile;
  final String flowId;
  final String deviceId;
  final String? deviceDisplayName;
  final Timestamp firstSeenTimestamp;

  SessionVerificationRequestDetails({
    required this.senderProfile,
    required this.flowId,
    required this.deviceId,
    this.deviceDisplayName,
    required this.firstSeenTimestamp,
  });
}

class FfiConverterSessionVerificationRequestDetails {
  static SessionVerificationRequestDetails lift(RustBuffer buf) {
    return FfiConverterSessionVerificationRequestDetails.read(buf.asUint8List())
        .value;
  }

  static RustBuffer lower(SessionVerificationRequestDetails value) {
    final total_length =
        FfiConverterUserProfile.allocationSize(value.senderProfile) +
            FfiConverterString.allocationSize(value.flowId) +
            FfiConverterString.allocationSize(value.deviceId) +
            FfiConverterOptionalString.allocationSize(value.deviceDisplayName) +
            FfiConverterTimestamp.allocationSize(value.firstSeenTimestamp) +
            0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<SessionVerificationRequestDetails> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final senderProfile_lifted =
        FfiConverterUserProfile.read(Uint8List.view(buf.buffer, new_offset));
    final senderProfile = senderProfile_lifted.value;
    new_offset += senderProfile_lifted.bytesRead;
    final flowId_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final flowId = flowId_lifted.value;
    new_offset += flowId_lifted.bytesRead;
    final deviceId_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final deviceId = deviceId_lifted.value;
    new_offset += deviceId_lifted.bytesRead;
    final deviceDisplayName_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final deviceDisplayName = deviceDisplayName_lifted.value;
    new_offset += deviceDisplayName_lifted.bytesRead;
    final firstSeenTimestamp_lifted =
        FfiConverterTimestamp.read(Uint8List.view(buf.buffer, new_offset));
    final firstSeenTimestamp = firstSeenTimestamp_lifted.value;
    new_offset += firstSeenTimestamp_lifted.bytesRead;
    return LiftRetVal(
        SessionVerificationRequestDetails(
          senderProfile: senderProfile,
          flowId: flowId,
          deviceId: deviceId,
          deviceDisplayName: deviceDisplayName,
          firstSeenTimestamp: firstSeenTimestamp,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(SessionVerificationRequestDetails value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterUserProfile.write(
        value.senderProfile, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterString.write(
        value.flowId, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterString.write(
        value.deviceId, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        value.deviceDisplayName, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterTimestamp.write(
        value.firstSeenTimestamp, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(SessionVerificationRequestDetails value) {
    return FfiConverterUserProfile.allocationSize(value.senderProfile) +
        FfiConverterString.allocationSize(value.flowId) +
        FfiConverterString.allocationSize(value.deviceId) +
        FfiConverterOptionalString.allocationSize(value.deviceDisplayName) +
        FfiConverterTimestamp.allocationSize(value.firstSeenTimestamp) +
        0;
  }
}

class SetData {
  final int index;
  final TimelineItem item;

  SetData({
    required this.index,
    required this.item,
  });
}

class FfiConverterSetData {
  static SetData lift(RustBuffer buf) {
    return FfiConverterSetData.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(SetData value) {
    final total_length = FfiConverterUInt32.allocationSize(value.index) +
        TimelineItem.allocationSize(value.item) +
        0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<SetData> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final index_lifted =
        FfiConverterUInt32.read(Uint8List.view(buf.buffer, new_offset));
    final index = index_lifted.value;
    new_offset += index_lifted.bytesRead;
    final item_lifted =
        TimelineItem.read(Uint8List.view(buf.buffer, new_offset));
    final item = item_lifted.value;
    new_offset += item_lifted.bytesRead;
    return LiftRetVal(
        SetData(
          index: index,
          item: item,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(SetData value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterUInt32.write(
        value.index, Uint8List.view(buf.buffer, new_offset));
    new_offset +=
        TimelineItem.write(value.item, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(SetData value) {
    return FfiConverterUInt32.allocationSize(value.index) +
        TimelineItem.allocationSize(value.item) +
        0;
  }
}

class SimplePushRule {
  final List<Action> actions;
  final bool default_;
  final bool enabled;
  final String ruleId;

  SimplePushRule({
    required this.actions,
    required this.default_,
    required this.enabled,
    required this.ruleId,
  });
}

class FfiConverterSimplePushRule {
  static SimplePushRule lift(RustBuffer buf) {
    return FfiConverterSimplePushRule.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(SimplePushRule value) {
    final total_length =
        FfiConverterSequenceAction.allocationSize(value.actions) +
            FfiConverterBool.allocationSize(value.default_) +
            FfiConverterBool.allocationSize(value.enabled) +
            FfiConverterString.allocationSize(value.ruleId) +
            0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<SimplePushRule> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final actions_lifted =
        FfiConverterSequenceAction.read(Uint8List.view(buf.buffer, new_offset));
    final actions = actions_lifted.value;
    new_offset += actions_lifted.bytesRead;
    final default__lifted =
        FfiConverterBool.read(Uint8List.view(buf.buffer, new_offset));
    final default_ = default__lifted.value;
    new_offset += default__lifted.bytesRead;
    final enabled_lifted =
        FfiConverterBool.read(Uint8List.view(buf.buffer, new_offset));
    final enabled = enabled_lifted.value;
    new_offset += enabled_lifted.bytesRead;
    final ruleId_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final ruleId = ruleId_lifted.value;
    new_offset += ruleId_lifted.bytesRead;
    return LiftRetVal(
        SimplePushRule(
          actions: actions,
          default_: default_,
          enabled: enabled,
          ruleId: ruleId,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(SimplePushRule value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterSequenceAction.write(
        value.actions, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterBool.write(
        value.default_, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterBool.write(
        value.enabled, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterString.write(
        value.ruleId, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(SimplePushRule value) {
    return FfiConverterSequenceAction.allocationSize(value.actions) +
        FfiConverterBool.allocationSize(value.default_) +
        FfiConverterBool.allocationSize(value.enabled) +
        FfiConverterString.allocationSize(value.ruleId) +
        0;
  }
}

class SuccessorRoom {
  final String roomId;
  final String? reason;

  SuccessorRoom({
    required this.roomId,
    this.reason,
  });
}

class FfiConverterSuccessorRoom {
  static SuccessorRoom lift(RustBuffer buf) {
    return FfiConverterSuccessorRoom.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(SuccessorRoom value) {
    final total_length = FfiConverterString.allocationSize(value.roomId) +
        FfiConverterOptionalString.allocationSize(value.reason) +
        0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<SuccessorRoom> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final roomId_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final roomId = roomId_lifted.value;
    new_offset += roomId_lifted.bytesRead;
    final reason_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final reason = reason_lifted.value;
    new_offset += reason_lifted.bytesRead;
    return LiftRetVal(
        SuccessorRoom(
          roomId: roomId,
          reason: reason,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(SuccessorRoom value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterString.write(
        value.roomId, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        value.reason, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(SuccessorRoom value) {
    return FfiConverterString.allocationSize(value.roomId) +
        FfiConverterOptionalString.allocationSize(value.reason) +
        0;
  }
}

class TagInfo {
  final double? order;

  TagInfo({
    this.order,
  });
}

class FfiConverterTagInfo {
  static TagInfo lift(RustBuffer buf) {
    return FfiConverterTagInfo.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(TagInfo value) {
    final total_length =
        FfiConverterOptionalDouble64.allocationSize(value.order) + 0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<TagInfo> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final order_lifted = FfiConverterOptionalDouble64.read(
        Uint8List.view(buf.buffer, new_offset));
    final order = order_lifted.value;
    new_offset += order_lifted.bytesRead;
    return LiftRetVal(
        TagInfo(
          order: order,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(TagInfo value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterOptionalDouble64.write(
        value.order, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(TagInfo value) {
    return FfiConverterOptionalDouble64.allocationSize(value.order) + 0;
  }
}

class TextMessageContent {
  final String body;
  final FormattedBody? formatted;

  TextMessageContent({
    required this.body,
    this.formatted,
  });
}

class FfiConverterTextMessageContent {
  static TextMessageContent lift(RustBuffer buf) {
    return FfiConverterTextMessageContent.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(TextMessageContent value) {
    final total_length = FfiConverterString.allocationSize(value.body) +
        FfiConverterOptionalFormattedBody.allocationSize(value.formatted) +
        0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<TextMessageContent> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final body_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final body = body_lifted.value;
    new_offset += body_lifted.bytesRead;
    final formatted_lifted = FfiConverterOptionalFormattedBody.read(
        Uint8List.view(buf.buffer, new_offset));
    final formatted = formatted_lifted.value;
    new_offset += formatted_lifted.bytesRead;
    return LiftRetVal(
        TextMessageContent(
          body: body,
          formatted: formatted,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(TextMessageContent value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterString.write(
        value.body, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalFormattedBody.write(
        value.formatted, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(TextMessageContent value) {
    return FfiConverterString.allocationSize(value.body) +
        FfiConverterOptionalFormattedBody.allocationSize(value.formatted) +
        0;
  }
}

class ThreadSubscription {
  final bool automatic;

  ThreadSubscription({
    required this.automatic,
  });
}

class FfiConverterThreadSubscription {
  static ThreadSubscription lift(RustBuffer buf) {
    return FfiConverterThreadSubscription.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(ThreadSubscription value) {
    final total_length = FfiConverterBool.allocationSize(value.automatic) + 0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<ThreadSubscription> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final automatic_lifted =
        FfiConverterBool.read(Uint8List.view(buf.buffer, new_offset));
    final automatic = automatic_lifted.value;
    new_offset += automatic_lifted.bytesRead;
    return LiftRetVal(
        ThreadSubscription(
          automatic: automatic,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(ThreadSubscription value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterBool.write(
        value.automatic, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(ThreadSubscription value) {
    return FfiConverterBool.allocationSize(value.automatic) + 0;
  }
}

class ThumbnailInfo {
  final int? height;
  final int? width;
  final String? mimetype;
  final int? size;

  ThumbnailInfo({
    this.height,
    this.width,
    this.mimetype,
    this.size,
  });
}

class FfiConverterThumbnailInfo {
  static ThumbnailInfo lift(RustBuffer buf) {
    return FfiConverterThumbnailInfo.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(ThumbnailInfo value) {
    final total_length =
        FfiConverterOptionalUInt64.allocationSize(value.height) +
            FfiConverterOptionalUInt64.allocationSize(value.width) +
            FfiConverterOptionalString.allocationSize(value.mimetype) +
            FfiConverterOptionalUInt64.allocationSize(value.size) +
            0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<ThumbnailInfo> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final height_lifted =
        FfiConverterOptionalUInt64.read(Uint8List.view(buf.buffer, new_offset));
    final height = height_lifted.value;
    new_offset += height_lifted.bytesRead;
    final width_lifted =
        FfiConverterOptionalUInt64.read(Uint8List.view(buf.buffer, new_offset));
    final width = width_lifted.value;
    new_offset += width_lifted.bytesRead;
    final mimetype_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final mimetype = mimetype_lifted.value;
    new_offset += mimetype_lifted.bytesRead;
    final size_lifted =
        FfiConverterOptionalUInt64.read(Uint8List.view(buf.buffer, new_offset));
    final size = size_lifted.value;
    new_offset += size_lifted.bytesRead;
    return LiftRetVal(
        ThumbnailInfo(
          height: height,
          width: width,
          mimetype: mimetype,
          size: size,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(ThumbnailInfo value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterOptionalUInt64.write(
        value.height, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalUInt64.write(
        value.width, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        value.mimetype, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalUInt64.write(
        value.size, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(ThumbnailInfo value) {
    return FfiConverterOptionalUInt64.allocationSize(value.height) +
        FfiConverterOptionalUInt64.allocationSize(value.width) +
        FfiConverterOptionalString.allocationSize(value.mimetype) +
        FfiConverterOptionalUInt64.allocationSize(value.size) +
        0;
  }
}

class TimelineConfiguration {
  final TimelineFocus focus;
  final TimelineFilter filter;
  final String? internalIdPrefix;
  final DateDividerMode dateDividerMode;
  final bool trackReadReceipts;
  final bool reportUtds;

  TimelineConfiguration({
    required this.focus,
    required this.filter,
    this.internalIdPrefix,
    required this.dateDividerMode,
    required this.trackReadReceipts,
    required this.reportUtds,
  });
}

class FfiConverterTimelineConfiguration {
  static TimelineConfiguration lift(RustBuffer buf) {
    return FfiConverterTimelineConfiguration.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(TimelineConfiguration value) {
    final total_length = FfiConverterTimelineFocus.allocationSize(value.focus) +
        FfiConverterTimelineFilter.allocationSize(value.filter) +
        FfiConverterOptionalString.allocationSize(value.internalIdPrefix) +
        FfiConverterDateDividerMode.allocationSize(value.dateDividerMode) +
        FfiConverterBool.allocationSize(value.trackReadReceipts) +
        FfiConverterBool.allocationSize(value.reportUtds) +
        0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<TimelineConfiguration> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final focus_lifted =
        FfiConverterTimelineFocus.read(Uint8List.view(buf.buffer, new_offset));
    final focus = focus_lifted.value;
    new_offset += focus_lifted.bytesRead;
    final filter_lifted =
        FfiConverterTimelineFilter.read(Uint8List.view(buf.buffer, new_offset));
    final filter = filter_lifted.value;
    new_offset += filter_lifted.bytesRead;
    final internalIdPrefix_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final internalIdPrefix = internalIdPrefix_lifted.value;
    new_offset += internalIdPrefix_lifted.bytesRead;
    final dateDividerMode_lifted = FfiConverterDateDividerMode.read(
        Uint8List.view(buf.buffer, new_offset));
    final dateDividerMode = dateDividerMode_lifted.value;
    new_offset += dateDividerMode_lifted.bytesRead;
    final trackReadReceipts_lifted =
        FfiConverterBool.read(Uint8List.view(buf.buffer, new_offset));
    final trackReadReceipts = trackReadReceipts_lifted.value;
    new_offset += trackReadReceipts_lifted.bytesRead;
    final reportUtds_lifted =
        FfiConverterBool.read(Uint8List.view(buf.buffer, new_offset));
    final reportUtds = reportUtds_lifted.value;
    new_offset += reportUtds_lifted.bytesRead;
    return LiftRetVal(
        TimelineConfiguration(
          focus: focus,
          filter: filter,
          internalIdPrefix: internalIdPrefix,
          dateDividerMode: dateDividerMode,
          trackReadReceipts: trackReadReceipts,
          reportUtds: reportUtds,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(TimelineConfiguration value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterTimelineFocus.write(
        value.focus, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterTimelineFilter.write(
        value.filter, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        value.internalIdPrefix, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterDateDividerMode.write(
        value.dateDividerMode, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterBool.write(
        value.trackReadReceipts, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterBool.write(
        value.reportUtds, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(TimelineConfiguration value) {
    return FfiConverterTimelineFocus.allocationSize(value.focus) +
        FfiConverterTimelineFilter.allocationSize(value.filter) +
        FfiConverterOptionalString.allocationSize(value.internalIdPrefix) +
        FfiConverterDateDividerMode.allocationSize(value.dateDividerMode) +
        FfiConverterBool.allocationSize(value.trackReadReceipts) +
        FfiConverterBool.allocationSize(value.reportUtds) +
        0;
  }
}

class TimelineUniqueId {
  final String id;

  TimelineUniqueId({
    required this.id,
  });
}

class FfiConverterTimelineUniqueId {
  static TimelineUniqueId lift(RustBuffer buf) {
    return FfiConverterTimelineUniqueId.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(TimelineUniqueId value) {
    final total_length = FfiConverterString.allocationSize(value.id) + 0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<TimelineUniqueId> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final id_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final id = id_lifted.value;
    new_offset += id_lifted.bytesRead;
    return LiftRetVal(
        TimelineUniqueId(
          id: id,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(TimelineUniqueId value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterString.write(
        value.id, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(TimelineUniqueId value) {
    return FfiConverterString.allocationSize(value.id) + 0;
  }
}

class TracingConfiguration {
  final LogLevel logLevel;
  final List<TraceLogPacks> traceLogPacks;
  final List<String> extraTargets;
  final bool writeToStdoutOrSystem;
  final TracingFileConfiguration? writeToFiles;

  TracingConfiguration({
    required this.logLevel,
    required this.traceLogPacks,
    required this.extraTargets,
    required this.writeToStdoutOrSystem,
    this.writeToFiles,
  });
}

class FfiConverterTracingConfiguration {
  static TracingConfiguration lift(RustBuffer buf) {
    return FfiConverterTracingConfiguration.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(TracingConfiguration value) {
    final total_length = FfiConverterLogLevel.allocationSize(value.logLevel) +
        FfiConverterSequenceTraceLogPacks.allocationSize(value.traceLogPacks) +
        FfiConverterSequenceString.allocationSize(value.extraTargets) +
        FfiConverterBool.allocationSize(value.writeToStdoutOrSystem) +
        FfiConverterOptionalTracingFileConfiguration.allocationSize(
            value.writeToFiles) +
        0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<TracingConfiguration> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final logLevel_lifted =
        FfiConverterLogLevel.read(Uint8List.view(buf.buffer, new_offset));
    final logLevel = logLevel_lifted.value;
    new_offset += logLevel_lifted.bytesRead;
    final traceLogPacks_lifted = FfiConverterSequenceTraceLogPacks.read(
        Uint8List.view(buf.buffer, new_offset));
    final traceLogPacks = traceLogPacks_lifted.value;
    new_offset += traceLogPacks_lifted.bytesRead;
    final extraTargets_lifted =
        FfiConverterSequenceString.read(Uint8List.view(buf.buffer, new_offset));
    final extraTargets = extraTargets_lifted.value;
    new_offset += extraTargets_lifted.bytesRead;
    final writeToStdoutOrSystem_lifted =
        FfiConverterBool.read(Uint8List.view(buf.buffer, new_offset));
    final writeToStdoutOrSystem = writeToStdoutOrSystem_lifted.value;
    new_offset += writeToStdoutOrSystem_lifted.bytesRead;
    final writeToFiles_lifted =
        FfiConverterOptionalTracingFileConfiguration.read(
            Uint8List.view(buf.buffer, new_offset));
    final writeToFiles = writeToFiles_lifted.value;
    new_offset += writeToFiles_lifted.bytesRead;
    return LiftRetVal(
        TracingConfiguration(
          logLevel: logLevel,
          traceLogPacks: traceLogPacks,
          extraTargets: extraTargets,
          writeToStdoutOrSystem: writeToStdoutOrSystem,
          writeToFiles: writeToFiles,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(TracingConfiguration value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterLogLevel.write(
        value.logLevel, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterSequenceTraceLogPacks.write(
        value.traceLogPacks, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterSequenceString.write(
        value.extraTargets, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterBool.write(
        value.writeToStdoutOrSystem, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalTracingFileConfiguration.write(
        value.writeToFiles, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(TracingConfiguration value) {
    return FfiConverterLogLevel.allocationSize(value.logLevel) +
        FfiConverterSequenceTraceLogPacks.allocationSize(value.traceLogPacks) +
        FfiConverterSequenceString.allocationSize(value.extraTargets) +
        FfiConverterBool.allocationSize(value.writeToStdoutOrSystem) +
        FfiConverterOptionalTracingFileConfiguration.allocationSize(
            value.writeToFiles) +
        0;
  }
}

class TracingFileConfiguration {
  final String path;
  final String filePrefix;
  final String? fileSuffix;
  final int? maxFiles;

  TracingFileConfiguration({
    required this.path,
    required this.filePrefix,
    this.fileSuffix,
    this.maxFiles,
  });
}

class FfiConverterTracingFileConfiguration {
  static TracingFileConfiguration lift(RustBuffer buf) {
    return FfiConverterTracingFileConfiguration.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(TracingFileConfiguration value) {
    final total_length = FfiConverterString.allocationSize(value.path) +
        FfiConverterString.allocationSize(value.filePrefix) +
        FfiConverterOptionalString.allocationSize(value.fileSuffix) +
        FfiConverterOptionalUInt64.allocationSize(value.maxFiles) +
        0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<TracingFileConfiguration> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final path_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final path = path_lifted.value;
    new_offset += path_lifted.bytesRead;
    final filePrefix_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final filePrefix = filePrefix_lifted.value;
    new_offset += filePrefix_lifted.bytesRead;
    final fileSuffix_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final fileSuffix = fileSuffix_lifted.value;
    new_offset += fileSuffix_lifted.bytesRead;
    final maxFiles_lifted =
        FfiConverterOptionalUInt64.read(Uint8List.view(buf.buffer, new_offset));
    final maxFiles = maxFiles_lifted.value;
    new_offset += maxFiles_lifted.bytesRead;
    return LiftRetVal(
        TracingFileConfiguration(
          path: path,
          filePrefix: filePrefix,
          fileSuffix: fileSuffix,
          maxFiles: maxFiles,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(TracingFileConfiguration value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterString.write(
        value.path, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterString.write(
        value.filePrefix, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        value.fileSuffix, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalUInt64.write(
        value.maxFiles, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(TracingFileConfiguration value) {
    return FfiConverterString.allocationSize(value.path) +
        FfiConverterString.allocationSize(value.filePrefix) +
        FfiConverterOptionalString.allocationSize(value.fileSuffix) +
        FfiConverterOptionalUInt64.allocationSize(value.maxFiles) +
        0;
  }
}

class TransmissionProgress {
  final int current;
  final int total;

  TransmissionProgress({
    required this.current,
    required this.total,
  });
}

class FfiConverterTransmissionProgress {
  static TransmissionProgress lift(RustBuffer buf) {
    return FfiConverterTransmissionProgress.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(TransmissionProgress value) {
    final total_length = FfiConverterUInt64.allocationSize(value.current) +
        FfiConverterUInt64.allocationSize(value.total) +
        0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<TransmissionProgress> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final current_lifted =
        FfiConverterUInt64.read(Uint8List.view(buf.buffer, new_offset));
    final current = current_lifted.value;
    new_offset += current_lifted.bytesRead;
    final total_lifted =
        FfiConverterUInt64.read(Uint8List.view(buf.buffer, new_offset));
    final total = total_lifted.value;
    new_offset += total_lifted.bytesRead;
    return LiftRetVal(
        TransmissionProgress(
          current: current,
          total: total,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(TransmissionProgress value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterUInt64.write(
        value.current, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterUInt64.write(
        value.total, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(TransmissionProgress value) {
    return FfiConverterUInt64.allocationSize(value.current) +
        FfiConverterUInt64.allocationSize(value.total) +
        0;
  }
}

class UnableToDecryptInfo {
  final String eventId;
  final int? timeToDecryptMs;
  final UtdCause cause;
  final int eventLocalAgeMillis;
  final bool userTrustsOwnIdentity;
  final String senderHomeserver;
  final String? ownHomeserver;

  UnableToDecryptInfo({
    required this.eventId,
    this.timeToDecryptMs,
    required this.cause,
    required this.eventLocalAgeMillis,
    required this.userTrustsOwnIdentity,
    required this.senderHomeserver,
    this.ownHomeserver,
  });
}

class FfiConverterUnableToDecryptInfo {
  static UnableToDecryptInfo lift(RustBuffer buf) {
    return FfiConverterUnableToDecryptInfo.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(UnableToDecryptInfo value) {
    final total_length = FfiConverterString.allocationSize(value.eventId) +
        FfiConverterOptionalUInt64.allocationSize(value.timeToDecryptMs) +
        FfiConverterUtdCause.allocationSize(value.cause) +
        FfiConverterInt64.allocationSize(value.eventLocalAgeMillis) +
        FfiConverterBool.allocationSize(value.userTrustsOwnIdentity) +
        FfiConverterString.allocationSize(value.senderHomeserver) +
        FfiConverterOptionalString.allocationSize(value.ownHomeserver) +
        0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<UnableToDecryptInfo> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final eventId_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final eventId = eventId_lifted.value;
    new_offset += eventId_lifted.bytesRead;
    final timeToDecryptMs_lifted =
        FfiConverterOptionalUInt64.read(Uint8List.view(buf.buffer, new_offset));
    final timeToDecryptMs = timeToDecryptMs_lifted.value;
    new_offset += timeToDecryptMs_lifted.bytesRead;
    final cause_lifted =
        FfiConverterUtdCause.read(Uint8List.view(buf.buffer, new_offset));
    final cause = cause_lifted.value;
    new_offset += cause_lifted.bytesRead;
    final eventLocalAgeMillis_lifted =
        FfiConverterInt64.read(Uint8List.view(buf.buffer, new_offset));
    final eventLocalAgeMillis = eventLocalAgeMillis_lifted.value;
    new_offset += eventLocalAgeMillis_lifted.bytesRead;
    final userTrustsOwnIdentity_lifted =
        FfiConverterBool.read(Uint8List.view(buf.buffer, new_offset));
    final userTrustsOwnIdentity = userTrustsOwnIdentity_lifted.value;
    new_offset += userTrustsOwnIdentity_lifted.bytesRead;
    final senderHomeserver_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final senderHomeserver = senderHomeserver_lifted.value;
    new_offset += senderHomeserver_lifted.bytesRead;
    final ownHomeserver_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final ownHomeserver = ownHomeserver_lifted.value;
    new_offset += ownHomeserver_lifted.bytesRead;
    return LiftRetVal(
        UnableToDecryptInfo(
          eventId: eventId,
          timeToDecryptMs: timeToDecryptMs,
          cause: cause,
          eventLocalAgeMillis: eventLocalAgeMillis,
          userTrustsOwnIdentity: userTrustsOwnIdentity,
          senderHomeserver: senderHomeserver,
          ownHomeserver: ownHomeserver,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(UnableToDecryptInfo value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterString.write(
        value.eventId, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalUInt64.write(
        value.timeToDecryptMs, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterUtdCause.write(
        value.cause, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterInt64.write(
        value.eventLocalAgeMillis, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterBool.write(
        value.userTrustsOwnIdentity, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterString.write(
        value.senderHomeserver, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        value.ownHomeserver, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(UnableToDecryptInfo value) {
    return FfiConverterString.allocationSize(value.eventId) +
        FfiConverterOptionalUInt64.allocationSize(value.timeToDecryptMs) +
        FfiConverterUtdCause.allocationSize(value.cause) +
        FfiConverterInt64.allocationSize(value.eventLocalAgeMillis) +
        FfiConverterBool.allocationSize(value.userTrustsOwnIdentity) +
        FfiConverterString.allocationSize(value.senderHomeserver) +
        FfiConverterOptionalString.allocationSize(value.ownHomeserver) +
        0;
  }
}

class UnstableAudioDetailsContent {
  final Duration duration;
  final List<int> waveform;

  UnstableAudioDetailsContent({
    required this.duration,
    required this.waveform,
  });
}

class FfiConverterUnstableAudioDetailsContent {
  static UnstableAudioDetailsContent lift(RustBuffer buf) {
    return FfiConverterUnstableAudioDetailsContent.read(buf.asUint8List())
        .value;
  }

  static RustBuffer lower(UnstableAudioDetailsContent value) {
    final total_length = FfiConverterDuration.allocationSize(value.duration) +
        FfiConverterSequenceUInt16.allocationSize(value.waveform) +
        0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<UnstableAudioDetailsContent> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final duration_lifted =
        FfiConverterDuration.read(Uint8List.view(buf.buffer, new_offset));
    final duration = duration_lifted.value;
    new_offset += duration_lifted.bytesRead;
    final waveform_lifted =
        FfiConverterSequenceUInt16.read(Uint8List.view(buf.buffer, new_offset));
    final waveform = waveform_lifted.value;
    new_offset += waveform_lifted.bytesRead;
    return LiftRetVal(
        UnstableAudioDetailsContent(
          duration: duration,
          waveform: waveform,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(UnstableAudioDetailsContent value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterDuration.write(
        value.duration, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterSequenceUInt16.write(
        value.waveform, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(UnstableAudioDetailsContent value) {
    return FfiConverterDuration.allocationSize(value.duration) +
        FfiConverterSequenceUInt16.allocationSize(value.waveform) +
        0;
  }
}

class UnstableVoiceContent {
  UnstableVoiceContent();
}

class FfiConverterUnstableVoiceContent {
  static UnstableVoiceContent lift(RustBuffer buf) {
    return FfiConverterUnstableVoiceContent.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(UnstableVoiceContent value) {
    final total_length = 0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<UnstableVoiceContent> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(UnstableVoiceContent(), new_offset - buf.offsetInBytes);
  }

  static int write(UnstableVoiceContent value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(UnstableVoiceContent value) {
    return 0;
  }
}

class UploadParameters {
  final UploadSource source;
  final String? caption;
  final FormattedBody? formattedCaption;
  final Mentions? mentions;
  final String? inReplyTo;
  final bool useSendQueue;

  UploadParameters({
    required this.source,
    this.caption,
    this.formattedCaption,
    this.mentions,
    this.inReplyTo,
    required this.useSendQueue,
  });
}

class FfiConverterUploadParameters {
  static UploadParameters lift(RustBuffer buf) {
    return FfiConverterUploadParameters.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(UploadParameters value) {
    final total_length = FfiConverterUploadSource.allocationSize(value.source) +
        FfiConverterOptionalString.allocationSize(value.caption) +
        FfiConverterOptionalFormattedBody.allocationSize(
            value.formattedCaption) +
        FfiConverterOptionalMentions.allocationSize(value.mentions) +
        FfiConverterOptionalString.allocationSize(value.inReplyTo) +
        FfiConverterBool.allocationSize(value.useSendQueue) +
        0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<UploadParameters> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final source_lifted =
        FfiConverterUploadSource.read(Uint8List.view(buf.buffer, new_offset));
    final source = source_lifted.value;
    new_offset += source_lifted.bytesRead;
    final caption_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final caption = caption_lifted.value;
    new_offset += caption_lifted.bytesRead;
    final formattedCaption_lifted = FfiConverterOptionalFormattedBody.read(
        Uint8List.view(buf.buffer, new_offset));
    final formattedCaption = formattedCaption_lifted.value;
    new_offset += formattedCaption_lifted.bytesRead;
    final mentions_lifted = FfiConverterOptionalMentions.read(
        Uint8List.view(buf.buffer, new_offset));
    final mentions = mentions_lifted.value;
    new_offset += mentions_lifted.bytesRead;
    final inReplyTo_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final inReplyTo = inReplyTo_lifted.value;
    new_offset += inReplyTo_lifted.bytesRead;
    final useSendQueue_lifted =
        FfiConverterBool.read(Uint8List.view(buf.buffer, new_offset));
    final useSendQueue = useSendQueue_lifted.value;
    new_offset += useSendQueue_lifted.bytesRead;
    return LiftRetVal(
        UploadParameters(
          source: source,
          caption: caption,
          formattedCaption: formattedCaption,
          mentions: mentions,
          inReplyTo: inReplyTo,
          useSendQueue: useSendQueue,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(UploadParameters value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterUploadSource.write(
        value.source, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        value.caption, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalFormattedBody.write(
        value.formattedCaption, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalMentions.write(
        value.mentions, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        value.inReplyTo, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterBool.write(
        value.useSendQueue, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(UploadParameters value) {
    return FfiConverterUploadSource.allocationSize(value.source) +
        FfiConverterOptionalString.allocationSize(value.caption) +
        FfiConverterOptionalFormattedBody.allocationSize(
            value.formattedCaption) +
        FfiConverterOptionalMentions.allocationSize(value.mentions) +
        FfiConverterOptionalString.allocationSize(value.inReplyTo) +
        FfiConverterBool.allocationSize(value.useSendQueue) +
        0;
  }
}

class UserPowerLevelUpdate {
  final String userId;
  final int powerLevel;

  UserPowerLevelUpdate({
    required this.userId,
    required this.powerLevel,
  });
}

class FfiConverterUserPowerLevelUpdate {
  static UserPowerLevelUpdate lift(RustBuffer buf) {
    return FfiConverterUserPowerLevelUpdate.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(UserPowerLevelUpdate value) {
    final total_length = FfiConverterString.allocationSize(value.userId) +
        FfiConverterInt64.allocationSize(value.powerLevel) +
        0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<UserPowerLevelUpdate> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final userId_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final userId = userId_lifted.value;
    new_offset += userId_lifted.bytesRead;
    final powerLevel_lifted =
        FfiConverterInt64.read(Uint8List.view(buf.buffer, new_offset));
    final powerLevel = powerLevel_lifted.value;
    new_offset += powerLevel_lifted.bytesRead;
    return LiftRetVal(
        UserPowerLevelUpdate(
          userId: userId,
          powerLevel: powerLevel,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(UserPowerLevelUpdate value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterString.write(
        value.userId, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterInt64.write(
        value.powerLevel, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(UserPowerLevelUpdate value) {
    return FfiConverterString.allocationSize(value.userId) +
        FfiConverterInt64.allocationSize(value.powerLevel) +
        0;
  }
}

class UserProfile {
  final String userId;
  final String? displayName;
  final String? avatarUrl;

  UserProfile({
    required this.userId,
    this.displayName,
    this.avatarUrl,
  });
}

class FfiConverterUserProfile {
  static UserProfile lift(RustBuffer buf) {
    return FfiConverterUserProfile.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(UserProfile value) {
    final total_length = FfiConverterString.allocationSize(value.userId) +
        FfiConverterOptionalString.allocationSize(value.displayName) +
        FfiConverterOptionalString.allocationSize(value.avatarUrl) +
        0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<UserProfile> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final userId_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final userId = userId_lifted.value;
    new_offset += userId_lifted.bytesRead;
    final displayName_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final displayName = displayName_lifted.value;
    new_offset += displayName_lifted.bytesRead;
    final avatarUrl_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final avatarUrl = avatarUrl_lifted.value;
    new_offset += avatarUrl_lifted.bytesRead;
    return LiftRetVal(
        UserProfile(
          userId: userId,
          displayName: displayName,
          avatarUrl: avatarUrl,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(UserProfile value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterString.write(
        value.userId, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        value.displayName, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        value.avatarUrl, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(UserProfile value) {
    return FfiConverterString.allocationSize(value.userId) +
        FfiConverterOptionalString.allocationSize(value.displayName) +
        FfiConverterOptionalString.allocationSize(value.avatarUrl) +
        0;
  }
}

class FfiConverterUserTagName {
  static UserTagName lift(RustBuffer buf) {
    return FfiConverterUserTagName.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(UserTagName value) {
    final total_length = FfiConverterString.allocationSize(value.name) + 0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<UserTagName> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final name_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final name = name_lifted.value;
    new_offset += name_lifted.bytesRead;
    return LiftRetVal(
        UserTagName(
          name,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(UserTagName value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterString.write(
        value.name, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(UserTagName value) {
    return FfiConverterString.allocationSize(value.name) + 0;
  }
}

class VideoInfo {
  final Duration? duration;
  final int? height;
  final int? width;
  final String? mimetype;
  final int? size;
  final ThumbnailInfo? thumbnailInfo;
  final MediaSource? thumbnailSource;
  final String? blurhash;

  VideoInfo({
    this.duration,
    this.height,
    this.width,
    this.mimetype,
    this.size,
    this.thumbnailInfo,
    this.thumbnailSource,
    this.blurhash,
  });
}

class FfiConverterVideoInfo {
  static VideoInfo lift(RustBuffer buf) {
    return FfiConverterVideoInfo.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(VideoInfo value) {
    final total_length = FfiConverterOptionalDuration.allocationSize(
            value.duration) +
        FfiConverterOptionalUInt64.allocationSize(value.height) +
        FfiConverterOptionalUInt64.allocationSize(value.width) +
        FfiConverterOptionalString.allocationSize(value.mimetype) +
        FfiConverterOptionalUInt64.allocationSize(value.size) +
        FfiConverterOptionalThumbnailInfo.allocationSize(value.thumbnailInfo) +
        FfiConverterOptionalMediaSource.allocationSize(value.thumbnailSource) +
        FfiConverterOptionalString.allocationSize(value.blurhash) +
        0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<VideoInfo> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final duration_lifted = FfiConverterOptionalDuration.read(
        Uint8List.view(buf.buffer, new_offset));
    final duration = duration_lifted.value;
    new_offset += duration_lifted.bytesRead;
    final height_lifted =
        FfiConverterOptionalUInt64.read(Uint8List.view(buf.buffer, new_offset));
    final height = height_lifted.value;
    new_offset += height_lifted.bytesRead;
    final width_lifted =
        FfiConverterOptionalUInt64.read(Uint8List.view(buf.buffer, new_offset));
    final width = width_lifted.value;
    new_offset += width_lifted.bytesRead;
    final mimetype_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final mimetype = mimetype_lifted.value;
    new_offset += mimetype_lifted.bytesRead;
    final size_lifted =
        FfiConverterOptionalUInt64.read(Uint8List.view(buf.buffer, new_offset));
    final size = size_lifted.value;
    new_offset += size_lifted.bytesRead;
    final thumbnailInfo_lifted = FfiConverterOptionalThumbnailInfo.read(
        Uint8List.view(buf.buffer, new_offset));
    final thumbnailInfo = thumbnailInfo_lifted.value;
    new_offset += thumbnailInfo_lifted.bytesRead;
    final thumbnailSource_lifted = FfiConverterOptionalMediaSource.read(
        Uint8List.view(buf.buffer, new_offset));
    final thumbnailSource = thumbnailSource_lifted.value;
    new_offset += thumbnailSource_lifted.bytesRead;
    final blurhash_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final blurhash = blurhash_lifted.value;
    new_offset += blurhash_lifted.bytesRead;
    return LiftRetVal(
        VideoInfo(
          duration: duration,
          height: height,
          width: width,
          mimetype: mimetype,
          size: size,
          thumbnailInfo: thumbnailInfo,
          thumbnailSource: thumbnailSource,
          blurhash: blurhash,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(VideoInfo value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterOptionalDuration.write(
        value.duration, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalUInt64.write(
        value.height, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalUInt64.write(
        value.width, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        value.mimetype, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalUInt64.write(
        value.size, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalThumbnailInfo.write(
        value.thumbnailInfo, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalMediaSource.write(
        value.thumbnailSource, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        value.blurhash, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(VideoInfo value) {
    return FfiConverterOptionalDuration.allocationSize(value.duration) +
        FfiConverterOptionalUInt64.allocationSize(value.height) +
        FfiConverterOptionalUInt64.allocationSize(value.width) +
        FfiConverterOptionalString.allocationSize(value.mimetype) +
        FfiConverterOptionalUInt64.allocationSize(value.size) +
        FfiConverterOptionalThumbnailInfo.allocationSize(value.thumbnailInfo) +
        FfiConverterOptionalMediaSource.allocationSize(value.thumbnailSource) +
        FfiConverterOptionalString.allocationSize(value.blurhash) +
        0;
  }
}

class VideoMessageContent {
  final String filename;
  final String? caption;
  final FormattedBody? formattedCaption;
  final MediaSource source;
  final VideoInfo? info;

  VideoMessageContent({
    required this.filename,
    this.caption,
    this.formattedCaption,
    required this.source,
    this.info,
  });
}

class FfiConverterVideoMessageContent {
  static VideoMessageContent lift(RustBuffer buf) {
    return FfiConverterVideoMessageContent.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(VideoMessageContent value) {
    final total_length = FfiConverterString.allocationSize(value.filename) +
        FfiConverterOptionalString.allocationSize(value.caption) +
        FfiConverterOptionalFormattedBody.allocationSize(
            value.formattedCaption) +
        MediaSource.allocationSize(value.source) +
        FfiConverterOptionalVideoInfo.allocationSize(value.info) +
        0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<VideoMessageContent> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final filename_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final filename = filename_lifted.value;
    new_offset += filename_lifted.bytesRead;
    final caption_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final caption = caption_lifted.value;
    new_offset += caption_lifted.bytesRead;
    final formattedCaption_lifted = FfiConverterOptionalFormattedBody.read(
        Uint8List.view(buf.buffer, new_offset));
    final formattedCaption = formattedCaption_lifted.value;
    new_offset += formattedCaption_lifted.bytesRead;
    final source_lifted =
        MediaSource.read(Uint8List.view(buf.buffer, new_offset));
    final source = source_lifted.value;
    new_offset += source_lifted.bytesRead;
    final info_lifted = FfiConverterOptionalVideoInfo.read(
        Uint8List.view(buf.buffer, new_offset));
    final info = info_lifted.value;
    new_offset += info_lifted.bytesRead;
    return LiftRetVal(
        VideoMessageContent(
          filename: filename,
          caption: caption,
          formattedCaption: formattedCaption,
          source: source,
          info: info,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(VideoMessageContent value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterString.write(
        value.filename, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        value.caption, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalFormattedBody.write(
        value.formattedCaption, Uint8List.view(buf.buffer, new_offset));
    new_offset +=
        MediaSource.write(value.source, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalVideoInfo.write(
        value.info, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(VideoMessageContent value) {
    return FfiConverterString.allocationSize(value.filename) +
        FfiConverterOptionalString.allocationSize(value.caption) +
        FfiConverterOptionalFormattedBody.allocationSize(
            value.formattedCaption) +
        MediaSource.allocationSize(value.source) +
        FfiConverterOptionalVideoInfo.allocationSize(value.info) +
        0;
  }
}

class WidgetCapabilities {
  final List<WidgetEventFilter> read;
  final List<WidgetEventFilter> send;
  final bool requiresClient;
  final bool updateDelayedEvent;
  final bool sendDelayedEvent;

  WidgetCapabilities({
    required this.read,
    required this.send,
    required this.requiresClient,
    required this.updateDelayedEvent,
    required this.sendDelayedEvent,
  });
}

class FfiConverterWidgetCapabilities {
  static WidgetCapabilities lift(RustBuffer buf) {
    return FfiConverterWidgetCapabilities.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(WidgetCapabilities value) {
    final total_length =
        FfiConverterSequenceWidgetEventFilter.allocationSize(value.read) +
            FfiConverterSequenceWidgetEventFilter.allocationSize(value.send) +
            FfiConverterBool.allocationSize(value.requiresClient) +
            FfiConverterBool.allocationSize(value.updateDelayedEvent) +
            FfiConverterBool.allocationSize(value.sendDelayedEvent) +
            0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<WidgetCapabilities> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final read_lifted = FfiConverterSequenceWidgetEventFilter.read(
        Uint8List.view(buf.buffer, new_offset));
    final read = read_lifted.value;
    new_offset += read_lifted.bytesRead;
    final send_lifted = FfiConverterSequenceWidgetEventFilter.read(
        Uint8List.view(buf.buffer, new_offset));
    final send = send_lifted.value;
    new_offset += send_lifted.bytesRead;
    final requiresClient_lifted =
        FfiConverterBool.read(Uint8List.view(buf.buffer, new_offset));
    final requiresClient = requiresClient_lifted.value;
    new_offset += requiresClient_lifted.bytesRead;
    final updateDelayedEvent_lifted =
        FfiConverterBool.read(Uint8List.view(buf.buffer, new_offset));
    final updateDelayedEvent = updateDelayedEvent_lifted.value;
    new_offset += updateDelayedEvent_lifted.bytesRead;
    final sendDelayedEvent_lifted =
        FfiConverterBool.read(Uint8List.view(buf.buffer, new_offset));
    final sendDelayedEvent = sendDelayedEvent_lifted.value;
    new_offset += sendDelayedEvent_lifted.bytesRead;
    return LiftRetVal(
        WidgetCapabilities(
          read: read,
          send: send,
          requiresClient: requiresClient,
          updateDelayedEvent: updateDelayedEvent,
          sendDelayedEvent: sendDelayedEvent,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(WidgetCapabilities value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterSequenceWidgetEventFilter.write(
        value.read, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterSequenceWidgetEventFilter.write(
        value.send, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterBool.write(
        value.requiresClient, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterBool.write(
        value.updateDelayedEvent, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterBool.write(
        value.sendDelayedEvent, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(WidgetCapabilities value) {
    return FfiConverterSequenceWidgetEventFilter.allocationSize(value.read) +
        FfiConverterSequenceWidgetEventFilter.allocationSize(value.send) +
        FfiConverterBool.allocationSize(value.requiresClient) +
        FfiConverterBool.allocationSize(value.updateDelayedEvent) +
        FfiConverterBool.allocationSize(value.sendDelayedEvent) +
        0;
  }
}

class WidgetDriverAndHandle {
  final WidgetDriver driver;
  final WidgetDriverHandle handle;

  WidgetDriverAndHandle({
    required this.driver,
    required this.handle,
  });
}

class FfiConverterWidgetDriverAndHandle {
  static WidgetDriverAndHandle lift(RustBuffer buf) {
    return FfiConverterWidgetDriverAndHandle.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(WidgetDriverAndHandle value) {
    final total_length = WidgetDriver.allocationSize(value.driver) +
        WidgetDriverHandle.allocationSize(value.handle) +
        0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<WidgetDriverAndHandle> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final driver_lifted =
        WidgetDriver.read(Uint8List.view(buf.buffer, new_offset));
    final driver = driver_lifted.value;
    new_offset += driver_lifted.bytesRead;
    final handle_lifted =
        WidgetDriverHandle.read(Uint8List.view(buf.buffer, new_offset));
    final handle = handle_lifted.value;
    new_offset += handle_lifted.bytesRead;
    return LiftRetVal(
        WidgetDriverAndHandle(
          driver: driver,
          handle: handle,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(WidgetDriverAndHandle value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += WidgetDriver.write(
        value.driver, Uint8List.view(buf.buffer, new_offset));
    new_offset += WidgetDriverHandle.write(
        value.handle, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(WidgetDriverAndHandle value) {
    return WidgetDriver.allocationSize(value.driver) +
        WidgetDriverHandle.allocationSize(value.handle) +
        0;
  }
}

class WidgetSettings {
  final String widgetId;
  final bool initAfterContentLoad;
  final String rawUrl;

  WidgetSettings({
    required this.widgetId,
    required this.initAfterContentLoad,
    required this.rawUrl,
  });
}

class FfiConverterWidgetSettings {
  static WidgetSettings lift(RustBuffer buf) {
    return FfiConverterWidgetSettings.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(WidgetSettings value) {
    final total_length = FfiConverterString.allocationSize(value.widgetId) +
        FfiConverterBool.allocationSize(value.initAfterContentLoad) +
        FfiConverterString.allocationSize(value.rawUrl) +
        0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<WidgetSettings> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final widgetId_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final widgetId = widgetId_lifted.value;
    new_offset += widgetId_lifted.bytesRead;
    final initAfterContentLoad_lifted =
        FfiConverterBool.read(Uint8List.view(buf.buffer, new_offset));
    final initAfterContentLoad = initAfterContentLoad_lifted.value;
    new_offset += initAfterContentLoad_lifted.bytesRead;
    final rawUrl_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final rawUrl = rawUrl_lifted.value;
    new_offset += rawUrl_lifted.bytesRead;
    return LiftRetVal(
        WidgetSettings(
          widgetId: widgetId,
          initAfterContentLoad: initAfterContentLoad,
          rawUrl: rawUrl,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(WidgetSettings value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterString.write(
        value.widgetId, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterBool.write(
        value.initAfterContentLoad, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterString.write(
        value.rawUrl, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(WidgetSettings value) {
    return FfiConverterString.allocationSize(value.widgetId) +
        FfiConverterBool.allocationSize(value.initAfterContentLoad) +
        FfiConverterString.allocationSize(value.rawUrl) +
        0;
  }
}

abstract class AccountDataEvent {
  RustBuffer lower();
  int allocationSize();
  int write(Uint8List buf);
}

class FfiConverterAccountDataEvent {
  static AccountDataEvent lift(RustBuffer buffer) {
    return FfiConverterAccountDataEvent.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<AccountDataEvent> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    final subview = Uint8List.view(buf.buffer, buf.offsetInBytes + 4);
    switch (index) {
      case 1:
        return DirectAccountDataEvent.read(subview);
      case 2:
        return IdentityServerAccountDataEvent.read(subview);
      case 3:
        return IgnoredUserListAccountDataEvent.read(subview);
      case 4:
        return PushRulesAccountDataEvent.read(subview);
      case 5:
        return SecretStorageDefaultKeyAccountDataEvent.read(subview);
      case 6:
        return SecretStorageKeyAccountDataEvent.read(subview);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(AccountDataEvent value) {
    return value.lower();
  }

  static int allocationSize(AccountDataEvent value) {
    return value.allocationSize();
  }

  static int write(AccountDataEvent value, Uint8List buf) {
    return value.write(buf);
  }
}

class DirectAccountDataEvent extends AccountDataEvent {
  final Map<String, List<String>> map;

  DirectAccountDataEvent(
    Map<String, List<String>> this.map,
  );

  DirectAccountDataEvent._(
    Map<String, List<String>> this.map,
  );

  static LiftRetVal<DirectAccountDataEvent> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final map_lifted = FfiConverterMapStringSequenceString.read(
        Uint8List.view(buf.buffer, new_offset));
    final map = map_lifted.value;
    new_offset += map_lifted.bytesRead;
    return LiftRetVal(
        DirectAccountDataEvent._(
          map.cast<String, List<String>>(),
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterMapStringSequenceString.allocationSize(map) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 1);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterMapStringSequenceString.write(
        map, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class IdentityServerAccountDataEvent extends AccountDataEvent {
  final String? baseUrl;

  IdentityServerAccountDataEvent(
    String? this.baseUrl,
  );

  IdentityServerAccountDataEvent._(
    String? this.baseUrl,
  );

  static LiftRetVal<IdentityServerAccountDataEvent> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final baseUrl_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final baseUrl = baseUrl_lifted.value;
    new_offset += baseUrl_lifted.bytesRead;
    return LiftRetVal(
        IdentityServerAccountDataEvent._(
          baseUrl,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterOptionalString.allocationSize(baseUrl) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 2);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterOptionalString.write(
        baseUrl, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class IgnoredUserListAccountDataEvent extends AccountDataEvent {
  final Map<String, IgnoredUser> ignoredUsers;

  IgnoredUserListAccountDataEvent(
    Map<String, IgnoredUser> this.ignoredUsers,
  );

  IgnoredUserListAccountDataEvent._(
    Map<String, IgnoredUser> this.ignoredUsers,
  );

  static LiftRetVal<IgnoredUserListAccountDataEvent> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final ignoredUsers_lifted = FfiConverterMapStringIgnoredUser.read(
        Uint8List.view(buf.buffer, new_offset));
    final ignoredUsers = ignoredUsers_lifted.value;
    new_offset += ignoredUsers_lifted.bytesRead;
    return LiftRetVal(
        IgnoredUserListAccountDataEvent._(
          ignoredUsers.cast<String, IgnoredUser>(),
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterMapStringIgnoredUser.allocationSize(ignoredUsers) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 3);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterMapStringIgnoredUser.write(
        ignoredUsers, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class PushRulesAccountDataEvent extends AccountDataEvent {
  final Ruleset global;

  PushRulesAccountDataEvent(
    Ruleset this.global,
  );

  PushRulesAccountDataEvent._(
    Ruleset this.global,
  );

  static LiftRetVal<PushRulesAccountDataEvent> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final global_lifted =
        FfiConverterRuleset.read(Uint8List.view(buf.buffer, new_offset));
    final global = global_lifted.value;
    new_offset += global_lifted.bytesRead;
    return LiftRetVal(
        PushRulesAccountDataEvent._(
          global,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterRuleset.allocationSize(global) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 4);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterRuleset.write(
        global, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class SecretStorageDefaultKeyAccountDataEvent extends AccountDataEvent {
  final String keyId;

  SecretStorageDefaultKeyAccountDataEvent(
    String this.keyId,
  );

  SecretStorageDefaultKeyAccountDataEvent._(
    String this.keyId,
  );

  static LiftRetVal<SecretStorageDefaultKeyAccountDataEvent> read(
      Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final keyId_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final keyId = keyId_lifted.value;
    new_offset += keyId_lifted.bytesRead;
    return LiftRetVal(
        SecretStorageDefaultKeyAccountDataEvent._(
          keyId,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(keyId) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 5);
    int new_offset = buf.offsetInBytes + 4;

    new_offset +=
        FfiConverterString.write(keyId, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class SecretStorageKeyAccountDataEvent extends AccountDataEvent {
  final String keyId;
  final String? name;
  final SecretStorageEncryptionAlgorithm algorithm;
  final PassPhrase? passphrase;

  SecretStorageKeyAccountDataEvent({
    required String this.keyId,
    required String? this.name,
    required SecretStorageEncryptionAlgorithm this.algorithm,
    required PassPhrase? this.passphrase,
  });

  SecretStorageKeyAccountDataEvent._(
    String this.keyId,
    String? this.name,
    SecretStorageEncryptionAlgorithm this.algorithm,
    PassPhrase? this.passphrase,
  );

  static LiftRetVal<SecretStorageKeyAccountDataEvent> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final keyId_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final keyId = keyId_lifted.value;
    new_offset += keyId_lifted.bytesRead;
    final name_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final name = name_lifted.value;
    new_offset += name_lifted.bytesRead;
    final algorithm_lifted = FfiConverterSecretStorageEncryptionAlgorithm.read(
        Uint8List.view(buf.buffer, new_offset));
    final algorithm = algorithm_lifted.value;
    new_offset += algorithm_lifted.bytesRead;
    final passphrase_lifted = FfiConverterOptionalPassPhrase.read(
        Uint8List.view(buf.buffer, new_offset));
    final passphrase = passphrase_lifted.value;
    new_offset += passphrase_lifted.bytesRead;
    return LiftRetVal(
        SecretStorageKeyAccountDataEvent._(
          keyId,
          name,
          algorithm,
          passphrase,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(keyId) +
        FfiConverterOptionalString.allocationSize(name) +
        FfiConverterSecretStorageEncryptionAlgorithm.allocationSize(algorithm) +
        FfiConverterOptionalPassPhrase.allocationSize(passphrase) +
        4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 6);
    int new_offset = buf.offsetInBytes + 4;

    new_offset +=
        FfiConverterString.write(keyId, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        name, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterSecretStorageEncryptionAlgorithm.write(
        algorithm, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalPassPhrase.write(
        passphrase, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

abstract class AccountDataEventType {
  RustBuffer lower();
  int allocationSize();
  int write(Uint8List buf);
}

class FfiConverterAccountDataEventType {
  static AccountDataEventType lift(RustBuffer buffer) {
    return FfiConverterAccountDataEventType.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<AccountDataEventType> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    final subview = Uint8List.view(buf.buffer, buf.offsetInBytes + 4);
    switch (index) {
      case 1:
        return DirectAccountDataEventType.read(subview);
      case 2:
        return IdentityServerAccountDataEventType.read(subview);
      case 3:
        return IgnoredUserListAccountDataEventType.read(subview);
      case 4:
        return PushRulesAccountDataEventType.read(subview);
      case 5:
        return SecretStorageDefaultKeyAccountDataEventType.read(subview);
      case 6:
        return SecretStorageKeyAccountDataEventType.read(subview);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(AccountDataEventType value) {
    return value.lower();
  }

  static int allocationSize(AccountDataEventType value) {
    return value.allocationSize();
  }

  static int write(AccountDataEventType value, Uint8List buf) {
    return value.write(buf);
  }
}

class DirectAccountDataEventType extends AccountDataEventType {
  DirectAccountDataEventType();

  DirectAccountDataEventType._();

  static LiftRetVal<DirectAccountDataEventType> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(DirectAccountDataEventType._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 1);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class IdentityServerAccountDataEventType extends AccountDataEventType {
  IdentityServerAccountDataEventType();

  IdentityServerAccountDataEventType._();

  static LiftRetVal<IdentityServerAccountDataEventType> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(IdentityServerAccountDataEventType._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 2);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class IgnoredUserListAccountDataEventType extends AccountDataEventType {
  IgnoredUserListAccountDataEventType();

  IgnoredUserListAccountDataEventType._();

  static LiftRetVal<IgnoredUserListAccountDataEventType> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(IgnoredUserListAccountDataEventType._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 3);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class PushRulesAccountDataEventType extends AccountDataEventType {
  PushRulesAccountDataEventType();

  PushRulesAccountDataEventType._();

  static LiftRetVal<PushRulesAccountDataEventType> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(PushRulesAccountDataEventType._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 4);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class SecretStorageDefaultKeyAccountDataEventType extends AccountDataEventType {
  SecretStorageDefaultKeyAccountDataEventType();

  SecretStorageDefaultKeyAccountDataEventType._();

  static LiftRetVal<SecretStorageDefaultKeyAccountDataEventType> read(
      Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(
        SecretStorageDefaultKeyAccountDataEventType._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 5);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class SecretStorageKeyAccountDataEventType extends AccountDataEventType {
  final String keyId;

  SecretStorageKeyAccountDataEventType(
    String this.keyId,
  );

  SecretStorageKeyAccountDataEventType._(
    String this.keyId,
  );

  static LiftRetVal<SecretStorageKeyAccountDataEventType> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final keyId_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final keyId = keyId_lifted.value;
    new_offset += keyId_lifted.bytesRead;
    return LiftRetVal(
        SecretStorageKeyAccountDataEventType._(
          keyId,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(keyId) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 6);
    int new_offset = buf.offsetInBytes + 4;

    new_offset +=
        FfiConverterString.write(keyId, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

abstract class AccountManagementAction {
  RustBuffer lower();
  int allocationSize();
  int write(Uint8List buf);
}

class FfiConverterAccountManagementAction {
  static AccountManagementAction lift(RustBuffer buffer) {
    return FfiConverterAccountManagementAction.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<AccountManagementAction> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    final subview = Uint8List.view(buf.buffer, buf.offsetInBytes + 4);
    switch (index) {
      case 1:
        return ProfileAccountManagementAction.read(subview);
      case 2:
        return SessionsListAccountManagementAction.read(subview);
      case 3:
        return SessionViewAccountManagementAction.read(subview);
      case 4:
        return SessionEndAccountManagementAction.read(subview);
      case 5:
        return AccountDeactivateAccountManagementAction.read(subview);
      case 6:
        return CrossSigningResetAccountManagementAction.read(subview);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(AccountManagementAction value) {
    return value.lower();
  }

  static int allocationSize(AccountManagementAction value) {
    return value.allocationSize();
  }

  static int write(AccountManagementAction value, Uint8List buf) {
    return value.write(buf);
  }
}

class ProfileAccountManagementAction extends AccountManagementAction {
  ProfileAccountManagementAction();

  ProfileAccountManagementAction._();

  static LiftRetVal<ProfileAccountManagementAction> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(ProfileAccountManagementAction._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 1);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class SessionsListAccountManagementAction extends AccountManagementAction {
  SessionsListAccountManagementAction();

  SessionsListAccountManagementAction._();

  static LiftRetVal<SessionsListAccountManagementAction> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(SessionsListAccountManagementAction._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 2);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class SessionViewAccountManagementAction extends AccountManagementAction {
  final String deviceId;

  SessionViewAccountManagementAction(
    String this.deviceId,
  );

  SessionViewAccountManagementAction._(
    String this.deviceId,
  );

  static LiftRetVal<SessionViewAccountManagementAction> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final deviceId_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final deviceId = deviceId_lifted.value;
    new_offset += deviceId_lifted.bytesRead;
    return LiftRetVal(
        SessionViewAccountManagementAction._(
          deviceId,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(deviceId) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 3);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterString.write(
        deviceId, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class SessionEndAccountManagementAction extends AccountManagementAction {
  final String deviceId;

  SessionEndAccountManagementAction(
    String this.deviceId,
  );

  SessionEndAccountManagementAction._(
    String this.deviceId,
  );

  static LiftRetVal<SessionEndAccountManagementAction> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final deviceId_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final deviceId = deviceId_lifted.value;
    new_offset += deviceId_lifted.bytesRead;
    return LiftRetVal(
        SessionEndAccountManagementAction._(
          deviceId,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(deviceId) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 4);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterString.write(
        deviceId, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class AccountDeactivateAccountManagementAction extends AccountManagementAction {
  AccountDeactivateAccountManagementAction();

  AccountDeactivateAccountManagementAction._();

  static LiftRetVal<AccountDeactivateAccountManagementAction> read(
      Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(AccountDeactivateAccountManagementAction._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 5);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class CrossSigningResetAccountManagementAction extends AccountManagementAction {
  CrossSigningResetAccountManagementAction();

  CrossSigningResetAccountManagementAction._();

  static LiftRetVal<CrossSigningResetAccountManagementAction> read(
      Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(CrossSigningResetAccountManagementAction._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 6);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

abstract class Action {
  RustBuffer lower();
  int allocationSize();
  int write(Uint8List buf);
}

class FfiConverterAction {
  static Action lift(RustBuffer buffer) {
    return FfiConverterAction.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<Action> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    final subview = Uint8List.view(buf.buffer, buf.offsetInBytes + 4);
    switch (index) {
      case 1:
        return NotifyAction.read(subview);
      case 2:
        return SetTweakAction.read(subview);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(Action value) {
    return value.lower();
  }

  static int allocationSize(Action value) {
    return value.allocationSize();
  }

  static int write(Action value, Uint8List buf) {
    return value.write(buf);
  }
}

class NotifyAction extends Action {
  NotifyAction();

  NotifyAction._();

  static LiftRetVal<NotifyAction> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(NotifyAction._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 1);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class SetTweakAction extends Action {
  final Tweak value;

  SetTweakAction(
    Tweak this.value,
  );

  SetTweakAction._(
    Tweak this.value,
  );

  static LiftRetVal<SetTweakAction> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final value_lifted =
        FfiConverterTweak.read(Uint8List.view(buf.buffer, new_offset));
    final value = value_lifted.value;
    new_offset += value_lifted.bytesRead;
    return LiftRetVal(
        SetTweakAction._(
          value,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterTweak.allocationSize(value) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 2);
    int new_offset = buf.offsetInBytes + 4;

    new_offset +=
        FfiConverterTweak.write(value, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

abstract class AllowRule {
  RustBuffer lower();
  int allocationSize();
  int write(Uint8List buf);
}

class FfiConverterAllowRule {
  static AllowRule lift(RustBuffer buffer) {
    return FfiConverterAllowRule.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<AllowRule> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    final subview = Uint8List.view(buf.buffer, buf.offsetInBytes + 4);
    switch (index) {
      case 1:
        return RoomMembershipAllowRule.read(subview);
      case 2:
        return CustomAllowRule.read(subview);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(AllowRule value) {
    return value.lower();
  }

  static int allocationSize(AllowRule value) {
    return value.allocationSize();
  }

  static int write(AllowRule value, Uint8List buf) {
    return value.write(buf);
  }
}

class RoomMembershipAllowRule extends AllowRule {
  final String roomId;

  RoomMembershipAllowRule(
    String this.roomId,
  );

  RoomMembershipAllowRule._(
    String this.roomId,
  );

  static LiftRetVal<RoomMembershipAllowRule> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final roomId_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final roomId = roomId_lifted.value;
    new_offset += roomId_lifted.bytesRead;
    return LiftRetVal(
        RoomMembershipAllowRule._(
          roomId,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(roomId) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 1);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterString.write(
        roomId, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class CustomAllowRule extends AllowRule {
  final String json;

  CustomAllowRule(
    String this.json,
  );

  CustomAllowRule._(
    String this.json,
  );

  static LiftRetVal<CustomAllowRule> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final json_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final json = json_lifted.value;
    new_offset += json_lifted.bytesRead;
    return LiftRetVal(
        CustomAllowRule._(
          json,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(json) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 2);
    int new_offset = buf.offsetInBytes + 4;

    new_offset +=
        FfiConverterString.write(json, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

enum AssetType {
  sender,
  pin,
  ;
}

class FfiConverterAssetType {
  static AssetType lift(RustBuffer buffer) {
    return FfiConverterAssetType.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<AssetType> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    switch (index) {
      case 1:
        return LiftRetVal(AssetType.sender, 4);
      case 2:
        return LiftRetVal(AssetType.pin, 4);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(AssetType input) {
    return toRustBuffer(createUint8ListFromInt(input.index + 1));
  }

  static int allocationSize(AssetType value) {
    return 4;
  }

  static int write(AssetType value, Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, value.index + 1);
    return 4;
  }
}

abstract class AuthData {
  RustBuffer lower();
  int allocationSize();
  int write(Uint8List buf);
}

class FfiConverterAuthData {
  static AuthData lift(RustBuffer buffer) {
    return FfiConverterAuthData.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<AuthData> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    final subview = Uint8List.view(buf.buffer, buf.offsetInBytes + 4);
    switch (index) {
      case 1:
        return PasswordAuthData.read(subview);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(AuthData value) {
    return value.lower();
  }

  static int allocationSize(AuthData value) {
    return value.allocationSize();
  }

  static int write(AuthData value, Uint8List buf) {
    return value.write(buf);
  }
}

class PasswordAuthData extends AuthData {
  final AuthDataPasswordDetails passwordDetails;

  PasswordAuthData(
    AuthDataPasswordDetails this.passwordDetails,
  );

  PasswordAuthData._(
    AuthDataPasswordDetails this.passwordDetails,
  );

  static LiftRetVal<PasswordAuthData> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final passwordDetails_lifted = FfiConverterAuthDataPasswordDetails.read(
        Uint8List.view(buf.buffer, new_offset));
    final passwordDetails = passwordDetails_lifted.value;
    new_offset += passwordDetails_lifted.bytesRead;
    return LiftRetVal(
        PasswordAuthData._(
          passwordDetails,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterAuthDataPasswordDetails.allocationSize(passwordDetails) +
        4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 1);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterAuthDataPasswordDetails.write(
        passwordDetails, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

enum BackupState {
  unknown,
  creating,
  enabling,
  resuming,
  enabled,
  downloading,
  disabling,
  ;
}

class FfiConverterBackupState {
  static BackupState lift(RustBuffer buffer) {
    return FfiConverterBackupState.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<BackupState> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    switch (index) {
      case 1:
        return LiftRetVal(BackupState.unknown, 4);
      case 2:
        return LiftRetVal(BackupState.creating, 4);
      case 3:
        return LiftRetVal(BackupState.enabling, 4);
      case 4:
        return LiftRetVal(BackupState.resuming, 4);
      case 5:
        return LiftRetVal(BackupState.enabled, 4);
      case 6:
        return LiftRetVal(BackupState.downloading, 4);
      case 7:
        return LiftRetVal(BackupState.disabling, 4);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(BackupState input) {
    return toRustBuffer(createUint8ListFromInt(input.index + 1));
  }

  static int allocationSize(BackupState value) {
    return 4;
  }

  static int write(BackupState value, Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, value.index + 1);
    return 4;
  }
}

abstract class BackupUploadState {
  RustBuffer lower();
  int allocationSize();
  int write(Uint8List buf);
}

class FfiConverterBackupUploadState {
  static BackupUploadState lift(RustBuffer buffer) {
    return FfiConverterBackupUploadState.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<BackupUploadState> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    final subview = Uint8List.view(buf.buffer, buf.offsetInBytes + 4);
    switch (index) {
      case 1:
        return WaitingBackupUploadState.read(subview);
      case 2:
        return UploadingBackupUploadState.read(subview);
      case 3:
        return ErrorExceptionBackupUploadState.read(subview);
      case 4:
        return DoneBackupUploadState.read(subview);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(BackupUploadState value) {
    return value.lower();
  }

  static int allocationSize(BackupUploadState value) {
    return value.allocationSize();
  }

  static int write(BackupUploadState value, Uint8List buf) {
    return value.write(buf);
  }
}

class WaitingBackupUploadState extends BackupUploadState {
  WaitingBackupUploadState();

  WaitingBackupUploadState._();

  static LiftRetVal<WaitingBackupUploadState> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(WaitingBackupUploadState._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 1);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class UploadingBackupUploadState extends BackupUploadState {
  final int backedUpCount;
  final int totalCount;

  UploadingBackupUploadState({
    required int this.backedUpCount,
    required int this.totalCount,
  });

  UploadingBackupUploadState._(
    int this.backedUpCount,
    int this.totalCount,
  );

  static LiftRetVal<UploadingBackupUploadState> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final backedUpCount_lifted =
        FfiConverterUInt32.read(Uint8List.view(buf.buffer, new_offset));
    final backedUpCount = backedUpCount_lifted.value;
    new_offset += backedUpCount_lifted.bytesRead;
    final totalCount_lifted =
        FfiConverterUInt32.read(Uint8List.view(buf.buffer, new_offset));
    final totalCount = totalCount_lifted.value;
    new_offset += totalCount_lifted.bytesRead;
    return LiftRetVal(
        UploadingBackupUploadState._(
          backedUpCount,
          totalCount,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterUInt32.allocationSize(backedUpCount) +
        FfiConverterUInt32.allocationSize(totalCount) +
        4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 2);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterUInt32.write(
        backedUpCount, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterUInt32.write(
        totalCount, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class ErrorExceptionBackupUploadState extends BackupUploadState {
  ErrorExceptionBackupUploadState();

  ErrorExceptionBackupUploadState._();

  static LiftRetVal<ErrorExceptionBackupUploadState> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(ErrorExceptionBackupUploadState._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 3);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class DoneBackupUploadState extends BackupUploadState {
  DoneBackupUploadState();

  DoneBackupUploadState._();

  static LiftRetVal<DoneBackupUploadState> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(DoneBackupUploadState._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 4);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

abstract class BatchNotificationResult {
  RustBuffer lower();
  int allocationSize();
  int write(Uint8List buf);
}

class FfiConverterBatchNotificationResult {
  static BatchNotificationResult lift(RustBuffer buffer) {
    return FfiConverterBatchNotificationResult.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<BatchNotificationResult> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    final subview = Uint8List.view(buf.buffer, buf.offsetInBytes + 4);
    switch (index) {
      case 1:
        return OkBatchNotificationResult.read(subview);
      case 2:
        return ErrorExceptionBatchNotificationResult.read(subview);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(BatchNotificationResult value) {
    return value.lower();
  }

  static int allocationSize(BatchNotificationResult value) {
    return value.allocationSize();
  }

  static int write(BatchNotificationResult value, Uint8List buf) {
    return value.write(buf);
  }
}

class OkBatchNotificationResult extends BatchNotificationResult {
  final NotificationStatus status;

  OkBatchNotificationResult(
    NotificationStatus this.status,
  );

  OkBatchNotificationResult._(
    NotificationStatus this.status,
  );

  static LiftRetVal<OkBatchNotificationResult> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final status_lifted = FfiConverterNotificationStatus.read(
        Uint8List.view(buf.buffer, new_offset));
    final status = status_lifted.value;
    new_offset += status_lifted.bytesRead;
    return LiftRetVal(
        OkBatchNotificationResult._(
          status,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterNotificationStatus.allocationSize(status) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 1);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterNotificationStatus.write(
        status, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class ErrorExceptionBatchNotificationResult extends BatchNotificationResult {
  final String message;

  ErrorExceptionBatchNotificationResult(
    String this.message,
  );

  ErrorExceptionBatchNotificationResult._(
    String this.message,
  );

  static LiftRetVal<ErrorExceptionBatchNotificationResult> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final message_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final message = message_lifted.value;
    new_offset += message_lifted.bytesRead;
    return LiftRetVal(
        ErrorExceptionBatchNotificationResult._(
          message,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(message) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 2);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterString.write(
        message, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

enum ClientBuildException {
  invalidServerName,
  serverUnreachable,
  wellKnownLookupFailed,
  wellKnownDeserializationError,
  slidingSync,
  slidingSyncVersion,
  sdk,
  eventCache,
  generic,
  ;
}

class FfiConverterClientBuildException {
  static ClientBuildException lift(RustBuffer buffer) {
    return FfiConverterClientBuildException.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<ClientBuildException> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    switch (index) {
      case 1:
        return LiftRetVal(ClientBuildException.invalidServerName, 4);
      case 2:
        return LiftRetVal(ClientBuildException.serverUnreachable, 4);
      case 3:
        return LiftRetVal(ClientBuildException.wellKnownLookupFailed, 4);
      case 4:
        return LiftRetVal(
            ClientBuildException.wellKnownDeserializationError, 4);
      case 5:
        return LiftRetVal(ClientBuildException.slidingSync, 4);
      case 6:
        return LiftRetVal(ClientBuildException.slidingSyncVersion, 4);
      case 7:
        return LiftRetVal(ClientBuildException.sdk, 4);
      case 8:
        return LiftRetVal(ClientBuildException.eventCache, 4);
      case 9:
        return LiftRetVal(ClientBuildException.generic, 4);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(ClientBuildException input) {
    return toRustBuffer(createUint8ListFromInt(input.index + 1));
  }

  static int allocationSize(ClientBuildException value) {
    return 4;
  }

  static int write(ClientBuildException value, Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, value.index + 1);
    return 4;
  }
}

abstract class ClientException implements Exception {
  RustBuffer lower();
  int allocationSize();
  int write(Uint8List buf);
}

class FfiConverterClientException {
  static ClientException lift(RustBuffer buffer) {
    return FfiConverterClientException.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<ClientException> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    final subview = Uint8List.view(buf.buffer, buf.offsetInBytes + 4);
    switch (index) {
      case 1:
        return GenericClientException.read(subview);
      case 2:
        return MatrixApiClientException.read(subview);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(ClientException value) {
    return value.lower();
  }

  static int allocationSize(ClientException value) {
    return value.allocationSize();
  }

  static int write(ClientException value, Uint8List buf) {
    return value.write(buf);
  }
}

class GenericClientException extends ClientException {
  final String msg;
  final String? details;

  GenericClientException({
    required String this.msg,
    required String? this.details,
  });

  GenericClientException._(
    String this.msg,
    String? this.details,
  );

  static LiftRetVal<GenericClientException> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final msg_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final msg = msg_lifted.value;
    new_offset += msg_lifted.bytesRead;
    final details_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final details = details_lifted.value;
    new_offset += details_lifted.bytesRead;
    return LiftRetVal(
        GenericClientException._(
          msg,
          details,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(msg) +
        FfiConverterOptionalString.allocationSize(details) +
        4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 1);
    int new_offset = buf.offsetInBytes + 4;

    new_offset +=
        FfiConverterString.write(msg, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        details, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }

  @override
  String toString() {
    return "GenericClientException($msg, $details)";
  }
}

class MatrixApiClientException extends ClientException {
  // final ExceptionKind kind;
  final String code;
  final String msg;
  final String? details;

  MatrixApiClientException({
    // required ExceptionKind this.kind,
    required String this.code,
    required String this.msg,
    required String? this.details,
  });

  MatrixApiClientException._(
    // ExceptionKind this.kind,
    String this.code,
    String this.msg,
    String? this.details,
  );

  static LiftRetVal<MatrixApiClientException> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    // final kind_lifted =
    //     FfiConverterExceptionKind.read(Uint8List.view(buf.buffer, new_offset));
    // final kind = kind_lifted.value;
    // new_offset += kind_lifted.bytesRead;
    final code_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final code = code_lifted.value;
    new_offset += code_lifted.bytesRead;
    final msg_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final msg = msg_lifted.value;
    new_offset += msg_lifted.bytesRead;
    final details_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final details = details_lifted.value;
    new_offset += details_lifted.bytesRead;
    return LiftRetVal(
        MatrixApiClientException._(
          // kind,
          code,
          msg,
          details,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return
        // FfiConverterExceptionKind.allocationSize(kind) +
        FfiConverterString.allocationSize(code) +
            FfiConverterString.allocationSize(msg) +
            FfiConverterOptionalString.allocationSize(details) +
            4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 2);
    int new_offset = buf.offsetInBytes + 4;

    // new_offset += FfiConverterExceptionKind.write(
    //     kind, Uint8List.view(buf.buffer, new_offset));
    new_offset +=
        FfiConverterString.write(code, Uint8List.view(buf.buffer, new_offset));
    new_offset +=
        FfiConverterString.write(msg, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        details, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }

  @override
  String toString() {
    return "MatrixApiClientException($code, $msg, $details)";
    // $kind,
  }
}

enum ComparisonOperator {
  eq,
  lt,
  gt,
  ge,
  le,
  ;
}

class FfiConverterComparisonOperator {
  static ComparisonOperator lift(RustBuffer buffer) {
    return FfiConverterComparisonOperator.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<ComparisonOperator> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    switch (index) {
      case 1:
        return LiftRetVal(ComparisonOperator.eq, 4);
      case 2:
        return LiftRetVal(ComparisonOperator.lt, 4);
      case 3:
        return LiftRetVal(ComparisonOperator.gt, 4);
      case 4:
        return LiftRetVal(ComparisonOperator.ge, 4);
      case 5:
        return LiftRetVal(ComparisonOperator.le, 4);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(ComparisonOperator input) {
    return toRustBuffer(createUint8ListFromInt(input.index + 1));
  }

  static int allocationSize(ComparisonOperator value) {
    return 4;
  }

  static int write(ComparisonOperator value, Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, value.index + 1);
    return 4;
  }
}

abstract class ComposerDraftType {
  RustBuffer lower();
  int allocationSize();
  int write(Uint8List buf);
}

class FfiConverterComposerDraftType {
  static ComposerDraftType lift(RustBuffer buffer) {
    return FfiConverterComposerDraftType.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<ComposerDraftType> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    final subview = Uint8List.view(buf.buffer, buf.offsetInBytes + 4);
    switch (index) {
      case 1:
        return NewMessageComposerDraftType.read(subview);
      case 2:
        return ReplyComposerDraftType.read(subview);
      case 3:
        return EditComposerDraftType.read(subview);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(ComposerDraftType value) {
    return value.lower();
  }

  static int allocationSize(ComposerDraftType value) {
    return value.allocationSize();
  }

  static int write(ComposerDraftType value, Uint8List buf) {
    return value.write(buf);
  }
}

class NewMessageComposerDraftType extends ComposerDraftType {
  NewMessageComposerDraftType();

  NewMessageComposerDraftType._();

  static LiftRetVal<NewMessageComposerDraftType> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(NewMessageComposerDraftType._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 1);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class ReplyComposerDraftType extends ComposerDraftType {
  final String eventId;

  ReplyComposerDraftType(
    String this.eventId,
  );

  ReplyComposerDraftType._(
    String this.eventId,
  );

  static LiftRetVal<ReplyComposerDraftType> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final eventId_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final eventId = eventId_lifted.value;
    new_offset += eventId_lifted.bytesRead;
    return LiftRetVal(
        ReplyComposerDraftType._(
          eventId,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(eventId) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 2);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterString.write(
        eventId, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class EditComposerDraftType extends ComposerDraftType {
  final String eventId;

  EditComposerDraftType(
    String this.eventId,
  );

  EditComposerDraftType._(
    String this.eventId,
  );

  static LiftRetVal<EditComposerDraftType> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final eventId_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final eventId = eventId_lifted.value;
    new_offset += eventId_lifted.bytesRead;
    return LiftRetVal(
        EditComposerDraftType._(
          eventId,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(eventId) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 3);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterString.write(
        eventId, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

abstract class CrossSigningResetAuthType {
  RustBuffer lower();
  int allocationSize();
  int write(Uint8List buf);
}

class FfiConverterCrossSigningResetAuthType {
  static CrossSigningResetAuthType lift(RustBuffer buffer) {
    return FfiConverterCrossSigningResetAuthType.read(buffer.asUint8List())
        .value;
  }

  static LiftRetVal<CrossSigningResetAuthType> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    final subview = Uint8List.view(buf.buffer, buf.offsetInBytes + 4);
    switch (index) {
      case 1:
        return UiaaCrossSigningResetAuthType.read(subview);
      case 2:
        return OidcCrossSigningResetAuthType.read(subview);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(CrossSigningResetAuthType value) {
    return value.lower();
  }

  static int allocationSize(CrossSigningResetAuthType value) {
    return value.allocationSize();
  }

  static int write(CrossSigningResetAuthType value, Uint8List buf) {
    return value.write(buf);
  }
}

class UiaaCrossSigningResetAuthType extends CrossSigningResetAuthType {
  UiaaCrossSigningResetAuthType();

  UiaaCrossSigningResetAuthType._();

  static LiftRetVal<UiaaCrossSigningResetAuthType> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(UiaaCrossSigningResetAuthType._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 1);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class OidcCrossSigningResetAuthType extends CrossSigningResetAuthType {
  final OidcCrossSigningResetInfo info;

  OidcCrossSigningResetAuthType(
    OidcCrossSigningResetInfo this.info,
  );

  OidcCrossSigningResetAuthType._(
    OidcCrossSigningResetInfo this.info,
  );

  static LiftRetVal<OidcCrossSigningResetAuthType> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final info_lifted = FfiConverterOidcCrossSigningResetInfo.read(
        Uint8List.view(buf.buffer, new_offset));
    final info = info_lifted.value;
    new_offset += info_lifted.bytesRead;
    return LiftRetVal(
        OidcCrossSigningResetAuthType._(
          info,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterOidcCrossSigningResetInfo.allocationSize(info) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 2);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterOidcCrossSigningResetInfo.write(
        info, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

enum DateDividerMode {
  daily,
  monthly,
  ;
}

class FfiConverterDateDividerMode {
  static DateDividerMode lift(RustBuffer buffer) {
    return FfiConverterDateDividerMode.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<DateDividerMode> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    switch (index) {
      case 1:
        return LiftRetVal(DateDividerMode.daily, 4);
      case 2:
        return LiftRetVal(DateDividerMode.monthly, 4);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(DateDividerMode input) {
    return toRustBuffer(createUint8ListFromInt(input.index + 1));
  }

  static int allocationSize(DateDividerMode value) {
    return 4;
  }

  static int write(DateDividerMode value, Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, value.index + 1);
    return 4;
  }
}

abstract class EditedContent {
  RustBuffer lower();
  int allocationSize();
  int write(Uint8List buf);
}

class FfiConverterEditedContent {
  static EditedContent lift(RustBuffer buffer) {
    return FfiConverterEditedContent.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<EditedContent> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    final subview = Uint8List.view(buf.buffer, buf.offsetInBytes + 4);
    switch (index) {
      case 1:
        return RoomMessageEditedContent.read(subview);
      case 2:
        return MediaCaptionEditedContent.read(subview);
      case 3:
        return PollStartEditedContent.read(subview);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(EditedContent value) {
    return value.lower();
  }

  static int allocationSize(EditedContent value) {
    return value.allocationSize();
  }

  static int write(EditedContent value, Uint8List buf) {
    return value.write(buf);
  }
}

class RoomMessageEditedContent extends EditedContent {
  final RoomMessageEventContentWithoutRelation content;

  RoomMessageEditedContent(
    RoomMessageEventContentWithoutRelation this.content,
  );

  RoomMessageEditedContent._(
    RoomMessageEventContentWithoutRelation this.content,
  );

  static LiftRetVal<RoomMessageEditedContent> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final content_lifted = RoomMessageEventContentWithoutRelation.read(
        Uint8List.view(buf.buffer, new_offset));
    final content = content_lifted.value;
    new_offset += content_lifted.bytesRead;
    return LiftRetVal(
        RoomMessageEditedContent._(
          content,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return RoomMessageEventContentWithoutRelation.allocationSize(content) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 1);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += RoomMessageEventContentWithoutRelation.write(
        content, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class MediaCaptionEditedContent extends EditedContent {
  final String? caption;
  final FormattedBody? formattedCaption;
  final Mentions? mentions;

  MediaCaptionEditedContent({
    required String? this.caption,
    required FormattedBody? this.formattedCaption,
    required Mentions? this.mentions,
  });

  MediaCaptionEditedContent._(
    String? this.caption,
    FormattedBody? this.formattedCaption,
    Mentions? this.mentions,
  );

  static LiftRetVal<MediaCaptionEditedContent> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final caption_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final caption = caption_lifted.value;
    new_offset += caption_lifted.bytesRead;
    final formattedCaption_lifted = FfiConverterOptionalFormattedBody.read(
        Uint8List.view(buf.buffer, new_offset));
    final formattedCaption = formattedCaption_lifted.value;
    new_offset += formattedCaption_lifted.bytesRead;
    final mentions_lifted = FfiConverterOptionalMentions.read(
        Uint8List.view(buf.buffer, new_offset));
    final mentions = mentions_lifted.value;
    new_offset += mentions_lifted.bytesRead;
    return LiftRetVal(
        MediaCaptionEditedContent._(
          caption,
          formattedCaption,
          mentions,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterOptionalString.allocationSize(caption) +
        FfiConverterOptionalFormattedBody.allocationSize(formattedCaption) +
        FfiConverterOptionalMentions.allocationSize(mentions) +
        4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 2);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterOptionalString.write(
        caption, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalFormattedBody.write(
        formattedCaption, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalMentions.write(
        mentions, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class PollStartEditedContent extends EditedContent {
  final PollData pollData;

  PollStartEditedContent(
    PollData this.pollData,
  );

  PollStartEditedContent._(
    PollData this.pollData,
  );

  static LiftRetVal<PollStartEditedContent> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final pollData_lifted =
        FfiConverterPollData.read(Uint8List.view(buf.buffer, new_offset));
    final pollData = pollData_lifted.value;
    new_offset += pollData_lifted.bytesRead;
    return LiftRetVal(
        PollStartEditedContent._(
          pollData,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterPollData.allocationSize(pollData) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 3);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterPollData.write(
        pollData, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

abstract class EmbeddedEventDetails {
  RustBuffer lower();
  int allocationSize();
  int write(Uint8List buf);
}

class FfiConverterEmbeddedEventDetails {
  static EmbeddedEventDetails lift(RustBuffer buffer) {
    return FfiConverterEmbeddedEventDetails.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<EmbeddedEventDetails> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    final subview = Uint8List.view(buf.buffer, buf.offsetInBytes + 4);
    switch (index) {
      case 1:
        return UnavailableEmbeddedEventDetails.read(subview);
      case 2:
        return PendingEmbeddedEventDetails.read(subview);
      case 3:
        return ReadyEmbeddedEventDetails.read(subview);
      case 4:
        return ErrorExceptionEmbeddedEventDetails.read(subview);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(EmbeddedEventDetails value) {
    return value.lower();
  }

  static int allocationSize(EmbeddedEventDetails value) {
    return value.allocationSize();
  }

  static int write(EmbeddedEventDetails value, Uint8List buf) {
    return value.write(buf);
  }
}

class UnavailableEmbeddedEventDetails extends EmbeddedEventDetails {
  UnavailableEmbeddedEventDetails();

  UnavailableEmbeddedEventDetails._();

  static LiftRetVal<UnavailableEmbeddedEventDetails> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(UnavailableEmbeddedEventDetails._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 1);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class PendingEmbeddedEventDetails extends EmbeddedEventDetails {
  PendingEmbeddedEventDetails();

  PendingEmbeddedEventDetails._();

  static LiftRetVal<PendingEmbeddedEventDetails> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(PendingEmbeddedEventDetails._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 2);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class ReadyEmbeddedEventDetails extends EmbeddedEventDetails {
  final TimelineItemContent content;
  final String sender;
  final ProfileDetails senderProfile;
  final Timestamp timestamp;
  final EventOrTransactionId eventOrTransactionId;

  ReadyEmbeddedEventDetails({
    required TimelineItemContent this.content,
    required String this.sender,
    required ProfileDetails this.senderProfile,
    required Timestamp this.timestamp,
    required EventOrTransactionId this.eventOrTransactionId,
  });

  ReadyEmbeddedEventDetails._(
    TimelineItemContent this.content,
    String this.sender,
    ProfileDetails this.senderProfile,
    Timestamp this.timestamp,
    EventOrTransactionId this.eventOrTransactionId,
  );

  static LiftRetVal<ReadyEmbeddedEventDetails> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final content_lifted = FfiConverterTimelineItemContent.read(
        Uint8List.view(buf.buffer, new_offset));
    final content = content_lifted.value;
    new_offset += content_lifted.bytesRead;
    final sender_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final sender = sender_lifted.value;
    new_offset += sender_lifted.bytesRead;
    final senderProfile_lifted =
        FfiConverterProfileDetails.read(Uint8List.view(buf.buffer, new_offset));
    final senderProfile = senderProfile_lifted.value;
    new_offset += senderProfile_lifted.bytesRead;
    final timestamp_lifted =
        FfiConverterTimestamp.read(Uint8List.view(buf.buffer, new_offset));
    final timestamp = timestamp_lifted.value;
    new_offset += timestamp_lifted.bytesRead;
    final eventOrTransactionId_lifted = FfiConverterEventOrTransactionId.read(
        Uint8List.view(buf.buffer, new_offset));
    final eventOrTransactionId = eventOrTransactionId_lifted.value;
    new_offset += eventOrTransactionId_lifted.bytesRead;
    return LiftRetVal(
        ReadyEmbeddedEventDetails._(
          content,
          sender,
          senderProfile,
          timestamp,
          eventOrTransactionId,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterTimelineItemContent.allocationSize(content) +
        FfiConverterString.allocationSize(sender) +
        FfiConverterProfileDetails.allocationSize(senderProfile) +
        FfiConverterTimestamp.allocationSize(timestamp) +
        FfiConverterEventOrTransactionId.allocationSize(eventOrTransactionId) +
        4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 3);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterTimelineItemContent.write(
        content, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterString.write(
        sender, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterProfileDetails.write(
        senderProfile, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterTimestamp.write(
        timestamp, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterEventOrTransactionId.write(
        eventOrTransactionId, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class ErrorExceptionEmbeddedEventDetails extends EmbeddedEventDetails {
  final String message;

  ErrorExceptionEmbeddedEventDetails(
    String this.message,
  );

  ErrorExceptionEmbeddedEventDetails._(
    String this.message,
  );

  static LiftRetVal<ErrorExceptionEmbeddedEventDetails> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final message_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final message = message_lifted.value;
    new_offset += message_lifted.bytesRead;
    return LiftRetVal(
        ErrorExceptionEmbeddedEventDetails._(
          message,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(message) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 4);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterString.write(
        message, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

abstract class EnableRecoveryProgress {
  RustBuffer lower();
  int allocationSize();
  int write(Uint8List buf);
}

class FfiConverterEnableRecoveryProgress {
  static EnableRecoveryProgress lift(RustBuffer buffer) {
    return FfiConverterEnableRecoveryProgress.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<EnableRecoveryProgress> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    final subview = Uint8List.view(buf.buffer, buf.offsetInBytes + 4);
    switch (index) {
      case 1:
        return StartingEnableRecoveryProgress.read(subview);
      case 2:
        return CreatingBackupEnableRecoveryProgress.read(subview);
      case 3:
        return CreatingRecoveryKeyEnableRecoveryProgress.read(subview);
      case 4:
        return BackingUpEnableRecoveryProgress.read(subview);
      case 5:
        return RoomKeyUploadExceptionEnableRecoveryProgress.read(subview);
      case 6:
        return DoneEnableRecoveryProgress.read(subview);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(EnableRecoveryProgress value) {
    return value.lower();
  }

  static int allocationSize(EnableRecoveryProgress value) {
    return value.allocationSize();
  }

  static int write(EnableRecoveryProgress value, Uint8List buf) {
    return value.write(buf);
  }
}

class StartingEnableRecoveryProgress extends EnableRecoveryProgress {
  StartingEnableRecoveryProgress();

  StartingEnableRecoveryProgress._();

  static LiftRetVal<StartingEnableRecoveryProgress> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(StartingEnableRecoveryProgress._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 1);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class CreatingBackupEnableRecoveryProgress extends EnableRecoveryProgress {
  CreatingBackupEnableRecoveryProgress();

  CreatingBackupEnableRecoveryProgress._();

  static LiftRetVal<CreatingBackupEnableRecoveryProgress> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(CreatingBackupEnableRecoveryProgress._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 2);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class CreatingRecoveryKeyEnableRecoveryProgress extends EnableRecoveryProgress {
  CreatingRecoveryKeyEnableRecoveryProgress();

  CreatingRecoveryKeyEnableRecoveryProgress._();

  static LiftRetVal<CreatingRecoveryKeyEnableRecoveryProgress> read(
      Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(
        CreatingRecoveryKeyEnableRecoveryProgress._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 3);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class BackingUpEnableRecoveryProgress extends EnableRecoveryProgress {
  final int backedUpCount;
  final int totalCount;

  BackingUpEnableRecoveryProgress({
    required int this.backedUpCount,
    required int this.totalCount,
  });

  BackingUpEnableRecoveryProgress._(
    int this.backedUpCount,
    int this.totalCount,
  );

  static LiftRetVal<BackingUpEnableRecoveryProgress> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final backedUpCount_lifted =
        FfiConverterUInt32.read(Uint8List.view(buf.buffer, new_offset));
    final backedUpCount = backedUpCount_lifted.value;
    new_offset += backedUpCount_lifted.bytesRead;
    final totalCount_lifted =
        FfiConverterUInt32.read(Uint8List.view(buf.buffer, new_offset));
    final totalCount = totalCount_lifted.value;
    new_offset += totalCount_lifted.bytesRead;
    return LiftRetVal(
        BackingUpEnableRecoveryProgress._(
          backedUpCount,
          totalCount,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterUInt32.allocationSize(backedUpCount) +
        FfiConverterUInt32.allocationSize(totalCount) +
        4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 4);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterUInt32.write(
        backedUpCount, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterUInt32.write(
        totalCount, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class RoomKeyUploadExceptionEnableRecoveryProgress
    extends EnableRecoveryProgress {
  RoomKeyUploadExceptionEnableRecoveryProgress();

  RoomKeyUploadExceptionEnableRecoveryProgress._();

  static LiftRetVal<RoomKeyUploadExceptionEnableRecoveryProgress> read(
      Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(
        RoomKeyUploadExceptionEnableRecoveryProgress._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 5);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class DoneEnableRecoveryProgress extends EnableRecoveryProgress {
  final String recoveryKey;

  DoneEnableRecoveryProgress(
    String this.recoveryKey,
  );

  DoneEnableRecoveryProgress._(
    String this.recoveryKey,
  );

  static LiftRetVal<DoneEnableRecoveryProgress> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final recoveryKey_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final recoveryKey = recoveryKey_lifted.value;
    new_offset += recoveryKey_lifted.bytesRead;
    return LiftRetVal(
        DoneEnableRecoveryProgress._(
          recoveryKey,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(recoveryKey) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 6);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterString.write(
        recoveryKey, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

abstract class EncryptedMessage {
  RustBuffer lower();
  int allocationSize();
  int write(Uint8List buf);
}

class FfiConverterEncryptedMessage {
  static EncryptedMessage lift(RustBuffer buffer) {
    return FfiConverterEncryptedMessage.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<EncryptedMessage> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    final subview = Uint8List.view(buf.buffer, buf.offsetInBytes + 4);
    switch (index) {
      case 1:
        return OlmV1Curve25519AesSha2EncryptedMessage.read(subview);
      case 2:
        return MegolmV1AesSha2EncryptedMessage.read(subview);
      case 3:
        return UnknownEncryptedMessage.read(subview);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(EncryptedMessage value) {
    return value.lower();
  }

  static int allocationSize(EncryptedMessage value) {
    return value.allocationSize();
  }

  static int write(EncryptedMessage value, Uint8List buf) {
    return value.write(buf);
  }
}

class OlmV1Curve25519AesSha2EncryptedMessage extends EncryptedMessage {
  final String senderKey;

  OlmV1Curve25519AesSha2EncryptedMessage(
    String this.senderKey,
  );

  OlmV1Curve25519AesSha2EncryptedMessage._(
    String this.senderKey,
  );

  static LiftRetVal<OlmV1Curve25519AesSha2EncryptedMessage> read(
      Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final senderKey_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final senderKey = senderKey_lifted.value;
    new_offset += senderKey_lifted.bytesRead;
    return LiftRetVal(
        OlmV1Curve25519AesSha2EncryptedMessage._(
          senderKey,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(senderKey) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 1);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterString.write(
        senderKey, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class MegolmV1AesSha2EncryptedMessage extends EncryptedMessage {
  final String sessionId;
  final UtdCause cause;

  MegolmV1AesSha2EncryptedMessage({
    required String this.sessionId,
    required UtdCause this.cause,
  });

  MegolmV1AesSha2EncryptedMessage._(
    String this.sessionId,
    UtdCause this.cause,
  );

  static LiftRetVal<MegolmV1AesSha2EncryptedMessage> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final sessionId_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final sessionId = sessionId_lifted.value;
    new_offset += sessionId_lifted.bytesRead;
    final cause_lifted =
        FfiConverterUtdCause.read(Uint8List.view(buf.buffer, new_offset));
    final cause = cause_lifted.value;
    new_offset += cause_lifted.bytesRead;
    return LiftRetVal(
        MegolmV1AesSha2EncryptedMessage._(
          sessionId,
          cause,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(sessionId) +
        FfiConverterUtdCause.allocationSize(cause) +
        4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 2);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterString.write(
        sessionId, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterUtdCause.write(
        cause, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class UnknownEncryptedMessage extends EncryptedMessage {
  UnknownEncryptedMessage();

  UnknownEncryptedMessage._();

  static LiftRetVal<UnknownEncryptedMessage> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(UnknownEncryptedMessage._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 3);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

abstract class ErrorKind {
  RustBuffer lower();
  int allocationSize();
  int write(Uint8List buf);
}

class FfiConverterErrorKind {
  static ErrorKind lift(RustBuffer buffer) {
    return FfiConverterErrorKind.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<ErrorKind> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    final subview = Uint8List.view(buf.buffer, buf.offsetInBytes + 4);
    switch (index) {
      case 1:
        return BadAliasErrorKind.read(subview);
      case 2:
        return BadJsonErrorKind.read(subview);
      case 3:
        return BadStateErrorKind.read(subview);
      case 4:
        return BadStatusErrorKind.read(subview);
      case 5:
        return CannotLeaveServerNoticeRoomErrorKind.read(subview);
      case 6:
        return CannotOverwriteMediaErrorKind.read(subview);
      case 7:
        return CaptchaInvalidErrorKind.read(subview);
      case 8:
        return CaptchaNeededErrorKind.read(subview);
      case 9:
        return ConnectionFailedErrorKind.read(subview);
      case 10:
        return ConnectionTimeoutErrorKind.read(subview);
      case 11:
        return DuplicateAnnotationErrorKind.read(subview);
      case 12:
        return ExclusiveErrorKind.read(subview);
      case 13:
        return ForbiddenErrorKind.read(subview);
      case 14:
        return GuestAccessForbiddenErrorKind.read(subview);
      case 15:
        return IncompatibleRoomVersionErrorKind.read(subview);
      case 16:
        return InvalidParamErrorKind.read(subview);
      case 17:
        return InvalidRoomStateErrorKind.read(subview);
      case 18:
        return InvalidUsernameErrorKind.read(subview);
      case 19:
        return LimitExceededErrorKind.read(subview);
      case 20:
        return MissingParamErrorKind.read(subview);
      case 21:
        return MissingTokenErrorKind.read(subview);
      case 22:
        return NotFoundErrorKind.read(subview);
      case 23:
        return NotJsonErrorKind.read(subview);
      case 24:
        return NotYetUploadedErrorKind.read(subview);
      case 25:
        return ResourceLimitExceededErrorKind.read(subview);
      case 26:
        return RoomInUseErrorKind.read(subview);
      case 27:
        return ServerNotTrustedErrorKind.read(subview);
      case 28:
        return ThreepidAuthFailedErrorKind.read(subview);
      case 29:
        return ThreepidDeniedErrorKind.read(subview);
      case 30:
        return ThreepidInUseErrorKind.read(subview);
      case 31:
        return ThreepidMediumNotSupportedErrorKind.read(subview);
      case 32:
        return ThreepidNotFoundErrorKind.read(subview);
      case 33:
        return TooLargeErrorKind.read(subview);
      case 34:
        return UnableToAuthorizeJoinErrorKind.read(subview);
      case 35:
        return UnableToGrantJoinErrorKind.read(subview);
      case 36:
        return UnauthorizedErrorKind.read(subview);
      case 37:
        return UnknownErrorKind.read(subview);
      case 38:
        return UnknownTokenErrorKind.read(subview);
      case 39:
        return UnrecognizedErrorKind.read(subview);
      case 40:
        return UnsupportedRoomVersionErrorKind.read(subview);
      case 41:
        return UrlNotSetErrorKind.read(subview);
      case 42:
        return UserDeactivatedErrorKind.read(subview);
      case 43:
        return UserInUseErrorKind.read(subview);
      case 44:
        return UserLockedErrorKind.read(subview);
      case 45:
        return UserSuspendedErrorKind.read(subview);
      case 46:
        return WeakPasswordErrorKind.read(subview);
      case 47:
        return WrongRoomKeysVersionErrorKind.read(subview);
      case 48:
        return CustomErrorKind.read(subview);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(ErrorKind value) {
    return value.lower();
  }

  static int allocationSize(ErrorKind value) {
    return value.allocationSize();
  }

  static int write(ErrorKind value, Uint8List buf) {
    return value.write(buf);
  }
}

class BadAliasErrorKind extends ErrorKind {
  BadAliasErrorKind();

  BadAliasErrorKind._();

  static LiftRetVal<BadAliasErrorKind> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(BadAliasErrorKind._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 1);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class BadJsonErrorKind extends ErrorKind {
  BadJsonErrorKind();

  BadJsonErrorKind._();

  static LiftRetVal<BadJsonErrorKind> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(BadJsonErrorKind._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 2);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class BadStateErrorKind extends ErrorKind {
  BadStateErrorKind();

  BadStateErrorKind._();

  static LiftRetVal<BadStateErrorKind> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(BadStateErrorKind._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 3);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class BadStatusErrorKind extends ErrorKind {
  final int? status;
  final String? body;

  BadStatusErrorKind({
    required int? this.status,
    required String? this.body,
  });

  BadStatusErrorKind._(
    int? this.status,
    String? this.body,
  );

  static LiftRetVal<BadStatusErrorKind> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final status_lifted =
        FfiConverterOptionalUInt16.read(Uint8List.view(buf.buffer, new_offset));
    final status = status_lifted.value;
    new_offset += status_lifted.bytesRead;
    final body_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final body = body_lifted.value;
    new_offset += body_lifted.bytesRead;
    return LiftRetVal(
        BadStatusErrorKind._(
          status,
          body,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterOptionalUInt16.allocationSize(status) +
        FfiConverterOptionalString.allocationSize(body) +
        4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 4);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterOptionalUInt16.write(
        status, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        body, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class CannotLeaveServerNoticeRoomErrorKind extends ErrorKind {
  CannotLeaveServerNoticeRoomErrorKind();

  CannotLeaveServerNoticeRoomErrorKind._();

  static LiftRetVal<CannotLeaveServerNoticeRoomErrorKind> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(CannotLeaveServerNoticeRoomErrorKind._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 5);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class CannotOverwriteMediaErrorKind extends ErrorKind {
  CannotOverwriteMediaErrorKind();

  CannotOverwriteMediaErrorKind._();

  static LiftRetVal<CannotOverwriteMediaErrorKind> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(CannotOverwriteMediaErrorKind._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 6);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class CaptchaInvalidErrorKind extends ErrorKind {
  CaptchaInvalidErrorKind();

  CaptchaInvalidErrorKind._();

  static LiftRetVal<CaptchaInvalidErrorKind> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(CaptchaInvalidErrorKind._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 7);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class CaptchaNeededErrorKind extends ErrorKind {
  CaptchaNeededErrorKind();

  CaptchaNeededErrorKind._();

  static LiftRetVal<CaptchaNeededErrorKind> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(CaptchaNeededErrorKind._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 8);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class ConnectionFailedErrorKind extends ErrorKind {
  ConnectionFailedErrorKind();

  ConnectionFailedErrorKind._();

  static LiftRetVal<ConnectionFailedErrorKind> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(ConnectionFailedErrorKind._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 9);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class ConnectionTimeoutErrorKind extends ErrorKind {
  ConnectionTimeoutErrorKind();

  ConnectionTimeoutErrorKind._();

  static LiftRetVal<ConnectionTimeoutErrorKind> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(ConnectionTimeoutErrorKind._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 10);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class DuplicateAnnotationErrorKind extends ErrorKind {
  DuplicateAnnotationErrorKind();

  DuplicateAnnotationErrorKind._();

  static LiftRetVal<DuplicateAnnotationErrorKind> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(DuplicateAnnotationErrorKind._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 11);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class ExclusiveErrorKind extends ErrorKind {
  ExclusiveErrorKind();

  ExclusiveErrorKind._();

  static LiftRetVal<ExclusiveErrorKind> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(ExclusiveErrorKind._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 12);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class ForbiddenErrorKind extends ErrorKind {
  ForbiddenErrorKind();

  ForbiddenErrorKind._();

  static LiftRetVal<ForbiddenErrorKind> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(ForbiddenErrorKind._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 13);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class GuestAccessForbiddenErrorKind extends ErrorKind {
  GuestAccessForbiddenErrorKind();

  GuestAccessForbiddenErrorKind._();

  static LiftRetVal<GuestAccessForbiddenErrorKind> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(GuestAccessForbiddenErrorKind._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 14);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class IncompatibleRoomVersionErrorKind extends ErrorKind {
  final String roomVersion;

  IncompatibleRoomVersionErrorKind(
    String this.roomVersion,
  );

  IncompatibleRoomVersionErrorKind._(
    String this.roomVersion,
  );

  static LiftRetVal<IncompatibleRoomVersionErrorKind> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final roomVersion_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final roomVersion = roomVersion_lifted.value;
    new_offset += roomVersion_lifted.bytesRead;
    return LiftRetVal(
        IncompatibleRoomVersionErrorKind._(
          roomVersion,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(roomVersion) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 15);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterString.write(
        roomVersion, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class InvalidParamErrorKind extends ErrorKind {
  InvalidParamErrorKind();

  InvalidParamErrorKind._();

  static LiftRetVal<InvalidParamErrorKind> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(InvalidParamErrorKind._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 16);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class InvalidRoomStateErrorKind extends ErrorKind {
  InvalidRoomStateErrorKind();

  InvalidRoomStateErrorKind._();

  static LiftRetVal<InvalidRoomStateErrorKind> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(InvalidRoomStateErrorKind._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 17);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class InvalidUsernameErrorKind extends ErrorKind {
  InvalidUsernameErrorKind();

  InvalidUsernameErrorKind._();

  static LiftRetVal<InvalidUsernameErrorKind> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(InvalidUsernameErrorKind._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 18);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class LimitExceededErrorKind extends ErrorKind {
  final int? retryAfterMs;

  LimitExceededErrorKind(
    int? this.retryAfterMs,
  );

  LimitExceededErrorKind._(
    int? this.retryAfterMs,
  );

  static LiftRetVal<LimitExceededErrorKind> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final retryAfterMs_lifted =
        FfiConverterOptionalUInt64.read(Uint8List.view(buf.buffer, new_offset));
    final retryAfterMs = retryAfterMs_lifted.value;
    new_offset += retryAfterMs_lifted.bytesRead;
    return LiftRetVal(
        LimitExceededErrorKind._(
          retryAfterMs,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterOptionalUInt64.allocationSize(retryAfterMs) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 19);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterOptionalUInt64.write(
        retryAfterMs, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class MissingParamErrorKind extends ErrorKind {
  MissingParamErrorKind();

  MissingParamErrorKind._();

  static LiftRetVal<MissingParamErrorKind> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(MissingParamErrorKind._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 20);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class MissingTokenErrorKind extends ErrorKind {
  MissingTokenErrorKind();

  MissingTokenErrorKind._();

  static LiftRetVal<MissingTokenErrorKind> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(MissingTokenErrorKind._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 21);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class NotFoundErrorKind extends ErrorKind {
  NotFoundErrorKind();

  NotFoundErrorKind._();

  static LiftRetVal<NotFoundErrorKind> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(NotFoundErrorKind._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 22);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class NotJsonErrorKind extends ErrorKind {
  NotJsonErrorKind();

  NotJsonErrorKind._();

  static LiftRetVal<NotJsonErrorKind> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(NotJsonErrorKind._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 23);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class NotYetUploadedErrorKind extends ErrorKind {
  NotYetUploadedErrorKind();

  NotYetUploadedErrorKind._();

  static LiftRetVal<NotYetUploadedErrorKind> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(NotYetUploadedErrorKind._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 24);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class ResourceLimitExceededErrorKind extends ErrorKind {
  final String adminContact;

  ResourceLimitExceededErrorKind(
    String this.adminContact,
  );

  ResourceLimitExceededErrorKind._(
    String this.adminContact,
  );

  static LiftRetVal<ResourceLimitExceededErrorKind> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final adminContact_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final adminContact = adminContact_lifted.value;
    new_offset += adminContact_lifted.bytesRead;
    return LiftRetVal(
        ResourceLimitExceededErrorKind._(
          adminContact,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(adminContact) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 25);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterString.write(
        adminContact, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class RoomInUseErrorKind extends ErrorKind {
  RoomInUseErrorKind();

  RoomInUseErrorKind._();

  static LiftRetVal<RoomInUseErrorKind> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(RoomInUseErrorKind._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 26);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class ServerNotTrustedErrorKind extends ErrorKind {
  ServerNotTrustedErrorKind();

  ServerNotTrustedErrorKind._();

  static LiftRetVal<ServerNotTrustedErrorKind> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(ServerNotTrustedErrorKind._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 27);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class ThreepidAuthFailedErrorKind extends ErrorKind {
  ThreepidAuthFailedErrorKind();

  ThreepidAuthFailedErrorKind._();

  static LiftRetVal<ThreepidAuthFailedErrorKind> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(ThreepidAuthFailedErrorKind._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 28);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class ThreepidDeniedErrorKind extends ErrorKind {
  ThreepidDeniedErrorKind();

  ThreepidDeniedErrorKind._();

  static LiftRetVal<ThreepidDeniedErrorKind> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(ThreepidDeniedErrorKind._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 29);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class ThreepidInUseErrorKind extends ErrorKind {
  ThreepidInUseErrorKind();

  ThreepidInUseErrorKind._();

  static LiftRetVal<ThreepidInUseErrorKind> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(ThreepidInUseErrorKind._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 30);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class ThreepidMediumNotSupportedErrorKind extends ErrorKind {
  ThreepidMediumNotSupportedErrorKind();

  ThreepidMediumNotSupportedErrorKind._();

  static LiftRetVal<ThreepidMediumNotSupportedErrorKind> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(ThreepidMediumNotSupportedErrorKind._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 31);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class ThreepidNotFoundErrorKind extends ErrorKind {
  ThreepidNotFoundErrorKind();

  ThreepidNotFoundErrorKind._();

  static LiftRetVal<ThreepidNotFoundErrorKind> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(ThreepidNotFoundErrorKind._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 32);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class TooLargeErrorKind extends ErrorKind {
  TooLargeErrorKind();

  TooLargeErrorKind._();

  static LiftRetVal<TooLargeErrorKind> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(TooLargeErrorKind._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 33);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class UnableToAuthorizeJoinErrorKind extends ErrorKind {
  UnableToAuthorizeJoinErrorKind();

  UnableToAuthorizeJoinErrorKind._();

  static LiftRetVal<UnableToAuthorizeJoinErrorKind> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(UnableToAuthorizeJoinErrorKind._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 34);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class UnableToGrantJoinErrorKind extends ErrorKind {
  UnableToGrantJoinErrorKind();

  UnableToGrantJoinErrorKind._();

  static LiftRetVal<UnableToGrantJoinErrorKind> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(UnableToGrantJoinErrorKind._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 35);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class UnauthorizedErrorKind extends ErrorKind {
  UnauthorizedErrorKind();

  UnauthorizedErrorKind._();

  static LiftRetVal<UnauthorizedErrorKind> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(UnauthorizedErrorKind._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 36);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class UnknownErrorKind extends ErrorKind {
  UnknownErrorKind();

  UnknownErrorKind._();

  static LiftRetVal<UnknownErrorKind> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(UnknownErrorKind._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 37);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class UnknownTokenErrorKind extends ErrorKind {
  final bool softLogout;

  UnknownTokenErrorKind(
    bool this.softLogout,
  );

  UnknownTokenErrorKind._(
    bool this.softLogout,
  );

  static LiftRetVal<UnknownTokenErrorKind> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final softLogout_lifted =
        FfiConverterBool.read(Uint8List.view(buf.buffer, new_offset));
    final softLogout = softLogout_lifted.value;
    new_offset += softLogout_lifted.bytesRead;
    return LiftRetVal(
        UnknownTokenErrorKind._(
          softLogout,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterBool.allocationSize(softLogout) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 38);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterBool.write(
        softLogout, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class UnrecognizedErrorKind extends ErrorKind {
  UnrecognizedErrorKind();

  UnrecognizedErrorKind._();

  static LiftRetVal<UnrecognizedErrorKind> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(UnrecognizedErrorKind._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 39);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class UnsupportedRoomVersionErrorKind extends ErrorKind {
  UnsupportedRoomVersionErrorKind();

  UnsupportedRoomVersionErrorKind._();

  static LiftRetVal<UnsupportedRoomVersionErrorKind> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(UnsupportedRoomVersionErrorKind._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 40);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class UrlNotSetErrorKind extends ErrorKind {
  UrlNotSetErrorKind();

  UrlNotSetErrorKind._();

  static LiftRetVal<UrlNotSetErrorKind> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(UrlNotSetErrorKind._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 41);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class UserDeactivatedErrorKind extends ErrorKind {
  UserDeactivatedErrorKind();

  UserDeactivatedErrorKind._();

  static LiftRetVal<UserDeactivatedErrorKind> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(UserDeactivatedErrorKind._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 42);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class UserInUseErrorKind extends ErrorKind {
  UserInUseErrorKind();

  UserInUseErrorKind._();

  static LiftRetVal<UserInUseErrorKind> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(UserInUseErrorKind._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 43);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class UserLockedErrorKind extends ErrorKind {
  UserLockedErrorKind();

  UserLockedErrorKind._();

  static LiftRetVal<UserLockedErrorKind> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(UserLockedErrorKind._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 44);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class UserSuspendedErrorKind extends ErrorKind {
  UserSuspendedErrorKind();

  UserSuspendedErrorKind._();

  static LiftRetVal<UserSuspendedErrorKind> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(UserSuspendedErrorKind._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 45);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class WeakPasswordErrorKind extends ErrorKind {
  WeakPasswordErrorKind();

  WeakPasswordErrorKind._();

  static LiftRetVal<WeakPasswordErrorKind> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(WeakPasswordErrorKind._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 46);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class WrongRoomKeysVersionErrorKind extends ErrorKind {
  final String? currentVersion;

  WrongRoomKeysVersionErrorKind(
    String? this.currentVersion,
  );

  WrongRoomKeysVersionErrorKind._(
    String? this.currentVersion,
  );

  static LiftRetVal<WrongRoomKeysVersionErrorKind> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final currentVersion_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final currentVersion = currentVersion_lifted.value;
    new_offset += currentVersion_lifted.bytesRead;
    return LiftRetVal(
        WrongRoomKeysVersionErrorKind._(
          currentVersion,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterOptionalString.allocationSize(currentVersion) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 47);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterOptionalString.write(
        currentVersion, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class CustomErrorKind extends ErrorKind {
  final String errcode;

  CustomErrorKind(
    String this.errcode,
  );

  CustomErrorKind._(
    String this.errcode,
  );

  static LiftRetVal<CustomErrorKind> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final errcode_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final errcode = errcode_lifted.value;
    new_offset += errcode_lifted.bytesRead;
    return LiftRetVal(
        CustomErrorKind._(
          errcode,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(errcode) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 48);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterString.write(
        errcode, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

abstract class EventOrTransactionId {
  RustBuffer lower();
  int allocationSize();
  int write(Uint8List buf);
}

class FfiConverterEventOrTransactionId {
  static EventOrTransactionId lift(RustBuffer buffer) {
    return FfiConverterEventOrTransactionId.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<EventOrTransactionId> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    final subview = Uint8List.view(buf.buffer, buf.offsetInBytes + 4);
    switch (index) {
      case 1:
        return EventIdEventOrTransactionId.read(subview);
      case 2:
        return TransactionIdEventOrTransactionId.read(subview);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(EventOrTransactionId value) {
    return value.lower();
  }

  static int allocationSize(EventOrTransactionId value) {
    return value.allocationSize();
  }

  static int write(EventOrTransactionId value, Uint8List buf) {
    return value.write(buf);
  }
}

class EventIdEventOrTransactionId extends EventOrTransactionId {
  final String eventId;

  EventIdEventOrTransactionId(
    String this.eventId,
  );

  EventIdEventOrTransactionId._(
    String this.eventId,
  );

  static LiftRetVal<EventIdEventOrTransactionId> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final eventId_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final eventId = eventId_lifted.value;
    new_offset += eventId_lifted.bytesRead;
    return LiftRetVal(
        EventIdEventOrTransactionId._(
          eventId,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(eventId) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 1);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterString.write(
        eventId, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class TransactionIdEventOrTransactionId extends EventOrTransactionId {
  final String transactionId;

  TransactionIdEventOrTransactionId(
    String this.transactionId,
  );

  TransactionIdEventOrTransactionId._(
    String this.transactionId,
  );

  static LiftRetVal<TransactionIdEventOrTransactionId> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final transactionId_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final transactionId = transactionId_lifted.value;
    new_offset += transactionId_lifted.bytesRead;
    return LiftRetVal(
        TransactionIdEventOrTransactionId._(
          transactionId,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(transactionId) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 2);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterString.write(
        transactionId, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

abstract class EventSendState {
  RustBuffer lower();
  int allocationSize();
  int write(Uint8List buf);
}

class FfiConverterEventSendState {
  static EventSendState lift(RustBuffer buffer) {
    return FfiConverterEventSendState.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<EventSendState> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    final subview = Uint8List.view(buf.buffer, buf.offsetInBytes + 4);
    switch (index) {
      case 1:
        return NotSentYetEventSendState.read(subview);
      case 2:
        return SendingFailedEventSendState.read(subview);
      case 3:
        return SentEventSendState.read(subview);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(EventSendState value) {
    return value.lower();
  }

  static int allocationSize(EventSendState value) {
    return value.allocationSize();
  }

  static int write(EventSendState value, Uint8List buf) {
    return value.write(buf);
  }
}

class NotSentYetEventSendState extends EventSendState {
  NotSentYetEventSendState();

  NotSentYetEventSendState._();

  static LiftRetVal<NotSentYetEventSendState> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(NotSentYetEventSendState._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 1);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class SendingFailedEventSendState extends EventSendState {
  final QueueWedgeException error;
  final bool isRecoverable;

  SendingFailedEventSendState({
    required QueueWedgeException this.error,
    required bool this.isRecoverable,
  });

  SendingFailedEventSendState._(
    QueueWedgeException this.error,
    bool this.isRecoverable,
  );

  static LiftRetVal<SendingFailedEventSendState> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final error_lifted = FfiConverterQueueWedgeException.read(
        Uint8List.view(buf.buffer, new_offset));
    final error = error_lifted.value;
    new_offset += error_lifted.bytesRead;
    final isRecoverable_lifted =
        FfiConverterBool.read(Uint8List.view(buf.buffer, new_offset));
    final isRecoverable = isRecoverable_lifted.value;
    new_offset += isRecoverable_lifted.bytesRead;
    return LiftRetVal(
        SendingFailedEventSendState._(
          error,
          isRecoverable,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterQueueWedgeException.allocationSize(error) +
        FfiConverterBool.allocationSize(isRecoverable) +
        4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 2);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterQueueWedgeException.write(
        error, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterBool.write(
        isRecoverable, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class SentEventSendState extends EventSendState {
  final String eventId;

  SentEventSendState(
    String this.eventId,
  );

  SentEventSendState._(
    String this.eventId,
  );

  static LiftRetVal<SentEventSendState> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final eventId_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final eventId = eventId_lifted.value;
    new_offset += eventId_lifted.bytesRead;
    return LiftRetVal(
        SentEventSendState._(
          eventId,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(eventId) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 3);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterString.write(
        eventId, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

abstract class FilterTimelineEventType {
  RustBuffer lower();
  int allocationSize();
  int write(Uint8List buf);
}

class FfiConverterFilterTimelineEventType {
  static FilterTimelineEventType lift(RustBuffer buffer) {
    return FfiConverterFilterTimelineEventType.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<FilterTimelineEventType> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    final subview = Uint8List.view(buf.buffer, buf.offsetInBytes + 4);
    switch (index) {
      case 1:
        return MessageLikeFilterTimelineEventType.read(subview);
      case 2:
        return StateFilterTimelineEventType.read(subview);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(FilterTimelineEventType value) {
    return value.lower();
  }

  static int allocationSize(FilterTimelineEventType value) {
    return value.allocationSize();
  }

  static int write(FilterTimelineEventType value, Uint8List buf) {
    return value.write(buf);
  }
}

class MessageLikeFilterTimelineEventType extends FilterTimelineEventType {
  final MessageLikeEventType eventType;

  MessageLikeFilterTimelineEventType(
    MessageLikeEventType this.eventType,
  );

  MessageLikeFilterTimelineEventType._(
    MessageLikeEventType this.eventType,
  );

  static LiftRetVal<MessageLikeFilterTimelineEventType> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final eventType_int = buf.buffer.asByteData(new_offset).getInt32(0);
    final eventType = FfiConverterMessageLikeEventType.lift(
        toRustBuffer(createUint8ListFromInt(eventType_int)));
    new_offset += 4;
    return LiftRetVal(
        MessageLikeFilterTimelineEventType._(
          eventType,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4 + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 1);
    int new_offset = buf.offsetInBytes + 4;

    final eventType_buffer = FfiConverterMessageLikeEventType.lower(eventType);
    final eventType_int =
        eventType_buffer.asUint8List().buffer.asByteData().getInt32(0);
    buf.buffer.asByteData(new_offset).setInt32(0, eventType_int);
    new_offset += 4;

    return new_offset;
  }
}

class StateFilterTimelineEventType extends FilterTimelineEventType {
  final StateEventType eventType;

  StateFilterTimelineEventType(
    StateEventType this.eventType,
  );

  StateFilterTimelineEventType._(
    StateEventType this.eventType,
  );

  static LiftRetVal<StateFilterTimelineEventType> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final eventType_int = buf.buffer.asByteData(new_offset).getInt32(0);
    final eventType = FfiConverterStateEventType.lift(
        toRustBuffer(createUint8ListFromInt(eventType_int)));
    new_offset += 4;
    return LiftRetVal(
        StateFilterTimelineEventType._(
          eventType,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4 + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 2);
    int new_offset = buf.offsetInBytes + 4;

    final eventType_buffer = FfiConverterStateEventType.lower(eventType);
    final eventType_int =
        eventType_buffer.asUint8List().buffer.asByteData().getInt32(0);
    buf.buffer.asByteData(new_offset).setInt32(0, eventType_int);
    new_offset += 4;

    return new_offset;
  }
}

abstract class FocusEventException implements Exception {
  RustBuffer lower();
  int allocationSize();
  int write(Uint8List buf);
}

class FfiConverterFocusEventException {
  static FocusEventException lift(RustBuffer buffer) {
    return FfiConverterFocusEventException.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<FocusEventException> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    final subview = Uint8List.view(buf.buffer, buf.offsetInBytes + 4);
    switch (index) {
      case 1:
        return InvalidEventIdFocusEventException.read(subview);
      case 2:
        return EventNotFoundFocusEventException.read(subview);
      case 3:
        return OtherFocusEventException.read(subview);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(FocusEventException value) {
    return value.lower();
  }

  static int allocationSize(FocusEventException value) {
    return value.allocationSize();
  }

  static int write(FocusEventException value, Uint8List buf) {
    return value.write(buf);
  }
}

class InvalidEventIdFocusEventException extends FocusEventException {
  final String eventId;
  final String err;

  InvalidEventIdFocusEventException({
    required String this.eventId,
    required String this.err,
  });

  InvalidEventIdFocusEventException._(
    String this.eventId,
    String this.err,
  );

  static LiftRetVal<InvalidEventIdFocusEventException> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final eventId_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final eventId = eventId_lifted.value;
    new_offset += eventId_lifted.bytesRead;
    final err_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final err = err_lifted.value;
    new_offset += err_lifted.bytesRead;
    return LiftRetVal(
        InvalidEventIdFocusEventException._(
          eventId,
          err,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(eventId) +
        FfiConverterString.allocationSize(err) +
        4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 1);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterString.write(
        eventId, Uint8List.view(buf.buffer, new_offset));
    new_offset +=
        FfiConverterString.write(err, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }

  @override
  String toString() {
    return "InvalidEventIdFocusEventException($eventId, $err)";
  }
}

class EventNotFoundFocusEventException extends FocusEventException {
  final String eventId;

  EventNotFoundFocusEventException(
    String this.eventId,
  );

  EventNotFoundFocusEventException._(
    String this.eventId,
  );

  static LiftRetVal<EventNotFoundFocusEventException> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final eventId_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final eventId = eventId_lifted.value;
    new_offset += eventId_lifted.bytesRead;
    return LiftRetVal(
        EventNotFoundFocusEventException._(
          eventId,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(eventId) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 2);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterString.write(
        eventId, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }

  @override
  String toString() {
    return "EventNotFoundFocusEventException($eventId)";
  }
}

class OtherFocusEventException extends FocusEventException {
  final String msg;

  OtherFocusEventException(
    String this.msg,
  );

  OtherFocusEventException._(
    String this.msg,
  );

  static LiftRetVal<OtherFocusEventException> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final msg_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final msg = msg_lifted.value;
    new_offset += msg_lifted.bytesRead;
    return LiftRetVal(
        OtherFocusEventException._(
          msg,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(msg) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 3);
    int new_offset = buf.offsetInBytes + 4;

    new_offset +=
        FfiConverterString.write(msg, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }

  @override
  String toString() {
    return "OtherFocusEventException($msg)";
  }
}

abstract class GalleryItemInfo {
  RustBuffer lower();
  int allocationSize();
  int write(Uint8List buf);
}

class FfiConverterGalleryItemInfo {
  static GalleryItemInfo lift(RustBuffer buffer) {
    return FfiConverterGalleryItemInfo.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<GalleryItemInfo> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    final subview = Uint8List.view(buf.buffer, buf.offsetInBytes + 4);
    switch (index) {
      case 1:
        return AudioGalleryItemInfo.read(subview);
      case 2:
        return FileGalleryItemInfo.read(subview);
      case 3:
        return ImageGalleryItemInfo.read(subview);
      case 4:
        return VideoGalleryItemInfo.read(subview);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(GalleryItemInfo value) {
    return value.lower();
  }

  static int allocationSize(GalleryItemInfo value) {
    return value.allocationSize();
  }

  static int write(GalleryItemInfo value, Uint8List buf) {
    return value.write(buf);
  }
}

class AudioGalleryItemInfo extends GalleryItemInfo {
  final AudioInfo audioInfo;
  final String filename;
  final String? caption;
  final FormattedBody? formattedCaption;

  AudioGalleryItemInfo({
    required AudioInfo this.audioInfo,
    required String this.filename,
    required String? this.caption,
    required FormattedBody? this.formattedCaption,
  });

  AudioGalleryItemInfo._(
    AudioInfo this.audioInfo,
    String this.filename,
    String? this.caption,
    FormattedBody? this.formattedCaption,
  );

  static LiftRetVal<AudioGalleryItemInfo> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final audioInfo_lifted =
        FfiConverterAudioInfo.read(Uint8List.view(buf.buffer, new_offset));
    final audioInfo = audioInfo_lifted.value;
    new_offset += audioInfo_lifted.bytesRead;
    final filename_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final filename = filename_lifted.value;
    new_offset += filename_lifted.bytesRead;
    final caption_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final caption = caption_lifted.value;
    new_offset += caption_lifted.bytesRead;
    final formattedCaption_lifted = FfiConverterOptionalFormattedBody.read(
        Uint8List.view(buf.buffer, new_offset));
    final formattedCaption = formattedCaption_lifted.value;
    new_offset += formattedCaption_lifted.bytesRead;
    return LiftRetVal(
        AudioGalleryItemInfo._(
          audioInfo,
          filename,
          caption,
          formattedCaption,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterAudioInfo.allocationSize(audioInfo) +
        FfiConverterString.allocationSize(filename) +
        FfiConverterOptionalString.allocationSize(caption) +
        FfiConverterOptionalFormattedBody.allocationSize(formattedCaption) +
        4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 1);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterAudioInfo.write(
        audioInfo, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterString.write(
        filename, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        caption, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalFormattedBody.write(
        formattedCaption, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class FileGalleryItemInfo extends GalleryItemInfo {
  final FileInfo fileInfo;
  final String filename;
  final String? caption;
  final FormattedBody? formattedCaption;

  FileGalleryItemInfo({
    required FileInfo this.fileInfo,
    required String this.filename,
    required String? this.caption,
    required FormattedBody? this.formattedCaption,
  });

  FileGalleryItemInfo._(
    FileInfo this.fileInfo,
    String this.filename,
    String? this.caption,
    FormattedBody? this.formattedCaption,
  );

  static LiftRetVal<FileGalleryItemInfo> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final fileInfo_lifted =
        FfiConverterFileInfo.read(Uint8List.view(buf.buffer, new_offset));
    final fileInfo = fileInfo_lifted.value;
    new_offset += fileInfo_lifted.bytesRead;
    final filename_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final filename = filename_lifted.value;
    new_offset += filename_lifted.bytesRead;
    final caption_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final caption = caption_lifted.value;
    new_offset += caption_lifted.bytesRead;
    final formattedCaption_lifted = FfiConverterOptionalFormattedBody.read(
        Uint8List.view(buf.buffer, new_offset));
    final formattedCaption = formattedCaption_lifted.value;
    new_offset += formattedCaption_lifted.bytesRead;
    return LiftRetVal(
        FileGalleryItemInfo._(
          fileInfo,
          filename,
          caption,
          formattedCaption,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterFileInfo.allocationSize(fileInfo) +
        FfiConverterString.allocationSize(filename) +
        FfiConverterOptionalString.allocationSize(caption) +
        FfiConverterOptionalFormattedBody.allocationSize(formattedCaption) +
        4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 2);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterFileInfo.write(
        fileInfo, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterString.write(
        filename, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        caption, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalFormattedBody.write(
        formattedCaption, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class ImageGalleryItemInfo extends GalleryItemInfo {
  final ImageInfo imageInfo;
  final String filename;
  final String? caption;
  final FormattedBody? formattedCaption;
  final String? thumbnailPath;

  ImageGalleryItemInfo({
    required ImageInfo this.imageInfo,
    required String this.filename,
    required String? this.caption,
    required FormattedBody? this.formattedCaption,
    required String? this.thumbnailPath,
  });

  ImageGalleryItemInfo._(
    ImageInfo this.imageInfo,
    String this.filename,
    String? this.caption,
    FormattedBody? this.formattedCaption,
    String? this.thumbnailPath,
  );

  static LiftRetVal<ImageGalleryItemInfo> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final imageInfo_lifted =
        FfiConverterImageInfo.read(Uint8List.view(buf.buffer, new_offset));
    final imageInfo = imageInfo_lifted.value;
    new_offset += imageInfo_lifted.bytesRead;
    final filename_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final filename = filename_lifted.value;
    new_offset += filename_lifted.bytesRead;
    final caption_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final caption = caption_lifted.value;
    new_offset += caption_lifted.bytesRead;
    final formattedCaption_lifted = FfiConverterOptionalFormattedBody.read(
        Uint8List.view(buf.buffer, new_offset));
    final formattedCaption = formattedCaption_lifted.value;
    new_offset += formattedCaption_lifted.bytesRead;
    final thumbnailPath_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final thumbnailPath = thumbnailPath_lifted.value;
    new_offset += thumbnailPath_lifted.bytesRead;
    return LiftRetVal(
        ImageGalleryItemInfo._(
          imageInfo,
          filename,
          caption,
          formattedCaption,
          thumbnailPath,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterImageInfo.allocationSize(imageInfo) +
        FfiConverterString.allocationSize(filename) +
        FfiConverterOptionalString.allocationSize(caption) +
        FfiConverterOptionalFormattedBody.allocationSize(formattedCaption) +
        FfiConverterOptionalString.allocationSize(thumbnailPath) +
        4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 3);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterImageInfo.write(
        imageInfo, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterString.write(
        filename, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        caption, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalFormattedBody.write(
        formattedCaption, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        thumbnailPath, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class VideoGalleryItemInfo extends GalleryItemInfo {
  final VideoInfo videoInfo;
  final String filename;
  final String? caption;
  final FormattedBody? formattedCaption;
  final String? thumbnailPath;

  VideoGalleryItemInfo({
    required VideoInfo this.videoInfo,
    required String this.filename,
    required String? this.caption,
    required FormattedBody? this.formattedCaption,
    required String? this.thumbnailPath,
  });

  VideoGalleryItemInfo._(
    VideoInfo this.videoInfo,
    String this.filename,
    String? this.caption,
    FormattedBody? this.formattedCaption,
    String? this.thumbnailPath,
  );

  static LiftRetVal<VideoGalleryItemInfo> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final videoInfo_lifted =
        FfiConverterVideoInfo.read(Uint8List.view(buf.buffer, new_offset));
    final videoInfo = videoInfo_lifted.value;
    new_offset += videoInfo_lifted.bytesRead;
    final filename_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final filename = filename_lifted.value;
    new_offset += filename_lifted.bytesRead;
    final caption_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final caption = caption_lifted.value;
    new_offset += caption_lifted.bytesRead;
    final formattedCaption_lifted = FfiConverterOptionalFormattedBody.read(
        Uint8List.view(buf.buffer, new_offset));
    final formattedCaption = formattedCaption_lifted.value;
    new_offset += formattedCaption_lifted.bytesRead;
    final thumbnailPath_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final thumbnailPath = thumbnailPath_lifted.value;
    new_offset += thumbnailPath_lifted.bytesRead;
    return LiftRetVal(
        VideoGalleryItemInfo._(
          videoInfo,
          filename,
          caption,
          formattedCaption,
          thumbnailPath,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterVideoInfo.allocationSize(videoInfo) +
        FfiConverterString.allocationSize(filename) +
        FfiConverterOptionalString.allocationSize(caption) +
        FfiConverterOptionalFormattedBody.allocationSize(formattedCaption) +
        FfiConverterOptionalString.allocationSize(thumbnailPath) +
        4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 4);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterVideoInfo.write(
        videoInfo, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterString.write(
        filename, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        caption, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalFormattedBody.write(
        formattedCaption, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        thumbnailPath, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

abstract class GalleryItemType {
  RustBuffer lower();
  int allocationSize();
  int write(Uint8List buf);
}

class FfiConverterGalleryItemType {
  static GalleryItemType lift(RustBuffer buffer) {
    return FfiConverterGalleryItemType.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<GalleryItemType> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    final subview = Uint8List.view(buf.buffer, buf.offsetInBytes + 4);
    switch (index) {
      case 1:
        return ImageGalleryItemType.read(subview);
      case 2:
        return AudioGalleryItemType.read(subview);
      case 3:
        return VideoGalleryItemType.read(subview);
      case 4:
        return FileGalleryItemType.read(subview);
      case 5:
        return OtherGalleryItemType.read(subview);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(GalleryItemType value) {
    return value.lower();
  }

  static int allocationSize(GalleryItemType value) {
    return value.allocationSize();
  }

  static int write(GalleryItemType value, Uint8List buf) {
    return value.write(buf);
  }
}

class ImageGalleryItemType extends GalleryItemType {
  final ImageMessageContent content;

  ImageGalleryItemType(
    ImageMessageContent this.content,
  );

  ImageGalleryItemType._(
    ImageMessageContent this.content,
  );

  static LiftRetVal<ImageGalleryItemType> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final content_lifted = FfiConverterImageMessageContent.read(
        Uint8List.view(buf.buffer, new_offset));
    final content = content_lifted.value;
    new_offset += content_lifted.bytesRead;
    return LiftRetVal(
        ImageGalleryItemType._(
          content,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterImageMessageContent.allocationSize(content) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 1);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterImageMessageContent.write(
        content, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class AudioGalleryItemType extends GalleryItemType {
  final AudioMessageContent content;

  AudioGalleryItemType(
    AudioMessageContent this.content,
  );

  AudioGalleryItemType._(
    AudioMessageContent this.content,
  );

  static LiftRetVal<AudioGalleryItemType> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final content_lifted = FfiConverterAudioMessageContent.read(
        Uint8List.view(buf.buffer, new_offset));
    final content = content_lifted.value;
    new_offset += content_lifted.bytesRead;
    return LiftRetVal(
        AudioGalleryItemType._(
          content,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterAudioMessageContent.allocationSize(content) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 2);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterAudioMessageContent.write(
        content, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class VideoGalleryItemType extends GalleryItemType {
  final VideoMessageContent content;

  VideoGalleryItemType(
    VideoMessageContent this.content,
  );

  VideoGalleryItemType._(
    VideoMessageContent this.content,
  );

  static LiftRetVal<VideoGalleryItemType> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final content_lifted = FfiConverterVideoMessageContent.read(
        Uint8List.view(buf.buffer, new_offset));
    final content = content_lifted.value;
    new_offset += content_lifted.bytesRead;
    return LiftRetVal(
        VideoGalleryItemType._(
          content,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterVideoMessageContent.allocationSize(content) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 3);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterVideoMessageContent.write(
        content, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class FileGalleryItemType extends GalleryItemType {
  final FileMessageContent content;

  FileGalleryItemType(
    FileMessageContent this.content,
  );

  FileGalleryItemType._(
    FileMessageContent this.content,
  );

  static LiftRetVal<FileGalleryItemType> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final content_lifted = FfiConverterFileMessageContent.read(
        Uint8List.view(buf.buffer, new_offset));
    final content = content_lifted.value;
    new_offset += content_lifted.bytesRead;
    return LiftRetVal(
        FileGalleryItemType._(
          content,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterFileMessageContent.allocationSize(content) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 4);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterFileMessageContent.write(
        content, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class OtherGalleryItemType extends GalleryItemType {
  final String itemtype;
  final String body;

  OtherGalleryItemType({
    required String this.itemtype,
    required String this.body,
  });

  OtherGalleryItemType._(
    String this.itemtype,
    String this.body,
  );

  static LiftRetVal<OtherGalleryItemType> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final itemtype_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final itemtype = itemtype_lifted.value;
    new_offset += itemtype_lifted.bytesRead;
    final body_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final body = body_lifted.value;
    new_offset += body_lifted.bytesRead;
    return LiftRetVal(
        OtherGalleryItemType._(
          itemtype,
          body,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(itemtype) +
        FfiConverterString.allocationSize(body) +
        4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 5);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterString.write(
        itemtype, Uint8List.view(buf.buffer, new_offset));
    new_offset +=
        FfiConverterString.write(body, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

abstract class HumanQrLoginException implements Exception {
  RustBuffer lower();
  int allocationSize();
  int write(Uint8List buf);
}

class FfiConverterHumanQrLoginException {
  static HumanQrLoginException lift(RustBuffer buffer) {
    return FfiConverterHumanQrLoginException.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<HumanQrLoginException> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    final subview = Uint8List.view(buf.buffer, buf.offsetInBytes + 4);
    switch (index) {
      case 1:
        return LinkingNotSupportedHumanQrLoginException.read(subview);
      case 2:
        return CancelledHumanQrLoginException.read(subview);
      case 3:
        return ExpiredHumanQrLoginException.read(subview);
      case 4:
        return ConnectionInsecureHumanQrLoginException.read(subview);
      case 5:
        return DeclinedHumanQrLoginException.read(subview);
      case 6:
        return UnknownHumanQrLoginException.read(subview);
      case 7:
        return SlidingSyncNotAvailableHumanQrLoginException.read(subview);
      case 8:
        return OidcMetadataInvalidHumanQrLoginException.read(subview);
      case 9:
        return OtherDeviceNotSignedInHumanQrLoginException.read(subview);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(HumanQrLoginException value) {
    return value.lower();
  }

  static int allocationSize(HumanQrLoginException value) {
    return value.allocationSize();
  }

  static int write(HumanQrLoginException value, Uint8List buf) {
    return value.write(buf);
  }
}

class LinkingNotSupportedHumanQrLoginException extends HumanQrLoginException {
  LinkingNotSupportedHumanQrLoginException();

  LinkingNotSupportedHumanQrLoginException._();

  static LiftRetVal<LinkingNotSupportedHumanQrLoginException> read(
      Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(LinkingNotSupportedHumanQrLoginException._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 1);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }

  @override
  String toString() {
    return "LinkingNotSupportedHumanQrLoginException";
  }
}

class CancelledHumanQrLoginException extends HumanQrLoginException {
  CancelledHumanQrLoginException();

  CancelledHumanQrLoginException._();

  static LiftRetVal<CancelledHumanQrLoginException> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(CancelledHumanQrLoginException._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 2);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }

  @override
  String toString() {
    return "CancelledHumanQrLoginException";
  }
}

class ExpiredHumanQrLoginException extends HumanQrLoginException {
  ExpiredHumanQrLoginException();

  ExpiredHumanQrLoginException._();

  static LiftRetVal<ExpiredHumanQrLoginException> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(ExpiredHumanQrLoginException._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 3);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }

  @override
  String toString() {
    return "ExpiredHumanQrLoginException";
  }
}

class ConnectionInsecureHumanQrLoginException extends HumanQrLoginException {
  ConnectionInsecureHumanQrLoginException();

  ConnectionInsecureHumanQrLoginException._();

  static LiftRetVal<ConnectionInsecureHumanQrLoginException> read(
      Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(ConnectionInsecureHumanQrLoginException._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 4);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }

  @override
  String toString() {
    return "ConnectionInsecureHumanQrLoginException";
  }
}

class DeclinedHumanQrLoginException extends HumanQrLoginException {
  DeclinedHumanQrLoginException();

  DeclinedHumanQrLoginException._();

  static LiftRetVal<DeclinedHumanQrLoginException> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(DeclinedHumanQrLoginException._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 5);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }

  @override
  String toString() {
    return "DeclinedHumanQrLoginException";
  }
}

class UnknownHumanQrLoginException extends HumanQrLoginException {
  UnknownHumanQrLoginException();

  UnknownHumanQrLoginException._();

  static LiftRetVal<UnknownHumanQrLoginException> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(UnknownHumanQrLoginException._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 6);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }

  @override
  String toString() {
    return "UnknownHumanQrLoginException";
  }
}

class SlidingSyncNotAvailableHumanQrLoginException
    extends HumanQrLoginException {
  SlidingSyncNotAvailableHumanQrLoginException();

  SlidingSyncNotAvailableHumanQrLoginException._();

  static LiftRetVal<SlidingSyncNotAvailableHumanQrLoginException> read(
      Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(
        SlidingSyncNotAvailableHumanQrLoginException._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 7);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }

  @override
  String toString() {
    return "SlidingSyncNotAvailableHumanQrLoginException";
  }
}

class OidcMetadataInvalidHumanQrLoginException extends HumanQrLoginException {
  OidcMetadataInvalidHumanQrLoginException();

  OidcMetadataInvalidHumanQrLoginException._();

  static LiftRetVal<OidcMetadataInvalidHumanQrLoginException> read(
      Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(OidcMetadataInvalidHumanQrLoginException._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 8);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }

  @override
  String toString() {
    return "OidcMetadataInvalidHumanQrLoginException";
  }
}

class OtherDeviceNotSignedInHumanQrLoginException
    extends HumanQrLoginException {
  OtherDeviceNotSignedInHumanQrLoginException();

  OtherDeviceNotSignedInHumanQrLoginException._();

  static LiftRetVal<OtherDeviceNotSignedInHumanQrLoginException> read(
      Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(
        OtherDeviceNotSignedInHumanQrLoginException._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 9);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }

  @override
  String toString() {
    return "OtherDeviceNotSignedInHumanQrLoginException";
  }
}

enum InviteAvatars {
  on_,
  off,
  ;
}

class FfiConverterInviteAvatars {
  static InviteAvatars lift(RustBuffer buffer) {
    return FfiConverterInviteAvatars.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<InviteAvatars> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    switch (index) {
      case 1:
        return LiftRetVal(InviteAvatars.on_, 4);
      case 2:
        return LiftRetVal(InviteAvatars.off, 4);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(InviteAvatars input) {
    return toRustBuffer(createUint8ListFromInt(input.index + 1));
  }

  static int allocationSize(InviteAvatars value) {
    return 4;
  }

  static int write(InviteAvatars value, Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, value.index + 1);
    return 4;
  }
}

abstract class JoinRule {
  RustBuffer lower();
  int allocationSize();
  int write(Uint8List buf);
}

class FfiConverterJoinRule {
  static JoinRule lift(RustBuffer buffer) {
    return FfiConverterJoinRule.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<JoinRule> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    final subview = Uint8List.view(buf.buffer, buf.offsetInBytes + 4);
    switch (index) {
      case 1:
        return PublicJoinRule.read(subview);
      case 2:
        return InviteJoinRule.read(subview);
      case 3:
        return KnockJoinRule.read(subview);
      case 4:
        return PrivateJoinRule.read(subview);
      case 5:
        return RestrictedJoinRule.read(subview);
      case 6:
        return KnockRestrictedJoinRule.read(subview);
      case 7:
        return CustomJoinRule.read(subview);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(JoinRule value) {
    return value.lower();
  }

  static int allocationSize(JoinRule value) {
    return value.allocationSize();
  }

  static int write(JoinRule value, Uint8List buf) {
    return value.write(buf);
  }
}

class PublicJoinRule extends JoinRule {
  PublicJoinRule();

  PublicJoinRule._();

  static LiftRetVal<PublicJoinRule> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(PublicJoinRule._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 1);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class InviteJoinRule extends JoinRule {
  InviteJoinRule();

  InviteJoinRule._();

  static LiftRetVal<InviteJoinRule> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(InviteJoinRule._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 2);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class KnockJoinRule extends JoinRule {
  KnockJoinRule();

  KnockJoinRule._();

  static LiftRetVal<KnockJoinRule> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(KnockJoinRule._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 3);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class PrivateJoinRule extends JoinRule {
  PrivateJoinRule();

  PrivateJoinRule._();

  static LiftRetVal<PrivateJoinRule> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(PrivateJoinRule._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 4);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class RestrictedJoinRule extends JoinRule {
  final List<AllowRule> rules;

  RestrictedJoinRule(
    List<AllowRule> this.rules,
  );

  RestrictedJoinRule._(
    List<AllowRule> this.rules,
  );

  static LiftRetVal<RestrictedJoinRule> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final rules_lifted = FfiConverterSequenceAllowRule.read(
        Uint8List.view(buf.buffer, new_offset));
    final rules = rules_lifted.value;
    new_offset += rules_lifted.bytesRead;
    return LiftRetVal(
        RestrictedJoinRule._(
          rules,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterSequenceAllowRule.allocationSize(rules) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 5);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterSequenceAllowRule.write(
        rules, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class KnockRestrictedJoinRule extends JoinRule {
  final List<AllowRule> rules;

  KnockRestrictedJoinRule(
    List<AllowRule> this.rules,
  );

  KnockRestrictedJoinRule._(
    List<AllowRule> this.rules,
  );

  static LiftRetVal<KnockRestrictedJoinRule> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final rules_lifted = FfiConverterSequenceAllowRule.read(
        Uint8List.view(buf.buffer, new_offset));
    final rules = rules_lifted.value;
    new_offset += rules_lifted.bytesRead;
    return LiftRetVal(
        KnockRestrictedJoinRule._(
          rules,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterSequenceAllowRule.allocationSize(rules) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 6);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterSequenceAllowRule.write(
        rules, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class CustomJoinRule extends JoinRule {
  final String repr;

  CustomJoinRule(
    String this.repr,
  );

  CustomJoinRule._(
    String this.repr,
  );

  static LiftRetVal<CustomJoinRule> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final repr_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final repr = repr_lifted.value;
    new_offset += repr_lifted.bytesRead;
    return LiftRetVal(
        CustomJoinRule._(
          repr,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(repr) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 7);
    int new_offset = buf.offsetInBytes + 4;

    new_offset +=
        FfiConverterString.write(repr, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

abstract class JsonValue {
  RustBuffer lower();
  int allocationSize();
  int write(Uint8List buf);
}

class FfiConverterJsonValue {
  static JsonValue lift(RustBuffer buffer) {
    return FfiConverterJsonValue.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<JsonValue> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    final subview = Uint8List.view(buf.buffer, buf.offsetInBytes + 4);
    switch (index) {
      case 1:
        return NullJsonValue.read(subview);
      case 2:
        return BoolJsonValue.read(subview);
      case 3:
        return IntegerJsonValue.read(subview);
      case 4:
        return StringJsonValue.read(subview);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(JsonValue value) {
    return value.lower();
  }

  static int allocationSize(JsonValue value) {
    return value.allocationSize();
  }

  static int write(JsonValue value, Uint8List buf) {
    return value.write(buf);
  }
}

class NullJsonValue extends JsonValue {
  NullJsonValue();

  NullJsonValue._();

  static LiftRetVal<NullJsonValue> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(NullJsonValue._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 1);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class BoolJsonValue extends JsonValue {
  final bool value;

  BoolJsonValue(
    bool this.value,
  );

  BoolJsonValue._(
    bool this.value,
  );

  static LiftRetVal<BoolJsonValue> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final value_lifted =
        FfiConverterBool.read(Uint8List.view(buf.buffer, new_offset));
    final value = value_lifted.value;
    new_offset += value_lifted.bytesRead;
    return LiftRetVal(
        BoolJsonValue._(
          value,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterBool.allocationSize(value) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 2);
    int new_offset = buf.offsetInBytes + 4;

    new_offset +=
        FfiConverterBool.write(value, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class IntegerJsonValue extends JsonValue {
  final int value;

  IntegerJsonValue(
    int this.value,
  );

  IntegerJsonValue._(
    int this.value,
  );

  static LiftRetVal<IntegerJsonValue> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final value_lifted =
        FfiConverterInt64.read(Uint8List.view(buf.buffer, new_offset));
    final value = value_lifted.value;
    new_offset += value_lifted.bytesRead;
    return LiftRetVal(
        IntegerJsonValue._(
          value,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterInt64.allocationSize(value) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 3);
    int new_offset = buf.offsetInBytes + 4;

    new_offset +=
        FfiConverterInt64.write(value, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class StringJsonValue extends JsonValue {
  final String value;

  StringJsonValue(
    String this.value,
  );

  StringJsonValue._(
    String this.value,
  );

  static LiftRetVal<StringJsonValue> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final value_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final value = value_lifted.value;
    new_offset += value_lifted.bytesRead;
    return LiftRetVal(
        StringJsonValue._(
          value,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(value) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 4);
    int new_offset = buf.offsetInBytes + 4;

    new_offset +=
        FfiConverterString.write(value, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

enum KeyDerivationAlgorithm {
  pbkfd2,
  ;
}

class FfiConverterKeyDerivationAlgorithm {
  static KeyDerivationAlgorithm lift(RustBuffer buffer) {
    return FfiConverterKeyDerivationAlgorithm.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<KeyDerivationAlgorithm> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    switch (index) {
      case 1:
        return LiftRetVal(KeyDerivationAlgorithm.pbkfd2, 4);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(KeyDerivationAlgorithm input) {
    return toRustBuffer(createUint8ListFromInt(input.index + 1));
  }

  static int allocationSize(KeyDerivationAlgorithm value) {
    return 4;
  }

  static int write(KeyDerivationAlgorithm value, Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, value.index + 1);
    return 4;
  }
}

enum LogLevel {
  error,
  warn,
  info,
  debug,
  trace,
  ;
}

class FfiConverterLogLevel {
  static LogLevel lift(RustBuffer buffer) {
    return FfiConverterLogLevel.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<LogLevel> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    switch (index) {
      case 1:
        return LiftRetVal(LogLevel.error, 4);
      case 2:
        return LiftRetVal(LogLevel.warn, 4);
      case 3:
        return LiftRetVal(LogLevel.info, 4);
      case 4:
        return LiftRetVal(LogLevel.debug, 4);
      case 5:
        return LiftRetVal(LogLevel.trace, 4);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(LogLevel input) {
    return toRustBuffer(createUint8ListFromInt(input.index + 1));
  }

  static int allocationSize(LogLevel value) {
    return 4;
  }

  static int write(LogLevel value, Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, value.index + 1);
    return 4;
  }
}

abstract class MatrixId {
  RustBuffer lower();
  int allocationSize();
  int write(Uint8List buf);
}

class FfiConverterMatrixId {
  static MatrixId lift(RustBuffer buffer) {
    return FfiConverterMatrixId.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<MatrixId> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    final subview = Uint8List.view(buf.buffer, buf.offsetInBytes + 4);
    switch (index) {
      case 1:
        return RoomMatrixId.read(subview);
      case 2:
        return RoomAliasMatrixId.read(subview);
      case 3:
        return UserMatrixId.read(subview);
      case 4:
        return EventOnRoomIdMatrixId.read(subview);
      case 5:
        return EventOnRoomAliasMatrixId.read(subview);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(MatrixId value) {
    return value.lower();
  }

  static int allocationSize(MatrixId value) {
    return value.allocationSize();
  }

  static int write(MatrixId value, Uint8List buf) {
    return value.write(buf);
  }
}

class RoomMatrixId extends MatrixId {
  final String id;

  RoomMatrixId(
    String this.id,
  );

  RoomMatrixId._(
    String this.id,
  );

  static LiftRetVal<RoomMatrixId> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final id_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final id = id_lifted.value;
    new_offset += id_lifted.bytesRead;
    return LiftRetVal(
        RoomMatrixId._(
          id,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(id) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 1);
    int new_offset = buf.offsetInBytes + 4;

    new_offset +=
        FfiConverterString.write(id, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class RoomAliasMatrixId extends MatrixId {
  final String alias;

  RoomAliasMatrixId(
    String this.alias,
  );

  RoomAliasMatrixId._(
    String this.alias,
  );

  static LiftRetVal<RoomAliasMatrixId> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final alias_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final alias = alias_lifted.value;
    new_offset += alias_lifted.bytesRead;
    return LiftRetVal(
        RoomAliasMatrixId._(
          alias,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(alias) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 2);
    int new_offset = buf.offsetInBytes + 4;

    new_offset +=
        FfiConverterString.write(alias, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class UserMatrixId extends MatrixId {
  final String id;

  UserMatrixId(
    String this.id,
  );

  UserMatrixId._(
    String this.id,
  );

  static LiftRetVal<UserMatrixId> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final id_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final id = id_lifted.value;
    new_offset += id_lifted.bytesRead;
    return LiftRetVal(
        UserMatrixId._(
          id,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(id) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 3);
    int new_offset = buf.offsetInBytes + 4;

    new_offset +=
        FfiConverterString.write(id, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class EventOnRoomIdMatrixId extends MatrixId {
  final String roomId;
  final String eventId;

  EventOnRoomIdMatrixId({
    required String this.roomId,
    required String this.eventId,
  });

  EventOnRoomIdMatrixId._(
    String this.roomId,
    String this.eventId,
  );

  static LiftRetVal<EventOnRoomIdMatrixId> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final roomId_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final roomId = roomId_lifted.value;
    new_offset += roomId_lifted.bytesRead;
    final eventId_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final eventId = eventId_lifted.value;
    new_offset += eventId_lifted.bytesRead;
    return LiftRetVal(
        EventOnRoomIdMatrixId._(
          roomId,
          eventId,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(roomId) +
        FfiConverterString.allocationSize(eventId) +
        4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 4);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterString.write(
        roomId, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterString.write(
        eventId, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class EventOnRoomAliasMatrixId extends MatrixId {
  final String alias;
  final String eventId;

  EventOnRoomAliasMatrixId({
    required String this.alias,
    required String this.eventId,
  });

  EventOnRoomAliasMatrixId._(
    String this.alias,
    String this.eventId,
  );

  static LiftRetVal<EventOnRoomAliasMatrixId> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final alias_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final alias = alias_lifted.value;
    new_offset += alias_lifted.bytesRead;
    final eventId_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final eventId = eventId_lifted.value;
    new_offset += eventId_lifted.bytesRead;
    return LiftRetVal(
        EventOnRoomAliasMatrixId._(
          alias,
          eventId,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(alias) +
        FfiConverterString.allocationSize(eventId) +
        4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 5);
    int new_offset = buf.offsetInBytes + 4;

    new_offset +=
        FfiConverterString.write(alias, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterString.write(
        eventId, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

enum MediaInfoException {
  missingField,
  invalidField,
  ;
}

class FfiConverterMediaInfoException {
  static MediaInfoException lift(RustBuffer buffer) {
    return FfiConverterMediaInfoException.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<MediaInfoException> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    switch (index) {
      case 1:
        return LiftRetVal(MediaInfoException.missingField, 4);
      case 2:
        return LiftRetVal(MediaInfoException.invalidField, 4);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(MediaInfoException input) {
    return toRustBuffer(createUint8ListFromInt(input.index + 1));
  }

  static int allocationSize(MediaInfoException value) {
    return 4;
  }

  static int write(MediaInfoException value, Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, value.index + 1);
    return 4;
  }
}

enum MediaPreviews {
  on_,
  private,
  off,
  ;
}

class FfiConverterMediaPreviews {
  static MediaPreviews lift(RustBuffer buffer) {
    return FfiConverterMediaPreviews.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<MediaPreviews> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    switch (index) {
      case 1:
        return LiftRetVal(MediaPreviews.on_, 4);
      case 2:
        return LiftRetVal(MediaPreviews.private, 4);
      case 3:
        return LiftRetVal(MediaPreviews.off, 4);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(MediaPreviews input) {
    return toRustBuffer(createUint8ListFromInt(input.index + 1));
  }

  static int allocationSize(MediaPreviews value) {
    return 4;
  }

  static int write(MediaPreviews value, Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, value.index + 1);
    return 4;
  }
}

enum Membership {
  invited,
  joined,
  left,
  knocked,
  banned,
  ;
}

class FfiConverterMembership {
  static Membership lift(RustBuffer buffer) {
    return FfiConverterMembership.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<Membership> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    switch (index) {
      case 1:
        return LiftRetVal(Membership.invited, 4);
      case 2:
        return LiftRetVal(Membership.joined, 4);
      case 3:
        return LiftRetVal(Membership.left, 4);
      case 4:
        return LiftRetVal(Membership.knocked, 4);
      case 5:
        return LiftRetVal(Membership.banned, 4);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(Membership input) {
    return toRustBuffer(createUint8ListFromInt(input.index + 1));
  }

  static int allocationSize(Membership value) {
    return 4;
  }

  static int write(Membership value, Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, value.index + 1);
    return 4;
  }
}

enum MembershipChange {
  none,
  error,
  joined,
  left,
  banned,
  unbanned,
  kicked,
  invited,
  kickedAndBanned,
  invitationAccepted,
  invitationRejected,
  invitationRevoked,
  knocked,
  knockAccepted,
  knockRetracted,
  knockDenied,
  notImplemented,
  ;
}

class FfiConverterMembershipChange {
  static MembershipChange lift(RustBuffer buffer) {
    return FfiConverterMembershipChange.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<MembershipChange> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    switch (index) {
      case 1:
        return LiftRetVal(MembershipChange.none, 4);
      case 2:
        return LiftRetVal(MembershipChange.error, 4);
      case 3:
        return LiftRetVal(MembershipChange.joined, 4);
      case 4:
        return LiftRetVal(MembershipChange.left, 4);
      case 5:
        return LiftRetVal(MembershipChange.banned, 4);
      case 6:
        return LiftRetVal(MembershipChange.unbanned, 4);
      case 7:
        return LiftRetVal(MembershipChange.kicked, 4);
      case 8:
        return LiftRetVal(MembershipChange.invited, 4);
      case 9:
        return LiftRetVal(MembershipChange.kickedAndBanned, 4);
      case 10:
        return LiftRetVal(MembershipChange.invitationAccepted, 4);
      case 11:
        return LiftRetVal(MembershipChange.invitationRejected, 4);
      case 12:
        return LiftRetVal(MembershipChange.invitationRevoked, 4);
      case 13:
        return LiftRetVal(MembershipChange.knocked, 4);
      case 14:
        return LiftRetVal(MembershipChange.knockAccepted, 4);
      case 15:
        return LiftRetVal(MembershipChange.knockRetracted, 4);
      case 16:
        return LiftRetVal(MembershipChange.knockDenied, 4);
      case 17:
        return LiftRetVal(MembershipChange.notImplemented, 4);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(MembershipChange input) {
    return toRustBuffer(createUint8ListFromInt(input.index + 1));
  }

  static int allocationSize(MembershipChange value) {
    return 4;
  }

  static int write(MembershipChange value, Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, value.index + 1);
    return 4;
  }
}

abstract class MembershipState {
  RustBuffer lower();
  int allocationSize();
  int write(Uint8List buf);
}

class FfiConverterMembershipState {
  static MembershipState lift(RustBuffer buffer) {
    return FfiConverterMembershipState.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<MembershipState> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    final subview = Uint8List.view(buf.buffer, buf.offsetInBytes + 4);
    switch (index) {
      case 1:
        return BanMembershipState.read(subview);
      case 2:
        return InviteMembershipState.read(subview);
      case 3:
        return JoinMembershipState.read(subview);
      case 4:
        return KnockMembershipState.read(subview);
      case 5:
        return LeaveMembershipState.read(subview);
      case 6:
        return CustomMembershipState.read(subview);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(MembershipState value) {
    return value.lower();
  }

  static int allocationSize(MembershipState value) {
    return value.allocationSize();
  }

  static int write(MembershipState value, Uint8List buf) {
    return value.write(buf);
  }
}

class BanMembershipState extends MembershipState {
  BanMembershipState();

  BanMembershipState._();

  static LiftRetVal<BanMembershipState> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(BanMembershipState._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 1);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class InviteMembershipState extends MembershipState {
  InviteMembershipState();

  InviteMembershipState._();

  static LiftRetVal<InviteMembershipState> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(InviteMembershipState._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 2);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class JoinMembershipState extends MembershipState {
  JoinMembershipState();

  JoinMembershipState._();

  static LiftRetVal<JoinMembershipState> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(JoinMembershipState._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 3);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class KnockMembershipState extends MembershipState {
  KnockMembershipState();

  KnockMembershipState._();

  static LiftRetVal<KnockMembershipState> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(KnockMembershipState._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 4);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class LeaveMembershipState extends MembershipState {
  LeaveMembershipState();

  LeaveMembershipState._();

  static LiftRetVal<LeaveMembershipState> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(LeaveMembershipState._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 5);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class CustomMembershipState extends MembershipState {
  final String value;

  CustomMembershipState(
    String this.value,
  );

  CustomMembershipState._(
    String this.value,
  );

  static LiftRetVal<CustomMembershipState> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final value_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final value = value_lifted.value;
    new_offset += value_lifted.bytesRead;
    return LiftRetVal(
        CustomMembershipState._(
          value,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(value) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 6);
    int new_offset = buf.offsetInBytes + 4;

    new_offset +=
        FfiConverterString.write(value, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

abstract class MessageFormat {
  RustBuffer lower();
  int allocationSize();
  int write(Uint8List buf);
}

class FfiConverterMessageFormat {
  static MessageFormat lift(RustBuffer buffer) {
    return FfiConverterMessageFormat.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<MessageFormat> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    final subview = Uint8List.view(buf.buffer, buf.offsetInBytes + 4);
    switch (index) {
      case 1:
        return HtmlMessageFormat.read(subview);
      case 2:
        return UnknownMessageFormat.read(subview);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(MessageFormat value) {
    return value.lower();
  }

  static int allocationSize(MessageFormat value) {
    return value.allocationSize();
  }

  static int write(MessageFormat value, Uint8List buf) {
    return value.write(buf);
  }
}

class HtmlMessageFormat extends MessageFormat {
  HtmlMessageFormat();

  HtmlMessageFormat._();

  static LiftRetVal<HtmlMessageFormat> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(HtmlMessageFormat._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 1);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class UnknownMessageFormat extends MessageFormat {
  final String format;

  UnknownMessageFormat(
    String this.format,
  );

  UnknownMessageFormat._(
    String this.format,
  );

  static LiftRetVal<UnknownMessageFormat> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final format_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final format = format_lifted.value;
    new_offset += format_lifted.bytesRead;
    return LiftRetVal(
        UnknownMessageFormat._(
          format,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(format) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 2);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterString.write(
        format, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

abstract class MessageLikeEventContent {
  RustBuffer lower();
  int allocationSize();
  int write(Uint8List buf);
}

class FfiConverterMessageLikeEventContent {
  static MessageLikeEventContent lift(RustBuffer buffer) {
    return FfiConverterMessageLikeEventContent.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<MessageLikeEventContent> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    final subview = Uint8List.view(buf.buffer, buf.offsetInBytes + 4);
    switch (index) {
      case 1:
        return CallAnswerMessageLikeEventContent.read(subview);
      case 2:
        return CallInviteMessageLikeEventContent.read(subview);
      case 3:
        return CallNotifyMessageLikeEventContent.read(subview);
      case 4:
        return CallHangupMessageLikeEventContent.read(subview);
      case 5:
        return CallCandidatesMessageLikeEventContent.read(subview);
      case 6:
        return KeyVerificationReadyMessageLikeEventContent.read(subview);
      case 7:
        return KeyVerificationStartMessageLikeEventContent.read(subview);
      case 8:
        return KeyVerificationCancelMessageLikeEventContent.read(subview);
      case 9:
        return KeyVerificationAcceptMessageLikeEventContent.read(subview);
      case 10:
        return KeyVerificationKeyMessageLikeEventContent.read(subview);
      case 11:
        return KeyVerificationMacMessageLikeEventContent.read(subview);
      case 12:
        return KeyVerificationDoneMessageLikeEventContent.read(subview);
      case 13:
        return PollMessageLikeEventContent.read(subview);
      case 14:
        return ReactionContentMessageLikeEventContent.read(subview);
      case 15:
        return RoomEncryptedMessageLikeEventContent.read(subview);
      case 16:
        return RoomMessageMessageLikeEventContent.read(subview);
      case 17:
        return RoomRedactionMessageLikeEventContent.read(subview);
      case 18:
        return StickerMessageLikeEventContent.read(subview);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(MessageLikeEventContent value) {
    return value.lower();
  }

  static int allocationSize(MessageLikeEventContent value) {
    return value.allocationSize();
  }

  static int write(MessageLikeEventContent value, Uint8List buf) {
    return value.write(buf);
  }
}

class CallAnswerMessageLikeEventContent extends MessageLikeEventContent {
  CallAnswerMessageLikeEventContent();

  CallAnswerMessageLikeEventContent._();

  static LiftRetVal<CallAnswerMessageLikeEventContent> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(CallAnswerMessageLikeEventContent._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 1);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class CallInviteMessageLikeEventContent extends MessageLikeEventContent {
  CallInviteMessageLikeEventContent();

  CallInviteMessageLikeEventContent._();

  static LiftRetVal<CallInviteMessageLikeEventContent> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(CallInviteMessageLikeEventContent._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 2);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class CallNotifyMessageLikeEventContent extends MessageLikeEventContent {
  final NotifyType notifyType;

  CallNotifyMessageLikeEventContent(
    NotifyType this.notifyType,
  );

  CallNotifyMessageLikeEventContent._(
    NotifyType this.notifyType,
  );

  static LiftRetVal<CallNotifyMessageLikeEventContent> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final notifyType_int = buf.buffer.asByteData(new_offset).getInt32(0);
    final notifyType = FfiConverterNotifyType.lift(
        toRustBuffer(createUint8ListFromInt(notifyType_int)));
    new_offset += 4;
    return LiftRetVal(
        CallNotifyMessageLikeEventContent._(
          notifyType,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4 + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 3);
    int new_offset = buf.offsetInBytes + 4;

    final notifyType_buffer = FfiConverterNotifyType.lower(notifyType);
    final notifyType_int =
        notifyType_buffer.asUint8List().buffer.asByteData().getInt32(0);
    buf.buffer.asByteData(new_offset).setInt32(0, notifyType_int);
    new_offset += 4;

    return new_offset;
  }
}

class CallHangupMessageLikeEventContent extends MessageLikeEventContent {
  CallHangupMessageLikeEventContent();

  CallHangupMessageLikeEventContent._();

  static LiftRetVal<CallHangupMessageLikeEventContent> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(CallHangupMessageLikeEventContent._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 4);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class CallCandidatesMessageLikeEventContent extends MessageLikeEventContent {
  CallCandidatesMessageLikeEventContent();

  CallCandidatesMessageLikeEventContent._();

  static LiftRetVal<CallCandidatesMessageLikeEventContent> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(CallCandidatesMessageLikeEventContent._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 5);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class KeyVerificationReadyMessageLikeEventContent
    extends MessageLikeEventContent {
  KeyVerificationReadyMessageLikeEventContent();

  KeyVerificationReadyMessageLikeEventContent._();

  static LiftRetVal<KeyVerificationReadyMessageLikeEventContent> read(
      Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(
        KeyVerificationReadyMessageLikeEventContent._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 6);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class KeyVerificationStartMessageLikeEventContent
    extends MessageLikeEventContent {
  KeyVerificationStartMessageLikeEventContent();

  KeyVerificationStartMessageLikeEventContent._();

  static LiftRetVal<KeyVerificationStartMessageLikeEventContent> read(
      Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(
        KeyVerificationStartMessageLikeEventContent._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 7);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class KeyVerificationCancelMessageLikeEventContent
    extends MessageLikeEventContent {
  KeyVerificationCancelMessageLikeEventContent();

  KeyVerificationCancelMessageLikeEventContent._();

  static LiftRetVal<KeyVerificationCancelMessageLikeEventContent> read(
      Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(
        KeyVerificationCancelMessageLikeEventContent._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 8);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class KeyVerificationAcceptMessageLikeEventContent
    extends MessageLikeEventContent {
  KeyVerificationAcceptMessageLikeEventContent();

  KeyVerificationAcceptMessageLikeEventContent._();

  static LiftRetVal<KeyVerificationAcceptMessageLikeEventContent> read(
      Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(
        KeyVerificationAcceptMessageLikeEventContent._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 9);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class KeyVerificationKeyMessageLikeEventContent
    extends MessageLikeEventContent {
  KeyVerificationKeyMessageLikeEventContent();

  KeyVerificationKeyMessageLikeEventContent._();

  static LiftRetVal<KeyVerificationKeyMessageLikeEventContent> read(
      Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(
        KeyVerificationKeyMessageLikeEventContent._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 10);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class KeyVerificationMacMessageLikeEventContent
    extends MessageLikeEventContent {
  KeyVerificationMacMessageLikeEventContent();

  KeyVerificationMacMessageLikeEventContent._();

  static LiftRetVal<KeyVerificationMacMessageLikeEventContent> read(
      Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(
        KeyVerificationMacMessageLikeEventContent._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 11);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class KeyVerificationDoneMessageLikeEventContent
    extends MessageLikeEventContent {
  KeyVerificationDoneMessageLikeEventContent();

  KeyVerificationDoneMessageLikeEventContent._();

  static LiftRetVal<KeyVerificationDoneMessageLikeEventContent> read(
      Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(
        KeyVerificationDoneMessageLikeEventContent._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 12);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class PollMessageLikeEventContent extends MessageLikeEventContent {
  final String question;

  PollMessageLikeEventContent(
    String this.question,
  );

  PollMessageLikeEventContent._(
    String this.question,
  );

  static LiftRetVal<PollMessageLikeEventContent> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final question_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final question = question_lifted.value;
    new_offset += question_lifted.bytesRead;
    return LiftRetVal(
        PollMessageLikeEventContent._(
          question,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(question) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 13);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterString.write(
        question, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class ReactionContentMessageLikeEventContent extends MessageLikeEventContent {
  final String relatedEventId;

  ReactionContentMessageLikeEventContent(
    String this.relatedEventId,
  );

  ReactionContentMessageLikeEventContent._(
    String this.relatedEventId,
  );

  static LiftRetVal<ReactionContentMessageLikeEventContent> read(
      Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final relatedEventId_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final relatedEventId = relatedEventId_lifted.value;
    new_offset += relatedEventId_lifted.bytesRead;
    return LiftRetVal(
        ReactionContentMessageLikeEventContent._(
          relatedEventId,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(relatedEventId) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 14);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterString.write(
        relatedEventId, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class RoomEncryptedMessageLikeEventContent extends MessageLikeEventContent {
  RoomEncryptedMessageLikeEventContent();

  RoomEncryptedMessageLikeEventContent._();

  static LiftRetVal<RoomEncryptedMessageLikeEventContent> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(RoomEncryptedMessageLikeEventContent._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 15);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class RoomMessageMessageLikeEventContent extends MessageLikeEventContent {
  final MessageType messageType;
  final String? inReplyToEventId;

  RoomMessageMessageLikeEventContent({
    required MessageType this.messageType,
    required String? this.inReplyToEventId,
  });

  RoomMessageMessageLikeEventContent._(
    MessageType this.messageType,
    String? this.inReplyToEventId,
  );

  static LiftRetVal<RoomMessageMessageLikeEventContent> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final messageType_lifted =
        FfiConverterMessageType.read(Uint8List.view(buf.buffer, new_offset));
    final messageType = messageType_lifted.value;
    new_offset += messageType_lifted.bytesRead;
    final inReplyToEventId_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final inReplyToEventId = inReplyToEventId_lifted.value;
    new_offset += inReplyToEventId_lifted.bytesRead;
    return LiftRetVal(
        RoomMessageMessageLikeEventContent._(
          messageType,
          inReplyToEventId,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterMessageType.allocationSize(messageType) +
        FfiConverterOptionalString.allocationSize(inReplyToEventId) +
        4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 16);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterMessageType.write(
        messageType, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        inReplyToEventId, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class RoomRedactionMessageLikeEventContent extends MessageLikeEventContent {
  final String? redactedEventId;
  final String? reason;

  RoomRedactionMessageLikeEventContent({
    required String? this.redactedEventId,
    required String? this.reason,
  });

  RoomRedactionMessageLikeEventContent._(
    String? this.redactedEventId,
    String? this.reason,
  );

  static LiftRetVal<RoomRedactionMessageLikeEventContent> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final redactedEventId_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final redactedEventId = redactedEventId_lifted.value;
    new_offset += redactedEventId_lifted.bytesRead;
    final reason_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final reason = reason_lifted.value;
    new_offset += reason_lifted.bytesRead;
    return LiftRetVal(
        RoomRedactionMessageLikeEventContent._(
          redactedEventId,
          reason,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterOptionalString.allocationSize(redactedEventId) +
        FfiConverterOptionalString.allocationSize(reason) +
        4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 17);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterOptionalString.write(
        redactedEventId, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        reason, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class StickerMessageLikeEventContent extends MessageLikeEventContent {
  StickerMessageLikeEventContent();

  StickerMessageLikeEventContent._();

  static LiftRetVal<StickerMessageLikeEventContent> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(StickerMessageLikeEventContent._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 18);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

enum MessageLikeEventType {
  callAnswer,
  callCandidates,
  callHangup,
  callInvite,
  callNotify,
  keyVerificationAccept,
  keyVerificationCancel,
  keyVerificationDone,
  keyVerificationKey,
  keyVerificationMac,
  keyVerificationReady,
  keyVerificationStart,
  pollEnd,
  pollResponse,
  pollStart,
  reaction,
  roomEncrypted,
  roomMessage,
  roomRedaction,
  sticker,
  unstablePollEnd,
  unstablePollResponse,
  unstablePollStart,
  ;
}

class FfiConverterMessageLikeEventType {
  static MessageLikeEventType lift(RustBuffer buffer) {
    return FfiConverterMessageLikeEventType.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<MessageLikeEventType> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    switch (index) {
      case 1:
        return LiftRetVal(MessageLikeEventType.callAnswer, 4);
      case 2:
        return LiftRetVal(MessageLikeEventType.callCandidates, 4);
      case 3:
        return LiftRetVal(MessageLikeEventType.callHangup, 4);
      case 4:
        return LiftRetVal(MessageLikeEventType.callInvite, 4);
      case 5:
        return LiftRetVal(MessageLikeEventType.callNotify, 4);
      case 6:
        return LiftRetVal(MessageLikeEventType.keyVerificationAccept, 4);
      case 7:
        return LiftRetVal(MessageLikeEventType.keyVerificationCancel, 4);
      case 8:
        return LiftRetVal(MessageLikeEventType.keyVerificationDone, 4);
      case 9:
        return LiftRetVal(MessageLikeEventType.keyVerificationKey, 4);
      case 10:
        return LiftRetVal(MessageLikeEventType.keyVerificationMac, 4);
      case 11:
        return LiftRetVal(MessageLikeEventType.keyVerificationReady, 4);
      case 12:
        return LiftRetVal(MessageLikeEventType.keyVerificationStart, 4);
      case 13:
        return LiftRetVal(MessageLikeEventType.pollEnd, 4);
      case 14:
        return LiftRetVal(MessageLikeEventType.pollResponse, 4);
      case 15:
        return LiftRetVal(MessageLikeEventType.pollStart, 4);
      case 16:
        return LiftRetVal(MessageLikeEventType.reaction, 4);
      case 17:
        return LiftRetVal(MessageLikeEventType.roomEncrypted, 4);
      case 18:
        return LiftRetVal(MessageLikeEventType.roomMessage, 4);
      case 19:
        return LiftRetVal(MessageLikeEventType.roomRedaction, 4);
      case 20:
        return LiftRetVal(MessageLikeEventType.sticker, 4);
      case 21:
        return LiftRetVal(MessageLikeEventType.unstablePollEnd, 4);
      case 22:
        return LiftRetVal(MessageLikeEventType.unstablePollResponse, 4);
      case 23:
        return LiftRetVal(MessageLikeEventType.unstablePollStart, 4);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(MessageLikeEventType input) {
    return toRustBuffer(createUint8ListFromInt(input.index + 1));
  }

  static int allocationSize(MessageLikeEventType value) {
    return 4;
  }

  static int write(MessageLikeEventType value, Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, value.index + 1);
    return 4;
  }
}

abstract class MessageType {
  RustBuffer lower();
  int allocationSize();
  int write(Uint8List buf);
}

class FfiConverterMessageType {
  static MessageType lift(RustBuffer buffer) {
    return FfiConverterMessageType.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<MessageType> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    final subview = Uint8List.view(buf.buffer, buf.offsetInBytes + 4);
    switch (index) {
      case 1:
        return EmoteMessageType.read(subview);
      case 2:
        return ImageMessageType.read(subview);
      case 3:
        return AudioMessageType.read(subview);
      case 4:
        return VideoMessageType.read(subview);
      case 5:
        return FileMessageType.read(subview);
      case 6:
        return GalleryMessageType.read(subview);
      case 7:
        return NoticeMessageType.read(subview);
      case 8:
        return TextMessageType.read(subview);
      case 9:
        return LocationMessageType.read(subview);
      case 10:
        return OtherMessageType.read(subview);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(MessageType value) {
    return value.lower();
  }

  static int allocationSize(MessageType value) {
    return value.allocationSize();
  }

  static int write(MessageType value, Uint8List buf) {
    return value.write(buf);
  }
}

class EmoteMessageType extends MessageType {
  final EmoteMessageContent content;

  EmoteMessageType(
    EmoteMessageContent this.content,
  );

  EmoteMessageType._(
    EmoteMessageContent this.content,
  );

  static LiftRetVal<EmoteMessageType> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final content_lifted = FfiConverterEmoteMessageContent.read(
        Uint8List.view(buf.buffer, new_offset));
    final content = content_lifted.value;
    new_offset += content_lifted.bytesRead;
    return LiftRetVal(
        EmoteMessageType._(
          content,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterEmoteMessageContent.allocationSize(content) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 1);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterEmoteMessageContent.write(
        content, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class ImageMessageType extends MessageType {
  final ImageMessageContent content;

  ImageMessageType(
    ImageMessageContent this.content,
  );

  ImageMessageType._(
    ImageMessageContent this.content,
  );

  static LiftRetVal<ImageMessageType> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final content_lifted = FfiConverterImageMessageContent.read(
        Uint8List.view(buf.buffer, new_offset));
    final content = content_lifted.value;
    new_offset += content_lifted.bytesRead;
    return LiftRetVal(
        ImageMessageType._(
          content,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterImageMessageContent.allocationSize(content) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 2);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterImageMessageContent.write(
        content, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class AudioMessageType extends MessageType {
  final AudioMessageContent content;

  AudioMessageType(
    AudioMessageContent this.content,
  );

  AudioMessageType._(
    AudioMessageContent this.content,
  );

  static LiftRetVal<AudioMessageType> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final content_lifted = FfiConverterAudioMessageContent.read(
        Uint8List.view(buf.buffer, new_offset));
    final content = content_lifted.value;
    new_offset += content_lifted.bytesRead;
    return LiftRetVal(
        AudioMessageType._(
          content,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterAudioMessageContent.allocationSize(content) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 3);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterAudioMessageContent.write(
        content, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class VideoMessageType extends MessageType {
  final VideoMessageContent content;

  VideoMessageType(
    VideoMessageContent this.content,
  );

  VideoMessageType._(
    VideoMessageContent this.content,
  );

  static LiftRetVal<VideoMessageType> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final content_lifted = FfiConverterVideoMessageContent.read(
        Uint8List.view(buf.buffer, new_offset));
    final content = content_lifted.value;
    new_offset += content_lifted.bytesRead;
    return LiftRetVal(
        VideoMessageType._(
          content,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterVideoMessageContent.allocationSize(content) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 4);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterVideoMessageContent.write(
        content, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class FileMessageType extends MessageType {
  final FileMessageContent content;

  FileMessageType(
    FileMessageContent this.content,
  );

  FileMessageType._(
    FileMessageContent this.content,
  );

  static LiftRetVal<FileMessageType> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final content_lifted = FfiConverterFileMessageContent.read(
        Uint8List.view(buf.buffer, new_offset));
    final content = content_lifted.value;
    new_offset += content_lifted.bytesRead;
    return LiftRetVal(
        FileMessageType._(
          content,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterFileMessageContent.allocationSize(content) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 5);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterFileMessageContent.write(
        content, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class GalleryMessageType extends MessageType {
  final GalleryMessageContent content;

  GalleryMessageType(
    GalleryMessageContent this.content,
  );

  GalleryMessageType._(
    GalleryMessageContent this.content,
  );

  static LiftRetVal<GalleryMessageType> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final content_lifted = FfiConverterGalleryMessageContent.read(
        Uint8List.view(buf.buffer, new_offset));
    final content = content_lifted.value;
    new_offset += content_lifted.bytesRead;
    return LiftRetVal(
        GalleryMessageType._(
          content,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterGalleryMessageContent.allocationSize(content) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 6);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterGalleryMessageContent.write(
        content, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class NoticeMessageType extends MessageType {
  final NoticeMessageContent content;

  NoticeMessageType(
    NoticeMessageContent this.content,
  );

  NoticeMessageType._(
    NoticeMessageContent this.content,
  );

  static LiftRetVal<NoticeMessageType> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final content_lifted = FfiConverterNoticeMessageContent.read(
        Uint8List.view(buf.buffer, new_offset));
    final content = content_lifted.value;
    new_offset += content_lifted.bytesRead;
    return LiftRetVal(
        NoticeMessageType._(
          content,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterNoticeMessageContent.allocationSize(content) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 7);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterNoticeMessageContent.write(
        content, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class TextMessageType extends MessageType {
  final TextMessageContent content;

  TextMessageType(
    TextMessageContent this.content,
  );

  TextMessageType._(
    TextMessageContent this.content,
  );

  static LiftRetVal<TextMessageType> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final content_lifted = FfiConverterTextMessageContent.read(
        Uint8List.view(buf.buffer, new_offset));
    final content = content_lifted.value;
    new_offset += content_lifted.bytesRead;
    return LiftRetVal(
        TextMessageType._(
          content,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterTextMessageContent.allocationSize(content) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 8);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterTextMessageContent.write(
        content, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class LocationMessageType extends MessageType {
  final LocationContent content;

  LocationMessageType(
    LocationContent this.content,
  );

  LocationMessageType._(
    LocationContent this.content,
  );

  static LiftRetVal<LocationMessageType> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final content_lifted = FfiConverterLocationContent.read(
        Uint8List.view(buf.buffer, new_offset));
    final content = content_lifted.value;
    new_offset += content_lifted.bytesRead;
    return LiftRetVal(
        LocationMessageType._(
          content,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterLocationContent.allocationSize(content) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 9);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterLocationContent.write(
        content, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class OtherMessageType extends MessageType {
  final String msgtype;
  final String body;

  OtherMessageType({
    required String this.msgtype,
    required String this.body,
  });

  OtherMessageType._(
    String this.msgtype,
    String this.body,
  );

  static LiftRetVal<OtherMessageType> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final msgtype_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final msgtype = msgtype_lifted.value;
    new_offset += msgtype_lifted.bytesRead;
    final body_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final body = body_lifted.value;
    new_offset += body_lifted.bytesRead;
    return LiftRetVal(
        OtherMessageType._(
          msgtype,
          body,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(msgtype) +
        FfiConverterString.allocationSize(body) +
        4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 10);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterString.write(
        msgtype, Uint8List.view(buf.buffer, new_offset));
    new_offset +=
        FfiConverterString.write(body, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

abstract class MsgLikeKind {
  RustBuffer lower();
  int allocationSize();
  int write(Uint8List buf);
}

class FfiConverterMsgLikeKind {
  static MsgLikeKind lift(RustBuffer buffer) {
    return FfiConverterMsgLikeKind.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<MsgLikeKind> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    final subview = Uint8List.view(buf.buffer, buf.offsetInBytes + 4);
    switch (index) {
      case 1:
        return MessageMsgLikeKind.read(subview);
      case 2:
        return StickerMsgLikeKind.read(subview);
      case 3:
        return PollMsgLikeKind.read(subview);
      case 4:
        return RedactedMsgLikeKind.read(subview);
      case 5:
        return UnableToDecryptMsgLikeKind.read(subview);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(MsgLikeKind value) {
    return value.lower();
  }

  static int allocationSize(MsgLikeKind value) {
    return value.allocationSize();
  }

  static int write(MsgLikeKind value, Uint8List buf) {
    return value.write(buf);
  }
}

class MessageMsgLikeKind extends MsgLikeKind {
  final MessageContent content;

  MessageMsgLikeKind(
    MessageContent this.content,
  );

  MessageMsgLikeKind._(
    MessageContent this.content,
  );

  static LiftRetVal<MessageMsgLikeKind> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final content_lifted =
        FfiConverterMessageContent.read(Uint8List.view(buf.buffer, new_offset));
    final content = content_lifted.value;
    new_offset += content_lifted.bytesRead;
    return LiftRetVal(
        MessageMsgLikeKind._(
          content,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterMessageContent.allocationSize(content) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 1);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterMessageContent.write(
        content, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class StickerMsgLikeKind extends MsgLikeKind {
  final String body;
  final ImageInfo info;
  final MediaSource source;

  StickerMsgLikeKind({
    required String this.body,
    required ImageInfo this.info,
    required MediaSource this.source,
  });

  StickerMsgLikeKind._(
    String this.body,
    ImageInfo this.info,
    MediaSource this.source,
  );

  static LiftRetVal<StickerMsgLikeKind> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final body_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final body = body_lifted.value;
    new_offset += body_lifted.bytesRead;
    final info_lifted =
        FfiConverterImageInfo.read(Uint8List.view(buf.buffer, new_offset));
    final info = info_lifted.value;
    new_offset += info_lifted.bytesRead;
    final source_lifted =
        MediaSource.read(Uint8List.view(buf.buffer, new_offset));
    final source = source_lifted.value;
    new_offset += source_lifted.bytesRead;
    return LiftRetVal(
        StickerMsgLikeKind._(
          body,
          info,
          source,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(body) +
        FfiConverterImageInfo.allocationSize(info) +
        MediaSource.allocationSize(source) +
        4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 2);
    int new_offset = buf.offsetInBytes + 4;

    new_offset +=
        FfiConverterString.write(body, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterImageInfo.write(
        info, Uint8List.view(buf.buffer, new_offset));
    new_offset +=
        MediaSource.write(source, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class PollMsgLikeKind extends MsgLikeKind {
  final String question;
  final PollKind kind;
  final int maxSelections;
  final List<PollAnswer> answers;
  final Map<String, List<String>> votes;
  final Timestamp? endTime;
  final bool hasBeenEdited;

  PollMsgLikeKind({
    required String this.question,
    required PollKind this.kind,
    required int this.maxSelections,
    required List<PollAnswer> this.answers,
    required Map<String, List<String>> this.votes,
    required Timestamp? this.endTime,
    required bool this.hasBeenEdited,
  });

  PollMsgLikeKind._(
    String this.question,
    PollKind this.kind,
    int this.maxSelections,
    List<PollAnswer> this.answers,
    Map<String, List<String>> this.votes,
    Timestamp? this.endTime,
    bool this.hasBeenEdited,
  );

  static LiftRetVal<PollMsgLikeKind> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final question_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final question = question_lifted.value;
    new_offset += question_lifted.bytesRead;
    final kind_int = buf.buffer.asByteData(new_offset).getInt32(0);
    final kind = FfiConverterPollKind.lift(
        toRustBuffer(createUint8ListFromInt(kind_int)));
    new_offset += 4;
    final maxSelections_lifted =
        FfiConverterUInt64.read(Uint8List.view(buf.buffer, new_offset));
    final maxSelections = maxSelections_lifted.value;
    new_offset += maxSelections_lifted.bytesRead;
    final answers_lifted = FfiConverterSequencePollAnswer.read(
        Uint8List.view(buf.buffer, new_offset));
    final answers = answers_lifted.value;
    new_offset += answers_lifted.bytesRead;
    final votes_lifted = FfiConverterMapStringSequenceString.read(
        Uint8List.view(buf.buffer, new_offset));
    final votes = votes_lifted.value;
    new_offset += votes_lifted.bytesRead;
    final endTime_lifted = FfiConverterOptionalTimestamp.read(
        Uint8List.view(buf.buffer, new_offset));
    final endTime = endTime_lifted.value;
    new_offset += endTime_lifted.bytesRead;
    final hasBeenEdited_lifted =
        FfiConverterBool.read(Uint8List.view(buf.buffer, new_offset));
    final hasBeenEdited = hasBeenEdited_lifted.value;
    new_offset += hasBeenEdited_lifted.bytesRead;
    return LiftRetVal(
        PollMsgLikeKind._(
          question,
          kind,
          maxSelections,
          answers,
          votes.cast<String, List<String>>(),
          endTime,
          hasBeenEdited,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(question) +
        4 +
        FfiConverterUInt64.allocationSize(maxSelections) +
        FfiConverterSequencePollAnswer.allocationSize(answers) +
        FfiConverterMapStringSequenceString.allocationSize(votes) +
        FfiConverterOptionalTimestamp.allocationSize(endTime) +
        FfiConverterBool.allocationSize(hasBeenEdited) +
        4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 3);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterString.write(
        question, Uint8List.view(buf.buffer, new_offset));
    final kind_buffer = FfiConverterPollKind.lower(kind);
    final kind_int = kind_buffer.asUint8List().buffer.asByteData().getInt32(0);
    buf.buffer.asByteData(new_offset).setInt32(0, kind_int);
    new_offset += 4;
    new_offset += FfiConverterUInt64.write(
        maxSelections, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterSequencePollAnswer.write(
        answers, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterMapStringSequenceString.write(
        votes, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalTimestamp.write(
        endTime, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterBool.write(
        hasBeenEdited, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class RedactedMsgLikeKind extends MsgLikeKind {
  RedactedMsgLikeKind();

  RedactedMsgLikeKind._();

  static LiftRetVal<RedactedMsgLikeKind> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(RedactedMsgLikeKind._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 4);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class UnableToDecryptMsgLikeKind extends MsgLikeKind {
  final EncryptedMessage msg;

  UnableToDecryptMsgLikeKind(
    EncryptedMessage this.msg,
  );

  UnableToDecryptMsgLikeKind._(
    EncryptedMessage this.msg,
  );

  static LiftRetVal<UnableToDecryptMsgLikeKind> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final msg_lifted = FfiConverterEncryptedMessage.read(
        Uint8List.view(buf.buffer, new_offset));
    final msg = msg_lifted.value;
    new_offset += msg_lifted.bytesRead;
    return LiftRetVal(
        UnableToDecryptMsgLikeKind._(
          msg,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterEncryptedMessage.allocationSize(msg) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 5);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterEncryptedMessage.write(
        msg, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

abstract class NotificationEvent {
  RustBuffer lower();
  int allocationSize();
  int write(Uint8List buf);
}

class FfiConverterNotificationEvent {
  static NotificationEvent lift(RustBuffer buffer) {
    return FfiConverterNotificationEvent.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<NotificationEvent> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    final subview = Uint8List.view(buf.buffer, buf.offsetInBytes + 4);
    switch (index) {
      case 1:
        return TimelineNotificationEvent.read(subview);
      case 2:
        return InviteNotificationEvent.read(subview);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(NotificationEvent value) {
    return value.lower();
  }

  static int allocationSize(NotificationEvent value) {
    return value.allocationSize();
  }

  static int write(NotificationEvent value, Uint8List buf) {
    return value.write(buf);
  }
}

class TimelineNotificationEvent extends NotificationEvent {
  final TimelineEvent event;

  TimelineNotificationEvent(
    TimelineEvent this.event,
  );

  TimelineNotificationEvent._(
    TimelineEvent this.event,
  );

  static LiftRetVal<TimelineNotificationEvent> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final event_lifted =
        TimelineEvent.read(Uint8List.view(buf.buffer, new_offset));
    final event = event_lifted.value;
    new_offset += event_lifted.bytesRead;
    return LiftRetVal(
        TimelineNotificationEvent._(
          event,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return TimelineEvent.allocationSize(event) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 1);
    int new_offset = buf.offsetInBytes + 4;

    new_offset +=
        TimelineEvent.write(event, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class InviteNotificationEvent extends NotificationEvent {
  final String sender;

  InviteNotificationEvent(
    String this.sender,
  );

  InviteNotificationEvent._(
    String this.sender,
  );

  static LiftRetVal<InviteNotificationEvent> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final sender_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final sender = sender_lifted.value;
    new_offset += sender_lifted.bytesRead;
    return LiftRetVal(
        InviteNotificationEvent._(
          sender,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(sender) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 2);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterString.write(
        sender, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

abstract class NotificationProcessSetup {
  RustBuffer lower();
  int allocationSize();
  int write(Uint8List buf);
}

class FfiConverterNotificationProcessSetup {
  static NotificationProcessSetup lift(RustBuffer buffer) {
    return FfiConverterNotificationProcessSetup.read(buffer.asUint8List())
        .value;
  }

  static LiftRetVal<NotificationProcessSetup> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    final subview = Uint8List.view(buf.buffer, buf.offsetInBytes + 4);
    switch (index) {
      case 1:
        return MultipleProcessesNotificationProcessSetup.read(subview);
      case 2:
        return SingleProcessNotificationProcessSetup.read(subview);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(NotificationProcessSetup value) {
    return value.lower();
  }

  static int allocationSize(NotificationProcessSetup value) {
    return value.allocationSize();
  }

  static int write(NotificationProcessSetup value, Uint8List buf) {
    return value.write(buf);
  }
}

class MultipleProcessesNotificationProcessSetup
    extends NotificationProcessSetup {
  MultipleProcessesNotificationProcessSetup();

  MultipleProcessesNotificationProcessSetup._();

  static LiftRetVal<MultipleProcessesNotificationProcessSetup> read(
      Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(
        MultipleProcessesNotificationProcessSetup._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 1);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class SingleProcessNotificationProcessSetup extends NotificationProcessSetup {
  final SyncService syncService;

  SingleProcessNotificationProcessSetup(
    SyncService this.syncService,
  );

  SingleProcessNotificationProcessSetup._(
    SyncService this.syncService,
  );

  static LiftRetVal<SingleProcessNotificationProcessSetup> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final syncService_lifted =
        SyncService.read(Uint8List.view(buf.buffer, new_offset));
    final syncService = syncService_lifted.value;
    new_offset += syncService_lifted.bytesRead;
    return LiftRetVal(
        SingleProcessNotificationProcessSetup._(
          syncService,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return SyncService.allocationSize(syncService) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 2);
    int new_offset = buf.offsetInBytes + 4;

    new_offset +=
        SyncService.write(syncService, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

abstract class NotificationSettingsException implements Exception {
  RustBuffer lower();
  int allocationSize();
  int write(Uint8List buf);
}

class FfiConverterNotificationSettingsException {
  static NotificationSettingsException lift(RustBuffer buffer) {
    return FfiConverterNotificationSettingsException.read(buffer.asUint8List())
        .value;
  }

  static LiftRetVal<NotificationSettingsException> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    final subview = Uint8List.view(buf.buffer, buf.offsetInBytes + 4);
    switch (index) {
      case 1:
        return GenericNotificationSettingsException.read(subview);
      case 2:
        return InvalidParameterNotificationSettingsException.read(subview);
      case 3:
        return InvalidRoomIdNotificationSettingsException.read(subview);
      case 4:
        return RuleNotFoundNotificationSettingsException.read(subview);
      case 5:
        return UnableToAddPushRuleNotificationSettingsException.read(subview);
      case 6:
        return UnableToRemovePushRuleNotificationSettingsException.read(
            subview);
      case 7:
        return UnableToSavePushRulesNotificationSettingsException.read(subview);
      case 8:
        return UnableToUpdatePushRuleNotificationSettingsException.read(
            subview);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(NotificationSettingsException value) {
    return value.lower();
  }

  static int allocationSize(NotificationSettingsException value) {
    return value.allocationSize();
  }

  static int write(NotificationSettingsException value, Uint8List buf) {
    return value.write(buf);
  }
}

class GenericNotificationSettingsException
    extends NotificationSettingsException {
  final String msg;

  GenericNotificationSettingsException(
    String this.msg,
  );

  GenericNotificationSettingsException._(
    String this.msg,
  );

  static LiftRetVal<GenericNotificationSettingsException> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final msg_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final msg = msg_lifted.value;
    new_offset += msg_lifted.bytesRead;
    return LiftRetVal(
        GenericNotificationSettingsException._(
          msg,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(msg) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 1);
    int new_offset = buf.offsetInBytes + 4;

    new_offset +=
        FfiConverterString.write(msg, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }

  @override
  String toString() {
    return "GenericNotificationSettingsException($msg)";
  }
}

class InvalidParameterNotificationSettingsException
    extends NotificationSettingsException {
  final String msg;

  InvalidParameterNotificationSettingsException(
    String this.msg,
  );

  InvalidParameterNotificationSettingsException._(
    String this.msg,
  );

  static LiftRetVal<InvalidParameterNotificationSettingsException> read(
      Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final msg_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final msg = msg_lifted.value;
    new_offset += msg_lifted.bytesRead;
    return LiftRetVal(
        InvalidParameterNotificationSettingsException._(
          msg,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(msg) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 2);
    int new_offset = buf.offsetInBytes + 4;

    new_offset +=
        FfiConverterString.write(msg, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }

  @override
  String toString() {
    return "InvalidParameterNotificationSettingsException($msg)";
  }
}

class InvalidRoomIdNotificationSettingsException
    extends NotificationSettingsException {
  final String roomId;

  InvalidRoomIdNotificationSettingsException(
    String this.roomId,
  );

  InvalidRoomIdNotificationSettingsException._(
    String this.roomId,
  );

  static LiftRetVal<InvalidRoomIdNotificationSettingsException> read(
      Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final roomId_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final roomId = roomId_lifted.value;
    new_offset += roomId_lifted.bytesRead;
    return LiftRetVal(
        InvalidRoomIdNotificationSettingsException._(
          roomId,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(roomId) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 3);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterString.write(
        roomId, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }

  @override
  String toString() {
    return "InvalidRoomIdNotificationSettingsException($roomId)";
  }
}

class RuleNotFoundNotificationSettingsException
    extends NotificationSettingsException {
  final String ruleId;

  RuleNotFoundNotificationSettingsException(
    String this.ruleId,
  );

  RuleNotFoundNotificationSettingsException._(
    String this.ruleId,
  );

  static LiftRetVal<RuleNotFoundNotificationSettingsException> read(
      Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final ruleId_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final ruleId = ruleId_lifted.value;
    new_offset += ruleId_lifted.bytesRead;
    return LiftRetVal(
        RuleNotFoundNotificationSettingsException._(
          ruleId,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(ruleId) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 4);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterString.write(
        ruleId, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }

  @override
  String toString() {
    return "RuleNotFoundNotificationSettingsException($ruleId)";
  }
}

class UnableToAddPushRuleNotificationSettingsException
    extends NotificationSettingsException {
  UnableToAddPushRuleNotificationSettingsException();

  UnableToAddPushRuleNotificationSettingsException._();

  static LiftRetVal<UnableToAddPushRuleNotificationSettingsException> read(
      Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(
        UnableToAddPushRuleNotificationSettingsException._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 5);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }

  @override
  String toString() {
    return "UnableToAddPushRuleNotificationSettingsException";
  }
}

class UnableToRemovePushRuleNotificationSettingsException
    extends NotificationSettingsException {
  UnableToRemovePushRuleNotificationSettingsException();

  UnableToRemovePushRuleNotificationSettingsException._();

  static LiftRetVal<UnableToRemovePushRuleNotificationSettingsException> read(
      Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(
        UnableToRemovePushRuleNotificationSettingsException._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 6);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }

  @override
  String toString() {
    return "UnableToRemovePushRuleNotificationSettingsException";
  }
}

class UnableToSavePushRulesNotificationSettingsException
    extends NotificationSettingsException {
  UnableToSavePushRulesNotificationSettingsException();

  UnableToSavePushRulesNotificationSettingsException._();

  static LiftRetVal<UnableToSavePushRulesNotificationSettingsException> read(
      Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(
        UnableToSavePushRulesNotificationSettingsException._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 7);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }

  @override
  String toString() {
    return "UnableToSavePushRulesNotificationSettingsException";
  }
}

class UnableToUpdatePushRuleNotificationSettingsException
    extends NotificationSettingsException {
  UnableToUpdatePushRuleNotificationSettingsException();

  UnableToUpdatePushRuleNotificationSettingsException._();

  static LiftRetVal<UnableToUpdatePushRuleNotificationSettingsException> read(
      Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(
        UnableToUpdatePushRuleNotificationSettingsException._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 8);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }

  @override
  String toString() {
    return "UnableToUpdatePushRuleNotificationSettingsException";
  }
}

abstract class NotificationStatus {
  RustBuffer lower();
  int allocationSize();
  int write(Uint8List buf);
}

class FfiConverterNotificationStatus {
  static NotificationStatus lift(RustBuffer buffer) {
    return FfiConverterNotificationStatus.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<NotificationStatus> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    final subview = Uint8List.view(buf.buffer, buf.offsetInBytes + 4);
    switch (index) {
      case 1:
        return EventNotificationStatus.read(subview);
      case 2:
        return EventNotFoundNotificationStatus.read(subview);
      case 3:
        return EventFilteredOutNotificationStatus.read(subview);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(NotificationStatus value) {
    return value.lower();
  }

  static int allocationSize(NotificationStatus value) {
    return value.allocationSize();
  }

  static int write(NotificationStatus value, Uint8List buf) {
    return value.write(buf);
  }
}

class EventNotificationStatus extends NotificationStatus {
  final NotificationItem item;

  EventNotificationStatus(
    NotificationItem this.item,
  );

  EventNotificationStatus._(
    NotificationItem this.item,
  );

  static LiftRetVal<EventNotificationStatus> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final item_lifted = FfiConverterNotificationItem.read(
        Uint8List.view(buf.buffer, new_offset));
    final item = item_lifted.value;
    new_offset += item_lifted.bytesRead;
    return LiftRetVal(
        EventNotificationStatus._(
          item,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterNotificationItem.allocationSize(item) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 1);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterNotificationItem.write(
        item, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class EventNotFoundNotificationStatus extends NotificationStatus {
  EventNotFoundNotificationStatus();

  EventNotFoundNotificationStatus._();

  static LiftRetVal<EventNotFoundNotificationStatus> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(EventNotFoundNotificationStatus._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 2);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class EventFilteredOutNotificationStatus extends NotificationStatus {
  EventFilteredOutNotificationStatus();

  EventFilteredOutNotificationStatus._();

  static LiftRetVal<EventFilteredOutNotificationStatus> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(EventFilteredOutNotificationStatus._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 3);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

enum NotifyType {
  ring,
  notify,
  ;
}

class FfiConverterNotifyType {
  static NotifyType lift(RustBuffer buffer) {
    return FfiConverterNotifyType.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<NotifyType> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    switch (index) {
      case 1:
        return LiftRetVal(NotifyType.ring, 4);
      case 2:
        return LiftRetVal(NotifyType.notify, 4);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(NotifyType input) {
    return toRustBuffer(createUint8ListFromInt(input.index + 1));
  }

  static int allocationSize(NotifyType value) {
    return 4;
  }

  static int write(NotifyType value, Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, value.index + 1);
    return 4;
  }
}

enum OidcException {
  notSupported,
  metadataInvalid,
  callbackUrlInvalid,
  cancelled,
  generic,
  ;
}

class FfiConverterOidcException {
  static OidcException lift(RustBuffer buffer) {
    return FfiConverterOidcException.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<OidcException> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    switch (index) {
      case 1:
        return LiftRetVal(OidcException.notSupported, 4);
      case 2:
        return LiftRetVal(OidcException.metadataInvalid, 4);
      case 3:
        return LiftRetVal(OidcException.callbackUrlInvalid, 4);
      case 4:
        return LiftRetVal(OidcException.cancelled, 4);
      case 5:
        return LiftRetVal(OidcException.generic, 4);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(OidcException input) {
    return toRustBuffer(createUint8ListFromInt(input.index + 1));
  }

  static int allocationSize(OidcException value) {
    return 4;
  }

  static int write(OidcException value, Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, value.index + 1);
    return 4;
  }
}

abstract class OidcPrompt {
  RustBuffer lower();
  int allocationSize();
  int write(Uint8List buf);
}

class FfiConverterOidcPrompt {
  static OidcPrompt lift(RustBuffer buffer) {
    return FfiConverterOidcPrompt.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<OidcPrompt> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    final subview = Uint8List.view(buf.buffer, buf.offsetInBytes + 4);
    switch (index) {
      case 1:
        return CreateOidcPrompt.read(subview);
      case 2:
        return LoginOidcPrompt.read(subview);
      case 3:
        return ConsentOidcPrompt.read(subview);
      case 4:
        return UnknownOidcPrompt.read(subview);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(OidcPrompt value) {
    return value.lower();
  }

  static int allocationSize(OidcPrompt value) {
    return value.allocationSize();
  }

  static int write(OidcPrompt value, Uint8List buf) {
    return value.write(buf);
  }
}

class CreateOidcPrompt extends OidcPrompt {
  CreateOidcPrompt();

  CreateOidcPrompt._();

  static LiftRetVal<CreateOidcPrompt> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(CreateOidcPrompt._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 1);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class LoginOidcPrompt extends OidcPrompt {
  LoginOidcPrompt();

  LoginOidcPrompt._();

  static LiftRetVal<LoginOidcPrompt> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(LoginOidcPrompt._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 2);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class ConsentOidcPrompt extends OidcPrompt {
  ConsentOidcPrompt();

  ConsentOidcPrompt._();

  static LiftRetVal<ConsentOidcPrompt> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(ConsentOidcPrompt._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 3);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class UnknownOidcPrompt extends OidcPrompt {
  final String value;

  UnknownOidcPrompt(
    String this.value,
  );

  UnknownOidcPrompt._(
    String this.value,
  );

  static LiftRetVal<UnknownOidcPrompt> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final value_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final value = value_lifted.value;
    new_offset += value_lifted.bytesRead;
    return LiftRetVal(
        UnknownOidcPrompt._(
          value,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(value) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 4);
    int new_offset = buf.offsetInBytes + 4;

    new_offset +=
        FfiConverterString.write(value, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

abstract class OtherState {
  RustBuffer lower();
  int allocationSize();
  int write(Uint8List buf);
}

class FfiConverterOtherState {
  static OtherState lift(RustBuffer buffer) {
    return FfiConverterOtherState.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<OtherState> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    final subview = Uint8List.view(buf.buffer, buf.offsetInBytes + 4);
    switch (index) {
      case 1:
        return PolicyRuleRoomOtherState.read(subview);
      case 2:
        return PolicyRuleServerOtherState.read(subview);
      case 3:
        return PolicyRuleUserOtherState.read(subview);
      case 4:
        return RoomAliasesOtherState.read(subview);
      case 5:
        return RoomAvatarOtherState.read(subview);
      case 6:
        return RoomCanonicalAliasOtherState.read(subview);
      case 7:
        return RoomCreateOtherState.read(subview);
      case 8:
        return RoomEncryptionOtherState.read(subview);
      case 9:
        return RoomGuestAccessOtherState.read(subview);
      case 10:
        return RoomHistoryVisibilityOtherState.read(subview);
      case 11:
        return RoomJoinRulesOtherState.read(subview);
      case 12:
        return RoomNameOtherState.read(subview);
      case 13:
        return RoomPinnedEventsOtherState.read(subview);
      case 14:
        return RoomPowerLevelsOtherState.read(subview);
      case 15:
        return RoomServerAclOtherState.read(subview);
      case 16:
        return RoomThirdPartyInviteOtherState.read(subview);
      case 17:
        return RoomTombstoneOtherState.read(subview);
      case 18:
        return RoomTopicOtherState.read(subview);
      case 19:
        return SpaceChildOtherState.read(subview);
      case 20:
        return SpaceParentOtherState.read(subview);
      case 21:
        return CustomOtherState.read(subview);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(OtherState value) {
    return value.lower();
  }

  static int allocationSize(OtherState value) {
    return value.allocationSize();
  }

  static int write(OtherState value, Uint8List buf) {
    return value.write(buf);
  }
}

class PolicyRuleRoomOtherState extends OtherState {
  PolicyRuleRoomOtherState();

  PolicyRuleRoomOtherState._();

  static LiftRetVal<PolicyRuleRoomOtherState> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(PolicyRuleRoomOtherState._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 1);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class PolicyRuleServerOtherState extends OtherState {
  PolicyRuleServerOtherState();

  PolicyRuleServerOtherState._();

  static LiftRetVal<PolicyRuleServerOtherState> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(PolicyRuleServerOtherState._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 2);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class PolicyRuleUserOtherState extends OtherState {
  PolicyRuleUserOtherState();

  PolicyRuleUserOtherState._();

  static LiftRetVal<PolicyRuleUserOtherState> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(PolicyRuleUserOtherState._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 3);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class RoomAliasesOtherState extends OtherState {
  RoomAliasesOtherState();

  RoomAliasesOtherState._();

  static LiftRetVal<RoomAliasesOtherState> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(RoomAliasesOtherState._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 4);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class RoomAvatarOtherState extends OtherState {
  final String? url;

  RoomAvatarOtherState(
    String? this.url,
  );

  RoomAvatarOtherState._(
    String? this.url,
  );

  static LiftRetVal<RoomAvatarOtherState> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final url_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final url = url_lifted.value;
    new_offset += url_lifted.bytesRead;
    return LiftRetVal(
        RoomAvatarOtherState._(
          url,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterOptionalString.allocationSize(url) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 5);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterOptionalString.write(
        url, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class RoomCanonicalAliasOtherState extends OtherState {
  RoomCanonicalAliasOtherState();

  RoomCanonicalAliasOtherState._();

  static LiftRetVal<RoomCanonicalAliasOtherState> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(RoomCanonicalAliasOtherState._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 6);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class RoomCreateOtherState extends OtherState {
  RoomCreateOtherState();

  RoomCreateOtherState._();

  static LiftRetVal<RoomCreateOtherState> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(RoomCreateOtherState._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 7);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class RoomEncryptionOtherState extends OtherState {
  RoomEncryptionOtherState();

  RoomEncryptionOtherState._();

  static LiftRetVal<RoomEncryptionOtherState> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(RoomEncryptionOtherState._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 8);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class RoomGuestAccessOtherState extends OtherState {
  RoomGuestAccessOtherState();

  RoomGuestAccessOtherState._();

  static LiftRetVal<RoomGuestAccessOtherState> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(RoomGuestAccessOtherState._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 9);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class RoomHistoryVisibilityOtherState extends OtherState {
  RoomHistoryVisibilityOtherState();

  RoomHistoryVisibilityOtherState._();

  static LiftRetVal<RoomHistoryVisibilityOtherState> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(RoomHistoryVisibilityOtherState._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 10);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class RoomJoinRulesOtherState extends OtherState {
  RoomJoinRulesOtherState();

  RoomJoinRulesOtherState._();

  static LiftRetVal<RoomJoinRulesOtherState> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(RoomJoinRulesOtherState._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 11);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class RoomNameOtherState extends OtherState {
  final String? name;

  RoomNameOtherState(
    String? this.name,
  );

  RoomNameOtherState._(
    String? this.name,
  );

  static LiftRetVal<RoomNameOtherState> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final name_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final name = name_lifted.value;
    new_offset += name_lifted.bytesRead;
    return LiftRetVal(
        RoomNameOtherState._(
          name,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterOptionalString.allocationSize(name) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 12);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterOptionalString.write(
        name, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class RoomPinnedEventsOtherState extends OtherState {
  final RoomPinnedEventsChange change;

  RoomPinnedEventsOtherState(
    RoomPinnedEventsChange this.change,
  );

  RoomPinnedEventsOtherState._(
    RoomPinnedEventsChange this.change,
  );

  static LiftRetVal<RoomPinnedEventsOtherState> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final change_lifted = FfiConverterRoomPinnedEventsChange.read(
        Uint8List.view(buf.buffer, new_offset));
    final change = change_lifted.value;
    new_offset += change_lifted.bytesRead;
    return LiftRetVal(
        RoomPinnedEventsOtherState._(
          change,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterRoomPinnedEventsChange.allocationSize(change) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 13);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterRoomPinnedEventsChange.write(
        change, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class RoomPowerLevelsOtherState extends OtherState {
  final Map<String, int> users;
  final Map<String, int>? previous;

  RoomPowerLevelsOtherState({
    required Map<String, int> this.users,
    required Map<String, int>? this.previous,
  });

  RoomPowerLevelsOtherState._(
    Map<String, int> this.users,
    Map<String, int>? this.previous,
  );

  static LiftRetVal<RoomPowerLevelsOtherState> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final users_lifted =
        FfiConverterMapStringInt64.read(Uint8List.view(buf.buffer, new_offset));
    final users = users_lifted.value;
    new_offset += users_lifted.bytesRead;
    final previous_lifted = FfiConverterOptionalMapStringInt64.read(
        Uint8List.view(buf.buffer, new_offset));
    final previous = previous_lifted.value;
    new_offset += previous_lifted.bytesRead;
    return LiftRetVal(
        RoomPowerLevelsOtherState._(
          users,
          previous,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterMapStringInt64.allocationSize(users) +
        FfiConverterOptionalMapStringInt64.allocationSize(previous) +
        4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 14);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterMapStringInt64.write(
        users, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalMapStringInt64.write(
        previous, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class RoomServerAclOtherState extends OtherState {
  RoomServerAclOtherState();

  RoomServerAclOtherState._();

  static LiftRetVal<RoomServerAclOtherState> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(RoomServerAclOtherState._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 15);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class RoomThirdPartyInviteOtherState extends OtherState {
  final String? displayName;

  RoomThirdPartyInviteOtherState(
    String? this.displayName,
  );

  RoomThirdPartyInviteOtherState._(
    String? this.displayName,
  );

  static LiftRetVal<RoomThirdPartyInviteOtherState> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final displayName_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final displayName = displayName_lifted.value;
    new_offset += displayName_lifted.bytesRead;
    return LiftRetVal(
        RoomThirdPartyInviteOtherState._(
          displayName,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterOptionalString.allocationSize(displayName) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 16);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterOptionalString.write(
        displayName, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class RoomTombstoneOtherState extends OtherState {
  RoomTombstoneOtherState();

  RoomTombstoneOtherState._();

  static LiftRetVal<RoomTombstoneOtherState> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(RoomTombstoneOtherState._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 17);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class RoomTopicOtherState extends OtherState {
  final String? topic;

  RoomTopicOtherState(
    String? this.topic,
  );

  RoomTopicOtherState._(
    String? this.topic,
  );

  static LiftRetVal<RoomTopicOtherState> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final topic_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final topic = topic_lifted.value;
    new_offset += topic_lifted.bytesRead;
    return LiftRetVal(
        RoomTopicOtherState._(
          topic,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterOptionalString.allocationSize(topic) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 18);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterOptionalString.write(
        topic, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class SpaceChildOtherState extends OtherState {
  SpaceChildOtherState();

  SpaceChildOtherState._();

  static LiftRetVal<SpaceChildOtherState> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(SpaceChildOtherState._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 19);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class SpaceParentOtherState extends OtherState {
  SpaceParentOtherState();

  SpaceParentOtherState._();

  static LiftRetVal<SpaceParentOtherState> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(SpaceParentOtherState._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 20);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class CustomOtherState extends OtherState {
  final String eventType;

  CustomOtherState(
    String this.eventType,
  );

  CustomOtherState._(
    String this.eventType,
  );

  static LiftRetVal<CustomOtherState> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final eventType_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final eventType = eventType_lifted.value;
    new_offset += eventType_lifted.bytesRead;
    return LiftRetVal(
        CustomOtherState._(
          eventType,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(eventType) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 21);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterString.write(
        eventType, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

enum ParseException {
  emptyHost,
  idnaError,
  invalidPort,
  invalidIpv4Address,
  invalidIpv6Address,
  invalidDomainCharacter,
  relativeUrlWithoutBase,
  relativeUrlWithCannotBeABaseBase,
  setHostOnCannotBeABaseUrl,
  overflow,
  other,
  ;
}

class FfiConverterParseException {
  static ParseException lift(RustBuffer buffer) {
    return FfiConverterParseException.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<ParseException> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    switch (index) {
      case 1:
        return LiftRetVal(ParseException.emptyHost, 4);
      case 2:
        return LiftRetVal(ParseException.idnaError, 4);
      case 3:
        return LiftRetVal(ParseException.invalidPort, 4);
      case 4:
        return LiftRetVal(ParseException.invalidIpv4Address, 4);
      case 5:
        return LiftRetVal(ParseException.invalidIpv6Address, 4);
      case 6:
        return LiftRetVal(ParseException.invalidDomainCharacter, 4);
      case 7:
        return LiftRetVal(ParseException.relativeUrlWithoutBase, 4);
      case 8:
        return LiftRetVal(ParseException.relativeUrlWithCannotBeABaseBase, 4);
      case 9:
        return LiftRetVal(ParseException.setHostOnCannotBeABaseUrl, 4);
      case 10:
        return LiftRetVal(ParseException.overflow, 4);
      case 11:
        return LiftRetVal(ParseException.other, 4);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(ParseException input) {
    return toRustBuffer(createUint8ListFromInt(input.index + 1));
  }

  static int allocationSize(ParseException value) {
    return 4;
  }

  static int write(ParseException value, Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, value.index + 1);
    return 4;
  }
}

enum PollKind {
  disclosed,
  undisclosed,
  ;
}

class FfiConverterPollKind {
  static PollKind lift(RustBuffer buffer) {
    return FfiConverterPollKind.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<PollKind> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    switch (index) {
      case 1:
        return LiftRetVal(PollKind.disclosed, 4);
      case 2:
        return LiftRetVal(PollKind.undisclosed, 4);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(PollKind input) {
    return toRustBuffer(createUint8ListFromInt(input.index + 1));
  }

  static int allocationSize(PollKind value) {
    return 4;
  }

  static int write(PollKind value, Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, value.index + 1);
    return 4;
  }
}

abstract class PowerLevel {
  RustBuffer lower();
  int allocationSize();
  int write(Uint8List buf);
}

class FfiConverterPowerLevel {
  static PowerLevel lift(RustBuffer buffer) {
    return FfiConverterPowerLevel.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<PowerLevel> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    final subview = Uint8List.view(buf.buffer, buf.offsetInBytes + 4);
    switch (index) {
      case 1:
        return InfinitePowerLevel.read(subview);
      case 2:
        return ValuePowerLevel.read(subview);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(PowerLevel value) {
    return value.lower();
  }

  static int allocationSize(PowerLevel value) {
    return value.allocationSize();
  }

  static int write(PowerLevel value, Uint8List buf) {
    return value.write(buf);
  }
}

class InfinitePowerLevel extends PowerLevel {
  InfinitePowerLevel();

  InfinitePowerLevel._();

  static LiftRetVal<InfinitePowerLevel> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(InfinitePowerLevel._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 1);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class ValuePowerLevel extends PowerLevel {
  final int value;

  ValuePowerLevel(
    int this.value,
  );

  ValuePowerLevel._(
    int this.value,
  );

  static LiftRetVal<ValuePowerLevel> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final value_lifted =
        FfiConverterInt64.read(Uint8List.view(buf.buffer, new_offset));
    final value = value_lifted.value;
    new_offset += value_lifted.bytesRead;
    return LiftRetVal(
        ValuePowerLevel._(
          value,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterInt64.allocationSize(value) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 2);
    int new_offset = buf.offsetInBytes + 4;

    new_offset +=
        FfiConverterInt64.write(value, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

abstract class ProfileDetails {
  RustBuffer lower();
  int allocationSize();
  int write(Uint8List buf);
}

class FfiConverterProfileDetails {
  static ProfileDetails lift(RustBuffer buffer) {
    return FfiConverterProfileDetails.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<ProfileDetails> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    final subview = Uint8List.view(buf.buffer, buf.offsetInBytes + 4);
    switch (index) {
      case 1:
        return UnavailableProfileDetails.read(subview);
      case 2:
        return PendingProfileDetails.read(subview);
      case 3:
        return ReadyProfileDetails.read(subview);
      case 4:
        return ErrorExceptionProfileDetails.read(subview);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(ProfileDetails value) {
    return value.lower();
  }

  static int allocationSize(ProfileDetails value) {
    return value.allocationSize();
  }

  static int write(ProfileDetails value, Uint8List buf) {
    return value.write(buf);
  }
}

class UnavailableProfileDetails extends ProfileDetails {
  UnavailableProfileDetails();

  UnavailableProfileDetails._();

  static LiftRetVal<UnavailableProfileDetails> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(UnavailableProfileDetails._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 1);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class PendingProfileDetails extends ProfileDetails {
  PendingProfileDetails();

  PendingProfileDetails._();

  static LiftRetVal<PendingProfileDetails> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(PendingProfileDetails._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 2);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class ReadyProfileDetails extends ProfileDetails {
  final String? displayName;
  final bool displayNameAmbiguous;
  final String? avatarUrl;

  ReadyProfileDetails({
    required String? this.displayName,
    required bool this.displayNameAmbiguous,
    required String? this.avatarUrl,
  });

  ReadyProfileDetails._(
    String? this.displayName,
    bool this.displayNameAmbiguous,
    String? this.avatarUrl,
  );

  static LiftRetVal<ReadyProfileDetails> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final displayName_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final displayName = displayName_lifted.value;
    new_offset += displayName_lifted.bytesRead;
    final displayNameAmbiguous_lifted =
        FfiConverterBool.read(Uint8List.view(buf.buffer, new_offset));
    final displayNameAmbiguous = displayNameAmbiguous_lifted.value;
    new_offset += displayNameAmbiguous_lifted.bytesRead;
    final avatarUrl_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final avatarUrl = avatarUrl_lifted.value;
    new_offset += avatarUrl_lifted.bytesRead;
    return LiftRetVal(
        ReadyProfileDetails._(
          displayName,
          displayNameAmbiguous,
          avatarUrl,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterOptionalString.allocationSize(displayName) +
        FfiConverterBool.allocationSize(displayNameAmbiguous) +
        FfiConverterOptionalString.allocationSize(avatarUrl) +
        4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 3);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterOptionalString.write(
        displayName, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterBool.write(
        displayNameAmbiguous, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        avatarUrl, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class ErrorExceptionProfileDetails extends ProfileDetails {
  final String message;

  ErrorExceptionProfileDetails(
    String this.message,
  );

  ErrorExceptionProfileDetails._(
    String this.message,
  );

  static LiftRetVal<ErrorExceptionProfileDetails> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final message_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final message = message_lifted.value;
    new_offset += message_lifted.bytesRead;
    return LiftRetVal(
        ErrorExceptionProfileDetails._(
          message,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(message) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 4);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterString.write(
        message, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

enum PublicRoomJoinRule {
  public,
  knock,
  restricted,
  knockRestricted,
  invite,
  ;
}

class FfiConverterPublicRoomJoinRule {
  static PublicRoomJoinRule lift(RustBuffer buffer) {
    return FfiConverterPublicRoomJoinRule.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<PublicRoomJoinRule> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    switch (index) {
      case 1:
        return LiftRetVal(PublicRoomJoinRule.public, 4);
      case 2:
        return LiftRetVal(PublicRoomJoinRule.knock, 4);
      case 3:
        return LiftRetVal(PublicRoomJoinRule.restricted, 4);
      case 4:
        return LiftRetVal(PublicRoomJoinRule.knockRestricted, 4);
      case 5:
        return LiftRetVal(PublicRoomJoinRule.invite, 4);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(PublicRoomJoinRule input) {
    return toRustBuffer(createUint8ListFromInt(input.index + 1));
  }

  static int allocationSize(PublicRoomJoinRule value) {
    return 4;
  }

  static int write(PublicRoomJoinRule value, Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, value.index + 1);
    return 4;
  }
}

abstract class PushCondition {
  RustBuffer lower();
  int allocationSize();
  int write(Uint8List buf);
}

class FfiConverterPushCondition {
  static PushCondition lift(RustBuffer buffer) {
    return FfiConverterPushCondition.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<PushCondition> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    final subview = Uint8List.view(buf.buffer, buf.offsetInBytes + 4);
    switch (index) {
      case 1:
        return EventMatchPushCondition.read(subview);
      case 2:
        return ContainsDisplayNamePushCondition.read(subview);
      case 3:
        return RoomMemberCountPushCondition.read(subview);
      case 4:
        return SenderNotificationPermissionPushCondition.read(subview);
      case 5:
        return EventPropertyIsPushCondition.read(subview);
      case 6:
        return EventPropertyContainsPushCondition.read(subview);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(PushCondition value) {
    return value.lower();
  }

  static int allocationSize(PushCondition value) {
    return value.allocationSize();
  }

  static int write(PushCondition value, Uint8List buf) {
    return value.write(buf);
  }
}

class EventMatchPushCondition extends PushCondition {
  final String key;
  final String pattern;

  EventMatchPushCondition({
    required String this.key,
    required String this.pattern,
  });

  EventMatchPushCondition._(
    String this.key,
    String this.pattern,
  );

  static LiftRetVal<EventMatchPushCondition> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final key_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final key = key_lifted.value;
    new_offset += key_lifted.bytesRead;
    final pattern_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final pattern = pattern_lifted.value;
    new_offset += pattern_lifted.bytesRead;
    return LiftRetVal(
        EventMatchPushCondition._(
          key,
          pattern,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(key) +
        FfiConverterString.allocationSize(pattern) +
        4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 1);
    int new_offset = buf.offsetInBytes + 4;

    new_offset +=
        FfiConverterString.write(key, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterString.write(
        pattern, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class ContainsDisplayNamePushCondition extends PushCondition {
  ContainsDisplayNamePushCondition();

  ContainsDisplayNamePushCondition._();

  static LiftRetVal<ContainsDisplayNamePushCondition> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(ContainsDisplayNamePushCondition._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 2);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class RoomMemberCountPushCondition extends PushCondition {
  final ComparisonOperator prefix;
  final int count;

  RoomMemberCountPushCondition({
    required ComparisonOperator this.prefix,
    required int this.count,
  });

  RoomMemberCountPushCondition._(
    ComparisonOperator this.prefix,
    int this.count,
  );

  static LiftRetVal<RoomMemberCountPushCondition> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final prefix_int = buf.buffer.asByteData(new_offset).getInt32(0);
    final prefix = FfiConverterComparisonOperator.lift(
        toRustBuffer(createUint8ListFromInt(prefix_int)));
    new_offset += 4;
    final count_lifted =
        FfiConverterUInt64.read(Uint8List.view(buf.buffer, new_offset));
    final count = count_lifted.value;
    new_offset += count_lifted.bytesRead;
    return LiftRetVal(
        RoomMemberCountPushCondition._(
          prefix,
          count,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4 + FfiConverterUInt64.allocationSize(count) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 3);
    int new_offset = buf.offsetInBytes + 4;

    final prefix_buffer = FfiConverterComparisonOperator.lower(prefix);
    final prefix_int =
        prefix_buffer.asUint8List().buffer.asByteData().getInt32(0);
    buf.buffer.asByteData(new_offset).setInt32(0, prefix_int);
    new_offset += 4;
    new_offset +=
        FfiConverterUInt64.write(count, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class SenderNotificationPermissionPushCondition extends PushCondition {
  final String key;

  SenderNotificationPermissionPushCondition(
    String this.key,
  );

  SenderNotificationPermissionPushCondition._(
    String this.key,
  );

  static LiftRetVal<SenderNotificationPermissionPushCondition> read(
      Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final key_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final key = key_lifted.value;
    new_offset += key_lifted.bytesRead;
    return LiftRetVal(
        SenderNotificationPermissionPushCondition._(
          key,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(key) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 4);
    int new_offset = buf.offsetInBytes + 4;

    new_offset +=
        FfiConverterString.write(key, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class EventPropertyIsPushCondition extends PushCondition {
  final String key;
  final JsonValue value;

  EventPropertyIsPushCondition({
    required String this.key,
    required JsonValue this.value,
  });

  EventPropertyIsPushCondition._(
    String this.key,
    JsonValue this.value,
  );

  static LiftRetVal<EventPropertyIsPushCondition> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final key_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final key = key_lifted.value;
    new_offset += key_lifted.bytesRead;
    final value_lifted =
        FfiConverterJsonValue.read(Uint8List.view(buf.buffer, new_offset));
    final value = value_lifted.value;
    new_offset += value_lifted.bytesRead;
    return LiftRetVal(
        EventPropertyIsPushCondition._(
          key,
          value,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(key) +
        FfiConverterJsonValue.allocationSize(value) +
        4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 5);
    int new_offset = buf.offsetInBytes + 4;

    new_offset +=
        FfiConverterString.write(key, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterJsonValue.write(
        value, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class EventPropertyContainsPushCondition extends PushCondition {
  final String key;
  final JsonValue value;

  EventPropertyContainsPushCondition({
    required String this.key,
    required JsonValue this.value,
  });

  EventPropertyContainsPushCondition._(
    String this.key,
    JsonValue this.value,
  );

  static LiftRetVal<EventPropertyContainsPushCondition> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final key_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final key = key_lifted.value;
    new_offset += key_lifted.bytesRead;
    final value_lifted =
        FfiConverterJsonValue.read(Uint8List.view(buf.buffer, new_offset));
    final value = value_lifted.value;
    new_offset += value_lifted.bytesRead;
    return LiftRetVal(
        EventPropertyContainsPushCondition._(
          key,
          value,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(key) +
        FfiConverterJsonValue.allocationSize(value) +
        4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 6);
    int new_offset = buf.offsetInBytes + 4;

    new_offset +=
        FfiConverterString.write(key, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterJsonValue.write(
        value, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

enum PushFormat {
  eventIdOnly,
  ;
}

class FfiConverterPushFormat {
  static PushFormat lift(RustBuffer buffer) {
    return FfiConverterPushFormat.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<PushFormat> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    switch (index) {
      case 1:
        return LiftRetVal(PushFormat.eventIdOnly, 4);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(PushFormat input) {
    return toRustBuffer(createUint8ListFromInt(input.index + 1));
  }

  static int allocationSize(PushFormat value) {
    return 4;
  }

  static int write(PushFormat value, Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, value.index + 1);
    return 4;
  }
}

abstract class PusherKind {
  RustBuffer lower();
  int allocationSize();
  int write(Uint8List buf);
}

class FfiConverterPusherKind {
  static PusherKind lift(RustBuffer buffer) {
    return FfiConverterPusherKind.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<PusherKind> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    final subview = Uint8List.view(buf.buffer, buf.offsetInBytes + 4);
    switch (index) {
      case 1:
        return HttpPusherKind.read(subview);
      case 2:
        return EmailPusherKind.read(subview);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(PusherKind value) {
    return value.lower();
  }

  static int allocationSize(PusherKind value) {
    return value.allocationSize();
  }

  static int write(PusherKind value, Uint8List buf) {
    return value.write(buf);
  }
}

class HttpPusherKind extends PusherKind {
  final HttpPusherData data;

  HttpPusherKind(
    HttpPusherData this.data,
  );

  HttpPusherKind._(
    HttpPusherData this.data,
  );

  static LiftRetVal<HttpPusherKind> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final data_lifted =
        FfiConverterHttpPusherData.read(Uint8List.view(buf.buffer, new_offset));
    final data = data_lifted.value;
    new_offset += data_lifted.bytesRead;
    return LiftRetVal(
        HttpPusherKind._(
          data,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterHttpPusherData.allocationSize(data) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 1);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterHttpPusherData.write(
        data, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class EmailPusherKind extends PusherKind {
  EmailPusherKind();

  EmailPusherKind._();

  static LiftRetVal<EmailPusherKind> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(EmailPusherKind._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 2);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

enum QrCodeDecodeException {
  crypto,
  ;
}

class FfiConverterQrCodeDecodeException {
  static QrCodeDecodeException lift(RustBuffer buffer) {
    return FfiConverterQrCodeDecodeException.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<QrCodeDecodeException> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    switch (index) {
      case 1:
        return LiftRetVal(QrCodeDecodeException.crypto, 4);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(QrCodeDecodeException input) {
    return toRustBuffer(createUint8ListFromInt(input.index + 1));
  }

  static int allocationSize(QrCodeDecodeException value) {
    return 4;
  }

  static int write(QrCodeDecodeException value, Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, value.index + 1);
    return 4;
  }
}

abstract class QrLoginProgress {
  RustBuffer lower();
  int allocationSize();
  int write(Uint8List buf);
}

class FfiConverterQrLoginProgress {
  static QrLoginProgress lift(RustBuffer buffer) {
    return FfiConverterQrLoginProgress.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<QrLoginProgress> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    final subview = Uint8List.view(buf.buffer, buf.offsetInBytes + 4);
    switch (index) {
      case 1:
        return StartingQrLoginProgress.read(subview);
      case 2:
        return EstablishingSecureChannelQrLoginProgress.read(subview);
      case 3:
        return WaitingForTokenQrLoginProgress.read(subview);
      case 4:
        return DoneQrLoginProgress.read(subview);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(QrLoginProgress value) {
    return value.lower();
  }

  static int allocationSize(QrLoginProgress value) {
    return value.allocationSize();
  }

  static int write(QrLoginProgress value, Uint8List buf) {
    return value.write(buf);
  }
}

class StartingQrLoginProgress extends QrLoginProgress {
  StartingQrLoginProgress();

  StartingQrLoginProgress._();

  static LiftRetVal<StartingQrLoginProgress> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(StartingQrLoginProgress._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 1);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class EstablishingSecureChannelQrLoginProgress extends QrLoginProgress {
  final int checkCode;
  final String checkCodeString;

  EstablishingSecureChannelQrLoginProgress({
    required int this.checkCode,
    required String this.checkCodeString,
  });

  EstablishingSecureChannelQrLoginProgress._(
    int this.checkCode,
    String this.checkCodeString,
  );

  static LiftRetVal<EstablishingSecureChannelQrLoginProgress> read(
      Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final checkCode_lifted =
        FfiConverterUInt8.read(Uint8List.view(buf.buffer, new_offset));
    final checkCode = checkCode_lifted.value;
    new_offset += checkCode_lifted.bytesRead;
    final checkCodeString_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final checkCodeString = checkCodeString_lifted.value;
    new_offset += checkCodeString_lifted.bytesRead;
    return LiftRetVal(
        EstablishingSecureChannelQrLoginProgress._(
          checkCode,
          checkCodeString,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterUInt8.allocationSize(checkCode) +
        FfiConverterString.allocationSize(checkCodeString) +
        4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 2);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterUInt8.write(
        checkCode, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterString.write(
        checkCodeString, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class WaitingForTokenQrLoginProgress extends QrLoginProgress {
  final String userCode;

  WaitingForTokenQrLoginProgress(
    String this.userCode,
  );

  WaitingForTokenQrLoginProgress._(
    String this.userCode,
  );

  static LiftRetVal<WaitingForTokenQrLoginProgress> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final userCode_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final userCode = userCode_lifted.value;
    new_offset += userCode_lifted.bytesRead;
    return LiftRetVal(
        WaitingForTokenQrLoginProgress._(
          userCode,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(userCode) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 3);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterString.write(
        userCode, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class DoneQrLoginProgress extends QrLoginProgress {
  DoneQrLoginProgress();

  DoneQrLoginProgress._();

  static LiftRetVal<DoneQrLoginProgress> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(DoneQrLoginProgress._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 4);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

abstract class QueueWedgeException {
  RustBuffer lower();
  int allocationSize();
  int write(Uint8List buf);
}

class FfiConverterQueueWedgeException {
  static QueueWedgeException lift(RustBuffer buffer) {
    return FfiConverterQueueWedgeException.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<QueueWedgeException> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    final subview = Uint8List.view(buf.buffer, buf.offsetInBytes + 4);
    switch (index) {
      case 1:
        return InsecureDevicesQueueWedgeException.read(subview);
      case 2:
        return IdentityViolationsQueueWedgeException.read(subview);
      case 3:
        return CrossVerificationRequiredQueueWedgeException.read(subview);
      case 4:
        return MissingMediaContentQueueWedgeException.read(subview);
      case 5:
        return InvalidMimeTypeQueueWedgeException.read(subview);
      case 6:
        return GenericApiExceptionQueueWedgeException.read(subview);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(QueueWedgeException value) {
    return value.lower();
  }

  static int allocationSize(QueueWedgeException value) {
    return value.allocationSize();
  }

  static int write(QueueWedgeException value, Uint8List buf) {
    return value.write(buf);
  }
}

class InsecureDevicesQueueWedgeException extends QueueWedgeException {
  final Map<String, List<String>> userDeviceMap;

  InsecureDevicesQueueWedgeException(
    Map<String, List<String>> this.userDeviceMap,
  );

  InsecureDevicesQueueWedgeException._(
    Map<String, List<String>> this.userDeviceMap,
  );

  static LiftRetVal<InsecureDevicesQueueWedgeException> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final userDeviceMap_lifted = FfiConverterMapStringSequenceString.read(
        Uint8List.view(buf.buffer, new_offset));
    final userDeviceMap = userDeviceMap_lifted.value;
    new_offset += userDeviceMap_lifted.bytesRead;
    return LiftRetVal(
        InsecureDevicesQueueWedgeException._(
          userDeviceMap.cast<String, List<String>>(),
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterMapStringSequenceString.allocationSize(userDeviceMap) +
        4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 1);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterMapStringSequenceString.write(
        userDeviceMap, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class IdentityViolationsQueueWedgeException extends QueueWedgeException {
  final List<String> users;

  IdentityViolationsQueueWedgeException(
    List<String> this.users,
  );

  IdentityViolationsQueueWedgeException._(
    List<String> this.users,
  );

  static LiftRetVal<IdentityViolationsQueueWedgeException> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final users_lifted =
        FfiConverterSequenceString.read(Uint8List.view(buf.buffer, new_offset));
    final users = users_lifted.value;
    new_offset += users_lifted.bytesRead;
    return LiftRetVal(
        IdentityViolationsQueueWedgeException._(
          users,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterSequenceString.allocationSize(users) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 2);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterSequenceString.write(
        users, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class CrossVerificationRequiredQueueWedgeException extends QueueWedgeException {
  CrossVerificationRequiredQueueWedgeException();

  CrossVerificationRequiredQueueWedgeException._();

  static LiftRetVal<CrossVerificationRequiredQueueWedgeException> read(
      Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(
        CrossVerificationRequiredQueueWedgeException._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 3);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class MissingMediaContentQueueWedgeException extends QueueWedgeException {
  MissingMediaContentQueueWedgeException();

  MissingMediaContentQueueWedgeException._();

  static LiftRetVal<MissingMediaContentQueueWedgeException> read(
      Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(MissingMediaContentQueueWedgeException._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 4);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class InvalidMimeTypeQueueWedgeException extends QueueWedgeException {
  final String mimeType;

  InvalidMimeTypeQueueWedgeException(
    String this.mimeType,
  );

  InvalidMimeTypeQueueWedgeException._(
    String this.mimeType,
  );

  static LiftRetVal<InvalidMimeTypeQueueWedgeException> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final mimeType_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final mimeType = mimeType_lifted.value;
    new_offset += mimeType_lifted.bytesRead;
    return LiftRetVal(
        InvalidMimeTypeQueueWedgeException._(
          mimeType,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(mimeType) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 5);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterString.write(
        mimeType, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class GenericApiExceptionQueueWedgeException extends QueueWedgeException {
  final String msg;

  GenericApiExceptionQueueWedgeException(
    String this.msg,
  );

  GenericApiExceptionQueueWedgeException._(
    String this.msg,
  );

  static LiftRetVal<GenericApiExceptionQueueWedgeException> read(
      Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final msg_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final msg = msg_lifted.value;
    new_offset += msg_lifted.bytesRead;
    return LiftRetVal(
        GenericApiExceptionQueueWedgeException._(
          msg,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(msg) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 6);
    int new_offset = buf.offsetInBytes + 4;

    new_offset +=
        FfiConverterString.write(msg, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

enum ReceiptType {
  read,
  readPrivate,
  fullyRead,
  ;
}

class FfiConverterReceiptType {
  static ReceiptType lift(RustBuffer buffer) {
    return FfiConverterReceiptType.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<ReceiptType> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    switch (index) {
      case 1:
        return LiftRetVal(ReceiptType.read, 4);
      case 2:
        return LiftRetVal(ReceiptType.readPrivate, 4);
      case 3:
        return LiftRetVal(ReceiptType.fullyRead, 4);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(ReceiptType input) {
    return toRustBuffer(createUint8ListFromInt(input.index + 1));
  }

  static int allocationSize(ReceiptType value) {
    return 4;
  }

  static int write(ReceiptType value, Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, value.index + 1);
    return 4;
  }
}

abstract class RecoveryException implements Exception {
  RustBuffer lower();
  int allocationSize();
  int write(Uint8List buf);
}

class FfiConverterRecoveryException {
  static RecoveryException lift(RustBuffer buffer) {
    return FfiConverterRecoveryException.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<RecoveryException> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    final subview = Uint8List.view(buf.buffer, buf.offsetInBytes + 4);
    switch (index) {
      case 1:
        return BackupExistsOnServerRecoveryException.read(subview);
      case 2:
        return ClientRecoveryException.read(subview);
      case 3:
        return SecretStorageRecoveryException.read(subview);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(RecoveryException value) {
    return value.lower();
  }

  static int allocationSize(RecoveryException value) {
    return value.allocationSize();
  }

  static int write(RecoveryException value, Uint8List buf) {
    return value.write(buf);
  }
}

class BackupExistsOnServerRecoveryException extends RecoveryException {
  BackupExistsOnServerRecoveryException();

  BackupExistsOnServerRecoveryException._();

  static LiftRetVal<BackupExistsOnServerRecoveryException> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(BackupExistsOnServerRecoveryException._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 1);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }

  @override
  String toString() {
    return "BackupExistsOnServerRecoveryException";
  }
}

class ClientRecoveryException extends RecoveryException {
  final ClientException source;

  ClientRecoveryException(
    ClientException this.source,
  );

  ClientRecoveryException._(
    ClientException this.source,
  );

  static LiftRetVal<ClientRecoveryException> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final source_lifted = FfiConverterClientException.read(
        Uint8List.view(buf.buffer, new_offset));
    final source = source_lifted.value;
    new_offset += source_lifted.bytesRead;
    return LiftRetVal(
        ClientRecoveryException._(
          source,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterClientException.allocationSize(source) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 2);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterClientException.write(
        source, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }

  @override
  String toString() {
    return "ClientRecoveryException($source)";
  }
}

class SecretStorageRecoveryException extends RecoveryException {
  final String errorMessage;

  SecretStorageRecoveryException(
    String this.errorMessage,
  );

  SecretStorageRecoveryException._(
    String this.errorMessage,
  );

  static LiftRetVal<SecretStorageRecoveryException> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final errorMessage_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final errorMessage = errorMessage_lifted.value;
    new_offset += errorMessage_lifted.bytesRead;
    return LiftRetVal(
        SecretStorageRecoveryException._(
          errorMessage,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(errorMessage) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 3);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterString.write(
        errorMessage, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }

  @override
  String toString() {
    return "SecretStorageRecoveryException($errorMessage)";
  }
}

enum RecoveryState {
  unknown,
  enabled,
  disabled,
  incomplete,
  ;
}

class FfiConverterRecoveryState {
  static RecoveryState lift(RustBuffer buffer) {
    return FfiConverterRecoveryState.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<RecoveryState> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    switch (index) {
      case 1:
        return LiftRetVal(RecoveryState.unknown, 4);
      case 2:
        return LiftRetVal(RecoveryState.enabled, 4);
      case 3:
        return LiftRetVal(RecoveryState.disabled, 4);
      case 4:
        return LiftRetVal(RecoveryState.incomplete, 4);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(RecoveryState input) {
    return toRustBuffer(createUint8ListFromInt(input.index + 1));
  }

  static int allocationSize(RecoveryState value) {
    return 4;
  }

  static int write(RecoveryState value, Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, value.index + 1);
    return 4;
  }
}

abstract class RoomAccountDataEvent {
  RustBuffer lower();
  int allocationSize();
  int write(Uint8List buf);
}

class FfiConverterRoomAccountDataEvent {
  static RoomAccountDataEvent lift(RustBuffer buffer) {
    return FfiConverterRoomAccountDataEvent.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<RoomAccountDataEvent> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    final subview = Uint8List.view(buf.buffer, buf.offsetInBytes + 4);
    switch (index) {
      case 1:
        return FullyReadEventRoomAccountDataEvent.read(subview);
      case 2:
        return MarkedUnreadRoomAccountDataEvent.read(subview);
      case 3:
        return TagRoomAccountDataEvent.read(subview);
      case 4:
        return UnstableMarkedUnreadRoomAccountDataEvent.read(subview);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(RoomAccountDataEvent value) {
    return value.lower();
  }

  static int allocationSize(RoomAccountDataEvent value) {
    return value.allocationSize();
  }

  static int write(RoomAccountDataEvent value, Uint8List buf) {
    return value.write(buf);
  }
}

class FullyReadEventRoomAccountDataEvent extends RoomAccountDataEvent {
  final String eventId;

  FullyReadEventRoomAccountDataEvent(
    String this.eventId,
  );

  FullyReadEventRoomAccountDataEvent._(
    String this.eventId,
  );

  static LiftRetVal<FullyReadEventRoomAccountDataEvent> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final eventId_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final eventId = eventId_lifted.value;
    new_offset += eventId_lifted.bytesRead;
    return LiftRetVal(
        FullyReadEventRoomAccountDataEvent._(
          eventId,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(eventId) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 1);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterString.write(
        eventId, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class MarkedUnreadRoomAccountDataEvent extends RoomAccountDataEvent {
  final bool unread;

  MarkedUnreadRoomAccountDataEvent(
    bool this.unread,
  );

  MarkedUnreadRoomAccountDataEvent._(
    bool this.unread,
  );

  static LiftRetVal<MarkedUnreadRoomAccountDataEvent> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final unread_lifted =
        FfiConverterBool.read(Uint8List.view(buf.buffer, new_offset));
    final unread = unread_lifted.value;
    new_offset += unread_lifted.bytesRead;
    return LiftRetVal(
        MarkedUnreadRoomAccountDataEvent._(
          unread,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterBool.allocationSize(unread) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 2);
    int new_offset = buf.offsetInBytes + 4;

    new_offset +=
        FfiConverterBool.write(unread, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class TagRoomAccountDataEvent extends RoomAccountDataEvent {
  final Map<TagName, TagInfo> tags;

  TagRoomAccountDataEvent(
    Map<TagName, TagInfo> this.tags,
  );

  TagRoomAccountDataEvent._(
    Map<TagName, TagInfo> this.tags,
  );

  static LiftRetVal<TagRoomAccountDataEvent> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final tags_lifted = FfiConverterMapTagNameTagInfo.read(
        Uint8List.view(buf.buffer, new_offset));
    final tags = tags_lifted.value;
    new_offset += tags_lifted.bytesRead;
    return LiftRetVal(
        TagRoomAccountDataEvent._(
          tags.cast<TagName, TagInfo>(),
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterMapTagNameTagInfo.allocationSize(tags) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 3);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterMapTagNameTagInfo.write(
        tags, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class UnstableMarkedUnreadRoomAccountDataEvent extends RoomAccountDataEvent {
  final bool unread;

  UnstableMarkedUnreadRoomAccountDataEvent(
    bool this.unread,
  );

  UnstableMarkedUnreadRoomAccountDataEvent._(
    bool this.unread,
  );

  static LiftRetVal<UnstableMarkedUnreadRoomAccountDataEvent> read(
      Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final unread_lifted =
        FfiConverterBool.read(Uint8List.view(buf.buffer, new_offset));
    final unread = unread_lifted.value;
    new_offset += unread_lifted.bytesRead;
    return LiftRetVal(
        UnstableMarkedUnreadRoomAccountDataEvent._(
          unread,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterBool.allocationSize(unread) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 4);
    int new_offset = buf.offsetInBytes + 4;

    new_offset +=
        FfiConverterBool.write(unread, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

enum RoomAccountDataEventType {
  fullyRead,
  markedUnread,
  tag,
  unstableMarkedUnread,
  ;
}

class FfiConverterRoomAccountDataEventType {
  static RoomAccountDataEventType lift(RustBuffer buffer) {
    return FfiConverterRoomAccountDataEventType.read(buffer.asUint8List())
        .value;
  }

  static LiftRetVal<RoomAccountDataEventType> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    switch (index) {
      case 1:
        return LiftRetVal(RoomAccountDataEventType.fullyRead, 4);
      case 2:
        return LiftRetVal(RoomAccountDataEventType.markedUnread, 4);
      case 3:
        return LiftRetVal(RoomAccountDataEventType.tag, 4);
      case 4:
        return LiftRetVal(RoomAccountDataEventType.unstableMarkedUnread, 4);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(RoomAccountDataEventType input) {
    return toRustBuffer(createUint8ListFromInt(input.index + 1));
  }

  static int allocationSize(RoomAccountDataEventType value) {
    return 4;
  }

  static int write(RoomAccountDataEventType value, Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, value.index + 1);
    return 4;
  }
}

abstract class RoomDirectorySearchEntryUpdate {
  RustBuffer lower();
  int allocationSize();
  int write(Uint8List buf);
}

class FfiConverterRoomDirectorySearchEntryUpdate {
  static RoomDirectorySearchEntryUpdate lift(RustBuffer buffer) {
    return FfiConverterRoomDirectorySearchEntryUpdate.read(buffer.asUint8List())
        .value;
  }

  static LiftRetVal<RoomDirectorySearchEntryUpdate> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    final subview = Uint8List.view(buf.buffer, buf.offsetInBytes + 4);
    switch (index) {
      case 1:
        return AppendRoomDirectorySearchEntryUpdate.read(subview);
      case 2:
        return ClearRoomDirectorySearchEntryUpdate.read(subview);
      case 3:
        return PushFrontRoomDirectorySearchEntryUpdate.read(subview);
      case 4:
        return PushBackRoomDirectorySearchEntryUpdate.read(subview);
      case 5:
        return PopFrontRoomDirectorySearchEntryUpdate.read(subview);
      case 6:
        return PopBackRoomDirectorySearchEntryUpdate.read(subview);
      case 7:
        return InsertRoomDirectorySearchEntryUpdate.read(subview);
      case 8:
        return SetRoomDirectorySearchEntryUpdate.read(subview);
      case 9:
        return RemoveRoomDirectorySearchEntryUpdate.read(subview);
      case 10:
        return TruncateRoomDirectorySearchEntryUpdate.read(subview);
      case 11:
        return ResetRoomDirectorySearchEntryUpdate.read(subview);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(RoomDirectorySearchEntryUpdate value) {
    return value.lower();
  }

  static int allocationSize(RoomDirectorySearchEntryUpdate value) {
    return value.allocationSize();
  }

  static int write(RoomDirectorySearchEntryUpdate value, Uint8List buf) {
    return value.write(buf);
  }
}

class AppendRoomDirectorySearchEntryUpdate
    extends RoomDirectorySearchEntryUpdate {
  final List<RoomDescription> values;

  AppendRoomDirectorySearchEntryUpdate(
    List<RoomDescription> this.values,
  );

  AppendRoomDirectorySearchEntryUpdate._(
    List<RoomDescription> this.values,
  );

  static LiftRetVal<AppendRoomDirectorySearchEntryUpdate> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final values_lifted = FfiConverterSequenceRoomDescription.read(
        Uint8List.view(buf.buffer, new_offset));
    final values = values_lifted.value;
    new_offset += values_lifted.bytesRead;
    return LiftRetVal(
        AppendRoomDirectorySearchEntryUpdate._(
          values,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterSequenceRoomDescription.allocationSize(values) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 1);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterSequenceRoomDescription.write(
        values, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class ClearRoomDirectorySearchEntryUpdate
    extends RoomDirectorySearchEntryUpdate {
  ClearRoomDirectorySearchEntryUpdate();

  ClearRoomDirectorySearchEntryUpdate._();

  static LiftRetVal<ClearRoomDirectorySearchEntryUpdate> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(ClearRoomDirectorySearchEntryUpdate._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 2);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class PushFrontRoomDirectorySearchEntryUpdate
    extends RoomDirectorySearchEntryUpdate {
  final RoomDescription value;

  PushFrontRoomDirectorySearchEntryUpdate(
    RoomDescription this.value,
  );

  PushFrontRoomDirectorySearchEntryUpdate._(
    RoomDescription this.value,
  );

  static LiftRetVal<PushFrontRoomDirectorySearchEntryUpdate> read(
      Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final value_lifted = FfiConverterRoomDescription.read(
        Uint8List.view(buf.buffer, new_offset));
    final value = value_lifted.value;
    new_offset += value_lifted.bytesRead;
    return LiftRetVal(
        PushFrontRoomDirectorySearchEntryUpdate._(
          value,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterRoomDescription.allocationSize(value) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 3);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterRoomDescription.write(
        value, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class PushBackRoomDirectorySearchEntryUpdate
    extends RoomDirectorySearchEntryUpdate {
  final RoomDescription value;

  PushBackRoomDirectorySearchEntryUpdate(
    RoomDescription this.value,
  );

  PushBackRoomDirectorySearchEntryUpdate._(
    RoomDescription this.value,
  );

  static LiftRetVal<PushBackRoomDirectorySearchEntryUpdate> read(
      Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final value_lifted = FfiConverterRoomDescription.read(
        Uint8List.view(buf.buffer, new_offset));
    final value = value_lifted.value;
    new_offset += value_lifted.bytesRead;
    return LiftRetVal(
        PushBackRoomDirectorySearchEntryUpdate._(
          value,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterRoomDescription.allocationSize(value) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 4);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterRoomDescription.write(
        value, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class PopFrontRoomDirectorySearchEntryUpdate
    extends RoomDirectorySearchEntryUpdate {
  PopFrontRoomDirectorySearchEntryUpdate();

  PopFrontRoomDirectorySearchEntryUpdate._();

  static LiftRetVal<PopFrontRoomDirectorySearchEntryUpdate> read(
      Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(PopFrontRoomDirectorySearchEntryUpdate._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 5);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class PopBackRoomDirectorySearchEntryUpdate
    extends RoomDirectorySearchEntryUpdate {
  PopBackRoomDirectorySearchEntryUpdate();

  PopBackRoomDirectorySearchEntryUpdate._();

  static LiftRetVal<PopBackRoomDirectorySearchEntryUpdate> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(PopBackRoomDirectorySearchEntryUpdate._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 6);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class InsertRoomDirectorySearchEntryUpdate
    extends RoomDirectorySearchEntryUpdate {
  final int index;
  final RoomDescription value;

  InsertRoomDirectorySearchEntryUpdate({
    required int this.index,
    required RoomDescription this.value,
  });

  InsertRoomDirectorySearchEntryUpdate._(
    int this.index,
    RoomDescription this.value,
  );

  static LiftRetVal<InsertRoomDirectorySearchEntryUpdate> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final index_lifted =
        FfiConverterUInt32.read(Uint8List.view(buf.buffer, new_offset));
    final index = index_lifted.value;
    new_offset += index_lifted.bytesRead;
    final value_lifted = FfiConverterRoomDescription.read(
        Uint8List.view(buf.buffer, new_offset));
    final value = value_lifted.value;
    new_offset += value_lifted.bytesRead;
    return LiftRetVal(
        InsertRoomDirectorySearchEntryUpdate._(
          index,
          value,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterUInt32.allocationSize(index) +
        FfiConverterRoomDescription.allocationSize(value) +
        4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 7);
    int new_offset = buf.offsetInBytes + 4;

    new_offset +=
        FfiConverterUInt32.write(index, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterRoomDescription.write(
        value, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class SetRoomDirectorySearchEntryUpdate extends RoomDirectorySearchEntryUpdate {
  final int index;
  final RoomDescription value;

  SetRoomDirectorySearchEntryUpdate({
    required int this.index,
    required RoomDescription this.value,
  });

  SetRoomDirectorySearchEntryUpdate._(
    int this.index,
    RoomDescription this.value,
  );

  static LiftRetVal<SetRoomDirectorySearchEntryUpdate> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final index_lifted =
        FfiConverterUInt32.read(Uint8List.view(buf.buffer, new_offset));
    final index = index_lifted.value;
    new_offset += index_lifted.bytesRead;
    final value_lifted = FfiConverterRoomDescription.read(
        Uint8List.view(buf.buffer, new_offset));
    final value = value_lifted.value;
    new_offset += value_lifted.bytesRead;
    return LiftRetVal(
        SetRoomDirectorySearchEntryUpdate._(
          index,
          value,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterUInt32.allocationSize(index) +
        FfiConverterRoomDescription.allocationSize(value) +
        4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 8);
    int new_offset = buf.offsetInBytes + 4;

    new_offset +=
        FfiConverterUInt32.write(index, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterRoomDescription.write(
        value, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class RemoveRoomDirectorySearchEntryUpdate
    extends RoomDirectorySearchEntryUpdate {
  final int index;

  RemoveRoomDirectorySearchEntryUpdate(
    int this.index,
  );

  RemoveRoomDirectorySearchEntryUpdate._(
    int this.index,
  );

  static LiftRetVal<RemoveRoomDirectorySearchEntryUpdate> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final index_lifted =
        FfiConverterUInt32.read(Uint8List.view(buf.buffer, new_offset));
    final index = index_lifted.value;
    new_offset += index_lifted.bytesRead;
    return LiftRetVal(
        RemoveRoomDirectorySearchEntryUpdate._(
          index,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterUInt32.allocationSize(index) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 9);
    int new_offset = buf.offsetInBytes + 4;

    new_offset +=
        FfiConverterUInt32.write(index, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class TruncateRoomDirectorySearchEntryUpdate
    extends RoomDirectorySearchEntryUpdate {
  final int length;

  TruncateRoomDirectorySearchEntryUpdate(
    int this.length,
  );

  TruncateRoomDirectorySearchEntryUpdate._(
    int this.length,
  );

  static LiftRetVal<TruncateRoomDirectorySearchEntryUpdate> read(
      Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final length_lifted =
        FfiConverterUInt32.read(Uint8List.view(buf.buffer, new_offset));
    final length = length_lifted.value;
    new_offset += length_lifted.bytesRead;
    return LiftRetVal(
        TruncateRoomDirectorySearchEntryUpdate._(
          length,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterUInt32.allocationSize(length) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 10);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterUInt32.write(
        length, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class ResetRoomDirectorySearchEntryUpdate
    extends RoomDirectorySearchEntryUpdate {
  final List<RoomDescription> values;

  ResetRoomDirectorySearchEntryUpdate(
    List<RoomDescription> this.values,
  );

  ResetRoomDirectorySearchEntryUpdate._(
    List<RoomDescription> this.values,
  );

  static LiftRetVal<ResetRoomDirectorySearchEntryUpdate> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final values_lifted = FfiConverterSequenceRoomDescription.read(
        Uint8List.view(buf.buffer, new_offset));
    final values = values_lifted.value;
    new_offset += values_lifted.bytesRead;
    return LiftRetVal(
        ResetRoomDirectorySearchEntryUpdate._(
          values,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterSequenceRoomDescription.allocationSize(values) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 11);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterSequenceRoomDescription.write(
        values, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

enum RoomException {
  invalidAttachmentData,
  invalidAttachmentMimeType,
  invalidMediaInfo,
  timelineUnavailable,
  invalidThumbnailData,
  invalidRepliedToEventId,
  failedSendingAttachment,
  ;
}

class FfiConverterRoomException {
  static RoomException lift(RustBuffer buffer) {
    return FfiConverterRoomException.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<RoomException> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    switch (index) {
      case 1:
        return LiftRetVal(RoomException.invalidAttachmentData, 4);
      case 2:
        return LiftRetVal(RoomException.invalidAttachmentMimeType, 4);
      case 3:
        return LiftRetVal(RoomException.invalidMediaInfo, 4);
      case 4:
        return LiftRetVal(RoomException.timelineUnavailable, 4);
      case 5:
        return LiftRetVal(RoomException.invalidThumbnailData, 4);
      case 6:
        return LiftRetVal(RoomException.invalidRepliedToEventId, 4);
      case 7:
        return LiftRetVal(RoomException.failedSendingAttachment, 4);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(RoomException input) {
    return toRustBuffer(createUint8ListFromInt(input.index + 1));
  }

  static int allocationSize(RoomException value) {
    return 4;
  }

  static int write(RoomException value, Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, value.index + 1);
    return 4;
  }
}

abstract class RoomHistoryVisibility {
  RustBuffer lower();
  int allocationSize();
  int write(Uint8List buf);
}

class FfiConverterRoomHistoryVisibility {
  static RoomHistoryVisibility lift(RustBuffer buffer) {
    return FfiConverterRoomHistoryVisibility.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<RoomHistoryVisibility> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    final subview = Uint8List.view(buf.buffer, buf.offsetInBytes + 4);
    switch (index) {
      case 1:
        return InvitedRoomHistoryVisibility.read(subview);
      case 2:
        return JoinedRoomHistoryVisibility.read(subview);
      case 3:
        return SharedRoomHistoryVisibility.read(subview);
      case 4:
        return WorldReadableRoomHistoryVisibility.read(subview);
      case 5:
        return CustomRoomHistoryVisibility.read(subview);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(RoomHistoryVisibility value) {
    return value.lower();
  }

  static int allocationSize(RoomHistoryVisibility value) {
    return value.allocationSize();
  }

  static int write(RoomHistoryVisibility value, Uint8List buf) {
    return value.write(buf);
  }
}

class InvitedRoomHistoryVisibility extends RoomHistoryVisibility {
  InvitedRoomHistoryVisibility();

  InvitedRoomHistoryVisibility._();

  static LiftRetVal<InvitedRoomHistoryVisibility> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(InvitedRoomHistoryVisibility._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 1);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class JoinedRoomHistoryVisibility extends RoomHistoryVisibility {
  JoinedRoomHistoryVisibility();

  JoinedRoomHistoryVisibility._();

  static LiftRetVal<JoinedRoomHistoryVisibility> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(JoinedRoomHistoryVisibility._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 2);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class SharedRoomHistoryVisibility extends RoomHistoryVisibility {
  SharedRoomHistoryVisibility();

  SharedRoomHistoryVisibility._();

  static LiftRetVal<SharedRoomHistoryVisibility> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(SharedRoomHistoryVisibility._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 3);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class WorldReadableRoomHistoryVisibility extends RoomHistoryVisibility {
  WorldReadableRoomHistoryVisibility();

  WorldReadableRoomHistoryVisibility._();

  static LiftRetVal<WorldReadableRoomHistoryVisibility> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(WorldReadableRoomHistoryVisibility._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 4);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class CustomRoomHistoryVisibility extends RoomHistoryVisibility {
  final String value;

  CustomRoomHistoryVisibility(
    String this.value,
  );

  CustomRoomHistoryVisibility._(
    String this.value,
  );

  static LiftRetVal<CustomRoomHistoryVisibility> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final value_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final value = value_lifted.value;
    new_offset += value_lifted.bytesRead;
    return LiftRetVal(
        CustomRoomHistoryVisibility._(
          value,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(value) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 5);
    int new_offset = buf.offsetInBytes + 4;

    new_offset +=
        FfiConverterString.write(value, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

abstract class RoomListEntriesDynamicFilterKind {
  RustBuffer lower();
  int allocationSize();
  int write(Uint8List buf);
}

class FfiConverterRoomListEntriesDynamicFilterKind {
  static RoomListEntriesDynamicFilterKind lift(RustBuffer buffer) {
    return FfiConverterRoomListEntriesDynamicFilterKind.read(
            buffer.asUint8List())
        .value;
  }

  static LiftRetVal<RoomListEntriesDynamicFilterKind> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    final subview = Uint8List.view(buf.buffer, buf.offsetInBytes + 4);
    switch (index) {
      case 1:
        return AllRoomListEntriesDynamicFilterKind.read(subview);
      case 2:
        return AnyRoomListEntriesDynamicFilterKind.read(subview);
      case 3:
        return NonSpaceRoomListEntriesDynamicFilterKind.read(subview);
      case 4:
        return NonLeftRoomListEntriesDynamicFilterKind.read(subview);
      case 5:
        return JoinedRoomListEntriesDynamicFilterKind.read(subview);
      case 6:
        return UnreadRoomListEntriesDynamicFilterKind.read(subview);
      case 7:
        return FavouriteRoomListEntriesDynamicFilterKind.read(subview);
      case 8:
        return InviteRoomListEntriesDynamicFilterKind.read(subview);
      case 9:
        return CategoryRoomListEntriesDynamicFilterKind.read(subview);
      case 10:
        return NoneRoomListEntriesDynamicFilterKind.read(subview);
      case 11:
        return NormalizedMatchRoomNameRoomListEntriesDynamicFilterKind.read(
            subview);
      case 12:
        return FuzzyMatchRoomNameRoomListEntriesDynamicFilterKind.read(subview);
      case 13:
        return DeduplicateVersionsRoomListEntriesDynamicFilterKind.read(
            subview);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(RoomListEntriesDynamicFilterKind value) {
    return value.lower();
  }

  static int allocationSize(RoomListEntriesDynamicFilterKind value) {
    return value.allocationSize();
  }

  static int write(RoomListEntriesDynamicFilterKind value, Uint8List buf) {
    return value.write(buf);
  }
}

class AllRoomListEntriesDynamicFilterKind
    extends RoomListEntriesDynamicFilterKind {
  final List<RoomListEntriesDynamicFilterKind> filters;

  AllRoomListEntriesDynamicFilterKind(
    List<RoomListEntriesDynamicFilterKind> this.filters,
  );

  AllRoomListEntriesDynamicFilterKind._(
    List<RoomListEntriesDynamicFilterKind> this.filters,
  );

  static LiftRetVal<AllRoomListEntriesDynamicFilterKind> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final filters_lifted =
        FfiConverterSequenceRoomListEntriesDynamicFilterKind.read(
            Uint8List.view(buf.buffer, new_offset));
    final filters = filters_lifted.value;
    new_offset += filters_lifted.bytesRead;
    return LiftRetVal(
        AllRoomListEntriesDynamicFilterKind._(
          filters,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterSequenceRoomListEntriesDynamicFilterKind.allocationSize(
            filters) +
        4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 1);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterSequenceRoomListEntriesDynamicFilterKind.write(
        filters, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class AnyRoomListEntriesDynamicFilterKind
    extends RoomListEntriesDynamicFilterKind {
  final List<RoomListEntriesDynamicFilterKind> filters;

  AnyRoomListEntriesDynamicFilterKind(
    List<RoomListEntriesDynamicFilterKind> this.filters,
  );

  AnyRoomListEntriesDynamicFilterKind._(
    List<RoomListEntriesDynamicFilterKind> this.filters,
  );

  static LiftRetVal<AnyRoomListEntriesDynamicFilterKind> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final filters_lifted =
        FfiConverterSequenceRoomListEntriesDynamicFilterKind.read(
            Uint8List.view(buf.buffer, new_offset));
    final filters = filters_lifted.value;
    new_offset += filters_lifted.bytesRead;
    return LiftRetVal(
        AnyRoomListEntriesDynamicFilterKind._(
          filters,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterSequenceRoomListEntriesDynamicFilterKind.allocationSize(
            filters) +
        4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 2);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterSequenceRoomListEntriesDynamicFilterKind.write(
        filters, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class NonSpaceRoomListEntriesDynamicFilterKind
    extends RoomListEntriesDynamicFilterKind {
  NonSpaceRoomListEntriesDynamicFilterKind();

  NonSpaceRoomListEntriesDynamicFilterKind._();

  static LiftRetVal<NonSpaceRoomListEntriesDynamicFilterKind> read(
      Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(NonSpaceRoomListEntriesDynamicFilterKind._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 3);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class NonLeftRoomListEntriesDynamicFilterKind
    extends RoomListEntriesDynamicFilterKind {
  NonLeftRoomListEntriesDynamicFilterKind();

  NonLeftRoomListEntriesDynamicFilterKind._();

  static LiftRetVal<NonLeftRoomListEntriesDynamicFilterKind> read(
      Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(NonLeftRoomListEntriesDynamicFilterKind._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 4);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class JoinedRoomListEntriesDynamicFilterKind
    extends RoomListEntriesDynamicFilterKind {
  JoinedRoomListEntriesDynamicFilterKind();

  JoinedRoomListEntriesDynamicFilterKind._();

  static LiftRetVal<JoinedRoomListEntriesDynamicFilterKind> read(
      Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(JoinedRoomListEntriesDynamicFilterKind._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 5);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class UnreadRoomListEntriesDynamicFilterKind
    extends RoomListEntriesDynamicFilterKind {
  UnreadRoomListEntriesDynamicFilterKind();

  UnreadRoomListEntriesDynamicFilterKind._();

  static LiftRetVal<UnreadRoomListEntriesDynamicFilterKind> read(
      Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(UnreadRoomListEntriesDynamicFilterKind._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 6);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class FavouriteRoomListEntriesDynamicFilterKind
    extends RoomListEntriesDynamicFilterKind {
  FavouriteRoomListEntriesDynamicFilterKind();

  FavouriteRoomListEntriesDynamicFilterKind._();

  static LiftRetVal<FavouriteRoomListEntriesDynamicFilterKind> read(
      Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(
        FavouriteRoomListEntriesDynamicFilterKind._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 7);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class InviteRoomListEntriesDynamicFilterKind
    extends RoomListEntriesDynamicFilterKind {
  InviteRoomListEntriesDynamicFilterKind();

  InviteRoomListEntriesDynamicFilterKind._();

  static LiftRetVal<InviteRoomListEntriesDynamicFilterKind> read(
      Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(InviteRoomListEntriesDynamicFilterKind._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 8);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class CategoryRoomListEntriesDynamicFilterKind
    extends RoomListEntriesDynamicFilterKind {
  final RoomListFilterCategory expect;

  CategoryRoomListEntriesDynamicFilterKind(
    RoomListFilterCategory this.expect,
  );

  CategoryRoomListEntriesDynamicFilterKind._(
    RoomListFilterCategory this.expect,
  );

  static LiftRetVal<CategoryRoomListEntriesDynamicFilterKind> read(
      Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final expect_int = buf.buffer.asByteData(new_offset).getInt32(0);
    final expect = FfiConverterRoomListFilterCategory.lift(
        toRustBuffer(createUint8ListFromInt(expect_int)));
    new_offset += 4;
    return LiftRetVal(
        CategoryRoomListEntriesDynamicFilterKind._(
          expect,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4 + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 9);
    int new_offset = buf.offsetInBytes + 4;

    final expect_buffer = FfiConverterRoomListFilterCategory.lower(expect);
    final expect_int =
        expect_buffer.asUint8List().buffer.asByteData().getInt32(0);
    buf.buffer.asByteData(new_offset).setInt32(0, expect_int);
    new_offset += 4;

    return new_offset;
  }
}

class NoneRoomListEntriesDynamicFilterKind
    extends RoomListEntriesDynamicFilterKind {
  NoneRoomListEntriesDynamicFilterKind();

  NoneRoomListEntriesDynamicFilterKind._();

  static LiftRetVal<NoneRoomListEntriesDynamicFilterKind> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(NoneRoomListEntriesDynamicFilterKind._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 10);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class NormalizedMatchRoomNameRoomListEntriesDynamicFilterKind
    extends RoomListEntriesDynamicFilterKind {
  final String pattern;

  NormalizedMatchRoomNameRoomListEntriesDynamicFilterKind(
    String this.pattern,
  );

  NormalizedMatchRoomNameRoomListEntriesDynamicFilterKind._(
    String this.pattern,
  );

  static LiftRetVal<NormalizedMatchRoomNameRoomListEntriesDynamicFilterKind>
      read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final pattern_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final pattern = pattern_lifted.value;
    new_offset += pattern_lifted.bytesRead;
    return LiftRetVal(
        NormalizedMatchRoomNameRoomListEntriesDynamicFilterKind._(
          pattern,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(pattern) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 11);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterString.write(
        pattern, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class FuzzyMatchRoomNameRoomListEntriesDynamicFilterKind
    extends RoomListEntriesDynamicFilterKind {
  final String pattern;

  FuzzyMatchRoomNameRoomListEntriesDynamicFilterKind(
    String this.pattern,
  );

  FuzzyMatchRoomNameRoomListEntriesDynamicFilterKind._(
    String this.pattern,
  );

  static LiftRetVal<FuzzyMatchRoomNameRoomListEntriesDynamicFilterKind> read(
      Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final pattern_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final pattern = pattern_lifted.value;
    new_offset += pattern_lifted.bytesRead;
    return LiftRetVal(
        FuzzyMatchRoomNameRoomListEntriesDynamicFilterKind._(
          pattern,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(pattern) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 12);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterString.write(
        pattern, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class DeduplicateVersionsRoomListEntriesDynamicFilterKind
    extends RoomListEntriesDynamicFilterKind {
  DeduplicateVersionsRoomListEntriesDynamicFilterKind();

  DeduplicateVersionsRoomListEntriesDynamicFilterKind._();

  static LiftRetVal<DeduplicateVersionsRoomListEntriesDynamicFilterKind> read(
      Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(
        DeduplicateVersionsRoomListEntriesDynamicFilterKind._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 13);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

abstract class RoomListEntriesUpdate {
  RustBuffer lower();
  int allocationSize();
  int write(Uint8List buf);
}

class FfiConverterRoomListEntriesUpdate {
  static RoomListEntriesUpdate lift(RustBuffer buffer) {
    return FfiConverterRoomListEntriesUpdate.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<RoomListEntriesUpdate> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    final subview = Uint8List.view(buf.buffer, buf.offsetInBytes + 4);
    switch (index) {
      case 1:
        return AppendRoomListEntriesUpdate.read(subview);
      case 2:
        return ClearRoomListEntriesUpdate.read(subview);
      case 3:
        return PushFrontRoomListEntriesUpdate.read(subview);
      case 4:
        return PushBackRoomListEntriesUpdate.read(subview);
      case 5:
        return PopFrontRoomListEntriesUpdate.read(subview);
      case 6:
        return PopBackRoomListEntriesUpdate.read(subview);
      case 7:
        return InsertRoomListEntriesUpdate.read(subview);
      case 8:
        return SetRoomListEntriesUpdate.read(subview);
      case 9:
        return RemoveRoomListEntriesUpdate.read(subview);
      case 10:
        return TruncateRoomListEntriesUpdate.read(subview);
      case 11:
        return ResetRoomListEntriesUpdate.read(subview);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(RoomListEntriesUpdate value) {
    return value.lower();
  }

  static int allocationSize(RoomListEntriesUpdate value) {
    return value.allocationSize();
  }

  static int write(RoomListEntriesUpdate value, Uint8List buf) {
    return value.write(buf);
  }
}

class AppendRoomListEntriesUpdate extends RoomListEntriesUpdate {
  final List<Room> values;

  AppendRoomListEntriesUpdate(
    List<Room> this.values,
  );

  AppendRoomListEntriesUpdate._(
    List<Room> this.values,
  );

  static LiftRetVal<AppendRoomListEntriesUpdate> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final values_lifted =
        FfiConverterSequenceRoom.read(Uint8List.view(buf.buffer, new_offset));
    final values = values_lifted.value;
    new_offset += values_lifted.bytesRead;
    return LiftRetVal(
        AppendRoomListEntriesUpdate._(
          values,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterSequenceRoom.allocationSize(values) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 1);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterSequenceRoom.write(
        values, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class ClearRoomListEntriesUpdate extends RoomListEntriesUpdate {
  ClearRoomListEntriesUpdate();

  ClearRoomListEntriesUpdate._();

  static LiftRetVal<ClearRoomListEntriesUpdate> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(ClearRoomListEntriesUpdate._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 2);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class PushFrontRoomListEntriesUpdate extends RoomListEntriesUpdate {
  final Room value;

  PushFrontRoomListEntriesUpdate(
    Room this.value,
  );

  PushFrontRoomListEntriesUpdate._(
    Room this.value,
  );

  static LiftRetVal<PushFrontRoomListEntriesUpdate> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final value_lifted = Room.read(Uint8List.view(buf.buffer, new_offset));
    final value = value_lifted.value;
    new_offset += value_lifted.bytesRead;
    return LiftRetVal(
        PushFrontRoomListEntriesUpdate._(
          value,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return Room.allocationSize(value) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 3);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += Room.write(value, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class PushBackRoomListEntriesUpdate extends RoomListEntriesUpdate {
  final Room value;

  PushBackRoomListEntriesUpdate(
    Room this.value,
  );

  PushBackRoomListEntriesUpdate._(
    Room this.value,
  );

  static LiftRetVal<PushBackRoomListEntriesUpdate> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final value_lifted = Room.read(Uint8List.view(buf.buffer, new_offset));
    final value = value_lifted.value;
    new_offset += value_lifted.bytesRead;
    return LiftRetVal(
        PushBackRoomListEntriesUpdate._(
          value,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return Room.allocationSize(value) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 4);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += Room.write(value, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class PopFrontRoomListEntriesUpdate extends RoomListEntriesUpdate {
  PopFrontRoomListEntriesUpdate();

  PopFrontRoomListEntriesUpdate._();

  static LiftRetVal<PopFrontRoomListEntriesUpdate> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(PopFrontRoomListEntriesUpdate._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 5);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class PopBackRoomListEntriesUpdate extends RoomListEntriesUpdate {
  PopBackRoomListEntriesUpdate();

  PopBackRoomListEntriesUpdate._();

  static LiftRetVal<PopBackRoomListEntriesUpdate> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(PopBackRoomListEntriesUpdate._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 6);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class InsertRoomListEntriesUpdate extends RoomListEntriesUpdate {
  final int index;
  final Room value;

  InsertRoomListEntriesUpdate({
    required int this.index,
    required Room this.value,
  });

  InsertRoomListEntriesUpdate._(
    int this.index,
    Room this.value,
  );

  static LiftRetVal<InsertRoomListEntriesUpdate> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final index_lifted =
        FfiConverterUInt32.read(Uint8List.view(buf.buffer, new_offset));
    final index = index_lifted.value;
    new_offset += index_lifted.bytesRead;
    final value_lifted = Room.read(Uint8List.view(buf.buffer, new_offset));
    final value = value_lifted.value;
    new_offset += value_lifted.bytesRead;
    return LiftRetVal(
        InsertRoomListEntriesUpdate._(
          index,
          value,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterUInt32.allocationSize(index) +
        Room.allocationSize(value) +
        4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 7);
    int new_offset = buf.offsetInBytes + 4;

    new_offset +=
        FfiConverterUInt32.write(index, Uint8List.view(buf.buffer, new_offset));
    new_offset += Room.write(value, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class SetRoomListEntriesUpdate extends RoomListEntriesUpdate {
  final int index;
  final Room value;

  SetRoomListEntriesUpdate({
    required int this.index,
    required Room this.value,
  });

  SetRoomListEntriesUpdate._(
    int this.index,
    Room this.value,
  );

  static LiftRetVal<SetRoomListEntriesUpdate> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final index_lifted =
        FfiConverterUInt32.read(Uint8List.view(buf.buffer, new_offset));
    final index = index_lifted.value;
    new_offset += index_lifted.bytesRead;
    final value_lifted = Room.read(Uint8List.view(buf.buffer, new_offset));
    final value = value_lifted.value;
    new_offset += value_lifted.bytesRead;
    return LiftRetVal(
        SetRoomListEntriesUpdate._(
          index,
          value,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterUInt32.allocationSize(index) +
        Room.allocationSize(value) +
        4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 8);
    int new_offset = buf.offsetInBytes + 4;

    new_offset +=
        FfiConverterUInt32.write(index, Uint8List.view(buf.buffer, new_offset));
    new_offset += Room.write(value, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class RemoveRoomListEntriesUpdate extends RoomListEntriesUpdate {
  final int index;

  RemoveRoomListEntriesUpdate(
    int this.index,
  );

  RemoveRoomListEntriesUpdate._(
    int this.index,
  );

  static LiftRetVal<RemoveRoomListEntriesUpdate> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final index_lifted =
        FfiConverterUInt32.read(Uint8List.view(buf.buffer, new_offset));
    final index = index_lifted.value;
    new_offset += index_lifted.bytesRead;
    return LiftRetVal(
        RemoveRoomListEntriesUpdate._(
          index,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterUInt32.allocationSize(index) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 9);
    int new_offset = buf.offsetInBytes + 4;

    new_offset +=
        FfiConverterUInt32.write(index, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class TruncateRoomListEntriesUpdate extends RoomListEntriesUpdate {
  final int length;

  TruncateRoomListEntriesUpdate(
    int this.length,
  );

  TruncateRoomListEntriesUpdate._(
    int this.length,
  );

  static LiftRetVal<TruncateRoomListEntriesUpdate> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final length_lifted =
        FfiConverterUInt32.read(Uint8List.view(buf.buffer, new_offset));
    final length = length_lifted.value;
    new_offset += length_lifted.bytesRead;
    return LiftRetVal(
        TruncateRoomListEntriesUpdate._(
          length,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterUInt32.allocationSize(length) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 10);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterUInt32.write(
        length, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class ResetRoomListEntriesUpdate extends RoomListEntriesUpdate {
  final List<Room> values;

  ResetRoomListEntriesUpdate(
    List<Room> this.values,
  );

  ResetRoomListEntriesUpdate._(
    List<Room> this.values,
  );

  static LiftRetVal<ResetRoomListEntriesUpdate> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final values_lifted =
        FfiConverterSequenceRoom.read(Uint8List.view(buf.buffer, new_offset));
    final values = values_lifted.value;
    new_offset += values_lifted.bytesRead;
    return LiftRetVal(
        ResetRoomListEntriesUpdate._(
          values,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterSequenceRoom.allocationSize(values) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 11);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterSequenceRoom.write(
        values, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

abstract class RoomListException implements Exception {
  RustBuffer lower();
  int allocationSize();
  int write(Uint8List buf);
}

class FfiConverterRoomListException {
  static RoomListException lift(RustBuffer buffer) {
    return FfiConverterRoomListException.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<RoomListException> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    final subview = Uint8List.view(buf.buffer, buf.offsetInBytes + 4);
    switch (index) {
      case 1:
        return SlidingSyncRoomListException.read(subview);
      case 2:
        return UnknownListRoomListException.read(subview);
      case 3:
        return InputCannotBeAppliedRoomListException.read(subview);
      case 4:
        return RoomNotFoundRoomListException.read(subview);
      case 5:
        return InvalidRoomIdRoomListException.read(subview);
      case 6:
        return EventCacheRoomListException.read(subview);
      case 7:
        return IncorrectRoomMembershipRoomListException.read(subview);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(RoomListException value) {
    return value.lower();
  }

  static int allocationSize(RoomListException value) {
    return value.allocationSize();
  }

  static int write(RoomListException value, Uint8List buf) {
    return value.write(buf);
  }
}

class SlidingSyncRoomListException extends RoomListException {
  final String error;

  SlidingSyncRoomListException(
    String this.error,
  );

  SlidingSyncRoomListException._(
    String this.error,
  );

  static LiftRetVal<SlidingSyncRoomListException> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final error_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final error = error_lifted.value;
    new_offset += error_lifted.bytesRead;
    return LiftRetVal(
        SlidingSyncRoomListException._(
          error,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(error) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 1);
    int new_offset = buf.offsetInBytes + 4;

    new_offset +=
        FfiConverterString.write(error, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }

  @override
  String toString() {
    return "SlidingSyncRoomListException($error)";
  }
}

class UnknownListRoomListException extends RoomListException {
  final String listName;

  UnknownListRoomListException(
    String this.listName,
  );

  UnknownListRoomListException._(
    String this.listName,
  );

  static LiftRetVal<UnknownListRoomListException> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final listName_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final listName = listName_lifted.value;
    new_offset += listName_lifted.bytesRead;
    return LiftRetVal(
        UnknownListRoomListException._(
          listName,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(listName) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 2);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterString.write(
        listName, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }

  @override
  String toString() {
    return "UnknownListRoomListException($listName)";
  }
}

class InputCannotBeAppliedRoomListException extends RoomListException {
  InputCannotBeAppliedRoomListException();

  InputCannotBeAppliedRoomListException._();

  static LiftRetVal<InputCannotBeAppliedRoomListException> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(InputCannotBeAppliedRoomListException._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 3);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }

  @override
  String toString() {
    return "InputCannotBeAppliedRoomListException";
  }
}

class RoomNotFoundRoomListException extends RoomListException {
  final String roomName;

  RoomNotFoundRoomListException(
    String this.roomName,
  );

  RoomNotFoundRoomListException._(
    String this.roomName,
  );

  static LiftRetVal<RoomNotFoundRoomListException> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final roomName_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final roomName = roomName_lifted.value;
    new_offset += roomName_lifted.bytesRead;
    return LiftRetVal(
        RoomNotFoundRoomListException._(
          roomName,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(roomName) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 4);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterString.write(
        roomName, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }

  @override
  String toString() {
    return "RoomNotFoundRoomListException($roomName)";
  }
}

class InvalidRoomIdRoomListException extends RoomListException {
  final String error;

  InvalidRoomIdRoomListException(
    String this.error,
  );

  InvalidRoomIdRoomListException._(
    String this.error,
  );

  static LiftRetVal<InvalidRoomIdRoomListException> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final error_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final error = error_lifted.value;
    new_offset += error_lifted.bytesRead;
    return LiftRetVal(
        InvalidRoomIdRoomListException._(
          error,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(error) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 5);
    int new_offset = buf.offsetInBytes + 4;

    new_offset +=
        FfiConverterString.write(error, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }

  @override
  String toString() {
    return "InvalidRoomIdRoomListException($error)";
  }
}

class EventCacheRoomListException extends RoomListException {
  final String error;

  EventCacheRoomListException(
    String this.error,
  );

  EventCacheRoomListException._(
    String this.error,
  );

  static LiftRetVal<EventCacheRoomListException> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final error_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final error = error_lifted.value;
    new_offset += error_lifted.bytesRead;
    return LiftRetVal(
        EventCacheRoomListException._(
          error,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(error) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 6);
    int new_offset = buf.offsetInBytes + 4;

    new_offset +=
        FfiConverterString.write(error, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }

  @override
  String toString() {
    return "EventCacheRoomListException($error)";
  }
}

class IncorrectRoomMembershipRoomListException extends RoomListException {
  final List<Membership> expected;
  final Membership actual;

  IncorrectRoomMembershipRoomListException({
    required List<Membership> this.expected,
    required Membership this.actual,
  });

  IncorrectRoomMembershipRoomListException._(
    List<Membership> this.expected,
    Membership this.actual,
  );

  static LiftRetVal<IncorrectRoomMembershipRoomListException> read(
      Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final expected_lifted = FfiConverterSequenceMembership.read(
        Uint8List.view(buf.buffer, new_offset));
    final expected = expected_lifted.value;
    new_offset += expected_lifted.bytesRead;
    final actual_int = buf.buffer.asByteData(new_offset).getInt32(0);
    final actual = FfiConverterMembership.lift(
        toRustBuffer(createUint8ListFromInt(actual_int)));
    new_offset += 4;
    return LiftRetVal(
        IncorrectRoomMembershipRoomListException._(
          expected,
          actual,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterSequenceMembership.allocationSize(expected) + 4 + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 7);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterSequenceMembership.write(
        expected, Uint8List.view(buf.buffer, new_offset));
    final actual_buffer = FfiConverterMembership.lower(actual);
    final actual_int =
        actual_buffer.asUint8List().buffer.asByteData().getInt32(0);
    buf.buffer.asByteData(new_offset).setInt32(0, actual_int);
    new_offset += 4;

    return new_offset;
  }

  @override
  String toString() {
    return "IncorrectRoomMembershipRoomListException($expected, $actual)";
  }
}

enum RoomListFilterCategory {
  group,
  people,
  ;
}

class FfiConverterRoomListFilterCategory {
  static RoomListFilterCategory lift(RustBuffer buffer) {
    return FfiConverterRoomListFilterCategory.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<RoomListFilterCategory> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    switch (index) {
      case 1:
        return LiftRetVal(RoomListFilterCategory.group, 4);
      case 2:
        return LiftRetVal(RoomListFilterCategory.people, 4);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(RoomListFilterCategory input) {
    return toRustBuffer(createUint8ListFromInt(input.index + 1));
  }

  static int allocationSize(RoomListFilterCategory value) {
    return 4;
  }

  static int write(RoomListFilterCategory value, Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, value.index + 1);
    return 4;
  }
}

abstract class RoomListLoadingState {
  RustBuffer lower();
  int allocationSize();
  int write(Uint8List buf);
}

class FfiConverterRoomListLoadingState {
  static RoomListLoadingState lift(RustBuffer buffer) {
    return FfiConverterRoomListLoadingState.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<RoomListLoadingState> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    final subview = Uint8List.view(buf.buffer, buf.offsetInBytes + 4);
    switch (index) {
      case 1:
        return NotLoadedRoomListLoadingState.read(subview);
      case 2:
        return LoadedRoomListLoadingState.read(subview);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(RoomListLoadingState value) {
    return value.lower();
  }

  static int allocationSize(RoomListLoadingState value) {
    return value.allocationSize();
  }

  static int write(RoomListLoadingState value, Uint8List buf) {
    return value.write(buf);
  }
}

class NotLoadedRoomListLoadingState extends RoomListLoadingState {
  NotLoadedRoomListLoadingState();

  NotLoadedRoomListLoadingState._();

  static LiftRetVal<NotLoadedRoomListLoadingState> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(NotLoadedRoomListLoadingState._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 1);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class LoadedRoomListLoadingState extends RoomListLoadingState {
  final int? maximumNumberOfRooms;

  LoadedRoomListLoadingState(
    int? this.maximumNumberOfRooms,
  );

  LoadedRoomListLoadingState._(
    int? this.maximumNumberOfRooms,
  );

  static LiftRetVal<LoadedRoomListLoadingState> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final maximumNumberOfRooms_lifted =
        FfiConverterOptionalUInt32.read(Uint8List.view(buf.buffer, new_offset));
    final maximumNumberOfRooms = maximumNumberOfRooms_lifted.value;
    new_offset += maximumNumberOfRooms_lifted.bytesRead;
    return LiftRetVal(
        LoadedRoomListLoadingState._(
          maximumNumberOfRooms,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterOptionalUInt32.allocationSize(maximumNumberOfRooms) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 2);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterOptionalUInt32.write(
        maximumNumberOfRooms, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

enum RoomListServiceState {
  initial,
  settingUp,
  recovering,
  running,
  error,
  terminated,
  ;
}

class FfiConverterRoomListServiceState {
  static RoomListServiceState lift(RustBuffer buffer) {
    return FfiConverterRoomListServiceState.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<RoomListServiceState> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    switch (index) {
      case 1:
        return LiftRetVal(RoomListServiceState.initial, 4);
      case 2:
        return LiftRetVal(RoomListServiceState.settingUp, 4);
      case 3:
        return LiftRetVal(RoomListServiceState.recovering, 4);
      case 4:
        return LiftRetVal(RoomListServiceState.running, 4);
      case 5:
        return LiftRetVal(RoomListServiceState.error, 4);
      case 6:
        return LiftRetVal(RoomListServiceState.terminated, 4);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(RoomListServiceState input) {
    return toRustBuffer(createUint8ListFromInt(input.index + 1));
  }

  static int allocationSize(RoomListServiceState value) {
    return 4;
  }

  static int write(RoomListServiceState value, Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, value.index + 1);
    return 4;
  }
}

enum RoomListServiceSyncIndicator {
  show_,
  hide_,
  ;
}

class FfiConverterRoomListServiceSyncIndicator {
  static RoomListServiceSyncIndicator lift(RustBuffer buffer) {
    return FfiConverterRoomListServiceSyncIndicator.read(buffer.asUint8List())
        .value;
  }

  static LiftRetVal<RoomListServiceSyncIndicator> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    switch (index) {
      case 1:
        return LiftRetVal(RoomListServiceSyncIndicator.show_, 4);
      case 2:
        return LiftRetVal(RoomListServiceSyncIndicator.hide_, 4);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(RoomListServiceSyncIndicator input) {
    return toRustBuffer(createUint8ListFromInt(input.index + 1));
  }

  static int allocationSize(RoomListServiceSyncIndicator value) {
    return 4;
  }

  static int write(RoomListServiceSyncIndicator value, Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, value.index + 1);
    return 4;
  }
}

abstract class RoomLoadSettings {
  RustBuffer lower();
  int allocationSize();
  int write(Uint8List buf);
}

class FfiConverterRoomLoadSettings {
  static RoomLoadSettings lift(RustBuffer buffer) {
    return FfiConverterRoomLoadSettings.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<RoomLoadSettings> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    final subview = Uint8List.view(buf.buffer, buf.offsetInBytes + 4);
    switch (index) {
      case 1:
        return AllRoomLoadSettings.read(subview);
      case 2:
        return OneRoomLoadSettings.read(subview);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(RoomLoadSettings value) {
    return value.lower();
  }

  static int allocationSize(RoomLoadSettings value) {
    return value.allocationSize();
  }

  static int write(RoomLoadSettings value, Uint8List buf) {
    return value.write(buf);
  }
}

class AllRoomLoadSettings extends RoomLoadSettings {
  AllRoomLoadSettings();

  AllRoomLoadSettings._();

  static LiftRetVal<AllRoomLoadSettings> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(AllRoomLoadSettings._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 1);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class OneRoomLoadSettings extends RoomLoadSettings {
  final String roomId;

  OneRoomLoadSettings(
    String this.roomId,
  );

  OneRoomLoadSettings._(
    String this.roomId,
  );

  static LiftRetVal<OneRoomLoadSettings> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final roomId_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final roomId = roomId_lifted.value;
    new_offset += roomId_lifted.bytesRead;
    return LiftRetVal(
        OneRoomLoadSettings._(
          roomId,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(roomId) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 2);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterString.write(
        roomId, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

enum RoomMessageEventMessageType {
  audio,
  emote,
  file,
  gallery,
  image,
  location,
  notice,
  serverNotice,
  text,
  video,
  verificationRequest,
  other,
  ;
}

class FfiConverterRoomMessageEventMessageType {
  static RoomMessageEventMessageType lift(RustBuffer buffer) {
    return FfiConverterRoomMessageEventMessageType.read(buffer.asUint8List())
        .value;
  }

  static LiftRetVal<RoomMessageEventMessageType> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    switch (index) {
      case 1:
        return LiftRetVal(RoomMessageEventMessageType.audio, 4);
      case 2:
        return LiftRetVal(RoomMessageEventMessageType.emote, 4);
      case 3:
        return LiftRetVal(RoomMessageEventMessageType.file, 4);
      case 4:
        return LiftRetVal(RoomMessageEventMessageType.gallery, 4);
      case 5:
        return LiftRetVal(RoomMessageEventMessageType.image, 4);
      case 6:
        return LiftRetVal(RoomMessageEventMessageType.location, 4);
      case 7:
        return LiftRetVal(RoomMessageEventMessageType.notice, 4);
      case 8:
        return LiftRetVal(RoomMessageEventMessageType.serverNotice, 4);
      case 9:
        return LiftRetVal(RoomMessageEventMessageType.text, 4);
      case 10:
        return LiftRetVal(RoomMessageEventMessageType.video, 4);
      case 11:
        return LiftRetVal(RoomMessageEventMessageType.verificationRequest, 4);
      case 12:
        return LiftRetVal(RoomMessageEventMessageType.other, 4);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(RoomMessageEventMessageType input) {
    return toRustBuffer(createUint8ListFromInt(input.index + 1));
  }

  static int allocationSize(RoomMessageEventMessageType value) {
    return 4;
  }

  static int write(RoomMessageEventMessageType value, Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, value.index + 1);
    return 4;
  }
}

enum RoomNotificationMode {
  allMessages,
  mentionsAndKeywordsOnly,
  mute,
  ;
}

class FfiConverterRoomNotificationMode {
  static RoomNotificationMode lift(RustBuffer buffer) {
    return FfiConverterRoomNotificationMode.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<RoomNotificationMode> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    switch (index) {
      case 1:
        return LiftRetVal(RoomNotificationMode.allMessages, 4);
      case 2:
        return LiftRetVal(RoomNotificationMode.mentionsAndKeywordsOnly, 4);
      case 3:
        return LiftRetVal(RoomNotificationMode.mute, 4);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(RoomNotificationMode input) {
    return toRustBuffer(createUint8ListFromInt(input.index + 1));
  }

  static int allocationSize(RoomNotificationMode value) {
    return 4;
  }

  static int write(RoomNotificationMode value, Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, value.index + 1);
    return 4;
  }
}

enum RoomPreset {
  privateChat,
  publicChat,
  trustedPrivateChat,
  ;
}

class FfiConverterRoomPreset {
  static RoomPreset lift(RustBuffer buffer) {
    return FfiConverterRoomPreset.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<RoomPreset> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    switch (index) {
      case 1:
        return LiftRetVal(RoomPreset.privateChat, 4);
      case 2:
        return LiftRetVal(RoomPreset.publicChat, 4);
      case 3:
        return LiftRetVal(RoomPreset.trustedPrivateChat, 4);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(RoomPreset input) {
    return toRustBuffer(createUint8ListFromInt(input.index + 1));
  }

  static int allocationSize(RoomPreset value) {
    return 4;
  }

  static int write(RoomPreset value, Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, value.index + 1);
    return 4;
  }
}

abstract class RoomType {
  RustBuffer lower();
  int allocationSize();
  int write(Uint8List buf);
}

class FfiConverterRoomType {
  static RoomType lift(RustBuffer buffer) {
    return FfiConverterRoomType.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<RoomType> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    final subview = Uint8List.view(buf.buffer, buf.offsetInBytes + 4);
    switch (index) {
      case 1:
        return RoomRoomType.read(subview);
      case 2:
        return SpaceRoomType.read(subview);
      case 3:
        return CustomRoomType.read(subview);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(RoomType value) {
    return value.lower();
  }

  static int allocationSize(RoomType value) {
    return value.allocationSize();
  }

  static int write(RoomType value, Uint8List buf) {
    return value.write(buf);
  }
}

class RoomRoomType extends RoomType {
  RoomRoomType();

  RoomRoomType._();

  static LiftRetVal<RoomRoomType> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(RoomRoomType._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 1);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class SpaceRoomType extends RoomType {
  SpaceRoomType();

  SpaceRoomType._();

  static LiftRetVal<SpaceRoomType> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(SpaceRoomType._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 2);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class CustomRoomType extends RoomType {
  final String value;

  CustomRoomType(
    String this.value,
  );

  CustomRoomType._(
    String this.value,
  );

  static LiftRetVal<CustomRoomType> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final value_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final value = value_lifted.value;
    new_offset += value_lifted.bytesRead;
    return LiftRetVal(
        CustomRoomType._(
          value,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(value) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 3);
    int new_offset = buf.offsetInBytes + 4;

    new_offset +=
        FfiConverterString.write(value, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

abstract class RoomVisibility {
  RustBuffer lower();
  int allocationSize();
  int write(Uint8List buf);
}

class FfiConverterRoomVisibility {
  static RoomVisibility lift(RustBuffer buffer) {
    return FfiConverterRoomVisibility.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<RoomVisibility> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    final subview = Uint8List.view(buf.buffer, buf.offsetInBytes + 4);
    switch (index) {
      case 1:
        return PublicRoomVisibility.read(subview);
      case 2:
        return PrivateRoomVisibility.read(subview);
      case 3:
        return CustomRoomVisibility.read(subview);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(RoomVisibility value) {
    return value.lower();
  }

  static int allocationSize(RoomVisibility value) {
    return value.allocationSize();
  }

  static int write(RoomVisibility value, Uint8List buf) {
    return value.write(buf);
  }
}

class PublicRoomVisibility extends RoomVisibility {
  PublicRoomVisibility();

  PublicRoomVisibility._();

  static LiftRetVal<PublicRoomVisibility> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(PublicRoomVisibility._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 1);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class PrivateRoomVisibility extends RoomVisibility {
  PrivateRoomVisibility();

  PrivateRoomVisibility._();

  static LiftRetVal<PrivateRoomVisibility> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(PrivateRoomVisibility._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 2);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class CustomRoomVisibility extends RoomVisibility {
  final String value;

  CustomRoomVisibility(
    String this.value,
  );

  CustomRoomVisibility._(
    String this.value,
  );

  static LiftRetVal<CustomRoomVisibility> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final value_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final value = value_lifted.value;
    new_offset += value_lifted.bytesRead;
    return LiftRetVal(
        CustomRoomVisibility._(
          value,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(value) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 3);
    int new_offset = buf.offsetInBytes + 4;

    new_offset +=
        FfiConverterString.write(value, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

enum RtcApplicationType {
  call,
  ;
}

class FfiConverterRtcApplicationType {
  static RtcApplicationType lift(RustBuffer buffer) {
    return FfiConverterRtcApplicationType.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<RtcApplicationType> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    switch (index) {
      case 1:
        return LiftRetVal(RtcApplicationType.call, 4);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(RtcApplicationType input) {
    return toRustBuffer(createUint8ListFromInt(input.index + 1));
  }

  static int allocationSize(RtcApplicationType value) {
    return 4;
  }

  static int write(RtcApplicationType value, Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, value.index + 1);
    return 4;
  }
}

abstract class RuleKind {
  RustBuffer lower();
  int allocationSize();
  int write(Uint8List buf);
}

class FfiConverterRuleKind {
  static RuleKind lift(RustBuffer buffer) {
    return FfiConverterRuleKind.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<RuleKind> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    final subview = Uint8List.view(buf.buffer, buf.offsetInBytes + 4);
    switch (index) {
      case 1:
        return OverrideRuleKind.read(subview);
      case 2:
        return UnderrideRuleKind.read(subview);
      case 3:
        return SenderRuleKind.read(subview);
      case 4:
        return RoomRuleKind.read(subview);
      case 5:
        return ContentRuleKind.read(subview);
      case 6:
        return CustomRuleKind.read(subview);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(RuleKind value) {
    return value.lower();
  }

  static int allocationSize(RuleKind value) {
    return value.allocationSize();
  }

  static int write(RuleKind value, Uint8List buf) {
    return value.write(buf);
  }
}

class OverrideRuleKind extends RuleKind {
  OverrideRuleKind();

  OverrideRuleKind._();

  static LiftRetVal<OverrideRuleKind> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(OverrideRuleKind._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 1);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class UnderrideRuleKind extends RuleKind {
  UnderrideRuleKind();

  UnderrideRuleKind._();

  static LiftRetVal<UnderrideRuleKind> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(UnderrideRuleKind._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 2);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class SenderRuleKind extends RuleKind {
  SenderRuleKind();

  SenderRuleKind._();

  static LiftRetVal<SenderRuleKind> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(SenderRuleKind._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 3);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class RoomRuleKind extends RuleKind {
  RoomRuleKind();

  RoomRuleKind._();

  static LiftRetVal<RoomRuleKind> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(RoomRuleKind._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 4);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class ContentRuleKind extends RuleKind {
  ContentRuleKind();

  ContentRuleKind._();

  static LiftRetVal<ContentRuleKind> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(ContentRuleKind._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 5);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class CustomRuleKind extends RuleKind {
  final String value;

  CustomRuleKind(
    String this.value,
  );

  CustomRuleKind._(
    String this.value,
  );

  static LiftRetVal<CustomRuleKind> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final value_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final value = value_lifted.value;
    new_offset += value_lifted.bytesRead;
    return LiftRetVal(
        CustomRuleKind._(
          value,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(value) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 6);
    int new_offset = buf.offsetInBytes + 4;

    new_offset +=
        FfiConverterString.write(value, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

abstract class SecretStorageEncryptionAlgorithm {
  RustBuffer lower();
  int allocationSize();
  int write(Uint8List buf);
}

class FfiConverterSecretStorageEncryptionAlgorithm {
  static SecretStorageEncryptionAlgorithm lift(RustBuffer buffer) {
    return FfiConverterSecretStorageEncryptionAlgorithm.read(
            buffer.asUint8List())
        .value;
  }

  static LiftRetVal<SecretStorageEncryptionAlgorithm> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    final subview = Uint8List.view(buf.buffer, buf.offsetInBytes + 4);
    switch (index) {
      case 1:
        return V1AesHmacSha2SecretStorageEncryptionAlgorithm.read(subview);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(SecretStorageEncryptionAlgorithm value) {
    return value.lower();
  }

  static int allocationSize(SecretStorageEncryptionAlgorithm value) {
    return value.allocationSize();
  }

  static int write(SecretStorageEncryptionAlgorithm value, Uint8List buf) {
    return value.write(buf);
  }
}

class V1AesHmacSha2SecretStorageEncryptionAlgorithm
    extends SecretStorageEncryptionAlgorithm {
  final SecretStorageV1AesHmacSha2Properties properties;

  V1AesHmacSha2SecretStorageEncryptionAlgorithm(
    SecretStorageV1AesHmacSha2Properties this.properties,
  );

  V1AesHmacSha2SecretStorageEncryptionAlgorithm._(
    SecretStorageV1AesHmacSha2Properties this.properties,
  );

  static LiftRetVal<V1AesHmacSha2SecretStorageEncryptionAlgorithm> read(
      Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final properties_lifted =
        FfiConverterSecretStorageV1AesHmacSha2Properties.read(
            Uint8List.view(buf.buffer, new_offset));
    final properties = properties_lifted.value;
    new_offset += properties_lifted.bytesRead;
    return LiftRetVal(
        V1AesHmacSha2SecretStorageEncryptionAlgorithm._(
          properties,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterSecretStorageV1AesHmacSha2Properties.allocationSize(
            properties) +
        4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 1);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterSecretStorageV1AesHmacSha2Properties.write(
        properties, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

abstract class SessionVerificationData {
  RustBuffer lower();
  int allocationSize();
  int write(Uint8List buf);
}

class FfiConverterSessionVerificationData {
  static SessionVerificationData lift(RustBuffer buffer) {
    return FfiConverterSessionVerificationData.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<SessionVerificationData> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    final subview = Uint8List.view(buf.buffer, buf.offsetInBytes + 4);
    switch (index) {
      case 1:
        return EmojisSessionVerificationData.read(subview);
      case 2:
        return DecimalsSessionVerificationData.read(subview);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(SessionVerificationData value) {
    return value.lower();
  }

  static int allocationSize(SessionVerificationData value) {
    return value.allocationSize();
  }

  static int write(SessionVerificationData value, Uint8List buf) {
    return value.write(buf);
  }
}

class EmojisSessionVerificationData extends SessionVerificationData {
  final List<SessionVerificationEmoji> emojis;
  final Uint8List indices;

  EmojisSessionVerificationData({
    required List<SessionVerificationEmoji> this.emojis,
    required Uint8List this.indices,
  });

  EmojisSessionVerificationData._(
    List<SessionVerificationEmoji> this.emojis,
    Uint8List this.indices,
  );

  static LiftRetVal<EmojisSessionVerificationData> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final emojis_lifted = FfiConverterSequenceSessionVerificationEmoji.read(
        Uint8List.view(buf.buffer, new_offset));
    final emojis = emojis_lifted.value;
    new_offset += emojis_lifted.bytesRead;
    final indices_lifted =
        FfiConverterUint8List.read(Uint8List.view(buf.buffer, new_offset));
    final indices = indices_lifted.value;
    new_offset += indices_lifted.bytesRead;
    return LiftRetVal(
        EmojisSessionVerificationData._(
          emojis,
          indices,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterSequenceSessionVerificationEmoji.allocationSize(emojis) +
        FfiConverterUint8List.allocationSize(indices) +
        4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 1);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterSequenceSessionVerificationEmoji.write(
        emojis, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterUint8List.write(
        indices, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class DecimalsSessionVerificationData extends SessionVerificationData {
  final List<int> values;

  DecimalsSessionVerificationData(
    List<int> this.values,
  );

  DecimalsSessionVerificationData._(
    List<int> this.values,
  );

  static LiftRetVal<DecimalsSessionVerificationData> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final values_lifted =
        FfiConverterSequenceUInt16.read(Uint8List.view(buf.buffer, new_offset));
    final values = values_lifted.value;
    new_offset += values_lifted.bytesRead;
    return LiftRetVal(
        DecimalsSessionVerificationData._(
          values,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterSequenceUInt16.allocationSize(values) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 2);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterSequenceUInt16.write(
        values, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

abstract class ShieldState {
  RustBuffer lower();
  int allocationSize();
  int write(Uint8List buf);
}

class FfiConverterShieldState {
  static ShieldState lift(RustBuffer buffer) {
    return FfiConverterShieldState.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<ShieldState> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    final subview = Uint8List.view(buf.buffer, buf.offsetInBytes + 4);
    switch (index) {
      case 1:
        return RedShieldState.read(subview);
      case 2:
        return GreyShieldState.read(subview);
      case 3:
        return NoneShieldState.read(subview);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(ShieldState value) {
    return value.lower();
  }

  static int allocationSize(ShieldState value) {
    return value.allocationSize();
  }

  static int write(ShieldState value, Uint8List buf) {
    return value.write(buf);
  }
}

class RedShieldState extends ShieldState {
  final ShieldStateCode code;
  final String message;

  RedShieldState({
    required ShieldStateCode this.code,
    required String this.message,
  });

  RedShieldState._(
    ShieldStateCode this.code,
    String this.message,
  );

  static LiftRetVal<RedShieldState> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final code_lifted = FfiConverterShieldStateCode.read(
        Uint8List.view(buf.buffer, new_offset));
    final code = code_lifted.value;
    new_offset += code_lifted.bytesRead;
    final message_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final message = message_lifted.value;
    new_offset += message_lifted.bytesRead;
    return LiftRetVal(
        RedShieldState._(
          code,
          message,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterShieldStateCode.allocationSize(code) +
        FfiConverterString.allocationSize(message) +
        4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 1);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterShieldStateCode.write(
        code, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterString.write(
        message, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class GreyShieldState extends ShieldState {
  final ShieldStateCode code;
  final String message;

  GreyShieldState({
    required ShieldStateCode this.code,
    required String this.message,
  });

  GreyShieldState._(
    ShieldStateCode this.code,
    String this.message,
  );

  static LiftRetVal<GreyShieldState> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final code_lifted = FfiConverterShieldStateCode.read(
        Uint8List.view(buf.buffer, new_offset));
    final code = code_lifted.value;
    new_offset += code_lifted.bytesRead;
    final message_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final message = message_lifted.value;
    new_offset += message_lifted.bytesRead;
    return LiftRetVal(
        GreyShieldState._(
          code,
          message,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterShieldStateCode.allocationSize(code) +
        FfiConverterString.allocationSize(message) +
        4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 2);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterShieldStateCode.write(
        code, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterString.write(
        message, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class NoneShieldState extends ShieldState {
  NoneShieldState();

  NoneShieldState._();

  static LiftRetVal<NoneShieldState> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(NoneShieldState._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 3);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

enum SlidingSyncVersion {
  none,
  native,
  ;
}

class FfiConverterSlidingSyncVersion {
  static SlidingSyncVersion lift(RustBuffer buffer) {
    return FfiConverterSlidingSyncVersion.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<SlidingSyncVersion> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    switch (index) {
      case 1:
        return LiftRetVal(SlidingSyncVersion.none, 4);
      case 2:
        return LiftRetVal(SlidingSyncVersion.native, 4);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(SlidingSyncVersion input) {
    return toRustBuffer(createUint8ListFromInt(input.index + 1));
  }

  static int allocationSize(SlidingSyncVersion value) {
    return 4;
  }

  static int write(SlidingSyncVersion value, Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, value.index + 1);
    return 4;
  }
}

enum SlidingSyncVersionBuilder {
  none,
  native,
  discoverNative,
  ;
}

class FfiConverterSlidingSyncVersionBuilder {
  static SlidingSyncVersionBuilder lift(RustBuffer buffer) {
    return FfiConverterSlidingSyncVersionBuilder.read(buffer.asUint8List())
        .value;
  }

  static LiftRetVal<SlidingSyncVersionBuilder> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    switch (index) {
      case 1:
        return LiftRetVal(SlidingSyncVersionBuilder.none, 4);
      case 2:
        return LiftRetVal(SlidingSyncVersionBuilder.native, 4);
      case 3:
        return LiftRetVal(SlidingSyncVersionBuilder.discoverNative, 4);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(SlidingSyncVersionBuilder input) {
    return toRustBuffer(createUint8ListFromInt(input.index + 1));
  }

  static int allocationSize(SlidingSyncVersionBuilder value) {
    return 4;
  }

  static int write(SlidingSyncVersionBuilder value, Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, value.index + 1);
    return 4;
  }
}

enum SsoException {
  callbackUrlInvalid,
  loginWithTokenFailed,
  generic,
  ;
}

class FfiConverterSsoException {
  static SsoException lift(RustBuffer buffer) {
    return FfiConverterSsoException.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<SsoException> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    switch (index) {
      case 1:
        return LiftRetVal(SsoException.callbackUrlInvalid, 4);
      case 2:
        return LiftRetVal(SsoException.loginWithTokenFailed, 4);
      case 3:
        return LiftRetVal(SsoException.generic, 4);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(SsoException input) {
    return toRustBuffer(createUint8ListFromInt(input.index + 1));
  }

  static int allocationSize(SsoException value) {
    return 4;
  }

  static int write(SsoException value, Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, value.index + 1);
    return 4;
  }
}

abstract class StateEventContent {
  RustBuffer lower();
  int allocationSize();
  int write(Uint8List buf);
}

class FfiConverterStateEventContent {
  static StateEventContent lift(RustBuffer buffer) {
    return FfiConverterStateEventContent.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<StateEventContent> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    final subview = Uint8List.view(buf.buffer, buf.offsetInBytes + 4);
    switch (index) {
      case 1:
        return PolicyRuleRoomStateEventContent.read(subview);
      case 2:
        return PolicyRuleServerStateEventContent.read(subview);
      case 3:
        return PolicyRuleUserStateEventContent.read(subview);
      case 4:
        return RoomAliasesStateEventContent.read(subview);
      case 5:
        return RoomAvatarStateEventContent.read(subview);
      case 6:
        return RoomCanonicalAliasStateEventContent.read(subview);
      case 7:
        return RoomCreateStateEventContent.read(subview);
      case 8:
        return RoomEncryptionStateEventContent.read(subview);
      case 9:
        return RoomGuestAccessStateEventContent.read(subview);
      case 10:
        return RoomHistoryVisibilityStateEventContent.read(subview);
      case 11:
        return RoomJoinRulesStateEventContent.read(subview);
      case 12:
        return RoomMemberContentStateEventContent.read(subview);
      case 13:
        return RoomNameStateEventContent.read(subview);
      case 14:
        return RoomPinnedEventsStateEventContent.read(subview);
      case 15:
        return RoomPowerLevelsStateEventContent.read(subview);
      case 16:
        return RoomServerAclStateEventContent.read(subview);
      case 17:
        return RoomThirdPartyInviteStateEventContent.read(subview);
      case 18:
        return RoomTombstoneStateEventContent.read(subview);
      case 19:
        return RoomTopicStateEventContent.read(subview);
      case 20:
        return SpaceChildStateEventContent.read(subview);
      case 21:
        return SpaceParentStateEventContent.read(subview);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(StateEventContent value) {
    return value.lower();
  }

  static int allocationSize(StateEventContent value) {
    return value.allocationSize();
  }

  static int write(StateEventContent value, Uint8List buf) {
    return value.write(buf);
  }
}

class PolicyRuleRoomStateEventContent extends StateEventContent {
  PolicyRuleRoomStateEventContent();

  PolicyRuleRoomStateEventContent._();

  static LiftRetVal<PolicyRuleRoomStateEventContent> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(PolicyRuleRoomStateEventContent._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 1);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class PolicyRuleServerStateEventContent extends StateEventContent {
  PolicyRuleServerStateEventContent();

  PolicyRuleServerStateEventContent._();

  static LiftRetVal<PolicyRuleServerStateEventContent> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(PolicyRuleServerStateEventContent._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 2);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class PolicyRuleUserStateEventContent extends StateEventContent {
  PolicyRuleUserStateEventContent();

  PolicyRuleUserStateEventContent._();

  static LiftRetVal<PolicyRuleUserStateEventContent> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(PolicyRuleUserStateEventContent._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 3);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class RoomAliasesStateEventContent extends StateEventContent {
  RoomAliasesStateEventContent();

  RoomAliasesStateEventContent._();

  static LiftRetVal<RoomAliasesStateEventContent> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(RoomAliasesStateEventContent._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 4);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class RoomAvatarStateEventContent extends StateEventContent {
  RoomAvatarStateEventContent();

  RoomAvatarStateEventContent._();

  static LiftRetVal<RoomAvatarStateEventContent> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(RoomAvatarStateEventContent._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 5);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class RoomCanonicalAliasStateEventContent extends StateEventContent {
  RoomCanonicalAliasStateEventContent();

  RoomCanonicalAliasStateEventContent._();

  static LiftRetVal<RoomCanonicalAliasStateEventContent> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(RoomCanonicalAliasStateEventContent._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 6);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class RoomCreateStateEventContent extends StateEventContent {
  RoomCreateStateEventContent();

  RoomCreateStateEventContent._();

  static LiftRetVal<RoomCreateStateEventContent> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(RoomCreateStateEventContent._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 7);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class RoomEncryptionStateEventContent extends StateEventContent {
  RoomEncryptionStateEventContent();

  RoomEncryptionStateEventContent._();

  static LiftRetVal<RoomEncryptionStateEventContent> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(RoomEncryptionStateEventContent._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 8);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class RoomGuestAccessStateEventContent extends StateEventContent {
  RoomGuestAccessStateEventContent();

  RoomGuestAccessStateEventContent._();

  static LiftRetVal<RoomGuestAccessStateEventContent> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(RoomGuestAccessStateEventContent._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 9);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class RoomHistoryVisibilityStateEventContent extends StateEventContent {
  RoomHistoryVisibilityStateEventContent();

  RoomHistoryVisibilityStateEventContent._();

  static LiftRetVal<RoomHistoryVisibilityStateEventContent> read(
      Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(RoomHistoryVisibilityStateEventContent._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 10);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class RoomJoinRulesStateEventContent extends StateEventContent {
  RoomJoinRulesStateEventContent();

  RoomJoinRulesStateEventContent._();

  static LiftRetVal<RoomJoinRulesStateEventContent> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(RoomJoinRulesStateEventContent._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 11);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class RoomMemberContentStateEventContent extends StateEventContent {
  final String userId;
  final MembershipState membershipState;

  RoomMemberContentStateEventContent({
    required String this.userId,
    required MembershipState this.membershipState,
  });

  RoomMemberContentStateEventContent._(
    String this.userId,
    MembershipState this.membershipState,
  );

  static LiftRetVal<RoomMemberContentStateEventContent> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final userId_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final userId = userId_lifted.value;
    new_offset += userId_lifted.bytesRead;
    final membershipState_lifted = FfiConverterMembershipState.read(
        Uint8List.view(buf.buffer, new_offset));
    final membershipState = membershipState_lifted.value;
    new_offset += membershipState_lifted.bytesRead;
    return LiftRetVal(
        RoomMemberContentStateEventContent._(
          userId,
          membershipState,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(userId) +
        FfiConverterMembershipState.allocationSize(membershipState) +
        4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 12);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterString.write(
        userId, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterMembershipState.write(
        membershipState, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class RoomNameStateEventContent extends StateEventContent {
  RoomNameStateEventContent();

  RoomNameStateEventContent._();

  static LiftRetVal<RoomNameStateEventContent> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(RoomNameStateEventContent._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 13);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class RoomPinnedEventsStateEventContent extends StateEventContent {
  RoomPinnedEventsStateEventContent();

  RoomPinnedEventsStateEventContent._();

  static LiftRetVal<RoomPinnedEventsStateEventContent> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(RoomPinnedEventsStateEventContent._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 14);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class RoomPowerLevelsStateEventContent extends StateEventContent {
  RoomPowerLevelsStateEventContent();

  RoomPowerLevelsStateEventContent._();

  static LiftRetVal<RoomPowerLevelsStateEventContent> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(RoomPowerLevelsStateEventContent._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 15);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class RoomServerAclStateEventContent extends StateEventContent {
  RoomServerAclStateEventContent();

  RoomServerAclStateEventContent._();

  static LiftRetVal<RoomServerAclStateEventContent> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(RoomServerAclStateEventContent._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 16);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class RoomThirdPartyInviteStateEventContent extends StateEventContent {
  RoomThirdPartyInviteStateEventContent();

  RoomThirdPartyInviteStateEventContent._();

  static LiftRetVal<RoomThirdPartyInviteStateEventContent> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(RoomThirdPartyInviteStateEventContent._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 17);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class RoomTombstoneStateEventContent extends StateEventContent {
  RoomTombstoneStateEventContent();

  RoomTombstoneStateEventContent._();

  static LiftRetVal<RoomTombstoneStateEventContent> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(RoomTombstoneStateEventContent._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 18);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class RoomTopicStateEventContent extends StateEventContent {
  final String topic;

  RoomTopicStateEventContent(
    String this.topic,
  );

  RoomTopicStateEventContent._(
    String this.topic,
  );

  static LiftRetVal<RoomTopicStateEventContent> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final topic_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final topic = topic_lifted.value;
    new_offset += topic_lifted.bytesRead;
    return LiftRetVal(
        RoomTopicStateEventContent._(
          topic,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(topic) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 19);
    int new_offset = buf.offsetInBytes + 4;

    new_offset +=
        FfiConverterString.write(topic, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class SpaceChildStateEventContent extends StateEventContent {
  SpaceChildStateEventContent();

  SpaceChildStateEventContent._();

  static LiftRetVal<SpaceChildStateEventContent> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(SpaceChildStateEventContent._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 20);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class SpaceParentStateEventContent extends StateEventContent {
  SpaceParentStateEventContent();

  SpaceParentStateEventContent._();

  static LiftRetVal<SpaceParentStateEventContent> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(SpaceParentStateEventContent._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 21);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

enum StateEventType {
  callMember,
  policyRuleRoom,
  policyRuleServer,
  policyRuleUser,
  roomAliases,
  roomAvatar,
  roomCanonicalAlias,
  roomCreate,
  roomEncryption,
  roomGuestAccess,
  roomHistoryVisibility,
  roomJoinRules,
  roomMemberEvent,
  roomName,
  roomPinnedEvents,
  roomPowerLevels,
  roomServerAcl,
  roomThirdPartyInvite,
  roomTombstone,
  roomTopic,
  spaceChild,
  spaceParent,
  ;
}

class FfiConverterStateEventType {
  static StateEventType lift(RustBuffer buffer) {
    return FfiConverterStateEventType.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<StateEventType> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    switch (index) {
      case 1:
        return LiftRetVal(StateEventType.callMember, 4);
      case 2:
        return LiftRetVal(StateEventType.policyRuleRoom, 4);
      case 3:
        return LiftRetVal(StateEventType.policyRuleServer, 4);
      case 4:
        return LiftRetVal(StateEventType.policyRuleUser, 4);
      case 5:
        return LiftRetVal(StateEventType.roomAliases, 4);
      case 6:
        return LiftRetVal(StateEventType.roomAvatar, 4);
      case 7:
        return LiftRetVal(StateEventType.roomCanonicalAlias, 4);
      case 8:
        return LiftRetVal(StateEventType.roomCreate, 4);
      case 9:
        return LiftRetVal(StateEventType.roomEncryption, 4);
      case 10:
        return LiftRetVal(StateEventType.roomGuestAccess, 4);
      case 11:
        return LiftRetVal(StateEventType.roomHistoryVisibility, 4);
      case 12:
        return LiftRetVal(StateEventType.roomJoinRules, 4);
      case 13:
        return LiftRetVal(StateEventType.roomMemberEvent, 4);
      case 14:
        return LiftRetVal(StateEventType.roomName, 4);
      case 15:
        return LiftRetVal(StateEventType.roomPinnedEvents, 4);
      case 16:
        return LiftRetVal(StateEventType.roomPowerLevels, 4);
      case 17:
        return LiftRetVal(StateEventType.roomServerAcl, 4);
      case 18:
        return LiftRetVal(StateEventType.roomThirdPartyInvite, 4);
      case 19:
        return LiftRetVal(StateEventType.roomTombstone, 4);
      case 20:
        return LiftRetVal(StateEventType.roomTopic, 4);
      case 21:
        return LiftRetVal(StateEventType.spaceChild, 4);
      case 22:
        return LiftRetVal(StateEventType.spaceParent, 4);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(StateEventType input) {
    return toRustBuffer(createUint8ListFromInt(input.index + 1));
  }

  static int allocationSize(StateEventType value) {
    return 4;
  }

  static int write(StateEventType value, Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, value.index + 1);
    return 4;
  }
}

enum SteadyStateException {
  backupDisabled,
  connection,
  lagged,
  ;
}

class FfiConverterSteadyStateException {
  static SteadyStateException lift(RustBuffer buffer) {
    return FfiConverterSteadyStateException.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<SteadyStateException> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    switch (index) {
      case 1:
        return LiftRetVal(SteadyStateException.backupDisabled, 4);
      case 2:
        return LiftRetVal(SteadyStateException.connection, 4);
      case 3:
        return LiftRetVal(SteadyStateException.lagged, 4);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(SteadyStateException input) {
    return toRustBuffer(createUint8ListFromInt(input.index + 1));
  }

  static int allocationSize(SteadyStateException value) {
    return 4;
  }

  static int write(SteadyStateException value, Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, value.index + 1);
    return 4;
  }
}

enum SyncServiceState {
  idle,
  running,
  terminated,
  error,
  offline,
  ;
}

class FfiConverterSyncServiceState {
  static SyncServiceState lift(RustBuffer buffer) {
    return FfiConverterSyncServiceState.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<SyncServiceState> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    switch (index) {
      case 1:
        return LiftRetVal(SyncServiceState.idle, 4);
      case 2:
        return LiftRetVal(SyncServiceState.running, 4);
      case 3:
        return LiftRetVal(SyncServiceState.terminated, 4);
      case 4:
        return LiftRetVal(SyncServiceState.error, 4);
      case 5:
        return LiftRetVal(SyncServiceState.offline, 4);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(SyncServiceState input) {
    return toRustBuffer(createUint8ListFromInt(input.index + 1));
  }

  static int allocationSize(SyncServiceState value) {
    return 4;
  }

  static int write(SyncServiceState value, Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, value.index + 1);
    return 4;
  }
}

abstract class TagName {
  RustBuffer lower();
  int allocationSize();
  int write(Uint8List buf);
}

class FfiConverterTagName {
  static TagName lift(RustBuffer buffer) {
    return FfiConverterTagName.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<TagName> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    final subview = Uint8List.view(buf.buffer, buf.offsetInBytes + 4);
    switch (index) {
      case 1:
        return FavoriteTagName.read(subview);
      case 2:
        return LowPriorityTagName.read(subview);
      case 3:
        return ServerNoticeTagName.read(subview);
      case 4:
        return UserTagName.read(subview);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(TagName value) {
    return value.lower();
  }

  static int allocationSize(TagName value) {
    return value.allocationSize();
  }

  static int write(TagName value, Uint8List buf) {
    return value.write(buf);
  }
}

class FavoriteTagName extends TagName {
  FavoriteTagName();

  FavoriteTagName._();

  static LiftRetVal<FavoriteTagName> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(FavoriteTagName._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 1);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class LowPriorityTagName extends TagName {
  LowPriorityTagName();

  LowPriorityTagName._();

  static LiftRetVal<LowPriorityTagName> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(LowPriorityTagName._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 2);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class ServerNoticeTagName extends TagName {
  ServerNoticeTagName();

  ServerNoticeTagName._();

  static LiftRetVal<ServerNoticeTagName> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(ServerNoticeTagName._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 3);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class UserTagName extends TagName {
  final String name;

  UserTagName(
    String this.name,
  );

  UserTagName._(
    String this.name,
  );

  static LiftRetVal<UserTagName> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final name_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final name = name_lifted.value;
    new_offset += name_lifted.bytesRead;
    return LiftRetVal(
        UserTagName._(
          name,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(name) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 4);
    int new_offset = buf.offsetInBytes + 4;

    new_offset +=
        FfiConverterString.write(name, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

enum TimelineChange {
  append,
  clear,
  insert,
  set_,
  remove,
  pushBack,
  pushFront,
  popBack,
  popFront,
  truncate,
  reset,
  ;
}

class FfiConverterTimelineChange {
  static TimelineChange lift(RustBuffer buffer) {
    return FfiConverterTimelineChange.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<TimelineChange> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    switch (index) {
      case 1:
        return LiftRetVal(TimelineChange.append, 4);
      case 2:
        return LiftRetVal(TimelineChange.clear, 4);
      case 3:
        return LiftRetVal(TimelineChange.insert, 4);
      case 4:
        return LiftRetVal(TimelineChange.set_, 4);
      case 5:
        return LiftRetVal(TimelineChange.remove, 4);
      case 6:
        return LiftRetVal(TimelineChange.pushBack, 4);
      case 7:
        return LiftRetVal(TimelineChange.pushFront, 4);
      case 8:
        return LiftRetVal(TimelineChange.popBack, 4);
      case 9:
        return LiftRetVal(TimelineChange.popFront, 4);
      case 10:
        return LiftRetVal(TimelineChange.truncate, 4);
      case 11:
        return LiftRetVal(TimelineChange.reset, 4);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(TimelineChange input) {
    return toRustBuffer(createUint8ListFromInt(input.index + 1));
  }

  static int allocationSize(TimelineChange value) {
    return 4;
  }

  static int write(TimelineChange value, Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, value.index + 1);
    return 4;
  }
}

abstract class TimelineDiff {
  RustBuffer lower();
  int allocationSize();
  int write(Uint8List buf);
}

class FfiConverterTimelineDiff {
  static TimelineDiff lift(RustBuffer buffer) {
    return FfiConverterTimelineDiff.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<TimelineDiff> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    final subview = Uint8List.view(buf.buffer, buf.offsetInBytes + 4);
    switch (index) {
      case 1:
        return AppendTimelineDiff.read(subview);
      case 2:
        return ClearTimelineDiff.read(subview);
      case 3:
        return PushFrontTimelineDiff.read(subview);
      case 4:
        return PushBackTimelineDiff.read(subview);
      case 5:
        return PopFrontTimelineDiff.read(subview);
      case 6:
        return PopBackTimelineDiff.read(subview);
      case 7:
        return InsertTimelineDiff.read(subview);
      case 8:
        return SetTimelineDiff.read(subview);
      case 9:
        return RemoveTimelineDiff.read(subview);
      case 10:
        return TruncateTimelineDiff.read(subview);
      case 11:
        return ResetTimelineDiff.read(subview);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(TimelineDiff value) {
    return value.lower();
  }

  static int allocationSize(TimelineDiff value) {
    return value.allocationSize();
  }

  static int write(TimelineDiff value, Uint8List buf) {
    return value.write(buf);
  }
}

class AppendTimelineDiff extends TimelineDiff {
  final List<TimelineItem> values;

  AppendTimelineDiff(
    List<TimelineItem> this.values,
  );

  AppendTimelineDiff._(
    List<TimelineItem> this.values,
  );

  static LiftRetVal<AppendTimelineDiff> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final values_lifted = FfiConverterSequenceTimelineItem.read(
        Uint8List.view(buf.buffer, new_offset));
    final values = values_lifted.value;
    new_offset += values_lifted.bytesRead;
    return LiftRetVal(
        AppendTimelineDiff._(
          values,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterSequenceTimelineItem.allocationSize(values) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 1);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterSequenceTimelineItem.write(
        values, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class ClearTimelineDiff extends TimelineDiff {
  ClearTimelineDiff();

  ClearTimelineDiff._();

  static LiftRetVal<ClearTimelineDiff> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(ClearTimelineDiff._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 2);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class PushFrontTimelineDiff extends TimelineDiff {
  final TimelineItem value;

  PushFrontTimelineDiff(
    TimelineItem this.value,
  );

  PushFrontTimelineDiff._(
    TimelineItem this.value,
  );

  static LiftRetVal<PushFrontTimelineDiff> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final value_lifted =
        TimelineItem.read(Uint8List.view(buf.buffer, new_offset));
    final value = value_lifted.value;
    new_offset += value_lifted.bytesRead;
    return LiftRetVal(
        PushFrontTimelineDiff._(
          value,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return TimelineItem.allocationSize(value) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 3);
    int new_offset = buf.offsetInBytes + 4;

    new_offset +=
        TimelineItem.write(value, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class PushBackTimelineDiff extends TimelineDiff {
  final TimelineItem value;

  PushBackTimelineDiff(
    TimelineItem this.value,
  );

  PushBackTimelineDiff._(
    TimelineItem this.value,
  );

  static LiftRetVal<PushBackTimelineDiff> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final value_lifted =
        TimelineItem.read(Uint8List.view(buf.buffer, new_offset));
    final value = value_lifted.value;
    new_offset += value_lifted.bytesRead;
    return LiftRetVal(
        PushBackTimelineDiff._(
          value,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return TimelineItem.allocationSize(value) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 4);
    int new_offset = buf.offsetInBytes + 4;

    new_offset +=
        TimelineItem.write(value, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class PopFrontTimelineDiff extends TimelineDiff {
  PopFrontTimelineDiff();

  PopFrontTimelineDiff._();

  static LiftRetVal<PopFrontTimelineDiff> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(PopFrontTimelineDiff._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 5);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class PopBackTimelineDiff extends TimelineDiff {
  PopBackTimelineDiff();

  PopBackTimelineDiff._();

  static LiftRetVal<PopBackTimelineDiff> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(PopBackTimelineDiff._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 6);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class InsertTimelineDiff extends TimelineDiff {
  final int index;
  final TimelineItem value;

  InsertTimelineDiff({
    required int this.index,
    required TimelineItem this.value,
  });

  InsertTimelineDiff._(
    int this.index,
    TimelineItem this.value,
  );

  static LiftRetVal<InsertTimelineDiff> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final index_lifted =
        FfiConverterUInt32.read(Uint8List.view(buf.buffer, new_offset));
    final index = index_lifted.value;
    new_offset += index_lifted.bytesRead;
    final value_lifted =
        TimelineItem.read(Uint8List.view(buf.buffer, new_offset));
    final value = value_lifted.value;
    new_offset += value_lifted.bytesRead;
    return LiftRetVal(
        InsertTimelineDiff._(
          index,
          value,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterUInt32.allocationSize(index) +
        TimelineItem.allocationSize(value) +
        4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 7);
    int new_offset = buf.offsetInBytes + 4;

    new_offset +=
        FfiConverterUInt32.write(index, Uint8List.view(buf.buffer, new_offset));
    new_offset +=
        TimelineItem.write(value, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class SetTimelineDiff extends TimelineDiff {
  final int index;
  final TimelineItem value;

  SetTimelineDiff({
    required int this.index,
    required TimelineItem this.value,
  });

  SetTimelineDiff._(
    int this.index,
    TimelineItem this.value,
  );

  static LiftRetVal<SetTimelineDiff> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final index_lifted =
        FfiConverterUInt32.read(Uint8List.view(buf.buffer, new_offset));
    final index = index_lifted.value;
    new_offset += index_lifted.bytesRead;
    final value_lifted =
        TimelineItem.read(Uint8List.view(buf.buffer, new_offset));
    final value = value_lifted.value;
    new_offset += value_lifted.bytesRead;
    return LiftRetVal(
        SetTimelineDiff._(
          index,
          value,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterUInt32.allocationSize(index) +
        TimelineItem.allocationSize(value) +
        4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 8);
    int new_offset = buf.offsetInBytes + 4;

    new_offset +=
        FfiConverterUInt32.write(index, Uint8List.view(buf.buffer, new_offset));
    new_offset +=
        TimelineItem.write(value, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class RemoveTimelineDiff extends TimelineDiff {
  final int index;

  RemoveTimelineDiff(
    int this.index,
  );

  RemoveTimelineDiff._(
    int this.index,
  );

  static LiftRetVal<RemoveTimelineDiff> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final index_lifted =
        FfiConverterUInt32.read(Uint8List.view(buf.buffer, new_offset));
    final index = index_lifted.value;
    new_offset += index_lifted.bytesRead;
    return LiftRetVal(
        RemoveTimelineDiff._(
          index,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterUInt32.allocationSize(index) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 9);
    int new_offset = buf.offsetInBytes + 4;

    new_offset +=
        FfiConverterUInt32.write(index, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class TruncateTimelineDiff extends TimelineDiff {
  final int length;

  TruncateTimelineDiff(
    int this.length,
  );

  TruncateTimelineDiff._(
    int this.length,
  );

  static LiftRetVal<TruncateTimelineDiff> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final length_lifted =
        FfiConverterUInt32.read(Uint8List.view(buf.buffer, new_offset));
    final length = length_lifted.value;
    new_offset += length_lifted.bytesRead;
    return LiftRetVal(
        TruncateTimelineDiff._(
          length,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterUInt32.allocationSize(length) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 10);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterUInt32.write(
        length, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class ResetTimelineDiff extends TimelineDiff {
  final List<TimelineItem> values;

  ResetTimelineDiff(
    List<TimelineItem> this.values,
  );

  ResetTimelineDiff._(
    List<TimelineItem> this.values,
  );

  static LiftRetVal<ResetTimelineDiff> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final values_lifted = FfiConverterSequenceTimelineItem.read(
        Uint8List.view(buf.buffer, new_offset));
    final values = values_lifted.value;
    new_offset += values_lifted.bytesRead;
    return LiftRetVal(
        ResetTimelineDiff._(
          values,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterSequenceTimelineItem.allocationSize(values) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 11);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterSequenceTimelineItem.write(
        values, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

abstract class TimelineEventType {
  RustBuffer lower();
  int allocationSize();
  int write(Uint8List buf);
}

class FfiConverterTimelineEventType {
  static TimelineEventType lift(RustBuffer buffer) {
    return FfiConverterTimelineEventType.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<TimelineEventType> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    final subview = Uint8List.view(buf.buffer, buf.offsetInBytes + 4);
    switch (index) {
      case 1:
        return MessageLikeTimelineEventType.read(subview);
      case 2:
        return StateTimelineEventType.read(subview);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(TimelineEventType value) {
    return value.lower();
  }

  static int allocationSize(TimelineEventType value) {
    return value.allocationSize();
  }

  static int write(TimelineEventType value, Uint8List buf) {
    return value.write(buf);
  }
}

class MessageLikeTimelineEventType extends TimelineEventType {
  final MessageLikeEventContent content;

  MessageLikeTimelineEventType(
    MessageLikeEventContent this.content,
  );

  MessageLikeTimelineEventType._(
    MessageLikeEventContent this.content,
  );

  static LiftRetVal<MessageLikeTimelineEventType> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final content_lifted = FfiConverterMessageLikeEventContent.read(
        Uint8List.view(buf.buffer, new_offset));
    final content = content_lifted.value;
    new_offset += content_lifted.bytesRead;
    return LiftRetVal(
        MessageLikeTimelineEventType._(
          content,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterMessageLikeEventContent.allocationSize(content) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 1);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterMessageLikeEventContent.write(
        content, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class StateTimelineEventType extends TimelineEventType {
  final StateEventContent content;

  StateTimelineEventType(
    StateEventContent this.content,
  );

  StateTimelineEventType._(
    StateEventContent this.content,
  );

  static LiftRetVal<StateTimelineEventType> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final content_lifted = FfiConverterStateEventContent.read(
        Uint8List.view(buf.buffer, new_offset));
    final content = content_lifted.value;
    new_offset += content_lifted.bytesRead;
    return LiftRetVal(
        StateTimelineEventType._(
          content,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterStateEventContent.allocationSize(content) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 2);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterStateEventContent.write(
        content, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

abstract class TimelineFilter {
  RustBuffer lower();
  int allocationSize();
  int write(Uint8List buf);
}

class FfiConverterTimelineFilter {
  static TimelineFilter lift(RustBuffer buffer) {
    return FfiConverterTimelineFilter.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<TimelineFilter> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    final subview = Uint8List.view(buf.buffer, buf.offsetInBytes + 4);
    switch (index) {
      case 1:
        return AllTimelineFilter.read(subview);
      case 2:
        return OnlyMessageTimelineFilter.read(subview);
      case 3:
        return EventTypeFilterTimelineFilter.read(subview);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(TimelineFilter value) {
    return value.lower();
  }

  static int allocationSize(TimelineFilter value) {
    return value.allocationSize();
  }

  static int write(TimelineFilter value, Uint8List buf) {
    return value.write(buf);
  }
}

class AllTimelineFilter extends TimelineFilter {
  AllTimelineFilter();

  AllTimelineFilter._();

  static LiftRetVal<AllTimelineFilter> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(AllTimelineFilter._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 1);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class OnlyMessageTimelineFilter extends TimelineFilter {
  final List<RoomMessageEventMessageType> types;

  OnlyMessageTimelineFilter(
    List<RoomMessageEventMessageType> this.types,
  );

  OnlyMessageTimelineFilter._(
    List<RoomMessageEventMessageType> this.types,
  );

  static LiftRetVal<OnlyMessageTimelineFilter> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final types_lifted = FfiConverterSequenceRoomMessageEventMessageType.read(
        Uint8List.view(buf.buffer, new_offset));
    final types = types_lifted.value;
    new_offset += types_lifted.bytesRead;
    return LiftRetVal(
        OnlyMessageTimelineFilter._(
          types,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterSequenceRoomMessageEventMessageType.allocationSize(
            types) +
        4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 2);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterSequenceRoomMessageEventMessageType.write(
        types, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class EventTypeFilterTimelineFilter extends TimelineFilter {
  final TimelineEventTypeFilter filter;

  EventTypeFilterTimelineFilter(
    TimelineEventTypeFilter this.filter,
  );

  EventTypeFilterTimelineFilter._(
    TimelineEventTypeFilter this.filter,
  );

  static LiftRetVal<EventTypeFilterTimelineFilter> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final filter_lifted =
        TimelineEventTypeFilter.read(Uint8List.view(buf.buffer, new_offset));
    final filter = filter_lifted.value;
    new_offset += filter_lifted.bytesRead;
    return LiftRetVal(
        EventTypeFilterTimelineFilter._(
          filter,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return TimelineEventTypeFilter.allocationSize(filter) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 3);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += TimelineEventTypeFilter.write(
        filter, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

abstract class TimelineFocus {
  RustBuffer lower();
  int allocationSize();
  int write(Uint8List buf);
}

class FfiConverterTimelineFocus {
  static TimelineFocus lift(RustBuffer buffer) {
    return FfiConverterTimelineFocus.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<TimelineFocus> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    final subview = Uint8List.view(buf.buffer, buf.offsetInBytes + 4);
    switch (index) {
      case 1:
        return LiveTimelineFocus.read(subview);
      case 2:
        return EventTimelineFocus.read(subview);
      case 3:
        return ThreadTimelineFocus.read(subview);
      case 4:
        return PinnedEventsTimelineFocus.read(subview);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(TimelineFocus value) {
    return value.lower();
  }

  static int allocationSize(TimelineFocus value) {
    return value.allocationSize();
  }

  static int write(TimelineFocus value, Uint8List buf) {
    return value.write(buf);
  }
}

class LiveTimelineFocus extends TimelineFocus {
  final bool hideThreadedEvents;

  LiveTimelineFocus(
    bool this.hideThreadedEvents,
  );

  LiveTimelineFocus._(
    bool this.hideThreadedEvents,
  );

  static LiftRetVal<LiveTimelineFocus> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final hideThreadedEvents_lifted =
        FfiConverterBool.read(Uint8List.view(buf.buffer, new_offset));
    final hideThreadedEvents = hideThreadedEvents_lifted.value;
    new_offset += hideThreadedEvents_lifted.bytesRead;
    return LiftRetVal(
        LiveTimelineFocus._(
          hideThreadedEvents,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterBool.allocationSize(hideThreadedEvents) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 1);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterBool.write(
        hideThreadedEvents, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class EventTimelineFocus extends TimelineFocus {
  final String eventId;
  final int numContextEvents;
  final bool hideThreadedEvents;

  EventTimelineFocus({
    required String this.eventId,
    required int this.numContextEvents,
    required bool this.hideThreadedEvents,
  });

  EventTimelineFocus._(
    String this.eventId,
    int this.numContextEvents,
    bool this.hideThreadedEvents,
  );

  static LiftRetVal<EventTimelineFocus> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final eventId_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final eventId = eventId_lifted.value;
    new_offset += eventId_lifted.bytesRead;
    final numContextEvents_lifted =
        FfiConverterUInt16.read(Uint8List.view(buf.buffer, new_offset));
    final numContextEvents = numContextEvents_lifted.value;
    new_offset += numContextEvents_lifted.bytesRead;
    final hideThreadedEvents_lifted =
        FfiConverterBool.read(Uint8List.view(buf.buffer, new_offset));
    final hideThreadedEvents = hideThreadedEvents_lifted.value;
    new_offset += hideThreadedEvents_lifted.bytesRead;
    return LiftRetVal(
        EventTimelineFocus._(
          eventId,
          numContextEvents,
          hideThreadedEvents,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(eventId) +
        FfiConverterUInt16.allocationSize(numContextEvents) +
        FfiConverterBool.allocationSize(hideThreadedEvents) +
        4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 2);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterString.write(
        eventId, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterUInt16.write(
        numContextEvents, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterBool.write(
        hideThreadedEvents, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class ThreadTimelineFocus extends TimelineFocus {
  final String rootEventId;

  ThreadTimelineFocus(
    String this.rootEventId,
  );

  ThreadTimelineFocus._(
    String this.rootEventId,
  );

  static LiftRetVal<ThreadTimelineFocus> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final rootEventId_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final rootEventId = rootEventId_lifted.value;
    new_offset += rootEventId_lifted.bytesRead;
    return LiftRetVal(
        ThreadTimelineFocus._(
          rootEventId,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(rootEventId) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 3);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterString.write(
        rootEventId, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class PinnedEventsTimelineFocus extends TimelineFocus {
  final int maxEventsToLoad;
  final int maxConcurrentRequests;

  PinnedEventsTimelineFocus({
    required int this.maxEventsToLoad,
    required int this.maxConcurrentRequests,
  });

  PinnedEventsTimelineFocus._(
    int this.maxEventsToLoad,
    int this.maxConcurrentRequests,
  );

  static LiftRetVal<PinnedEventsTimelineFocus> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final maxEventsToLoad_lifted =
        FfiConverterUInt16.read(Uint8List.view(buf.buffer, new_offset));
    final maxEventsToLoad = maxEventsToLoad_lifted.value;
    new_offset += maxEventsToLoad_lifted.bytesRead;
    final maxConcurrentRequests_lifted =
        FfiConverterUInt16.read(Uint8List.view(buf.buffer, new_offset));
    final maxConcurrentRequests = maxConcurrentRequests_lifted.value;
    new_offset += maxConcurrentRequests_lifted.bytesRead;
    return LiftRetVal(
        PinnedEventsTimelineFocus._(
          maxEventsToLoad,
          maxConcurrentRequests,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterUInt16.allocationSize(maxEventsToLoad) +
        FfiConverterUInt16.allocationSize(maxConcurrentRequests) +
        4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 4);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterUInt16.write(
        maxEventsToLoad, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterUInt16.write(
        maxConcurrentRequests, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

abstract class TimelineItemContent {
  RustBuffer lower();
  int allocationSize();
  int write(Uint8List buf);
}

class FfiConverterTimelineItemContent {
  static TimelineItemContent lift(RustBuffer buffer) {
    return FfiConverterTimelineItemContent.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<TimelineItemContent> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    final subview = Uint8List.view(buf.buffer, buf.offsetInBytes + 4);
    switch (index) {
      case 1:
        return MsgLikeTimelineItemContent.read(subview);
      case 2:
        return CallInviteTimelineItemContent.read(subview);
      case 3:
        return CallNotifyTimelineItemContent.read(subview);
      case 4:
        return RoomMembershipTimelineItemContent.read(subview);
      case 5:
        return ProfileChangeTimelineItemContent.read(subview);
      case 6:
        return StateTimelineItemContent.read(subview);
      case 7:
        return FailedToParseMessageLikeTimelineItemContent.read(subview);
      case 8:
        return FailedToParseStateTimelineItemContent.read(subview);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(TimelineItemContent value) {
    return value.lower();
  }

  static int allocationSize(TimelineItemContent value) {
    return value.allocationSize();
  }

  static int write(TimelineItemContent value, Uint8List buf) {
    return value.write(buf);
  }
}

class MsgLikeTimelineItemContent extends TimelineItemContent {
  final MsgLikeContent content;

  MsgLikeTimelineItemContent(
    MsgLikeContent this.content,
  );

  MsgLikeTimelineItemContent._(
    MsgLikeContent this.content,
  );

  static LiftRetVal<MsgLikeTimelineItemContent> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final content_lifted =
        FfiConverterMsgLikeContent.read(Uint8List.view(buf.buffer, new_offset));
    final content = content_lifted.value;
    new_offset += content_lifted.bytesRead;
    return LiftRetVal(
        MsgLikeTimelineItemContent._(
          content,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterMsgLikeContent.allocationSize(content) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 1);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterMsgLikeContent.write(
        content, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class CallInviteTimelineItemContent extends TimelineItemContent {
  CallInviteTimelineItemContent();

  CallInviteTimelineItemContent._();

  static LiftRetVal<CallInviteTimelineItemContent> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(CallInviteTimelineItemContent._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 2);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class CallNotifyTimelineItemContent extends TimelineItemContent {
  CallNotifyTimelineItemContent();

  CallNotifyTimelineItemContent._();

  static LiftRetVal<CallNotifyTimelineItemContent> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(CallNotifyTimelineItemContent._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 3);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class RoomMembershipTimelineItemContent extends TimelineItemContent {
  final String userId;
  final String? userDisplayName;
  final MembershipChange? change;
  final String? reason;

  RoomMembershipTimelineItemContent({
    required String this.userId,
    required String? this.userDisplayName,
    required MembershipChange? this.change,
    required String? this.reason,
  });

  RoomMembershipTimelineItemContent._(
    String this.userId,
    String? this.userDisplayName,
    MembershipChange? this.change,
    String? this.reason,
  );

  static LiftRetVal<RoomMembershipTimelineItemContent> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final userId_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final userId = userId_lifted.value;
    new_offset += userId_lifted.bytesRead;
    final userDisplayName_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final userDisplayName = userDisplayName_lifted.value;
    new_offset += userDisplayName_lifted.bytesRead;
    final change_lifted = FfiConverterOptionalMembershipChange.read(
        Uint8List.view(buf.buffer, new_offset));
    final change = change_lifted.value;
    new_offset += change_lifted.bytesRead;
    final reason_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final reason = reason_lifted.value;
    new_offset += reason_lifted.bytesRead;
    return LiftRetVal(
        RoomMembershipTimelineItemContent._(
          userId,
          userDisplayName,
          change,
          reason,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(userId) +
        FfiConverterOptionalString.allocationSize(userDisplayName) +
        FfiConverterOptionalMembershipChange.allocationSize(change) +
        FfiConverterOptionalString.allocationSize(reason) +
        4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 4);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterString.write(
        userId, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        userDisplayName, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalMembershipChange.write(
        change, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        reason, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class ProfileChangeTimelineItemContent extends TimelineItemContent {
  final String? displayName;
  final String? prevDisplayName;
  final String? avatarUrl;
  final String? prevAvatarUrl;

  ProfileChangeTimelineItemContent({
    required String? this.displayName,
    required String? this.prevDisplayName,
    required String? this.avatarUrl,
    required String? this.prevAvatarUrl,
  });

  ProfileChangeTimelineItemContent._(
    String? this.displayName,
    String? this.prevDisplayName,
    String? this.avatarUrl,
    String? this.prevAvatarUrl,
  );

  static LiftRetVal<ProfileChangeTimelineItemContent> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final displayName_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final displayName = displayName_lifted.value;
    new_offset += displayName_lifted.bytesRead;
    final prevDisplayName_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final prevDisplayName = prevDisplayName_lifted.value;
    new_offset += prevDisplayName_lifted.bytesRead;
    final avatarUrl_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final avatarUrl = avatarUrl_lifted.value;
    new_offset += avatarUrl_lifted.bytesRead;
    final prevAvatarUrl_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final prevAvatarUrl = prevAvatarUrl_lifted.value;
    new_offset += prevAvatarUrl_lifted.bytesRead;
    return LiftRetVal(
        ProfileChangeTimelineItemContent._(
          displayName,
          prevDisplayName,
          avatarUrl,
          prevAvatarUrl,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterOptionalString.allocationSize(displayName) +
        FfiConverterOptionalString.allocationSize(prevDisplayName) +
        FfiConverterOptionalString.allocationSize(avatarUrl) +
        FfiConverterOptionalString.allocationSize(prevAvatarUrl) +
        4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 5);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterOptionalString.write(
        displayName, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        prevDisplayName, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        avatarUrl, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        prevAvatarUrl, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class StateTimelineItemContent extends TimelineItemContent {
  final String stateKey;
  final OtherState content;

  StateTimelineItemContent({
    required String this.stateKey,
    required OtherState this.content,
  });

  StateTimelineItemContent._(
    String this.stateKey,
    OtherState this.content,
  );

  static LiftRetVal<StateTimelineItemContent> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final stateKey_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final stateKey = stateKey_lifted.value;
    new_offset += stateKey_lifted.bytesRead;
    final content_lifted =
        FfiConverterOtherState.read(Uint8List.view(buf.buffer, new_offset));
    final content = content_lifted.value;
    new_offset += content_lifted.bytesRead;
    return LiftRetVal(
        StateTimelineItemContent._(
          stateKey,
          content,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(stateKey) +
        FfiConverterOtherState.allocationSize(content) +
        4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 6);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterString.write(
        stateKey, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOtherState.write(
        content, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class FailedToParseMessageLikeTimelineItemContent extends TimelineItemContent {
  final String eventType;
  final String error;

  FailedToParseMessageLikeTimelineItemContent({
    required String this.eventType,
    required String this.error,
  });

  FailedToParseMessageLikeTimelineItemContent._(
    String this.eventType,
    String this.error,
  );

  static LiftRetVal<FailedToParseMessageLikeTimelineItemContent> read(
      Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final eventType_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final eventType = eventType_lifted.value;
    new_offset += eventType_lifted.bytesRead;
    final error_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final error = error_lifted.value;
    new_offset += error_lifted.bytesRead;
    return LiftRetVal(
        FailedToParseMessageLikeTimelineItemContent._(
          eventType,
          error,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(eventType) +
        FfiConverterString.allocationSize(error) +
        4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 7);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterString.write(
        eventType, Uint8List.view(buf.buffer, new_offset));
    new_offset +=
        FfiConverterString.write(error, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class FailedToParseStateTimelineItemContent extends TimelineItemContent {
  final String eventType;
  final String stateKey;
  final String error;

  FailedToParseStateTimelineItemContent({
    required String this.eventType,
    required String this.stateKey,
    required String this.error,
  });

  FailedToParseStateTimelineItemContent._(
    String this.eventType,
    String this.stateKey,
    String this.error,
  );

  static LiftRetVal<FailedToParseStateTimelineItemContent> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final eventType_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final eventType = eventType_lifted.value;
    new_offset += eventType_lifted.bytesRead;
    final stateKey_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final stateKey = stateKey_lifted.value;
    new_offset += stateKey_lifted.bytesRead;
    final error_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final error = error_lifted.value;
    new_offset += error_lifted.bytesRead;
    return LiftRetVal(
        FailedToParseStateTimelineItemContent._(
          eventType,
          stateKey,
          error,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(eventType) +
        FfiConverterString.allocationSize(stateKey) +
        FfiConverterString.allocationSize(error) +
        4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 8);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterString.write(
        eventType, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterString.write(
        stateKey, Uint8List.view(buf.buffer, new_offset));
    new_offset +=
        FfiConverterString.write(error, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

enum TraceLogPacks { eventCache, sendQueue, timeline, notificationClient }

class FfiConverterTraceLogPacks {
  static TraceLogPacks lift(RustBuffer buffer) {
    return FfiConverterTraceLogPacks.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<TraceLogPacks> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    switch (index) {
      case 1:
        return LiftRetVal(TraceLogPacks.eventCache, 4);
      case 2:
        return LiftRetVal(TraceLogPacks.sendQueue, 4);
      case 3:
        return LiftRetVal(TraceLogPacks.timeline, 4);
      case 4:
        return LiftRetVal(TraceLogPacks.notificationClient, 4);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(TraceLogPacks input) {
    return toRustBuffer(createUint8ListFromInt(input.index + 1));
  }

  static int allocationSize(TraceLogPacks value) {
    return 4;
  }

  static int write(TraceLogPacks value, Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, value.index + 1);
    return 4;
  }
}

abstract class Tweak {
  RustBuffer lower();
  int allocationSize();
  int write(Uint8List buf);
}

class FfiConverterTweak {
  static Tweak lift(RustBuffer buffer) {
    return FfiConverterTweak.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<Tweak> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    final subview = Uint8List.view(buf.buffer, buf.offsetInBytes + 4);
    switch (index) {
      case 1:
        return SoundTweak.read(subview);
      case 2:
        return HighlightTweak.read(subview);
      case 3:
        return CustomTweak.read(subview);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(Tweak value) {
    return value.lower();
  }

  static int allocationSize(Tweak value) {
    return value.allocationSize();
  }

  static int write(Tweak value, Uint8List buf) {
    return value.write(buf);
  }
}

class SoundTweak extends Tweak {
  final String value;

  SoundTweak(
    String this.value,
  );

  SoundTweak._(
    String this.value,
  );

  static LiftRetVal<SoundTweak> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final value_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final value = value_lifted.value;
    new_offset += value_lifted.bytesRead;
    return LiftRetVal(
        SoundTweak._(
          value,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(value) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 1);
    int new_offset = buf.offsetInBytes + 4;

    new_offset +=
        FfiConverterString.write(value, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class HighlightTweak extends Tweak {
  final bool value;

  HighlightTweak(
    bool this.value,
  );

  HighlightTweak._(
    bool this.value,
  );

  static LiftRetVal<HighlightTweak> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final value_lifted =
        FfiConverterBool.read(Uint8List.view(buf.buffer, new_offset));
    final value = value_lifted.value;
    new_offset += value_lifted.bytesRead;
    return LiftRetVal(
        HighlightTweak._(
          value,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterBool.allocationSize(value) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 2);
    int new_offset = buf.offsetInBytes + 4;

    new_offset +=
        FfiConverterBool.write(value, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class CustomTweak extends Tweak {
  final String name;
  final String value;

  CustomTweak({
    required String this.name,
    required String this.value,
  });

  CustomTweak._(
    String this.name,
    String this.value,
  );

  static LiftRetVal<CustomTweak> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final name_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final name = name_lifted.value;
    new_offset += name_lifted.bytesRead;
    final value_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final value = value_lifted.value;
    new_offset += value_lifted.bytesRead;
    return LiftRetVal(
        CustomTweak._(
          name,
          value,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(name) +
        FfiConverterString.allocationSize(value) +
        4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 3);
    int new_offset = buf.offsetInBytes + 4;

    new_offset +=
        FfiConverterString.write(name, Uint8List.view(buf.buffer, new_offset));
    new_offset +=
        FfiConverterString.write(value, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

abstract class UploadSource {
  RustBuffer lower();
  int allocationSize();
  int write(Uint8List buf);
}

class FfiConverterUploadSource {
  static UploadSource lift(RustBuffer buffer) {
    return FfiConverterUploadSource.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<UploadSource> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    final subview = Uint8List.view(buf.buffer, buf.offsetInBytes + 4);
    switch (index) {
      case 1:
        return FileUploadSource.read(subview);
      case 2:
        return DataUploadSource.read(subview);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(UploadSource value) {
    return value.lower();
  }

  static int allocationSize(UploadSource value) {
    return value.allocationSize();
  }

  static int write(UploadSource value, Uint8List buf) {
    return value.write(buf);
  }
}

class FileUploadSource extends UploadSource {
  final String filename;

  FileUploadSource(
    String this.filename,
  );

  FileUploadSource._(
    String this.filename,
  );

  static LiftRetVal<FileUploadSource> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final filename_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final filename = filename_lifted.value;
    new_offset += filename_lifted.bytesRead;
    return LiftRetVal(
        FileUploadSource._(
          filename,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(filename) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 1);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterString.write(
        filename, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class DataUploadSource extends UploadSource {
  final Uint8List bytes;
  final String filename;

  DataUploadSource({
    required Uint8List this.bytes,
    required String this.filename,
  });

  DataUploadSource._(
    Uint8List this.bytes,
    String this.filename,
  );

  static LiftRetVal<DataUploadSource> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final bytes_lifted =
        FfiConverterUint8List.read(Uint8List.view(buf.buffer, new_offset));
    final bytes = bytes_lifted.value;
    new_offset += bytes_lifted.bytesRead;
    final filename_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final filename = filename_lifted.value;
    new_offset += filename_lifted.bytesRead;
    return LiftRetVal(
        DataUploadSource._(
          bytes,
          filename,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterUint8List.allocationSize(bytes) +
        FfiConverterString.allocationSize(filename) +
        4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 2);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterUint8List.write(
        bytes, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterString.write(
        filename, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

enum VerificationState {
  unknown,
  verified,
  unverified,
  ;
}

class FfiConverterVerificationState {
  static VerificationState lift(RustBuffer buffer) {
    return FfiConverterVerificationState.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<VerificationState> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    switch (index) {
      case 1:
        return LiftRetVal(VerificationState.unknown, 4);
      case 2:
        return LiftRetVal(VerificationState.verified, 4);
      case 3:
        return LiftRetVal(VerificationState.unverified, 4);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(VerificationState input) {
    return toRustBuffer(createUint8ListFromInt(input.index + 1));
  }

  static int allocationSize(VerificationState value) {
    return 4;
  }

  static int write(VerificationState value, Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, value.index + 1);
    return 4;
  }
}

abstract class VirtualTimelineItem {
  RustBuffer lower();
  int allocationSize();
  int write(Uint8List buf);
}

class FfiConverterVirtualTimelineItem {
  static VirtualTimelineItem lift(RustBuffer buffer) {
    return FfiConverterVirtualTimelineItem.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<VirtualTimelineItem> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    final subview = Uint8List.view(buf.buffer, buf.offsetInBytes + 4);
    switch (index) {
      case 1:
        return DateDividerVirtualTimelineItem.read(subview);
      case 2:
        return ReadMarkerVirtualTimelineItem.read(subview);
      case 3:
        return TimelineStartVirtualTimelineItem.read(subview);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(VirtualTimelineItem value) {
    return value.lower();
  }

  static int allocationSize(VirtualTimelineItem value) {
    return value.allocationSize();
  }

  static int write(VirtualTimelineItem value, Uint8List buf) {
    return value.write(buf);
  }
}

class DateDividerVirtualTimelineItem extends VirtualTimelineItem {
  final Timestamp ts;

  DateDividerVirtualTimelineItem(
    Timestamp this.ts,
  );

  DateDividerVirtualTimelineItem._(
    Timestamp this.ts,
  );

  static LiftRetVal<DateDividerVirtualTimelineItem> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final ts_lifted =
        FfiConverterTimestamp.read(Uint8List.view(buf.buffer, new_offset));
    final ts = ts_lifted.value;
    new_offset += ts_lifted.bytesRead;
    return LiftRetVal(
        DateDividerVirtualTimelineItem._(
          ts,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterTimestamp.allocationSize(ts) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 1);
    int new_offset = buf.offsetInBytes + 4;

    new_offset +=
        FfiConverterTimestamp.write(ts, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class ReadMarkerVirtualTimelineItem extends VirtualTimelineItem {
  ReadMarkerVirtualTimelineItem();

  ReadMarkerVirtualTimelineItem._();

  static LiftRetVal<ReadMarkerVirtualTimelineItem> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(ReadMarkerVirtualTimelineItem._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 2);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

class TimelineStartVirtualTimelineItem extends VirtualTimelineItem {
  TimelineStartVirtualTimelineItem();

  TimelineStartVirtualTimelineItem._();

  static LiftRetVal<TimelineStartVirtualTimelineItem> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    return LiftRetVal(TimelineStartVirtualTimelineItem._(), new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 3);
    int new_offset = buf.offsetInBytes + 4;

    return new_offset;
  }
}

abstract class WidgetEventFilter {
  RustBuffer lower();
  int allocationSize();
  int write(Uint8List buf);
}

class FfiConverterWidgetEventFilter {
  static WidgetEventFilter lift(RustBuffer buffer) {
    return FfiConverterWidgetEventFilter.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<WidgetEventFilter> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    final subview = Uint8List.view(buf.buffer, buf.offsetInBytes + 4);
    switch (index) {
      case 1:
        return MessageLikeWithTypeWidgetEventFilter.read(subview);
      case 2:
        return RoomMessageWithMsgtypeWidgetEventFilter.read(subview);
      case 3:
        return StateWithTypeWidgetEventFilter.read(subview);
      case 4:
        return StateWithTypeAndStateKeyWidgetEventFilter.read(subview);
      case 5:
        return ToDeviceWidgetEventFilter.read(subview);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(WidgetEventFilter value) {
    return value.lower();
  }

  static int allocationSize(WidgetEventFilter value) {
    return value.allocationSize();
  }

  static int write(WidgetEventFilter value, Uint8List buf) {
    return value.write(buf);
  }
}

class MessageLikeWithTypeWidgetEventFilter extends WidgetEventFilter {
  final String eventType;

  MessageLikeWithTypeWidgetEventFilter(
    String this.eventType,
  );

  MessageLikeWithTypeWidgetEventFilter._(
    String this.eventType,
  );

  static LiftRetVal<MessageLikeWithTypeWidgetEventFilter> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final eventType_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final eventType = eventType_lifted.value;
    new_offset += eventType_lifted.bytesRead;
    return LiftRetVal(
        MessageLikeWithTypeWidgetEventFilter._(
          eventType,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(eventType) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 1);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterString.write(
        eventType, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class RoomMessageWithMsgtypeWidgetEventFilter extends WidgetEventFilter {
  final String msgtype;

  RoomMessageWithMsgtypeWidgetEventFilter(
    String this.msgtype,
  );

  RoomMessageWithMsgtypeWidgetEventFilter._(
    String this.msgtype,
  );

  static LiftRetVal<RoomMessageWithMsgtypeWidgetEventFilter> read(
      Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final msgtype_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final msgtype = msgtype_lifted.value;
    new_offset += msgtype_lifted.bytesRead;
    return LiftRetVal(
        RoomMessageWithMsgtypeWidgetEventFilter._(
          msgtype,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(msgtype) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 2);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterString.write(
        msgtype, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class StateWithTypeWidgetEventFilter extends WidgetEventFilter {
  final String eventType;

  StateWithTypeWidgetEventFilter(
    String this.eventType,
  );

  StateWithTypeWidgetEventFilter._(
    String this.eventType,
  );

  static LiftRetVal<StateWithTypeWidgetEventFilter> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final eventType_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final eventType = eventType_lifted.value;
    new_offset += eventType_lifted.bytesRead;
    return LiftRetVal(
        StateWithTypeWidgetEventFilter._(
          eventType,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(eventType) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 3);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterString.write(
        eventType, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class StateWithTypeAndStateKeyWidgetEventFilter extends WidgetEventFilter {
  final String eventType;
  final String stateKey;

  StateWithTypeAndStateKeyWidgetEventFilter({
    required String this.eventType,
    required String this.stateKey,
  });

  StateWithTypeAndStateKeyWidgetEventFilter._(
    String this.eventType,
    String this.stateKey,
  );

  static LiftRetVal<StateWithTypeAndStateKeyWidgetEventFilter> read(
      Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final eventType_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final eventType = eventType_lifted.value;
    new_offset += eventType_lifted.bytesRead;
    final stateKey_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final stateKey = stateKey_lifted.value;
    new_offset += stateKey_lifted.bytesRead;
    return LiftRetVal(
        StateWithTypeAndStateKeyWidgetEventFilter._(
          eventType,
          stateKey,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(eventType) +
        FfiConverterString.allocationSize(stateKey) +
        4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 4);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterString.write(
        eventType, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterString.write(
        stateKey, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

class ToDeviceWidgetEventFilter extends WidgetEventFilter {
  final String eventType;

  ToDeviceWidgetEventFilter(
    String this.eventType,
  );

  ToDeviceWidgetEventFilter._(
    String this.eventType,
  );

  static LiftRetVal<ToDeviceWidgetEventFilter> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final eventType_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final eventType = eventType_lifted.value;
    new_offset += eventType_lifted.bytesRead;
    return LiftRetVal(
        ToDeviceWidgetEventFilter._(
          eventType,
        ),
        new_offset);
  }

  @override
  RustBuffer lower() {
    final buf = Uint8List(allocationSize());
    write(buf);
    return toRustBuffer(buf);
  }

  @override
  int allocationSize() {
    return FfiConverterString.allocationSize(eventType) + 4;
  }

  @override
  int write(Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, 5);
    int new_offset = buf.offsetInBytes + 4;

    new_offset += FfiConverterString.write(
        eventType, Uint8List.view(buf.buffer, new_offset));

    return new_offset;
  }
}

final _ClientFinalizer = Finalizer<Pointer<Void>>((ptr) {
  rustCall((status) =>
      _UniffiLib.instance.uniffi_matrix_sdk_ffi_fn_free_client(ptr, status));
});

class Client {
  late final Pointer<Void> _ptr;

  Client._(this._ptr) {
    _ClientFinalizer.attach(this, _ptr, detach: this);
  }

  factory Client.lift(Pointer<Void> ptr) {
    return Client._(ptr);
  }

  static Pointer<Void> lower(Client value) {
    return value.uniffiClonePointer();
  }

  Pointer<Void> uniffiClonePointer() {
    return rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_clone_client(_ptr, status));
  }

  static int allocationSize(Client value) {
    return 8;
  }

  static LiftRetVal<Client> read(Uint8List buf) {
    final handle = buf.buffer.asByteData(buf.offsetInBytes).getInt64(0);
    final pointer = Pointer<Void>.fromAddress(handle);
    return LiftRetVal(Client.lift(pointer), 8);
  }

  static int write(Client value, Uint8List buf) {
    final handle = lower(value);
    buf.buffer.asByteData(buf.offsetInBytes).setInt64(0, handle.address);
    return 8;
  }

  void dispose() {
    _ClientFinalizer.detach(this);
    rustCall((status) =>
        _UniffiLib.instance.uniffi_matrix_sdk_ffi_fn_free_client(_ptr, status));
  }

  Future<void> abortOidcAuth(
    OAuthAuthorizationData authorizationData,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_client_abort_oidc_auth(
        uniffiClonePointer(),
        OAuthAuthorizationData.lower(authorizationData),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      null,
    );
  }

  Future<String?> accountData(
    String eventType,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_client_account_data(
        uniffiClonePointer(),
        FfiConverterString.lower(eventType),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_rust_buffer,
      FfiConverterOptionalString.lift,
      clientExceptionErrorHandler,
    );
  }

  Future<String?> accountUrl(
    AccountManagementAction? action,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_client_account_url(
        uniffiClonePointer(),
        FfiConverterOptionalAccountManagementAction.lower(action),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_rust_buffer,
      FfiConverterOptionalString.lift,
      clientExceptionErrorHandler,
    );
  }

  Future<List<SlidingSyncVersion>> availableSlidingSyncVersions() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_client_available_sliding_sync_versions(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_rust_buffer,
      FfiConverterSequenceSlidingSyncVersion.lift,
      null,
    );
  }

  Future<String?> avatarUrl() {
    return uniffiRustCallAsync(
      () =>
          _UniffiLib.instance.uniffi_matrix_sdk_ffi_fn_method_client_avatar_url(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_rust_buffer,
      FfiConverterOptionalString.lift,
      clientExceptionErrorHandler,
    );
  }

  Future<Room> awaitRoomRemoteEcho(
    String roomId,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_client_await_room_remote_echo(
        uniffiClonePointer(),
        FfiConverterString.lower(roomId),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_pointer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_pointer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_pointer,
      Room.lift,
      clientExceptionErrorHandler,
    );
  }

  Future<String?> cachedAvatarUrl() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_client_cached_avatar_url(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_rust_buffer,
      FfiConverterOptionalString.lift,
      clientExceptionErrorHandler,
    );
  }

  bool canDeactivateAccount() {
    return rustCall(
        (status) => FfiConverterBool.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_client_can_deactivate_account(
                uniffiClonePointer(), status)),
        null);
  }

  Future<void> clearCaches(
    SyncService? syncService,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_client_clear_caches(
        uniffiClonePointer(),
        FfiConverterOptionalSyncService.lower(syncService),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  Future<String> createRoom(
    CreateRoomParameters request,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_client_create_room(
        uniffiClonePointer(),
        FfiConverterCreateRoomParameters.lower(request),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_rust_buffer,
      FfiConverterString.lift,
      clientExceptionErrorHandler,
    );
  }

  Future<void> customLoginWithJwt(
    String jwt,
    String? initialDeviceName,
    String? deviceId,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_client_custom_login_with_jwt(
        uniffiClonePointer(),
        FfiConverterString.lower(jwt),
        FfiConverterOptionalString.lower(initialDeviceName),
        FfiConverterOptionalString.lower(deviceId),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  Future<void> deactivateAccount(
    AuthData? authData,
    bool eraseData,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_client_deactivate_account(
        uniffiClonePointer(),
        FfiConverterOptionalAuthData.lower(authData),
        FfiConverterBool.lower(eraseData),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  Future<void> deletePusher(
    PusherIdentifiers identifiers,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_client_delete_pusher(
        uniffiClonePointer(),
        FfiConverterPusherIdentifiers.lower(identifiers),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  String deviceId() {
    return rustCall(
        (status) => FfiConverterString.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_client_device_id(
                uniffiClonePointer(), status)),
        clientExceptionErrorHandler);
  }

  Future<String> displayName() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_client_display_name(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_rust_buffer,
      FfiConverterString.lift,
      clientExceptionErrorHandler,
    );
  }

  Future<void> enableAllSendQueues(
    bool enable,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_client_enable_all_send_queues(
        uniffiClonePointer(),
        FfiConverterBool.lower(enable),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      null,
    );
  }

  void enableSendQueueUploadProgress(
    bool enable,
  ) {
    return rustCall((status) {
      _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_client_enable_send_queue_upload_progress(
              uniffiClonePointer(), FfiConverterBool.lower(enable), status);
    }, null);
  }

  Encryption encryption() {
    return rustCall(
        (status) => Encryption.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_client_encryption(
                uniffiClonePointer(), status)),
        null);
  }

  Future<MediaPreviewConfig?> fetchMediaPreviewConfig() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_client_fetch_media_preview_config(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_rust_buffer,
      FfiConverterOptionalMediaPreviewConfig.lift,
      clientExceptionErrorHandler,
    );
  }

  Room? getDmRoom(
    String userId,
  ) {
    return rustCall(
        (status) => FfiConverterOptionalRoom.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_client_get_dm_room(
                uniffiClonePointer(),
                FfiConverterString.lower(userId),
                status)),
        clientExceptionErrorHandler);
  }

  Future<InviteAvatars?> getInviteAvatarsDisplayPolicy() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_client_get_invite_avatars_display_policy(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_rust_buffer,
      FfiConverterOptionalInviteAvatars.lift,
      clientExceptionErrorHandler,
    );
  }

  Future<int> getMaxMediaUploadSize() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_client_get_max_media_upload_size(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_u64,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_u64,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_u64,
      FfiConverterUInt64.lift,
      clientExceptionErrorHandler,
    );
  }

  Future<Uint8List> getMediaContent(
    MediaSource mediaSource,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_client_get_media_content(
        uniffiClonePointer(),
        MediaSource.lower(mediaSource),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_rust_buffer,
      FfiConverterUint8List.lift,
      clientExceptionErrorHandler,
    );
  }

  Future<MediaFileHandle> getMediaFile(
    MediaSource mediaSource,
    String? filename,
    String mimeType,
    bool useCache,
    String? tempDir,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_client_get_media_file(
        uniffiClonePointer(),
        MediaSource.lower(mediaSource),
        FfiConverterOptionalString.lower(filename),
        FfiConverterString.lower(mimeType),
        FfiConverterBool.lower(useCache),
        FfiConverterOptionalString.lower(tempDir),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_pointer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_pointer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_pointer,
      MediaFileHandle.lift,
      clientExceptionErrorHandler,
    );
  }

  Future<MediaPreviews?> getMediaPreviewDisplayPolicy() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_client_get_media_preview_display_policy(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_rust_buffer,
      FfiConverterOptionalMediaPreviews.lift,
      clientExceptionErrorHandler,
    );
  }

  Future<Uint8List> getMediaThumbnail(
    MediaSource mediaSource,
    int width,
    int height,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_client_get_media_thumbnail(
        uniffiClonePointer(),
        MediaSource.lower(mediaSource),
        width,
        height,
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_rust_buffer,
      FfiConverterUint8List.lift,
      clientExceptionErrorHandler,
    );
  }

  Future<NotificationSettings> getNotificationSettings() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_client_get_notification_settings(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_pointer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_pointer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_pointer,
      NotificationSettings.lift,
      null,
    );
  }

  Future<UserProfile> getProfile(
    String userId,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_client_get_profile(
        uniffiClonePointer(),
        FfiConverterString.lower(userId),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_rust_buffer,
      FfiConverterUserProfile.lift,
      clientExceptionErrorHandler,
    );
  }

  Future<List<String>> getRecentlyVisitedRooms() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_client_get_recently_visited_rooms(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_rust_buffer,
      FfiConverterSequenceString.lift,
      clientExceptionErrorHandler,
    );
  }

  Room? getRoom(
    String roomId,
  ) {
    return rustCall(
        (status) => FfiConverterOptionalRoom.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_client_get_room(
                uniffiClonePointer(),
                FfiConverterString.lower(roomId),
                status)),
        clientExceptionErrorHandler);
  }

  Future<RoomPreview> getRoomPreviewFromRoomAlias(
    String roomAlias,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_client_get_room_preview_from_room_alias(
        uniffiClonePointer(),
        FfiConverterString.lower(roomAlias),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_pointer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_pointer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_pointer,
      RoomPreview.lift,
      clientExceptionErrorHandler,
    );
  }

  Future<RoomPreview> getRoomPreviewFromRoomId(
    String roomId,
    List<String> viaServers,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_client_get_room_preview_from_room_id(
        uniffiClonePointer(),
        FfiConverterString.lower(roomId),
        FfiConverterSequenceString.lower(viaServers),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_pointer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_pointer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_pointer,
      RoomPreview.lift,
      clientExceptionErrorHandler,
    );
  }

  Future<SessionVerificationController> getSessionVerificationController() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_client_get_session_verification_controller(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_pointer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_pointer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_pointer,
      SessionVerificationController.lift,
      clientExceptionErrorHandler,
    );
  }

  Future<Uint8List> getUrl(
    String url,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance.uniffi_matrix_sdk_ffi_fn_method_client_get_url(
        uniffiClonePointer(),
        FfiConverterString.lower(url),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_rust_buffer,
      FfiConverterUint8List.lift,
      clientExceptionErrorHandler,
    );
  }

  String homeserver() {
    return rustCall(
        (status) => FfiConverterString.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_client_homeserver(
                uniffiClonePointer(), status)),
        null);
  }

  Future<HomeserverLoginDetails> homeserverLoginDetails() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_client_homeserver_login_details(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_pointer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_pointer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_pointer,
      HomeserverLoginDetails.lift,
      null,
    );
  }

  Future<void> ignoreUser(
    String userId,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_client_ignore_user(
        uniffiClonePointer(),
        FfiConverterString.lower(userId),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  Future<List<String>> ignoredUsers() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_client_ignored_users(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_rust_buffer,
      FfiConverterSequenceString.lift,
      clientExceptionErrorHandler,
    );
  }

  Future<bool> isLivekitRtcSupported() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_client_is_livekit_rtc_supported(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_i8,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_i8,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_i8,
      FfiConverterBool.lift,
      clientExceptionErrorHandler,
    );
  }

  Future<bool> isReportRoomApiSupported() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_client_is_report_room_api_supported(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_i8,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_i8,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_i8,
      FfiConverterBool.lift,
      clientExceptionErrorHandler,
    );
  }

  Future<bool> isRoomAliasAvailable(
    String alias,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_client_is_room_alias_available(
        uniffiClonePointer(),
        FfiConverterString.lower(alias),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_i8,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_i8,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_i8,
      FfiConverterBool.lift,
      clientExceptionErrorHandler,
    );
  }

  Future<Room> joinRoomById(
    String roomId,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_client_join_room_by_id(
        uniffiClonePointer(),
        FfiConverterString.lower(roomId),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_pointer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_pointer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_pointer,
      Room.lift,
      clientExceptionErrorHandler,
    );
  }

  Future<Room> joinRoomByIdOrAlias(
    String roomIdOrAlias,
    List<String> serverNames,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_client_join_room_by_id_or_alias(
        uniffiClonePointer(),
        FfiConverterString.lower(roomIdOrAlias),
        FfiConverterSequenceString.lower(serverNames),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_pointer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_pointer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_pointer,
      Room.lift,
      clientExceptionErrorHandler,
    );
  }

  Future<Room> knock(
    String roomIdOrAlias,
    String? reason,
    List<String> serverNames,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance.uniffi_matrix_sdk_ffi_fn_method_client_knock(
        uniffiClonePointer(),
        FfiConverterString.lower(roomIdOrAlias),
        FfiConverterOptionalString.lower(reason),
        FfiConverterSequenceString.lower(serverNames),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_pointer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_pointer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_pointer,
      Room.lift,
      clientExceptionErrorHandler,
    );
  }

  Future<void> login(
    String username,
    String password,
    String? initialDeviceName,
    String? deviceId,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance.uniffi_matrix_sdk_ffi_fn_method_client_login(
        uniffiClonePointer(),
        FfiConverterString.lower(username),
        FfiConverterString.lower(password),
        FfiConverterOptionalString.lower(initialDeviceName),
        FfiConverterOptionalString.lower(deviceId),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  Future<void> loginWithEmail(
    String email,
    String password,
    String? initialDeviceName,
    String? deviceId,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_client_login_with_email(
        uniffiClonePointer(),
        FfiConverterString.lower(email),
        FfiConverterString.lower(password),
        FfiConverterOptionalString.lower(initialDeviceName),
        FfiConverterOptionalString.lower(deviceId),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  Future<void> loginWithOidcCallback(
    String callbackUrl,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_client_login_with_oidc_callback(
        uniffiClonePointer(),
        FfiConverterString.lower(callbackUrl),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      oidcExceptionErrorHandler,
    );
  }

  Future<void> loginWithQrCode(
    QrCodeData qrCodeData,
    OidcConfiguration oidcConfiguration,
    QrLoginProgressListener progressListener,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_client_login_with_qr_code(
        uniffiClonePointer(),
        QrCodeData.lower(qrCodeData),
        FfiConverterOidcConfiguration.lower(oidcConfiguration),
        FfiConverterCallbackInterfaceQrLoginProgressListener.lower(
            progressListener),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      humanQrLoginExceptionErrorHandler,
    );
  }

  Future<void> logout() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance.uniffi_matrix_sdk_ffi_fn_method_client_logout(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  Future<NotificationClient> notificationClient(
    NotificationProcessSetup processSetup,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_client_notification_client(
        uniffiClonePointer(),
        FfiConverterNotificationProcessSetup.lower(processSetup),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_pointer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_pointer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_pointer,
      NotificationClient.lift,
      clientExceptionErrorHandler,
    );
  }

  TaskHandle observeAccountDataEvent(
    AccountDataEventType eventType,
    AccountDataListener listener,
  ) {
    return rustCall(
        (status) => TaskHandle.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_client_observe_account_data_event(
                uniffiClonePointer(),
                FfiConverterAccountDataEventType.lower(eventType),
                FfiConverterCallbackInterfaceAccountDataListener.lower(
                    listener),
                status)),
        null);
  }

  TaskHandle observeRoomAccountDataEvent(
    String roomId,
    RoomAccountDataEventType eventType,
    RoomAccountDataListener listener,
  ) {
    return rustCall(
        (status) => TaskHandle.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_client_observe_room_account_data_event(
                uniffiClonePointer(),
                FfiConverterString.lower(roomId),
                FfiConverterRoomAccountDataEventType.lower(eventType),
                FfiConverterCallbackInterfaceRoomAccountDataListener.lower(
                    listener),
                status)),
        clientExceptionErrorHandler);
  }

  Future<void> removeAvatar() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_client_remove_avatar(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  Future<void> resetServerInfo() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_client_reset_server_info(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  Future<ResolvedRoomAlias?> resolveRoomAlias(
    String roomAlias,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_client_resolve_room_alias(
        uniffiClonePointer(),
        FfiConverterString.lower(roomAlias),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_rust_buffer,
      FfiConverterOptionalResolvedRoomAlias.lift,
      clientExceptionErrorHandler,
    );
  }

  Future<void> restoreSession(
    Session session,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_client_restore_session(
        uniffiClonePointer(),
        FfiConverterSession.lower(session),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  Future<void> restoreSessionWith(
    Session session,
    RoomLoadSettings roomLoadSettings,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_client_restore_session_with(
        uniffiClonePointer(),
        FfiConverterSession.lower(session),
        FfiConverterRoomLoadSettings.lower(roomLoadSettings),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  Future<bool> roomAliasExists(
    String roomAlias,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_client_room_alias_exists(
        uniffiClonePointer(),
        FfiConverterString.lower(roomAlias),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_i8,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_i8,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_i8,
      FfiConverterBool.lift,
      clientExceptionErrorHandler,
    );
  }

  RoomDirectorySearch roomDirectorySearch() {
    return rustCall(
        (status) => RoomDirectorySearch.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_client_room_directory_search(
                uniffiClonePointer(), status)),
        null);
  }

  List<Room> rooms() {
    return rustCall(
        (status) => FfiConverterSequenceRoom.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_client_rooms(
                uniffiClonePointer(), status)),
        null);
  }

  Future<SearchUsersResults> searchUsers(
    String searchTerm,
    int limit,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_client_search_users(
        uniffiClonePointer(),
        FfiConverterString.lower(searchTerm),
        limit,
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_rust_buffer,
      FfiConverterSearchUsersResults.lift,
      clientExceptionErrorHandler,
    );
  }

  String? server() {
    return rustCall(
        (status) => FfiConverterOptionalString.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_client_server(
                uniffiClonePointer(), status)),
        null);
  }

  Session session() {
    return rustCall(
        (status) => FfiConverterSession.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_client_session(
                uniffiClonePointer(), status)),
        clientExceptionErrorHandler);
  }

  Future<void> setAccountData(
    String eventType,
    String content,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_client_set_account_data(
        uniffiClonePointer(),
        FfiConverterString.lower(eventType),
        FfiConverterString.lower(content),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  TaskHandle? setDelegate(
    ClientDelegate? delegate,
  ) {
    return rustCall(
        (status) => FfiConverterOptionalTaskHandle.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_client_set_delegate(
                uniffiClonePointer(),
                FfiConverterOptionalCallbackInterfaceClientDelegate.lower(
                    delegate),
                status)),
        clientExceptionErrorHandler);
  }

  Future<void> setDisplayName(
    String name,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_client_set_display_name(
        uniffiClonePointer(),
        FfiConverterString.lower(name),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  Future<void> setInviteAvatarsDisplayPolicy(
    InviteAvatars policy,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_client_set_invite_avatars_display_policy(
        uniffiClonePointer(),
        FfiConverterInviteAvatars.lower(policy),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  Future<void> setMediaPreviewDisplayPolicy(
    MediaPreviews policy,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_client_set_media_preview_display_policy(
        uniffiClonePointer(),
        FfiConverterMediaPreviews.lower(policy),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  Future<void> setMediaRetentionPolicy(
    MediaRetentionPolicy policy,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_client_set_media_retention_policy(
        uniffiClonePointer(),
        FfiConverterMediaRetentionPolicy.lower(policy),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  Future<void> setPusher(
    PusherIdentifiers identifiers,
    PusherKind kind,
    String appDisplayName,
    String deviceDisplayName,
    String? profileTag,
    String lang,
  ) {
    return uniffiRustCallAsync(
      () =>
          _UniffiLib.instance.uniffi_matrix_sdk_ffi_fn_method_client_set_pusher(
        uniffiClonePointer(),
        FfiConverterPusherIdentifiers.lower(identifiers),
        FfiConverterPusherKind.lower(kind),
        FfiConverterString.lower(appDisplayName),
        FfiConverterString.lower(deviceDisplayName),
        FfiConverterOptionalString.lower(profileTag),
        FfiConverterString.lower(lang),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  Future<void> setUtdDelegate(
    UnableToDecryptDelegate utdDelegate,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_client_set_utd_delegate(
        uniffiClonePointer(),
        FfiConverterCallbackInterfaceUnableToDecryptDelegate.lower(utdDelegate),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  SlidingSyncVersion slidingSyncVersion() {
    return rustCall(
        (status) => FfiConverterSlidingSyncVersion.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_client_sliding_sync_version(
                uniffiClonePointer(), status)),
        null);
  }

  Future<SsoHandler> startSsoLogin(
    String redirectUrl,
    String? idpId,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_client_start_sso_login(
        uniffiClonePointer(),
        FfiConverterString.lower(redirectUrl),
        FfiConverterOptionalString.lower(idpId),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_pointer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_pointer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_pointer,
      SsoHandler.lift,
      ssoExceptionErrorHandler,
    );
  }

  TaskHandle subscribeToIgnoredUsers(
    IgnoredUsersListener listener,
  ) {
    return rustCall(
        (status) => TaskHandle.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_client_subscribe_to_ignored_users(
                uniffiClonePointer(),
                FfiConverterCallbackInterfaceIgnoredUsersListener.lower(
                    listener),
                status)),
        null);
  }

  Future<TaskHandle> subscribeToMediaPreviewConfig(
    MediaPreviewConfigListener listener,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_client_subscribe_to_media_preview_config(
        uniffiClonePointer(),
        FfiConverterCallbackInterfaceMediaPreviewConfigListener.lower(listener),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_pointer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_pointer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_pointer,
      TaskHandle.lift,
      clientExceptionErrorHandler,
    );
  }

  Future<TaskHandle> subscribeToRoomInfo(
    String roomId,
    RoomInfoListener listener,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_client_subscribe_to_room_info(
        uniffiClonePointer(),
        FfiConverterString.lower(roomId),
        FfiConverterCallbackInterfaceRoomInfoListener.lower(listener),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_pointer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_pointer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_pointer,
      TaskHandle.lift,
      clientExceptionErrorHandler,
    );
  }

  TaskHandle subscribeToSendQueueStatus(
    SendQueueRoomErrorListener listener,
  ) {
    return rustCall(
        (status) => TaskHandle.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_client_subscribe_to_send_queue_status(
                uniffiClonePointer(),
                FfiConverterCallbackInterfaceSendQueueRoomErrorListener.lower(
                    listener),
                status)),
        null);
  }

  SyncServiceBuilder syncService() {
    return rustCall(
        (status) => SyncServiceBuilder.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_client_sync_service(
                uniffiClonePointer(), status)),
        null);
  }

  Future<void> trackRecentlyVisitedRoom(
    String room,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_client_track_recently_visited_room(
        uniffiClonePointer(),
        FfiConverterString.lower(room),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  Future<void> unignoreUser(
    String userId,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_client_unignore_user(
        uniffiClonePointer(),
        FfiConverterString.lower(userId),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  Future<void> uploadAvatar(
    String mimeType,
    Uint8List data,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_client_upload_avatar(
        uniffiClonePointer(),
        FfiConverterString.lower(mimeType),
        FfiConverterUint8List.lower(data),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  Future<String> uploadMedia(
    String mimeType,
    Uint8List data,
    ProgressWatcher? progressWatcher,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_client_upload_media(
        uniffiClonePointer(),
        FfiConverterString.lower(mimeType),
        FfiConverterUint8List.lower(data),
        FfiConverterOptionalCallbackInterfaceProgressWatcher.lower(
            progressWatcher),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_rust_buffer,
      FfiConverterString.lift,
      clientExceptionErrorHandler,
    );
  }

  Future<OAuthAuthorizationData> urlForOidc(
    OidcConfiguration oidcConfiguration,
    OidcPrompt? prompt,
    String? loginHint,
    String? deviceId,
    List<String>? additionalScopes,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_client_url_for_oidc(
        uniffiClonePointer(),
        FfiConverterOidcConfiguration.lower(oidcConfiguration),
        FfiConverterOptionalOidcPrompt.lower(prompt),
        FfiConverterOptionalString.lower(loginHint),
        FfiConverterOptionalString.lower(deviceId),
        FfiConverterOptionalSequenceString.lower(additionalScopes),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_pointer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_pointer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_pointer,
      OAuthAuthorizationData.lift,
      oidcExceptionErrorHandler,
    );
  }

  String userId() {
    return rustCall(
        (status) => FfiConverterString.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_client_user_id(
                uniffiClonePointer(), status)),
        clientExceptionErrorHandler);
  }

  String userIdServerName() {
    return rustCall(
        (status) => FfiConverterString.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_client_user_id_server_name(
                uniffiClonePointer(), status)),
        clientExceptionErrorHandler);
  }
}

final _ClientBuilderFinalizer = Finalizer<Pointer<Void>>((ptr) {
  rustCall((status) => _UniffiLib.instance
      .uniffi_matrix_sdk_ffi_fn_free_clientbuilder(ptr, status));
});

class FfiConverterCollectStrategy {
  static CollectStrategy lift(RustBuffer buffer) {
    return FfiConverterCollectStrategy.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<CollectStrategy> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    switch (index) {
      case 1:
        return LiftRetVal(CollectStrategy.allDevices, 4);
      case 2:
        return LiftRetVal(CollectStrategy.errorOnVerifiedUserProblem, 4);
      case 3:
        return LiftRetVal(CollectStrategy.identityBasedStrategy, 4);
      case 4:
        return LiftRetVal(CollectStrategy.onlyTrustedDevices, 4);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(CollectStrategy input) {
    return toRustBuffer(createUint8ListFromInt(input.index + 1));
  }

  static int allocationSize(CollectStrategy value) {
    return 4;
  }

  static int write(CollectStrategy value, Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, value.index + 1);
    return 4;
  }
}

class ClientBuilder {
  late final Pointer<Void> _ptr;

  ClientBuilder._(this._ptr) {
    _ClientBuilderFinalizer.attach(this, _ptr, detach: this);
  }

  ClientBuilder()
      : _ptr = rustCall(
            (status) => _UniffiLib.instance
                .uniffi_matrix_sdk_ffi_fn_constructor_clientbuilder_new(status),
            null) {
    _ClientBuilderFinalizer.attach(this, _ptr, detach: this);
  }

  factory ClientBuilder.lift(Pointer<Void> ptr) {
    return ClientBuilder._(ptr);
  }

  static Pointer<Void> lower(ClientBuilder value) {
    return value.uniffiClonePointer();
  }

  Pointer<Void> uniffiClonePointer() {
    return rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_clone_clientbuilder(_ptr, status));
  }

  static int allocationSize(ClientBuilder value) {
    return 8;
  }

  static LiftRetVal<ClientBuilder> read(Uint8List buf) {
    final handle = buf.buffer.asByteData(buf.offsetInBytes).getInt64(0);
    final pointer = Pointer<Void>.fromAddress(handle);
    return LiftRetVal(ClientBuilder.lift(pointer), 8);
  }

  static int write(ClientBuilder value, Uint8List buf) {
    final handle = lower(value);
    buf.buffer.asByteData(buf.offsetInBytes).setInt64(0, handle.address);
    return 8;
  }

  void dispose() {
    _ClientBuilderFinalizer.detach(this);
    rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_free_clientbuilder(_ptr, status));
  }

  ClientBuilder addRootCertificates(
    List<Uint8List> certificates,
  ) {
    return rustCall(
        (status) => ClientBuilder.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_clientbuilder_add_root_certificates(
                uniffiClonePointer(),
                FfiConverterSequenceUint8List.lower(certificates),
                status)),
        null);
  }

  ClientBuilder autoEnableBackups(
    bool autoEnableBackups,
  ) {
    return rustCall(
        (status) => ClientBuilder.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_clientbuilder_auto_enable_backups(
                uniffiClonePointer(),
                FfiConverterBool.lower(autoEnableBackups),
                status)),
        null);
  }

  ClientBuilder autoEnableCrossSigning(
    bool autoEnableCrossSigning,
  ) {
    return rustCall(
        (status) => ClientBuilder.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_clientbuilder_auto_enable_cross_signing(
                uniffiClonePointer(),
                FfiConverterBool.lower(autoEnableCrossSigning),
                status)),
        null);
  }

  ClientBuilder backupDownloadStrategy(
    BackupDownloadStrategy backupDownloadStrategy,
  ) {
    return rustCall(
        (status) => ClientBuilder.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_clientbuilder_backup_download_strategy(
                uniffiClonePointer(),
                FfiConverterBackupDownloadStrategy.lower(
                    backupDownloadStrategy),
                status)),
        null);
  }

  Future<Client> build() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_clientbuilder_build(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_pointer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_pointer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_pointer,
      Client.lift,
      clientBuildExceptionErrorHandler,
    );
  }

  ClientBuilder crossProcessStoreLocksHolderName(
    String holderName,
  ) {
    return rustCall(
        (status) => ClientBuilder.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_clientbuilder_cross_process_store_locks_holder_name(
                uniffiClonePointer(),
                FfiConverterString.lower(holderName),
                status)),
        null);
  }

  ClientBuilder decryptionSettings(
    DecryptionSettings decryptionSettings,
  ) {
    return rustCall(
        (status) => ClientBuilder.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_clientbuilder_decryption_settings(
                uniffiClonePointer(),
                FfiConverterDecryptionSettings.lower(decryptionSettings),
                status)),
        null);
  }

  ClientBuilder disableAutomaticTokenRefresh() {
    return rustCall(
        (status) => ClientBuilder.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_clientbuilder_disable_automatic_token_refresh(
                uniffiClonePointer(), status)),
        null);
  }

  ClientBuilder disableBuiltInRootCertificates() {
    return rustCall(
        (status) => ClientBuilder.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_clientbuilder_disable_built_in_root_certificates(
                uniffiClonePointer(), status)),
        null);
  }

  ClientBuilder disableSslVerification() {
    return rustCall(
        (status) => ClientBuilder.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_clientbuilder_disable_ssl_verification(
                uniffiClonePointer(), status)),
        null);
  }

  ClientBuilder enableOidcRefreshLock() {
    return rustCall(
        (status) => ClientBuilder.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_clientbuilder_enable_oidc_refresh_lock(
                uniffiClonePointer(), status)),
        null);
  }

  ClientBuilder enableShareHistoryOnInvite(
    bool enableShareHistoryOnInvite,
  ) {
    return rustCall(
        (status) => ClientBuilder.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_clientbuilder_enable_share_history_on_invite(
                uniffiClonePointer(),
                FfiConverterBool.lower(enableShareHistoryOnInvite),
                status)),
        null);
  }

  ClientBuilder homeserverUrl(
    String url,
  ) {
    return rustCall(
        (status) => ClientBuilder.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_clientbuilder_homeserver_url(
                uniffiClonePointer(), FfiConverterString.lower(url), status)),
        null);
  }

  ClientBuilder proxy(
    String url,
  ) {
    return rustCall(
        (status) => ClientBuilder.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_clientbuilder_proxy(
                uniffiClonePointer(), FfiConverterString.lower(url), status)),
        null);
  }

  ClientBuilder requestConfig(
    RequestConfig config,
  ) {
    return rustCall(
        (status) => ClientBuilder.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_clientbuilder_request_config(
                uniffiClonePointer(),
                FfiConverterRequestConfig.lower(config),
                status)),
        null);
  }

  ClientBuilder roomKeyRecipientStrategy(
    CollectStrategy strategy,
  ) {
    return rustCall(
        (status) => ClientBuilder.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_clientbuilder_room_key_recipient_strategy(
                uniffiClonePointer(),
                FfiConverterCollectStrategy.lower(strategy),
                status)),
        null);
  }

  ClientBuilder serverName(
    String serverName,
  ) {
    return rustCall(
        (status) => ClientBuilder.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_clientbuilder_server_name(
                uniffiClonePointer(),
                FfiConverterString.lower(serverName),
                status)),
        null);
  }

  ClientBuilder serverNameOrHomeserverUrl(
    String serverNameOrUrl,
  ) {
    return rustCall(
        (status) => ClientBuilder.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_clientbuilder_server_name_or_homeserver_url(
                uniffiClonePointer(),
                FfiConverterString.lower(serverNameOrUrl),
                status)),
        null);
  }

  ClientBuilder sessionCacheSize(
    int? cacheSize,
  ) {
    return rustCall(
        (status) => ClientBuilder.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_clientbuilder_session_cache_size(
                uniffiClonePointer(),
                FfiConverterOptionalUInt32.lower(cacheSize),
                status)),
        null);
  }

  ClientBuilder sessionJournalSizeLimit(
    int? limit,
  ) {
    return rustCall(
        (status) => ClientBuilder.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_clientbuilder_session_journal_size_limit(
                uniffiClonePointer(),
                FfiConverterOptionalUInt32.lower(limit),
                status)),
        null);
  }

  ClientBuilder sessionPassphrase(
    String? passphrase,
  ) {
    return rustCall(
        (status) => ClientBuilder.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_clientbuilder_session_passphrase(
                uniffiClonePointer(),
                FfiConverterOptionalString.lower(passphrase),
                status)),
        null);
  }

  ClientBuilder sessionPaths(
    String dataPath,
    String cachePath,
  ) {
    return rustCall(
        (status) => ClientBuilder.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_clientbuilder_session_paths(
                uniffiClonePointer(),
                FfiConverterString.lower(dataPath),
                FfiConverterString.lower(cachePath),
                status)),
        null);
  }

  ClientBuilder sessionPoolMaxSize(
    int? poolMaxSize,
  ) {
    return rustCall(
        (status) => ClientBuilder.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_clientbuilder_session_pool_max_size(
                uniffiClonePointer(),
                FfiConverterOptionalUInt32.lower(poolMaxSize),
                status)),
        null);
  }

  ClientBuilder setSessionDelegate(
    ClientSessionDelegate sessionDelegate,
  ) {
    return rustCall(
        (status) => ClientBuilder.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_clientbuilder_set_session_delegate(
                uniffiClonePointer(),
                FfiConverterCallbackInterfaceClientSessionDelegate.lower(
                    sessionDelegate),
                status)),
        null);
  }

  ClientBuilder slidingSyncVersionBuilder(
    SlidingSyncVersionBuilder versionBuilder,
  ) {
    return rustCall(
        (status) => ClientBuilder.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_clientbuilder_sliding_sync_version_builder(
                uniffiClonePointer(),
                FfiConverterSlidingSyncVersionBuilder.lower(versionBuilder),
                status)),
        null);
  }

  ClientBuilder systemIsMemoryConstrained() {
    return rustCall(
        (status) => ClientBuilder.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_clientbuilder_system_is_memory_constrained(
                uniffiClonePointer(), status)),
        null);
  }

  ClientBuilder threadsEnabled(
    bool enabled,
    bool threadSubscriptions,
  ) {
    return rustCall(
        (status) => ClientBuilder.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_clientbuilder_threads_enabled(
                uniffiClonePointer(),
                FfiConverterBool.lower(enabled),
                FfiConverterBool.lower(threadSubscriptions),
                status)),
        null);
  }

  ClientBuilder userAgent(
    String userAgent,
  ) {
    return rustCall(
        (status) => ClientBuilder.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_clientbuilder_user_agent(
                uniffiClonePointer(),
                FfiConverterString.lower(userAgent),
                status)),
        null);
  }

  ClientBuilder username(
    String username,
  ) {
    return rustCall(
        (status) => ClientBuilder.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_clientbuilder_username(
                uniffiClonePointer(),
                FfiConverterString.lower(username),
                status)),
        null);
  }
}

final _EncryptionFinalizer = Finalizer<Pointer<Void>>((ptr) {
  rustCall((status) => _UniffiLib.instance
      .uniffi_matrix_sdk_ffi_fn_free_encryption(ptr, status));
});

class Encryption {
  late final Pointer<Void> _ptr;

  Encryption._(this._ptr) {
    _EncryptionFinalizer.attach(this, _ptr, detach: this);
  }

  factory Encryption.lift(Pointer<Void> ptr) {
    return Encryption._(ptr);
  }

  static Pointer<Void> lower(Encryption value) {
    return value.uniffiClonePointer();
  }

  Pointer<Void> uniffiClonePointer() {
    return rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_clone_encryption(_ptr, status));
  }

  static int allocationSize(Encryption value) {
    return 8;
  }

  static LiftRetVal<Encryption> read(Uint8List buf) {
    final handle = buf.buffer.asByteData(buf.offsetInBytes).getInt64(0);
    final pointer = Pointer<Void>.fromAddress(handle);
    return LiftRetVal(Encryption.lift(pointer), 8);
  }

  static int write(Encryption value, Uint8List buf) {
    final handle = lower(value);
    buf.buffer.asByteData(buf.offsetInBytes).setInt64(0, handle.address);
    return 8;
  }

  void dispose() {
    _EncryptionFinalizer.detach(this);
    rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_free_encryption(_ptr, status));
  }

  Future<bool> backupExistsOnServer() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_encryption_backup_exists_on_server(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_i8,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_i8,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_i8,
      FfiConverterBool.lift,
      clientExceptionErrorHandler,
    );
  }

  BackupState backupState() {
    return rustCall(
        (status) => FfiConverterBackupState.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_encryption_backup_state(
                uniffiClonePointer(), status)),
        null);
  }

  TaskHandle backupStateListener(
    BackupStateListener listener,
  ) {
    return rustCall(
        (status) => TaskHandle.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_encryption_backup_state_listener(
                uniffiClonePointer(),
                FfiConverterCallbackInterfaceBackupStateListener.lower(
                    listener),
                status)),
        null);
  }

  Future<String?> curve25519Key() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_encryption_curve25519_key(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_rust_buffer,
      FfiConverterOptionalString.lift,
      null,
    );
  }

  Future<void> disableRecovery() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_encryption_disable_recovery(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      recoveryExceptionErrorHandler,
    );
  }

  Future<String?> ed25519Key() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_encryption_ed25519_key(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_rust_buffer,
      FfiConverterOptionalString.lift,
      null,
    );
  }

  Future<void> enableBackups() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_encryption_enable_backups(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      recoveryExceptionErrorHandler,
    );
  }

  Future<String> enableRecovery(
    bool waitForBackupsToUpload,
    String? passphrase,
    EnableRecoveryProgressListener progressListener,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_encryption_enable_recovery(
        uniffiClonePointer(),
        FfiConverterBool.lower(waitForBackupsToUpload),
        FfiConverterOptionalString.lower(passphrase),
        FfiConverterCallbackInterfaceEnableRecoveryProgressListener.lower(
            progressListener),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_rust_buffer,
      FfiConverterString.lift,
      recoveryExceptionErrorHandler,
    );
  }

  Future<bool> isLastDevice() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_encryption_is_last_device(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_i8,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_i8,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_i8,
      FfiConverterBool.lift,
      recoveryExceptionErrorHandler,
    );
  }

  Future<void> recover(
    String recoveryKey,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_encryption_recover(
        uniffiClonePointer(),
        FfiConverterString.lower(recoveryKey),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      recoveryExceptionErrorHandler,
    );
  }

  Future<String> recoverAndReset(
    String oldRecoveryKey,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_encryption_recover_and_reset(
        uniffiClonePointer(),
        FfiConverterString.lower(oldRecoveryKey),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_rust_buffer,
      FfiConverterString.lift,
      recoveryExceptionErrorHandler,
    );
  }

  RecoveryState recoveryState() {
    return rustCall(
        (status) => FfiConverterRecoveryState.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_encryption_recovery_state(
                uniffiClonePointer(), status)),
        null);
  }

  TaskHandle recoveryStateListener(
    RecoveryStateListener listener,
  ) {
    return rustCall(
        (status) => TaskHandle.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_encryption_recovery_state_listener(
                uniffiClonePointer(),
                FfiConverterCallbackInterfaceRecoveryStateListener.lower(
                    listener),
                status)),
        null);
  }

  Future<IdentityResetHandle?> resetIdentity() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_encryption_reset_identity(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_rust_buffer,
      FfiConverterOptionalIdentityResetHandle.lift,
      clientExceptionErrorHandler,
    );
  }

  Future<String> resetRecoveryKey() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_encryption_reset_recovery_key(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_rust_buffer,
      FfiConverterString.lift,
      recoveryExceptionErrorHandler,
    );
  }

  Future<UserIdentity?> userIdentity(
    String userId,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_encryption_user_identity(
        uniffiClonePointer(),
        FfiConverterString.lower(userId),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_rust_buffer,
      FfiConverterOptionalUserIdentity.lift,
      clientExceptionErrorHandler,
    );
  }

  VerificationState verificationState() {
    return rustCall(
        (status) => FfiConverterVerificationState.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_encryption_verification_state(
                uniffiClonePointer(), status)),
        null);
  }

  TaskHandle verificationStateListener(
    VerificationStateListener listener,
  ) {
    return rustCall(
        (status) => TaskHandle.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_encryption_verification_state_listener(
                uniffiClonePointer(),
                FfiConverterCallbackInterfaceVerificationStateListener.lower(
                    listener),
                status)),
        null);
  }

  Future<void> waitForBackupUploadSteadyState(
    BackupSteadyStateListener? progressListener,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_encryption_wait_for_backup_upload_steady_state(
        uniffiClonePointer(),
        FfiConverterOptionalCallbackInterfaceBackupSteadyStateListener.lower(
            progressListener),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      steadyStateExceptionErrorHandler,
    );
  }

  Future<void> waitForE2eeInitializationTasks() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_encryption_wait_for_e2ee_initialization_tasks(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      null,
    );
  }
}

final _HomeserverLoginDetailsFinalizer = Finalizer<Pointer<Void>>((ptr) {
  rustCall((status) => _UniffiLib.instance
      .uniffi_matrix_sdk_ffi_fn_free_homeserverlogindetails(ptr, status));
});

class HomeserverLoginDetails {
  late final Pointer<Void> _ptr;

  HomeserverLoginDetails._(this._ptr) {
    _HomeserverLoginDetailsFinalizer.attach(this, _ptr, detach: this);
  }

  factory HomeserverLoginDetails.lift(Pointer<Void> ptr) {
    return HomeserverLoginDetails._(ptr);
  }

  static Pointer<Void> lower(HomeserverLoginDetails value) {
    return value.uniffiClonePointer();
  }

  Pointer<Void> uniffiClonePointer() {
    return rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_clone_homeserverlogindetails(_ptr, status));
  }

  static int allocationSize(HomeserverLoginDetails value) {
    return 8;
  }

  static LiftRetVal<HomeserverLoginDetails> read(Uint8List buf) {
    final handle = buf.buffer.asByteData(buf.offsetInBytes).getInt64(0);
    final pointer = Pointer<Void>.fromAddress(handle);
    return LiftRetVal(HomeserverLoginDetails.lift(pointer), 8);
  }

  static int write(HomeserverLoginDetails value, Uint8List buf) {
    final handle = lower(value);
    buf.buffer.asByteData(buf.offsetInBytes).setInt64(0, handle.address);
    return 8;
  }

  void dispose() {
    _HomeserverLoginDetailsFinalizer.detach(this);
    rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_free_homeserverlogindetails(_ptr, status));
  }

  SlidingSyncVersion slidingSyncVersion() {
    return rustCall(
        (status) => FfiConverterSlidingSyncVersion.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_homeserverlogindetails_sliding_sync_version(
                uniffiClonePointer(), status)),
        null);
  }

  List<OidcPrompt> supportedOidcPrompts() {
    return rustCall(
        (status) => FfiConverterSequenceOidcPrompt.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_homeserverlogindetails_supported_oidc_prompts(
                uniffiClonePointer(), status)),
        null);
  }

  bool supportsOidcLogin() {
    return rustCall(
        (status) => FfiConverterBool.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_homeserverlogindetails_supports_oidc_login(
                uniffiClonePointer(), status)),
        null);
  }

  bool supportsPasswordLogin() {
    return rustCall(
        (status) => FfiConverterBool.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_homeserverlogindetails_supports_password_login(
                uniffiClonePointer(), status)),
        null);
  }

  bool supportsSsoLogin() {
    return rustCall(
        (status) => FfiConverterBool.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_homeserverlogindetails_supports_sso_login(
                uniffiClonePointer(), status)),
        null);
  }

  String url() {
    return rustCall(
        (status) => FfiConverterString.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_homeserverlogindetails_url(
                uniffiClonePointer(), status)),
        null);
  }
}

final _IdentityResetHandleFinalizer = Finalizer<Pointer<Void>>((ptr) {
  rustCall((status) => _UniffiLib.instance
      .uniffi_matrix_sdk_ffi_fn_free_identityresethandle(ptr, status));
});

class IdentityResetHandle {
  late final Pointer<Void> _ptr;

  IdentityResetHandle._(this._ptr) {
    _IdentityResetHandleFinalizer.attach(this, _ptr, detach: this);
  }

  factory IdentityResetHandle.lift(Pointer<Void> ptr) {
    return IdentityResetHandle._(ptr);
  }

  static Pointer<Void> lower(IdentityResetHandle value) {
    return value.uniffiClonePointer();
  }

  Pointer<Void> uniffiClonePointer() {
    return rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_clone_identityresethandle(_ptr, status));
  }

  static int allocationSize(IdentityResetHandle value) {
    return 8;
  }

  static LiftRetVal<IdentityResetHandle> read(Uint8List buf) {
    final handle = buf.buffer.asByteData(buf.offsetInBytes).getInt64(0);
    final pointer = Pointer<Void>.fromAddress(handle);
    return LiftRetVal(IdentityResetHandle.lift(pointer), 8);
  }

  static int write(IdentityResetHandle value, Uint8List buf) {
    final handle = lower(value);
    buf.buffer.asByteData(buf.offsetInBytes).setInt64(0, handle.address);
    return 8;
  }

  void dispose() {
    _IdentityResetHandleFinalizer.detach(this);
    rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_free_identityresethandle(_ptr, status));
  }

  CrossSigningResetAuthType authType() {
    return rustCall(
        (status) => FfiConverterCrossSigningResetAuthType.lift(_UniffiLib
            .instance
            .uniffi_matrix_sdk_ffi_fn_method_identityresethandle_auth_type(
                uniffiClonePointer(), status)),
        null);
  }

  Future<void> cancel() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_identityresethandle_cancel(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      null,
    );
  }

  Future<void> reset(
    AuthData? auth,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_identityresethandle_reset(
        uniffiClonePointer(),
        FfiConverterOptionalAuthData.lower(auth),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }
}

final _InReplyToDetailsFinalizer = Finalizer<Pointer<Void>>((ptr) {
  rustCall((status) => _UniffiLib.instance
      .uniffi_matrix_sdk_ffi_fn_free_inreplytodetails(ptr, status));
});

class InReplyToDetails {
  late final Pointer<Void> _ptr;

  InReplyToDetails._(this._ptr) {
    _InReplyToDetailsFinalizer.attach(this, _ptr, detach: this);
  }

  factory InReplyToDetails.lift(Pointer<Void> ptr) {
    return InReplyToDetails._(ptr);
  }

  static Pointer<Void> lower(InReplyToDetails value) {
    return value.uniffiClonePointer();
  }

  Pointer<Void> uniffiClonePointer() {
    return rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_clone_inreplytodetails(_ptr, status));
  }

  static int allocationSize(InReplyToDetails value) {
    return 8;
  }

  static LiftRetVal<InReplyToDetails> read(Uint8List buf) {
    final handle = buf.buffer.asByteData(buf.offsetInBytes).getInt64(0);
    final pointer = Pointer<Void>.fromAddress(handle);
    return LiftRetVal(InReplyToDetails.lift(pointer), 8);
  }

  static int write(InReplyToDetails value, Uint8List buf) {
    final handle = lower(value);
    buf.buffer.asByteData(buf.offsetInBytes).setInt64(0, handle.address);
    return 8;
  }

  void dispose() {
    _InReplyToDetailsFinalizer.detach(this);
    rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_free_inreplytodetails(_ptr, status));
  }

  EmbeddedEventDetails event() {
    return rustCall(
        (status) => FfiConverterEmbeddedEventDetails.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_inreplytodetails_event(
                uniffiClonePointer(), status)),
        null);
  }

  String eventId() {
    return rustCall(
        (status) => FfiConverterString.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_inreplytodetails_event_id(
                uniffiClonePointer(), status)),
        null);
  }
}

final _KnockRequestActionsFinalizer = Finalizer<Pointer<Void>>((ptr) {
  rustCall((status) => _UniffiLib.instance
      .uniffi_matrix_sdk_ffi_fn_free_knockrequestactions(ptr, status));
});

class KnockRequestActions {
  late final Pointer<Void> _ptr;

  KnockRequestActions._(this._ptr) {
    _KnockRequestActionsFinalizer.attach(this, _ptr, detach: this);
  }

  factory KnockRequestActions.lift(Pointer<Void> ptr) {
    return KnockRequestActions._(ptr);
  }

  static Pointer<Void> lower(KnockRequestActions value) {
    return value.uniffiClonePointer();
  }

  Pointer<Void> uniffiClonePointer() {
    return rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_clone_knockrequestactions(_ptr, status));
  }

  static int allocationSize(KnockRequestActions value) {
    return 8;
  }

  static LiftRetVal<KnockRequestActions> read(Uint8List buf) {
    final handle = buf.buffer.asByteData(buf.offsetInBytes).getInt64(0);
    final pointer = Pointer<Void>.fromAddress(handle);
    return LiftRetVal(KnockRequestActions.lift(pointer), 8);
  }

  static int write(KnockRequestActions value, Uint8List buf) {
    final handle = lower(value);
    buf.buffer.asByteData(buf.offsetInBytes).setInt64(0, handle.address);
    return 8;
  }

  void dispose() {
    _KnockRequestActionsFinalizer.detach(this);
    rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_free_knockrequestactions(_ptr, status));
  }

  Future<void> accept() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_knockrequestactions_accept(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  Future<void> decline(
    String? reason,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_knockrequestactions_decline(
        uniffiClonePointer(),
        FfiConverterOptionalString.lower(reason),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  Future<void> declineAndBan(
    String? reason,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_knockrequestactions_decline_and_ban(
        uniffiClonePointer(),
        FfiConverterOptionalString.lower(reason),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  Future<void> markAsSeen() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_knockrequestactions_mark_as_seen(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }
}

final _LazyTimelineItemProviderFinalizer = Finalizer<Pointer<Void>>((ptr) {
  rustCall((status) => _UniffiLib.instance
      .uniffi_matrix_sdk_ffi_fn_free_lazytimelineitemprovider(ptr, status));
});

class LazyTimelineItemProvider {
  late final Pointer<Void> _ptr;

  LazyTimelineItemProvider._(this._ptr) {
    _LazyTimelineItemProviderFinalizer.attach(this, _ptr, detach: this);
  }

  factory LazyTimelineItemProvider.lift(Pointer<Void> ptr) {
    return LazyTimelineItemProvider._(ptr);
  }

  static Pointer<Void> lower(LazyTimelineItemProvider value) {
    return value.uniffiClonePointer();
  }

  Pointer<Void> uniffiClonePointer() {
    return rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_clone_lazytimelineitemprovider(_ptr, status));
  }

  static int allocationSize(LazyTimelineItemProvider value) {
    return 8;
  }

  static LiftRetVal<LazyTimelineItemProvider> read(Uint8List buf) {
    final handle = buf.buffer.asByteData(buf.offsetInBytes).getInt64(0);
    final pointer = Pointer<Void>.fromAddress(handle);
    return LiftRetVal(LazyTimelineItemProvider.lift(pointer), 8);
  }

  static int write(LazyTimelineItemProvider value, Uint8List buf) {
    final handle = lower(value);
    buf.buffer.asByteData(buf.offsetInBytes).setInt64(0, handle.address);
    return 8;
  }

  void dispose() {
    _LazyTimelineItemProviderFinalizer.detach(this);
    rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_free_lazytimelineitemprovider(_ptr, status));
  }

  bool containsOnlyEmojis() {
    return rustCall(
        (status) => FfiConverterBool.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_lazytimelineitemprovider_contains_only_emojis(
                uniffiClonePointer(), status)),
        null);
  }

  EventTimelineItemDebugInfo debugInfo() {
    return rustCall(
        (status) => FfiConverterEventTimelineItemDebugInfo.lift(_UniffiLib
            .instance
            .uniffi_matrix_sdk_ffi_fn_method_lazytimelineitemprovider_debug_info(
                uniffiClonePointer(), status)),
        null);
  }

  SendHandle? getSendHandle() {
    return rustCall(
        (status) => FfiConverterOptionalSendHandle.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_lazytimelineitemprovider_get_send_handle(
                uniffiClonePointer(), status)),
        null);
  }

  ShieldState? getShields(
    bool strict,
  ) {
    return rustCall(
        (status) => FfiConverterOptionalShieldState.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_lazytimelineitemprovider_get_shields(
                uniffiClonePointer(), FfiConverterBool.lower(strict), status)),
        null);
  }
}

final _MediaFileHandleFinalizer = Finalizer<Pointer<Void>>((ptr) {
  rustCall((status) => _UniffiLib.instance
      .uniffi_matrix_sdk_ffi_fn_free_mediafilehandle(ptr, status));
});

class MediaFileHandle {
  late final Pointer<Void> _ptr;

  MediaFileHandle._(this._ptr) {
    _MediaFileHandleFinalizer.attach(this, _ptr, detach: this);
  }

  factory MediaFileHandle.lift(Pointer<Void> ptr) {
    return MediaFileHandle._(ptr);
  }

  static Pointer<Void> lower(MediaFileHandle value) {
    return value.uniffiClonePointer();
  }

  Pointer<Void> uniffiClonePointer() {
    return rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_clone_mediafilehandle(_ptr, status));
  }

  static int allocationSize(MediaFileHandle value) {
    return 8;
  }

  static LiftRetVal<MediaFileHandle> read(Uint8List buf) {
    final handle = buf.buffer.asByteData(buf.offsetInBytes).getInt64(0);
    final pointer = Pointer<Void>.fromAddress(handle);
    return LiftRetVal(MediaFileHandle.lift(pointer), 8);
  }

  static int write(MediaFileHandle value, Uint8List buf) {
    final handle = lower(value);
    buf.buffer.asByteData(buf.offsetInBytes).setInt64(0, handle.address);
    return 8;
  }

  void dispose() {
    _MediaFileHandleFinalizer.detach(this);
    rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_free_mediafilehandle(_ptr, status));
  }

  String path() {
    return rustCall(
        (status) => FfiConverterString.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_mediafilehandle_path(
                uniffiClonePointer(), status)),
        clientExceptionErrorHandler);
  }

  bool persist(
    String path,
  ) {
    return rustCall(
        (status) => FfiConverterBool.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_mediafilehandle_persist(
                uniffiClonePointer(), FfiConverterString.lower(path), status)),
        clientExceptionErrorHandler);
  }
}

final _MediaSourceFinalizer = Finalizer<Pointer<Void>>((ptr) {
  rustCall((status) => _UniffiLib.instance
      .uniffi_matrix_sdk_ffi_fn_free_mediasource(ptr, status));
});

class MediaSource {
  late final Pointer<Void> _ptr;

  MediaSource._(this._ptr) {
    _MediaSourceFinalizer.attach(this, _ptr, detach: this);
  }

  MediaSource.fromJson({
    required String json,
  }) : _ptr = rustCall(
            (status) => _UniffiLib.instance
                .uniffi_matrix_sdk_ffi_fn_constructor_mediasource_from_json(
                    FfiConverterString.lower(json), status),
            clientExceptionErrorHandler) {
    _MediaSourceFinalizer.attach(this, _ptr, detach: this);
  }
  MediaSource.fromUrl({
    required String url,
  }) : _ptr = rustCall(
            (status) => _UniffiLib.instance
                .uniffi_matrix_sdk_ffi_fn_constructor_mediasource_from_url(
                    FfiConverterString.lower(url), status),
            clientExceptionErrorHandler) {
    _MediaSourceFinalizer.attach(this, _ptr, detach: this);
  }

  factory MediaSource.lift(Pointer<Void> ptr) {
    return MediaSource._(ptr);
  }

  static Pointer<Void> lower(MediaSource value) {
    return value.uniffiClonePointer();
  }

  Pointer<Void> uniffiClonePointer() {
    return rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_clone_mediasource(_ptr, status));
  }

  static int allocationSize(MediaSource value) {
    return 8;
  }

  static LiftRetVal<MediaSource> read(Uint8List buf) {
    final handle = buf.buffer.asByteData(buf.offsetInBytes).getInt64(0);
    final pointer = Pointer<Void>.fromAddress(handle);
    return LiftRetVal(MediaSource.lift(pointer), 8);
  }

  static int write(MediaSource value, Uint8List buf) {
    final handle = lower(value);
    buf.buffer.asByteData(buf.offsetInBytes).setInt64(0, handle.address);
    return 8;
  }

  void dispose() {
    _MediaSourceFinalizer.detach(this);
    rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_free_mediasource(_ptr, status));
  }

  String toJson() {
    return rustCall(
        (status) => FfiConverterString.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_mediasource_to_json(
                uniffiClonePointer(), status)),
        null);
  }

  String url() {
    return rustCall(
        (status) => FfiConverterString.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_mediasource_url(
                uniffiClonePointer(), status)),
        null);
  }
}

final _NotificationClientFinalizer = Finalizer<Pointer<Void>>((ptr) {
  rustCall((status) => _UniffiLib.instance
      .uniffi_matrix_sdk_ffi_fn_free_notificationclient(ptr, status));
});

class NotificationClient {
  late final Pointer<Void> _ptr;

  NotificationClient._(this._ptr) {
    _NotificationClientFinalizer.attach(this, _ptr, detach: this);
  }

  factory NotificationClient.lift(Pointer<Void> ptr) {
    return NotificationClient._(ptr);
  }

  static Pointer<Void> lower(NotificationClient value) {
    return value.uniffiClonePointer();
  }

  Pointer<Void> uniffiClonePointer() {
    return rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_clone_notificationclient(_ptr, status));
  }

  static int allocationSize(NotificationClient value) {
    return 8;
  }

  static LiftRetVal<NotificationClient> read(Uint8List buf) {
    final handle = buf.buffer.asByteData(buf.offsetInBytes).getInt64(0);
    final pointer = Pointer<Void>.fromAddress(handle);
    return LiftRetVal(NotificationClient.lift(pointer), 8);
  }

  static int write(NotificationClient value, Uint8List buf) {
    final handle = lower(value);
    buf.buffer.asByteData(buf.offsetInBytes).setInt64(0, handle.address);
    return 8;
  }

  void dispose() {
    _NotificationClientFinalizer.detach(this);
    rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_free_notificationclient(_ptr, status));
  }

  Future<NotificationStatus> getNotification(
    String roomId,
    String eventId,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_notificationclient_get_notification(
        uniffiClonePointer(),
        FfiConverterString.lower(roomId),
        FfiConverterString.lower(eventId),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_rust_buffer,
      FfiConverterNotificationStatus.lift,
      clientExceptionErrorHandler,
    );
  }

  Future<Map<String, BatchNotificationResult>> getNotifications(
    List<NotificationItemsRequest> requests,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_notificationclient_get_notifications(
        uniffiClonePointer(),
        FfiConverterSequenceNotificationItemsRequest.lower(requests),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_rust_buffer,
      FfiConverterMapStringBatchNotificationResult.lift,
      clientExceptionErrorHandler,
    );
  }

  Room? getRoom(
    String roomId,
  ) {
    return rustCall(
        (status) => FfiConverterOptionalRoom.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_notificationclient_get_room(
                uniffiClonePointer(),
                FfiConverterString.lower(roomId),
                status)),
        clientExceptionErrorHandler);
  }
}

final _NotificationSettingsFinalizer = Finalizer<Pointer<Void>>((ptr) {
  rustCall((status) => _UniffiLib.instance
      .uniffi_matrix_sdk_ffi_fn_free_notificationsettings(ptr, status));
});

class NotificationSettings {
  late final Pointer<Void> _ptr;

  NotificationSettings._(this._ptr) {
    _NotificationSettingsFinalizer.attach(this, _ptr, detach: this);
  }

  factory NotificationSettings.lift(Pointer<Void> ptr) {
    return NotificationSettings._(ptr);
  }

  static Pointer<Void> lower(NotificationSettings value) {
    return value.uniffiClonePointer();
  }

  Pointer<Void> uniffiClonePointer() {
    return rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_clone_notificationsettings(_ptr, status));
  }

  static int allocationSize(NotificationSettings value) {
    return 8;
  }

  static LiftRetVal<NotificationSettings> read(Uint8List buf) {
    final handle = buf.buffer.asByteData(buf.offsetInBytes).getInt64(0);
    final pointer = Pointer<Void>.fromAddress(handle);
    return LiftRetVal(NotificationSettings.lift(pointer), 8);
  }

  static int write(NotificationSettings value, Uint8List buf) {
    final handle = lower(value);
    buf.buffer.asByteData(buf.offsetInBytes).setInt64(0, handle.address);
    return 8;
  }

  void dispose() {
    _NotificationSettingsFinalizer.detach(this);
    rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_free_notificationsettings(_ptr, status));
  }

  Future<bool> canHomeserverPushEncryptedEventToDevice() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_notificationsettings_can_homeserver_push_encrypted_event_to_device(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_i8,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_i8,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_i8,
      FfiConverterBool.lift,
      null,
    );
  }

  Future<bool> canPushEncryptedEventToDevice() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_notificationsettings_can_push_encrypted_event_to_device(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_i8,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_i8,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_i8,
      FfiConverterBool.lift,
      null,
    );
  }

  Future<bool> containsKeywordsRules() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_notificationsettings_contains_keywords_rules(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_i8,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_i8,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_i8,
      FfiConverterBool.lift,
      null,
    );
  }

  Future<RoomNotificationMode> getDefaultRoomNotificationMode(
    bool isEncrypted,
    bool isOneToOne,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_notificationsettings_get_default_room_notification_mode(
        uniffiClonePointer(),
        FfiConverterBool.lower(isEncrypted),
        FfiConverterBool.lower(isOneToOne),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_rust_buffer,
      FfiConverterRoomNotificationMode.lift,
      null,
    );
  }

  Future<RoomNotificationSettings> getRoomNotificationSettings(
    String roomId,
    bool isEncrypted,
    bool isOneToOne,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_notificationsettings_get_room_notification_settings(
        uniffiClonePointer(),
        FfiConverterString.lower(roomId),
        FfiConverterBool.lower(isEncrypted),
        FfiConverterBool.lower(isOneToOne),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_rust_buffer,
      FfiConverterRoomNotificationSettings.lift,
      notificationSettingsExceptionErrorHandler,
    );
  }

  Future<List<String>> getRoomsWithUserDefinedRules(
    bool? enabled,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_notificationsettings_get_rooms_with_user_defined_rules(
        uniffiClonePointer(),
        FfiConverterOptionalBool.lower(enabled),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_rust_buffer,
      FfiConverterSequenceString.lift,
      null,
    );
  }

  Future<RoomNotificationMode?> getUserDefinedRoomNotificationMode(
    String roomId,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_notificationsettings_get_user_defined_room_notification_mode(
        uniffiClonePointer(),
        FfiConverterString.lower(roomId),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_rust_buffer,
      FfiConverterOptionalRoomNotificationMode.lift,
      notificationSettingsExceptionErrorHandler,
    );
  }

  Future<bool> isCallEnabled() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_notificationsettings_is_call_enabled(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_i8,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_i8,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_i8,
      FfiConverterBool.lift,
      notificationSettingsExceptionErrorHandler,
    );
  }

  Future<bool> isInviteForMeEnabled() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_notificationsettings_is_invite_for_me_enabled(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_i8,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_i8,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_i8,
      FfiConverterBool.lift,
      notificationSettingsExceptionErrorHandler,
    );
  }

  Future<bool> isRoomMentionEnabled() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_notificationsettings_is_room_mention_enabled(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_i8,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_i8,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_i8,
      FfiConverterBool.lift,
      notificationSettingsExceptionErrorHandler,
    );
  }

  Future<bool> isUserMentionEnabled() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_notificationsettings_is_user_mention_enabled(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_i8,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_i8,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_i8,
      FfiConverterBool.lift,
      notificationSettingsExceptionErrorHandler,
    );
  }

  Future<void> restoreDefaultRoomNotificationMode(
    String roomId,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_notificationsettings_restore_default_room_notification_mode(
        uniffiClonePointer(),
        FfiConverterString.lower(roomId),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      notificationSettingsExceptionErrorHandler,
    );
  }

  Future<void> setCallEnabled(
    bool enabled,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_notificationsettings_set_call_enabled(
        uniffiClonePointer(),
        FfiConverterBool.lower(enabled),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      notificationSettingsExceptionErrorHandler,
    );
  }

  Future<void> setCustomPushRule(
    String ruleId,
    RuleKind ruleKind,
    List<Action> actions,
    List<PushCondition> conditions,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_notificationsettings_set_custom_push_rule(
        uniffiClonePointer(),
        FfiConverterString.lower(ruleId),
        FfiConverterRuleKind.lower(ruleKind),
        FfiConverterSequenceAction.lower(actions),
        FfiConverterSequencePushCondition.lower(conditions),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      notificationSettingsExceptionErrorHandler,
    );
  }

  Future<void> setDefaultRoomNotificationMode(
    bool isEncrypted,
    bool isOneToOne,
    RoomNotificationMode mode,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_notificationsettings_set_default_room_notification_mode(
        uniffiClonePointer(),
        FfiConverterBool.lower(isEncrypted),
        FfiConverterBool.lower(isOneToOne),
        FfiConverterRoomNotificationMode.lower(mode),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      notificationSettingsExceptionErrorHandler,
    );
  }

  void setDelegate(
    NotificationSettingsDelegate? delegate,
  ) {
    return rustCall((status) {
      _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_notificationsettings_set_delegate(
              uniffiClonePointer(),
              FfiConverterOptionalCallbackInterfaceNotificationSettingsDelegate
                  .lower(delegate),
              status);
    }, null);
  }

  Future<void> setInviteForMeEnabled(
    bool enabled,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_notificationsettings_set_invite_for_me_enabled(
        uniffiClonePointer(),
        FfiConverterBool.lower(enabled),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      notificationSettingsExceptionErrorHandler,
    );
  }

  Future<void> setRoomMentionEnabled(
    bool enabled,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_notificationsettings_set_room_mention_enabled(
        uniffiClonePointer(),
        FfiConverterBool.lower(enabled),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      notificationSettingsExceptionErrorHandler,
    );
  }

  Future<void> setRoomNotificationMode(
    String roomId,
    RoomNotificationMode mode,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_notificationsettings_set_room_notification_mode(
        uniffiClonePointer(),
        FfiConverterString.lower(roomId),
        FfiConverterRoomNotificationMode.lower(mode),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      notificationSettingsExceptionErrorHandler,
    );
  }

  Future<void> setUserMentionEnabled(
    bool enabled,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_notificationsettings_set_user_mention_enabled(
        uniffiClonePointer(),
        FfiConverterBool.lower(enabled),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      notificationSettingsExceptionErrorHandler,
    );
  }

  Future<void> unmuteRoom(
    String roomId,
    bool isEncrypted,
    bool isOneToOne,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_notificationsettings_unmute_room(
        uniffiClonePointer(),
        FfiConverterString.lower(roomId),
        FfiConverterBool.lower(isEncrypted),
        FfiConverterBool.lower(isOneToOne),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      notificationSettingsExceptionErrorHandler,
    );
  }
}

final _QrCodeDataFinalizer = Finalizer<Pointer<Void>>((ptr) {
  rustCall((status) => _UniffiLib.instance
      .uniffi_matrix_sdk_ffi_fn_free_qrcodedata(ptr, status));
});

class QrCodeData {
  late final Pointer<Void> _ptr;

  QrCodeData._(this._ptr) {
    _QrCodeDataFinalizer.attach(this, _ptr, detach: this);
  }

  QrCodeData.fromBytes({
    required Uint8List bytes,
  }) : _ptr = rustCall(
            (status) => _UniffiLib.instance
                .uniffi_matrix_sdk_ffi_fn_constructor_qrcodedata_from_bytes(
                    FfiConverterUint8List.lower(bytes), status),
            qrCodeDecodeExceptionErrorHandler) {
    _QrCodeDataFinalizer.attach(this, _ptr, detach: this);
  }

  factory QrCodeData.lift(Pointer<Void> ptr) {
    return QrCodeData._(ptr);
  }

  static Pointer<Void> lower(QrCodeData value) {
    return value.uniffiClonePointer();
  }

  Pointer<Void> uniffiClonePointer() {
    return rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_clone_qrcodedata(_ptr, status));
  }

  static int allocationSize(QrCodeData value) {
    return 8;
  }

  static LiftRetVal<QrCodeData> read(Uint8List buf) {
    final handle = buf.buffer.asByteData(buf.offsetInBytes).getInt64(0);
    final pointer = Pointer<Void>.fromAddress(handle);
    return LiftRetVal(QrCodeData.lift(pointer), 8);
  }

  static int write(QrCodeData value, Uint8List buf) {
    final handle = lower(value);
    buf.buffer.asByteData(buf.offsetInBytes).setInt64(0, handle.address);
    return 8;
  }

  void dispose() {
    _QrCodeDataFinalizer.detach(this);
    rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_free_qrcodedata(_ptr, status));
  }

  String? serverName() {
    return rustCall(
        (status) => FfiConverterOptionalString.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_qrcodedata_server_name(
                uniffiClonePointer(), status)),
        null);
  }
}

final _RoomFinalizer = Finalizer<Pointer<Void>>((ptr) {
  rustCall((status) =>
      _UniffiLib.instance.uniffi_matrix_sdk_ffi_fn_free_room(ptr, status));
});

class FfiConverterEncryptionState {
  static EncryptionState lift(RustBuffer buffer) {
    return FfiConverterEncryptionState.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<EncryptionState> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    switch (index) {
      case 1:
        return LiftRetVal(EncryptionState.encrypted, 4);
      case 2:
        return LiftRetVal(EncryptionState.notEncrypted, 4);
      case 3:
        return LiftRetVal(EncryptionState.unknown, 4);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(EncryptionState input) {
    return toRustBuffer(createUint8ListFromInt(input.index + 1));
  }

  static int allocationSize(EncryptionState value) {
    return 4;
  }

  static int write(EncryptionState value, Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, value.index + 1);
    return 4;
  }
}

class Room {
  late final Pointer<Void> _ptr;

  Room._(this._ptr) {
    _RoomFinalizer.attach(this, _ptr, detach: this);
  }

  factory Room.lift(Pointer<Void> ptr) {
    return Room._(ptr);
  }

  static Pointer<Void> lower(Room value) {
    return value.uniffiClonePointer();
  }

  Pointer<Void> uniffiClonePointer() {
    return rustCall((status) =>
        _UniffiLib.instance.uniffi_matrix_sdk_ffi_fn_clone_room(_ptr, status));
  }

  static int allocationSize(Room value) {
    return 8;
  }

  static LiftRetVal<Room> read(Uint8List buf) {
    final handle = buf.buffer.asByteData(buf.offsetInBytes).getInt64(0);
    final pointer = Pointer<Void>.fromAddress(handle);
    return LiftRetVal(Room.lift(pointer), 8);
  }

  static int write(Room value, Uint8List buf) {
    final handle = lower(value);
    buf.buffer.asByteData(buf.offsetInBytes).setInt64(0, handle.address);
    return 8;
  }

  void dispose() {
    _RoomFinalizer.detach(this);
    rustCall((status) =>
        _UniffiLib.instance.uniffi_matrix_sdk_ffi_fn_free_room(_ptr, status));
  }

  int activeMembersCount() {
    return rustCall(
        (status) => FfiConverterUInt64.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_room_active_members_count(
                uniffiClonePointer(), status)),
        null);
  }

  List<String> activeRoomCallParticipants() {
    return rustCall(
        (status) => FfiConverterSequenceString.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_room_active_room_call_participants(
                uniffiClonePointer(), status)),
        null);
  }

  List<String> alternativeAliases() {
    return rustCall(
        (status) => FfiConverterSequenceString.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_room_alternative_aliases(
                uniffiClonePointer(), status)),
        null);
  }

  Future<void> applyPowerLevelChanges(
    RoomPowerLevelChanges changes,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_room_apply_power_level_changes(
        uniffiClonePointer(),
        FfiConverterRoomPowerLevelChanges.lower(changes),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  String? avatarUrl() {
    return rustCall(
        (status) => FfiConverterOptionalString.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_room_avatar_url(
                uniffiClonePointer(), status)),
        null);
  }

  Future<void> banUser(
    String userId,
    String? reason,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance.uniffi_matrix_sdk_ffi_fn_method_room_ban_user(
        uniffiClonePointer(),
        FfiConverterString.lower(userId),
        FfiConverterOptionalString.lower(reason),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  String? canonicalAlias() {
    return rustCall(
        (status) => FfiConverterOptionalString.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_room_canonical_alias(
                uniffiClonePointer(), status)),
        null);
  }

  Future<void> clearComposerDraft(
    String? threadRoot,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_room_clear_composer_draft(
        uniffiClonePointer(),
        FfiConverterOptionalString.lower(threadRoot),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  Future<void> clearEventCacheStorage() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_room_clear_event_cache_storage(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  Future<void> discardRoomKey() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_room_discard_room_key(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  String? displayName() {
    return rustCall(
        (status) => FfiConverterOptionalString.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_room_display_name(
                uniffiClonePointer(), status)),
        null);
  }

  Future<void> edit(
    String eventId,
    RoomMessageEventContentWithoutRelation newContent,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance.uniffi_matrix_sdk_ffi_fn_method_room_edit(
        uniffiClonePointer(),
        FfiConverterString.lower(eventId),
        RoomMessageEventContentWithoutRelation.lower(newContent),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  Future<void> enableEncryption() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_room_enable_encryption(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  void enableSendQueue(
    bool enable,
  ) {
    return rustCall((status) {
      _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_room_enable_send_queue(
              uniffiClonePointer(), FfiConverterBool.lower(enable), status);
    }, null);
  }

  EncryptionState encryptionState() {
    return rustCall(
        (status) => FfiConverterEncryptionState.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_room_encryption_state(
                uniffiClonePointer(), status)),
        null);
  }

  Future<ThreadSubscription?> fetchThreadSubscription(
    String threadRootEventId,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_room_fetch_thread_subscription(
        uniffiClonePointer(),
        FfiConverterString.lower(threadRootEventId),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_rust_buffer,
      FfiConverterOptionalThreadSubscription.lift,
      clientExceptionErrorHandler,
    );
  }

  Future<void> forget() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance.uniffi_matrix_sdk_ffi_fn_method_room_forget(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  Future<RoomPowerLevels> getPowerLevels() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_room_get_power_levels(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_pointer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_pointer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_pointer,
      RoomPowerLevels.lift,
      clientExceptionErrorHandler,
    );
  }

  Future<RoomVisibility> getRoomVisibility() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_room_get_room_visibility(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_rust_buffer,
      FfiConverterRoomVisibility.lift,
      clientExceptionErrorHandler,
    );
  }

  bool hasActiveRoomCall() {
    return rustCall(
        (status) => FfiConverterBool.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_room_has_active_room_call(
                uniffiClonePointer(), status)),
        null);
  }

  List<RoomHero> heroes() {
    return rustCall(
        (status) => FfiConverterSequenceRoomHero.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_room_heroes(
                uniffiClonePointer(), status)),
        null);
  }

  String id() {
    return rustCall(
        (status) => FfiConverterString.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_room_id(
                uniffiClonePointer(), status)),
        null);
  }

  Future<void> ignoreDeviceTrustAndResend(
    Map<String, List<String>> devices,
    SendHandle sendHandle,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_room_ignore_device_trust_and_resend(
        uniffiClonePointer(),
        FfiConverterMapStringSequenceString.lower(devices),
        SendHandle.lower(sendHandle),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  Future<void> ignoreUser(
    String userId,
  ) {
    return uniffiRustCallAsync(
      () =>
          _UniffiLib.instance.uniffi_matrix_sdk_ffi_fn_method_room_ignore_user(
        uniffiClonePointer(),
        FfiConverterString.lower(userId),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  Future<void> inviteUserById(
    String userId,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_room_invite_user_by_id(
        uniffiClonePointer(),
        FfiConverterString.lower(userId),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  int invitedMembersCount() {
    return rustCall(
        (status) => FfiConverterUInt64.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_room_invited_members_count(
                uniffiClonePointer(), status)),
        null);
  }

  Future<RoomMember?> inviter() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance.uniffi_matrix_sdk_ffi_fn_method_room_inviter(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_rust_buffer,
      FfiConverterOptionalRoomMember.lift,
      clientExceptionErrorHandler,
    );
  }

  Future<bool> isDirect() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance.uniffi_matrix_sdk_ffi_fn_method_room_is_direct(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_i8,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_i8,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_i8,
      FfiConverterBool.lift,
      null,
    );
  }

  Future<bool> isEncrypted() {
    return uniffiRustCallAsync(
      () =>
          _UniffiLib.instance.uniffi_matrix_sdk_ffi_fn_method_room_is_encrypted(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_i8,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_i8,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_i8,
      FfiConverterBool.lift,
      null,
    );
  }

  bool? isPublic() {
    return rustCall(
        (status) => FfiConverterOptionalBool.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_room_is_public(
                uniffiClonePointer(), status)),
        null);
  }

  bool isSendQueueEnabled() {
    return rustCall(
        (status) => FfiConverterBool.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_room_is_send_queue_enabled(
                uniffiClonePointer(), status)),
        null);
  }

  bool isSpace() {
    return rustCall(
        (status) => FfiConverterBool.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_room_is_space(
                uniffiClonePointer(), status)),
        null);
  }

  Future<void> join() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance.uniffi_matrix_sdk_ffi_fn_method_room_join(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  int joinedMembersCount() {
    return rustCall(
        (status) => FfiConverterUInt64.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_room_joined_members_count(
                uniffiClonePointer(), status)),
        null);
  }

  Future<void> kickUser(
    String userId,
    String? reason,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance.uniffi_matrix_sdk_ffi_fn_method_room_kick_user(
        uniffiClonePointer(),
        FfiConverterString.lower(userId),
        FfiConverterOptionalString.lower(reason),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  Future<EncryptionState> latestEncryptionState() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_room_latest_encryption_state(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_rust_buffer,
      FfiConverterEncryptionState.lift,
      clientExceptionErrorHandler,
    );
  }

  Future<EventTimelineItem?> latestEvent() {
    return uniffiRustCallAsync(
      () =>
          _UniffiLib.instance.uniffi_matrix_sdk_ffi_fn_method_room_latest_event(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_rust_buffer,
      FfiConverterOptionalEventTimelineItem.lift,
      null,
    );
  }

  Future<void> leave() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance.uniffi_matrix_sdk_ffi_fn_method_room_leave(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  Future<ComposerDraft?> loadComposerDraft(
    String? threadRoot,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_room_load_composer_draft(
        uniffiClonePointer(),
        FfiConverterOptionalString.lower(threadRoot),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_rust_buffer,
      FfiConverterOptionalComposerDraft.lift,
      clientExceptionErrorHandler,
    );
  }

  Future<void> markAsRead(
    ReceiptType receiptType,
  ) {
    return uniffiRustCallAsync(
      () =>
          _UniffiLib.instance.uniffi_matrix_sdk_ffi_fn_method_room_mark_as_read(
        uniffiClonePointer(),
        FfiConverterReceiptType.lower(receiptType),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  Future<String> matrixToEventPermalink(
    String eventId,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_room_matrix_to_event_permalink(
        uniffiClonePointer(),
        FfiConverterString.lower(eventId),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_rust_buffer,
      FfiConverterString.lift,
      clientExceptionErrorHandler,
    );
  }

  Future<String> matrixToPermalink() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_room_matrix_to_permalink(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_rust_buffer,
      FfiConverterString.lift,
      clientExceptionErrorHandler,
    );
  }

  Future<RoomMember> member(
    String userId,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance.uniffi_matrix_sdk_ffi_fn_method_room_member(
        uniffiClonePointer(),
        FfiConverterString.lower(userId),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_rust_buffer,
      FfiConverterRoomMember.lift,
      clientExceptionErrorHandler,
    );
  }

  Future<String?> memberAvatarUrl(
    String userId,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_room_member_avatar_url(
        uniffiClonePointer(),
        FfiConverterString.lower(userId),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_rust_buffer,
      FfiConverterOptionalString.lift,
      clientExceptionErrorHandler,
    );
  }

  Future<String?> memberDisplayName(
    String userId,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_room_member_display_name(
        uniffiClonePointer(),
        FfiConverterString.lower(userId),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_rust_buffer,
      FfiConverterOptionalString.lift,
      clientExceptionErrorHandler,
    );
  }

  Future<RoomMemberWithSenderInfo> memberWithSenderInfo(
    String userId,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_room_member_with_sender_info(
        uniffiClonePointer(),
        FfiConverterString.lower(userId),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_rust_buffer,
      FfiConverterRoomMemberWithSenderInfo.lift,
      clientExceptionErrorHandler,
    );
  }

  Future<RoomMembersIterator> members() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance.uniffi_matrix_sdk_ffi_fn_method_room_members(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_pointer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_pointer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_pointer,
      RoomMembersIterator.lift,
      clientExceptionErrorHandler,
    );
  }

  Future<RoomMembersIterator> membersNoSync() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_room_members_no_sync(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_pointer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_pointer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_pointer,
      RoomMembersIterator.lift,
      clientExceptionErrorHandler,
    );
  }

  Membership membership() {
    return rustCall(
        (status) => FfiConverterMembership.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_room_membership(
                uniffiClonePointer(), status)),
        null);
  }

  String ownUserId() {
    return rustCall(
        (status) => FfiConverterString.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_room_own_user_id(
                uniffiClonePointer(), status)),
        null);
  }

  PredecessorRoom? predecessorRoom() {
    return rustCall(
        (status) => FfiConverterOptionalPredecessorRoom.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_room_predecessor_room(
                uniffiClonePointer(), status)),
        null);
  }

  Future<RoomPreview> previewRoom(
    List<String> via,
  ) {
    return uniffiRustCallAsync(
      () =>
          _UniffiLib.instance.uniffi_matrix_sdk_ffi_fn_method_room_preview_room(
        uniffiClonePointer(),
        FfiConverterSequenceString.lower(via),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_pointer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_pointer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_pointer,
      RoomPreview.lift,
      clientExceptionErrorHandler,
    );
  }

  Future<bool> publishRoomAliasInRoomDirectory(
    String alias,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_room_publish_room_alias_in_room_directory(
        uniffiClonePointer(),
        FfiConverterString.lower(alias),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_i8,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_i8,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_i8,
      FfiConverterBool.lift,
      clientExceptionErrorHandler,
    );
  }

  String? rawName() {
    return rustCall(
        (status) => FfiConverterOptionalString.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_room_raw_name(
                uniffiClonePointer(), status)),
        null);
  }

  Future<void> redact(
    String eventId,
    String? reason,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance.uniffi_matrix_sdk_ffi_fn_method_room_redact(
        uniffiClonePointer(),
        FfiConverterString.lower(eventId),
        FfiConverterOptionalString.lower(reason),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  Future<void> removeAvatar() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_room_remove_avatar(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  Future<bool> removeRoomAliasFromRoomDirectory(
    String alias,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_room_remove_room_alias_from_room_directory(
        uniffiClonePointer(),
        FfiConverterString.lower(alias),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_i8,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_i8,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_i8,
      FfiConverterBool.lift,
      clientExceptionErrorHandler,
    );
  }

  Future<void> reportContent(
    String eventId,
    int? score,
    String? reason,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_room_report_content(
        uniffiClonePointer(),
        FfiConverterString.lower(eventId),
        FfiConverterOptionalInt32.lower(score),
        FfiConverterOptionalString.lower(reason),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  Future<void> reportRoom(
    String reason,
  ) {
    return uniffiRustCallAsync(
      () =>
          _UniffiLib.instance.uniffi_matrix_sdk_ffi_fn_method_room_report_room(
        uniffiClonePointer(),
        FfiConverterString.lower(reason),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  Future<RoomPowerLevels> resetPowerLevels() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_room_reset_power_levels(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_pointer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_pointer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_pointer,
      RoomPowerLevels.lift,
      clientExceptionErrorHandler,
    );
  }

  Future<List<String>> roomEventsDebugString() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_room_room_events_debug_string(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_rust_buffer,
      FfiConverterSequenceString.lift,
      clientExceptionErrorHandler,
    );
  }

  Future<RoomInfo> roomInfo() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance.uniffi_matrix_sdk_ffi_fn_method_room_room_info(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_rust_buffer,
      FfiConverterRoomInfo.lift,
      clientExceptionErrorHandler,
    );
  }

  Future<void> saveComposerDraft(
    ComposerDraft draft,
    String? threadRoot,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_room_save_composer_draft(
        uniffiClonePointer(),
        FfiConverterComposerDraft.lower(draft),
        FfiConverterOptionalString.lower(threadRoot),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  Future<void> sendLiveLocation(
    String geoUri,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_room_send_live_location(
        uniffiClonePointer(),
        FfiConverterString.lower(geoUri),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  Future<void> sendRaw(
    String eventType,
    String content,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance.uniffi_matrix_sdk_ffi_fn_method_room_send_raw(
        uniffiClonePointer(),
        FfiConverterString.lower(eventType),
        FfiConverterString.lower(content),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  Future<void> setIsFavourite(
    bool isFavourite,
    double? tagOrder,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_room_set_is_favourite(
        uniffiClonePointer(),
        FfiConverterBool.lower(isFavourite),
        FfiConverterOptionalDouble64.lower(tagOrder),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  Future<void> setIsLowPriority(
    bool isLowPriority,
    double? tagOrder,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_room_set_is_low_priority(
        uniffiClonePointer(),
        FfiConverterBool.lower(isLowPriority),
        FfiConverterOptionalDouble64.lower(tagOrder),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  Future<void> setName(
    String name,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance.uniffi_matrix_sdk_ffi_fn_method_room_set_name(
        uniffiClonePointer(),
        FfiConverterString.lower(name),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  Future<void> setThreadSubscription(
    String threadRootEventId,
    bool subscribed,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_room_set_thread_subscription(
        uniffiClonePointer(),
        FfiConverterString.lower(threadRootEventId),
        FfiConverterBool.lower(subscribed),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  Future<void> setTopic(
    String topic,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance.uniffi_matrix_sdk_ffi_fn_method_room_set_topic(
        uniffiClonePointer(),
        FfiConverterString.lower(topic),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  Future<void> setUnreadFlag(
    bool newValue,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_room_set_unread_flag(
        uniffiClonePointer(),
        FfiConverterBool.lower(newValue),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  Future<void> startLiveLocationShare(
    int durationMillis,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_room_start_live_location_share(
        uniffiClonePointer(),
        durationMillis,
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  Future<void> stopLiveLocationShare() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_room_stop_live_location_share(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  Future<TaskHandle> subscribeToIdentityStatusChanges(
    IdentityStatusChangeListener listener,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_room_subscribe_to_identity_status_changes(
        uniffiClonePointer(),
        FfiConverterCallbackInterfaceIdentityStatusChangeListener.lower(
            listener),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_pointer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_pointer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_pointer,
      TaskHandle.lift,
      clientExceptionErrorHandler,
    );
  }

  Future<TaskHandle> subscribeToKnockRequests(
    KnockRequestsListener listener,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_room_subscribe_to_knock_requests(
        uniffiClonePointer(),
        FfiConverterCallbackInterfaceKnockRequestsListener.lower(listener),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_pointer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_pointer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_pointer,
      TaskHandle.lift,
      clientExceptionErrorHandler,
    );
  }

  TaskHandle subscribeToLiveLocationShares(
    LiveLocationShareListener listener,
  ) {
    return rustCall(
        (status) => TaskHandle.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_room_subscribe_to_live_location_shares(
                uniffiClonePointer(),
                FfiConverterCallbackInterfaceLiveLocationShareListener.lower(
                    listener),
                status)),
        null);
  }

  TaskHandle subscribeToRoomInfoUpdates(
    RoomInfoListener listener,
  ) {
    return rustCall(
        (status) => TaskHandle.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_room_subscribe_to_room_info_updates(
                uniffiClonePointer(),
                FfiConverterCallbackInterfaceRoomInfoListener.lower(listener),
                status)),
        null);
  }

  TaskHandle subscribeToTypingNotifications(
    TypingNotificationsListener listener,
  ) {
    return rustCall(
        (status) => TaskHandle.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_room_subscribe_to_typing_notifications(
                uniffiClonePointer(),
                FfiConverterCallbackInterfaceTypingNotificationsListener.lower(
                    listener),
                status)),
        null);
  }

  SuccessorRoom? successorRoom() {
    return rustCall(
        (status) => FfiConverterOptionalSuccessorRoom.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_room_successor_room(
                uniffiClonePointer(), status)),
        null);
  }

  Future<RoomMemberRole> suggestedRoleForUser(
    String userId,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_room_suggested_role_for_user(
        uniffiClonePointer(),
        FfiConverterString.lower(userId),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_rust_buffer,
      FfiConverterRoomMemberRole.lift,
      clientExceptionErrorHandler,
    );
  }

  Future<Timeline> timeline() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance.uniffi_matrix_sdk_ffi_fn_method_room_timeline(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_pointer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_pointer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_pointer,
      Timeline.lift,
      clientExceptionErrorHandler,
    );
  }

  Future<Timeline> timelineWithConfiguration(
    TimelineConfiguration configuration,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_room_timeline_with_configuration(
        uniffiClonePointer(),
        FfiConverterTimelineConfiguration.lower(configuration),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_pointer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_pointer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_pointer,
      Timeline.lift,
      clientExceptionErrorHandler,
    );
  }

  String? topic() {
    return rustCall(
        (status) => FfiConverterOptionalString.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_room_topic(
                uniffiClonePointer(), status)),
        null);
  }

  Future<void> typingNotice(
    bool isTyping,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_room_typing_notice(
        uniffiClonePointer(),
        FfiConverterBool.lower(isTyping),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  Future<void> unbanUser(
    String userId,
    String? reason,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance.uniffi_matrix_sdk_ffi_fn_method_room_unban_user(
        uniffiClonePointer(),
        FfiConverterString.lower(userId),
        FfiConverterOptionalString.lower(reason),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  Future<void> updateCanonicalAlias(
    String? alias,
    List<String> altAliases,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_room_update_canonical_alias(
        uniffiClonePointer(),
        FfiConverterOptionalString.lower(alias),
        FfiConverterSequenceString.lower(altAliases),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  Future<void> updateHistoryVisibility(
    RoomHistoryVisibility visibility,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_room_update_history_visibility(
        uniffiClonePointer(),
        FfiConverterRoomHistoryVisibility.lower(visibility),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  Future<void> updateJoinRules(
    JoinRule newRule,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_room_update_join_rules(
        uniffiClonePointer(),
        FfiConverterJoinRule.lower(newRule),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  Future<void> updatePowerLevelsForUsers(
    List<UserPowerLevelUpdate> updates,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_room_update_power_levels_for_users(
        uniffiClonePointer(),
        FfiConverterSequenceUserPowerLevelUpdate.lower(updates),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  Future<void> updateRoomVisibility(
    RoomVisibility visibility,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_room_update_room_visibility(
        uniffiClonePointer(),
        FfiConverterRoomVisibility.lower(visibility),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  Future<void> uploadAvatar(
    String mimeType,
    Uint8List data,
    ImageInfo? mediaInfo,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_room_upload_avatar(
        uniffiClonePointer(),
        FfiConverterString.lower(mimeType),
        FfiConverterUint8List.lower(data),
        FfiConverterOptionalImageInfo.lower(mediaInfo),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  Future<void> withdrawVerificationAndResend(
    List<String> userIds,
    SendHandle sendHandle,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_room_withdraw_verification_and_resend(
        uniffiClonePointer(),
        FfiConverterSequenceString.lower(userIds),
        SendHandle.lower(sendHandle),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }
}

class FfiConverterRoomPowerLevelChanges {
  static RoomPowerLevelChanges lift(RustBuffer buf) {
    return FfiConverterRoomPowerLevelChanges.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(RoomPowerLevelChanges value) {
    final total_length = FfiConverterOptionalInt64.allocationSize(value.ban) +
        FfiConverterOptionalInt64.allocationSize(value.invite) +
        FfiConverterOptionalInt64.allocationSize(value.kick) +
        FfiConverterOptionalInt64.allocationSize(value.redact) +
        FfiConverterOptionalInt64.allocationSize(value.eventsDefault) +
        FfiConverterOptionalInt64.allocationSize(value.stateDefault) +
        FfiConverterOptionalInt64.allocationSize(value.usersDefault) +
        FfiConverterOptionalInt64.allocationSize(value.roomName) +
        FfiConverterOptionalInt64.allocationSize(value.roomAvatar) +
        FfiConverterOptionalInt64.allocationSize(value.roomTopic) +
        0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<RoomPowerLevelChanges> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final ban_lifted =
        FfiConverterOptionalInt64.read(Uint8List.view(buf.buffer, new_offset));
    final ban = ban_lifted.value;
    new_offset += ban_lifted.bytesRead;
    final invite_lifted =
        FfiConverterOptionalInt64.read(Uint8List.view(buf.buffer, new_offset));
    final invite = invite_lifted.value;
    new_offset += invite_lifted.bytesRead;
    final kick_lifted =
        FfiConverterOptionalInt64.read(Uint8List.view(buf.buffer, new_offset));
    final kick = kick_lifted.value;
    new_offset += kick_lifted.bytesRead;
    final redact_lifted =
        FfiConverterOptionalInt64.read(Uint8List.view(buf.buffer, new_offset));
    final redact = redact_lifted.value;
    new_offset += redact_lifted.bytesRead;
    final eventsDefault_lifted =
        FfiConverterOptionalInt64.read(Uint8List.view(buf.buffer, new_offset));
    final eventsDefault = eventsDefault_lifted.value;
    new_offset += eventsDefault_lifted.bytesRead;
    final stateDefault_lifted =
        FfiConverterOptionalInt64.read(Uint8List.view(buf.buffer, new_offset));
    final stateDefault = stateDefault_lifted.value;
    new_offset += stateDefault_lifted.bytesRead;
    final usersDefault_lifted =
        FfiConverterOptionalInt64.read(Uint8List.view(buf.buffer, new_offset));
    final usersDefault = usersDefault_lifted.value;
    new_offset += usersDefault_lifted.bytesRead;
    final roomName_lifted =
        FfiConverterOptionalInt64.read(Uint8List.view(buf.buffer, new_offset));
    final roomName = roomName_lifted.value;
    new_offset += roomName_lifted.bytesRead;
    final roomAvatar_lifted =
        FfiConverterOptionalInt64.read(Uint8List.view(buf.buffer, new_offset));
    final roomAvatar = roomAvatar_lifted.value;
    new_offset += roomAvatar_lifted.bytesRead;
    final roomTopic_lifted =
        FfiConverterOptionalInt64.read(Uint8List.view(buf.buffer, new_offset));
    final roomTopic = roomTopic_lifted.value;
    new_offset += roomTopic_lifted.bytesRead;
    return LiftRetVal(
        RoomPowerLevelChanges(
          ban: ban,
          invite: invite,
          kick: kick,
          redact: redact,
          eventsDefault: eventsDefault,
          stateDefault: stateDefault,
          usersDefault: usersDefault,
          roomName: roomName,
          roomAvatar: roomAvatar,
          roomTopic: roomTopic,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(RoomPowerLevelChanges value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterOptionalInt64.write(
        value.ban, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalInt64.write(
        value.invite, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalInt64.write(
        value.kick, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalInt64.write(
        value.redact, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalInt64.write(
        value.eventsDefault, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalInt64.write(
        value.stateDefault, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalInt64.write(
        value.usersDefault, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalInt64.write(
        value.roomName, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalInt64.write(
        value.roomAvatar, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalInt64.write(
        value.roomTopic, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(RoomPowerLevelChanges value) {
    return FfiConverterOptionalInt64.allocationSize(value.ban) +
        FfiConverterOptionalInt64.allocationSize(value.invite) +
        FfiConverterOptionalInt64.allocationSize(value.kick) +
        FfiConverterOptionalInt64.allocationSize(value.redact) +
        FfiConverterOptionalInt64.allocationSize(value.eventsDefault) +
        FfiConverterOptionalInt64.allocationSize(value.stateDefault) +
        FfiConverterOptionalInt64.allocationSize(value.usersDefault) +
        FfiConverterOptionalInt64.allocationSize(value.roomName) +
        FfiConverterOptionalInt64.allocationSize(value.roomAvatar) +
        FfiConverterOptionalInt64.allocationSize(value.roomTopic) +
        0;
  }
}

final _RoomDirectorySearchFinalizer = Finalizer<Pointer<Void>>((ptr) {
  rustCall((status) => _UniffiLib.instance
      .uniffi_matrix_sdk_ffi_fn_free_roomdirectorysearch(ptr, status));
});

class RoomDirectorySearch {
  late final Pointer<Void> _ptr;

  RoomDirectorySearch._(this._ptr) {
    _RoomDirectorySearchFinalizer.attach(this, _ptr, detach: this);
  }

  factory RoomDirectorySearch.lift(Pointer<Void> ptr) {
    return RoomDirectorySearch._(ptr);
  }

  static Pointer<Void> lower(RoomDirectorySearch value) {
    return value.uniffiClonePointer();
  }

  Pointer<Void> uniffiClonePointer() {
    return rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_clone_roomdirectorysearch(_ptr, status));
  }

  static int allocationSize(RoomDirectorySearch value) {
    return 8;
  }

  static LiftRetVal<RoomDirectorySearch> read(Uint8List buf) {
    final handle = buf.buffer.asByteData(buf.offsetInBytes).getInt64(0);
    final pointer = Pointer<Void>.fromAddress(handle);
    return LiftRetVal(RoomDirectorySearch.lift(pointer), 8);
  }

  static int write(RoomDirectorySearch value, Uint8List buf) {
    final handle = lower(value);
    buf.buffer.asByteData(buf.offsetInBytes).setInt64(0, handle.address);
    return 8;
  }

  void dispose() {
    _RoomDirectorySearchFinalizer.detach(this);
    rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_free_roomdirectorysearch(_ptr, status));
  }

  Future<bool> isAtLastPage() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_roomdirectorysearch_is_at_last_page(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_i8,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_i8,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_i8,
      FfiConverterBool.lift,
      clientExceptionErrorHandler,
    );
  }

  Future<int> loadedPages() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_roomdirectorysearch_loaded_pages(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_u32,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_u32,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_u32,
      FfiConverterUInt32.lift,
      clientExceptionErrorHandler,
    );
  }

  Future<void> nextPage() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_roomdirectorysearch_next_page(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  Future<TaskHandle> results(
    RoomDirectorySearchEntriesListener listener,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_roomdirectorysearch_results(
        uniffiClonePointer(),
        FfiConverterCallbackInterfaceRoomDirectorySearchEntriesListener.lower(
            listener),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_pointer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_pointer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_pointer,
      TaskHandle.lift,
      null,
    );
  }

  Future<void> search(
    String? filter,
    int batchSize,
    String? viaServerName,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_roomdirectorysearch_search(
        uniffiClonePointer(),
        FfiConverterOptionalString.lower(filter),
        batchSize,
        FfiConverterOptionalString.lower(viaServerName),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }
}

final _RoomListFinalizer = Finalizer<Pointer<Void>>((ptr) {
  rustCall((status) =>
      _UniffiLib.instance.uniffi_matrix_sdk_ffi_fn_free_roomlist(ptr, status));
});

class RoomList {
  late final Pointer<Void> _ptr;

  RoomList._(this._ptr) {
    _RoomListFinalizer.attach(this, _ptr, detach: this);
  }

  factory RoomList.lift(Pointer<Void> ptr) {
    return RoomList._(ptr);
  }

  static Pointer<Void> lower(RoomList value) {
    return value.uniffiClonePointer();
  }

  Pointer<Void> uniffiClonePointer() {
    return rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_clone_roomlist(_ptr, status));
  }

  static int allocationSize(RoomList value) {
    return 8;
  }

  static LiftRetVal<RoomList> read(Uint8List buf) {
    final handle = buf.buffer.asByteData(buf.offsetInBytes).getInt64(0);
    final pointer = Pointer<Void>.fromAddress(handle);
    return LiftRetVal(RoomList.lift(pointer), 8);
  }

  static int write(RoomList value, Uint8List buf) {
    final handle = lower(value);
    buf.buffer.asByteData(buf.offsetInBytes).setInt64(0, handle.address);
    return 8;
  }

  void dispose() {
    _RoomListFinalizer.detach(this);
    rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_free_roomlist(_ptr, status));
  }

  RoomListEntriesWithDynamicAdaptersResult entriesWithDynamicAdapters(
    int pageSize,
    RoomListEntriesListener listener,
  ) {
    return rustCall(
        (status) => RoomListEntriesWithDynamicAdaptersResult.lift(_UniffiLib
            .instance
            .uniffi_matrix_sdk_ffi_fn_method_roomlist_entries_with_dynamic_adapters(
                uniffiClonePointer(),
                pageSize,
                FfiConverterCallbackInterfaceRoomListEntriesListener.lower(
                    listener),
                status)),
        null);
  }

  RoomListLoadingStateResult loadingState(
    RoomListLoadingStateListener listener,
  ) {
    return rustCall(
        (status) => FfiConverterRoomListLoadingStateResult.lift(_UniffiLib
            .instance
            .uniffi_matrix_sdk_ffi_fn_method_roomlist_loading_state(
                uniffiClonePointer(),
                FfiConverterCallbackInterfaceRoomListLoadingStateListener.lower(
                    listener),
                status)),
        roomListExceptionErrorHandler);
  }

  Room room(
    String roomId,
  ) {
    return rustCall(
        (status) => Room.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_roomlist_room(uniffiClonePointer(),
                FfiConverterString.lower(roomId), status)),
        roomListExceptionErrorHandler);
  }
}

final _RoomListDynamicEntriesControllerFinalizer =
    Finalizer<Pointer<Void>>((ptr) {
  rustCall((status) => _UniffiLib.instance
      .uniffi_matrix_sdk_ffi_fn_free_roomlistdynamicentriescontroller(
          ptr, status));
});

class RoomListDynamicEntriesController {
  late final Pointer<Void> _ptr;

  RoomListDynamicEntriesController._(this._ptr) {
    _RoomListDynamicEntriesControllerFinalizer.attach(this, _ptr, detach: this);
  }

  factory RoomListDynamicEntriesController.lift(Pointer<Void> ptr) {
    return RoomListDynamicEntriesController._(ptr);
  }

  static Pointer<Void> lower(RoomListDynamicEntriesController value) {
    return value.uniffiClonePointer();
  }

  Pointer<Void> uniffiClonePointer() {
    return rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_clone_roomlistdynamicentriescontroller(
            _ptr, status));
  }

  static int allocationSize(RoomListDynamicEntriesController value) {
    return 8;
  }

  static LiftRetVal<RoomListDynamicEntriesController> read(Uint8List buf) {
    final handle = buf.buffer.asByteData(buf.offsetInBytes).getInt64(0);
    final pointer = Pointer<Void>.fromAddress(handle);
    return LiftRetVal(RoomListDynamicEntriesController.lift(pointer), 8);
  }

  static int write(RoomListDynamicEntriesController value, Uint8List buf) {
    final handle = lower(value);
    buf.buffer.asByteData(buf.offsetInBytes).setInt64(0, handle.address);
    return 8;
  }

  void dispose() {
    _RoomListDynamicEntriesControllerFinalizer.detach(this);
    rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_free_roomlistdynamicentriescontroller(
            _ptr, status));
  }

  void addOnePage() {
    return rustCall((status) {
      _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_roomlistdynamicentriescontroller_add_one_page(
              uniffiClonePointer(), status);
    }, null);
  }

  void resetToOnePage() {
    return rustCall((status) {
      _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_roomlistdynamicentriescontroller_reset_to_one_page(
              uniffiClonePointer(), status);
    }, null);
  }

  bool setFilter(
    RoomListEntriesDynamicFilterKind kind,
  ) {
    return rustCall(
        (status) => FfiConverterBool.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_roomlistdynamicentriescontroller_set_filter(
                uniffiClonePointer(),
                FfiConverterRoomListEntriesDynamicFilterKind.lower(kind),
                status)),
        null);
  }
}

final _RoomListEntriesWithDynamicAdaptersResultFinalizer =
    Finalizer<Pointer<Void>>((ptr) {
  rustCall((status) => _UniffiLib.instance
      .uniffi_matrix_sdk_ffi_fn_free_roomlistentrieswithdynamicadaptersresult(
          ptr, status));
});

class RoomListEntriesWithDynamicAdaptersResult {
  late final Pointer<Void> _ptr;

  RoomListEntriesWithDynamicAdaptersResult._(this._ptr) {
    _RoomListEntriesWithDynamicAdaptersResultFinalizer.attach(this, _ptr,
        detach: this);
  }

  factory RoomListEntriesWithDynamicAdaptersResult.lift(Pointer<Void> ptr) {
    return RoomListEntriesWithDynamicAdaptersResult._(ptr);
  }

  static Pointer<Void> lower(RoomListEntriesWithDynamicAdaptersResult value) {
    return value.uniffiClonePointer();
  }

  Pointer<Void> uniffiClonePointer() {
    return rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_clone_roomlistentrieswithdynamicadaptersresult(
            _ptr, status));
  }

  static int allocationSize(RoomListEntriesWithDynamicAdaptersResult value) {
    return 8;
  }

  static LiftRetVal<RoomListEntriesWithDynamicAdaptersResult> read(
      Uint8List buf) {
    final handle = buf.buffer.asByteData(buf.offsetInBytes).getInt64(0);
    final pointer = Pointer<Void>.fromAddress(handle);
    return LiftRetVal(
        RoomListEntriesWithDynamicAdaptersResult.lift(pointer), 8);
  }

  static int write(
      RoomListEntriesWithDynamicAdaptersResult value, Uint8List buf) {
    final handle = lower(value);
    buf.buffer.asByteData(buf.offsetInBytes).setInt64(0, handle.address);
    return 8;
  }

  void dispose() {
    _RoomListEntriesWithDynamicAdaptersResultFinalizer.detach(this);
    rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_free_roomlistentrieswithdynamicadaptersresult(
            _ptr, status));
  }

  RoomListDynamicEntriesController controller() {
    return rustCall(
        (status) => RoomListDynamicEntriesController.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_roomlistentrieswithdynamicadaptersresult_controller(
                uniffiClonePointer(), status)),
        null);
  }

  TaskHandle entriesStream() {
    return rustCall(
        (status) => TaskHandle.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_roomlistentrieswithdynamicadaptersresult_entries_stream(
                uniffiClonePointer(), status)),
        null);
  }
}

final _RoomListServiceFinalizer = Finalizer<Pointer<Void>>((ptr) {
  rustCall((status) => _UniffiLib.instance
      .uniffi_matrix_sdk_ffi_fn_free_roomlistservice(ptr, status));
});

class RoomListService {
  late final Pointer<Void> _ptr;

  RoomListService._(this._ptr) {
    _RoomListServiceFinalizer.attach(this, _ptr, detach: this);
  }

  factory RoomListService.lift(Pointer<Void> ptr) {
    return RoomListService._(ptr);
  }

  static Pointer<Void> lower(RoomListService value) {
    return value.uniffiClonePointer();
  }

  Pointer<Void> uniffiClonePointer() {
    return rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_clone_roomlistservice(_ptr, status));
  }

  static int allocationSize(RoomListService value) {
    return 8;
  }

  static LiftRetVal<RoomListService> read(Uint8List buf) {
    final handle = buf.buffer.asByteData(buf.offsetInBytes).getInt64(0);
    final pointer = Pointer<Void>.fromAddress(handle);
    return LiftRetVal(RoomListService.lift(pointer), 8);
  }

  static int write(RoomListService value, Uint8List buf) {
    final handle = lower(value);
    buf.buffer.asByteData(buf.offsetInBytes).setInt64(0, handle.address);
    return 8;
  }

  void dispose() {
    _RoomListServiceFinalizer.detach(this);
    rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_free_roomlistservice(_ptr, status));
  }

  Future<RoomList> allRooms() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_roomlistservice_all_rooms(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_pointer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_pointer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_pointer,
      RoomList.lift,
      roomListExceptionErrorHandler,
    );
  }

  Room room(
    String roomId,
  ) {
    return rustCall(
        (status) => Room.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_roomlistservice_room(
                uniffiClonePointer(),
                FfiConverterString.lower(roomId),
                status)),
        roomListExceptionErrorHandler);
  }

  TaskHandle state(
    RoomListServiceStateListener listener,
  ) {
    return rustCall(
        (status) => TaskHandle.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_roomlistservice_state(
                uniffiClonePointer(),
                FfiConverterCallbackInterfaceRoomListServiceStateListener.lower(
                    listener),
                status)),
        null);
  }

  Future<void> subscribeToRooms(
    List<String> roomIds,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_roomlistservice_subscribe_to_rooms(
        uniffiClonePointer(),
        FfiConverterSequenceString.lower(roomIds),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      roomListExceptionErrorHandler,
    );
  }

  TaskHandle syncIndicator(
    int delayBeforeShowingInMs,
    int delayBeforeHidingInMs,
    RoomListServiceSyncIndicatorListener listener,
  ) {
    return rustCall(
        (status) => TaskHandle.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_roomlistservice_sync_indicator(
                uniffiClonePointer(),
                delayBeforeShowingInMs,
                delayBeforeHidingInMs,
                FfiConverterCallbackInterfaceRoomListServiceSyncIndicatorListener
                    .lower(listener),
                status)),
        null);
  }
}

final _RoomMembersIteratorFinalizer = Finalizer<Pointer<Void>>((ptr) {
  rustCall((status) => _UniffiLib.instance
      .uniffi_matrix_sdk_ffi_fn_free_roommembersiterator(ptr, status));
});

class RoomMembersIterator {
  late final Pointer<Void> _ptr;

  RoomMembersIterator._(this._ptr) {
    _RoomMembersIteratorFinalizer.attach(this, _ptr, detach: this);
  }

  factory RoomMembersIterator.lift(Pointer<Void> ptr) {
    return RoomMembersIterator._(ptr);
  }

  static Pointer<Void> lower(RoomMembersIterator value) {
    return value.uniffiClonePointer();
  }

  Pointer<Void> uniffiClonePointer() {
    return rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_clone_roommembersiterator(_ptr, status));
  }

  static int allocationSize(RoomMembersIterator value) {
    return 8;
  }

  static LiftRetVal<RoomMembersIterator> read(Uint8List buf) {
    final handle = buf.buffer.asByteData(buf.offsetInBytes).getInt64(0);
    final pointer = Pointer<Void>.fromAddress(handle);
    return LiftRetVal(RoomMembersIterator.lift(pointer), 8);
  }

  static int write(RoomMembersIterator value, Uint8List buf) {
    final handle = lower(value);
    buf.buffer.asByteData(buf.offsetInBytes).setInt64(0, handle.address);
    return 8;
  }

  void dispose() {
    _RoomMembersIteratorFinalizer.detach(this);
    rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_free_roommembersiterator(_ptr, status));
  }

  int len() {
    return rustCall(
        (status) => FfiConverterUInt32.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_roommembersiterator_len(
                uniffiClonePointer(), status)),
        null);
  }

  List<RoomMember>? nextChunk(
    int chunkSize,
  ) {
    return rustCall(
        (status) => FfiConverterOptionalSequenceRoomMember.lift(_UniffiLib
            .instance
            .uniffi_matrix_sdk_ffi_fn_method_roommembersiterator_next_chunk(
                uniffiClonePointer(), chunkSize, status)),
        null);
  }
}

final _RoomMessageEventContentWithoutRelationFinalizer =
    Finalizer<Pointer<Void>>((ptr) {
  rustCall((status) => _UniffiLib.instance
      .uniffi_matrix_sdk_ffi_fn_free_roommessageeventcontentwithoutrelation(
          ptr, status));
});

class RoomMessageEventContentWithoutRelation {
  late final Pointer<Void> _ptr;

  RoomMessageEventContentWithoutRelation._(this._ptr) {
    _RoomMessageEventContentWithoutRelationFinalizer.attach(this, _ptr,
        detach: this);
  }

  factory RoomMessageEventContentWithoutRelation.lift(Pointer<Void> ptr) {
    return RoomMessageEventContentWithoutRelation._(ptr);
  }

  static Pointer<Void> lower(RoomMessageEventContentWithoutRelation value) {
    return value.uniffiClonePointer();
  }

  Pointer<Void> uniffiClonePointer() {
    return rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_clone_roommessageeventcontentwithoutrelation(
            _ptr, status));
  }

  static int allocationSize(RoomMessageEventContentWithoutRelation value) {
    return 8;
  }

  static LiftRetVal<RoomMessageEventContentWithoutRelation> read(
      Uint8List buf) {
    final handle = buf.buffer.asByteData(buf.offsetInBytes).getInt64(0);
    final pointer = Pointer<Void>.fromAddress(handle);
    return LiftRetVal(RoomMessageEventContentWithoutRelation.lift(pointer), 8);
  }

  static int write(
      RoomMessageEventContentWithoutRelation value, Uint8List buf) {
    final handle = lower(value);
    buf.buffer.asByteData(buf.offsetInBytes).setInt64(0, handle.address);
    return 8;
  }

  void dispose() {
    _RoomMessageEventContentWithoutRelationFinalizer.detach(this);
    rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_free_roommessageeventcontentwithoutrelation(
            _ptr, status));
  }

  RoomMessageEventContentWithoutRelation withMentions(
    Mentions mentions,
  ) {
    return rustCall(
        (status) => RoomMessageEventContentWithoutRelation.lift(_UniffiLib
            .instance
            .uniffi_matrix_sdk_ffi_fn_method_roommessageeventcontentwithoutrelation_with_mentions(
                uniffiClonePointer(),
                FfiConverterMentions.lower(mentions),
                status)),
        null);
  }
}

final _RoomPowerLevelsFinalizer = Finalizer<Pointer<Void>>((ptr) {
  rustCall((status) => _UniffiLib.instance
      .uniffi_matrix_sdk_ffi_fn_free_roompowerlevels(ptr, status));
});

class RoomPowerLevels {
  late final Pointer<Void> _ptr;

  RoomPowerLevels._(this._ptr) {
    _RoomPowerLevelsFinalizer.attach(this, _ptr, detach: this);
  }

  factory RoomPowerLevels.lift(Pointer<Void> ptr) {
    return RoomPowerLevels._(ptr);
  }

  static Pointer<Void> lower(RoomPowerLevels value) {
    return value.uniffiClonePointer();
  }

  Pointer<Void> uniffiClonePointer() {
    return rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_clone_roompowerlevels(_ptr, status));
  }

  static int allocationSize(RoomPowerLevels value) {
    return 8;
  }

  static LiftRetVal<RoomPowerLevels> read(Uint8List buf) {
    final handle = buf.buffer.asByteData(buf.offsetInBytes).getInt64(0);
    final pointer = Pointer<Void>.fromAddress(handle);
    return LiftRetVal(RoomPowerLevels.lift(pointer), 8);
  }

  static int write(RoomPowerLevels value, Uint8List buf) {
    final handle = lower(value);
    buf.buffer.asByteData(buf.offsetInBytes).setInt64(0, handle.address);
    return 8;
  }

  void dispose() {
    _RoomPowerLevelsFinalizer.detach(this);
    rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_free_roompowerlevels(_ptr, status));
  }

  bool canOwnUserBan() {
    return rustCall(
        (status) => FfiConverterBool.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_roompowerlevels_can_own_user_ban(
                uniffiClonePointer(), status)),
        null);
  }

  bool canOwnUserInvite() {
    return rustCall(
        (status) => FfiConverterBool.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_roompowerlevels_can_own_user_invite(
                uniffiClonePointer(), status)),
        null);
  }

  bool canOwnUserKick() {
    return rustCall(
        (status) => FfiConverterBool.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_roompowerlevels_can_own_user_kick(
                uniffiClonePointer(), status)),
        null);
  }

  bool canOwnUserPinUnpin() {
    return rustCall(
        (status) => FfiConverterBool.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_roompowerlevels_can_own_user_pin_unpin(
                uniffiClonePointer(), status)),
        null);
  }

  bool canOwnUserRedactOther() {
    return rustCall(
        (status) => FfiConverterBool.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_roompowerlevels_can_own_user_redact_other(
                uniffiClonePointer(), status)),
        null);
  }

  bool canOwnUserRedactOwn() {
    return rustCall(
        (status) => FfiConverterBool.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_roompowerlevels_can_own_user_redact_own(
                uniffiClonePointer(), status)),
        null);
  }

  bool canOwnUserSendMessage(
    MessageLikeEventType message,
  ) {
    return rustCall(
        (status) => FfiConverterBool.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_roompowerlevels_can_own_user_send_message(
                uniffiClonePointer(),
                FfiConverterMessageLikeEventType.lower(message),
                status)),
        null);
  }

  bool canOwnUserSendState(
    StateEventType stateEvent,
  ) {
    return rustCall(
        (status) => FfiConverterBool.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_roompowerlevels_can_own_user_send_state(
                uniffiClonePointer(),
                FfiConverterStateEventType.lower(stateEvent),
                status)),
        null);
  }

  bool canOwnUserTriggerRoomNotification() {
    return rustCall(
        (status) => FfiConverterBool.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_roompowerlevels_can_own_user_trigger_room_notification(
                uniffiClonePointer(), status)),
        null);
  }

  bool canUserBan(
    String userId,
  ) {
    return rustCall(
        (status) => FfiConverterBool.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_roompowerlevels_can_user_ban(
                uniffiClonePointer(),
                FfiConverterString.lower(userId),
                status)),
        clientExceptionErrorHandler);
  }

  bool canUserInvite(
    String userId,
  ) {
    return rustCall(
        (status) => FfiConverterBool.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_roompowerlevels_can_user_invite(
                uniffiClonePointer(),
                FfiConverterString.lower(userId),
                status)),
        clientExceptionErrorHandler);
  }

  bool canUserKick(
    String userId,
  ) {
    return rustCall(
        (status) => FfiConverterBool.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_roompowerlevels_can_user_kick(
                uniffiClonePointer(),
                FfiConverterString.lower(userId),
                status)),
        clientExceptionErrorHandler);
  }

  bool canUserPinUnpin(
    String userId,
  ) {
    return rustCall(
        (status) => FfiConverterBool.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_roompowerlevels_can_user_pin_unpin(
                uniffiClonePointer(),
                FfiConverterString.lower(userId),
                status)),
        clientExceptionErrorHandler);
  }

  bool canUserRedactOther(
    String userId,
  ) {
    return rustCall(
        (status) => FfiConverterBool.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_roompowerlevels_can_user_redact_other(
                uniffiClonePointer(),
                FfiConverterString.lower(userId),
                status)),
        clientExceptionErrorHandler);
  }

  bool canUserRedactOwn(
    String userId,
  ) {
    return rustCall(
        (status) => FfiConverterBool.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_roompowerlevels_can_user_redact_own(
                uniffiClonePointer(),
                FfiConverterString.lower(userId),
                status)),
        clientExceptionErrorHandler);
  }

  bool canUserSendMessage(
    String userId,
    MessageLikeEventType message,
  ) {
    return rustCall(
        (status) => FfiConverterBool.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_roompowerlevels_can_user_send_message(
                uniffiClonePointer(),
                FfiConverterString.lower(userId),
                FfiConverterMessageLikeEventType.lower(message),
                status)),
        clientExceptionErrorHandler);
  }

  bool canUserSendState(
    String userId,
    StateEventType stateEvent,
  ) {
    return rustCall(
        (status) => FfiConverterBool.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_roompowerlevels_can_user_send_state(
                uniffiClonePointer(),
                FfiConverterString.lower(userId),
                FfiConverterStateEventType.lower(stateEvent),
                status)),
        clientExceptionErrorHandler);
  }

  bool canUserTriggerRoomNotification(
    String userId,
  ) {
    return rustCall(
        (status) => FfiConverterBool.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_roompowerlevels_can_user_trigger_room_notification(
                uniffiClonePointer(),
                FfiConverterString.lower(userId),
                status)),
        clientExceptionErrorHandler);
  }

  Map<String, int> userPowerLevels() {
    return rustCall(
        (status) => FfiConverterMapStringInt64.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_roompowerlevels_user_power_levels(
                uniffiClonePointer(), status)),
        null);
  }

  RoomPowerLevelsValues values() {
    return rustCall(
        (status) => FfiConverterRoomPowerLevelsValues.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_roompowerlevels_values(
                uniffiClonePointer(), status)),
        null);
  }
}

final _RoomPreviewFinalizer = Finalizer<Pointer<Void>>((ptr) {
  rustCall((status) => _UniffiLib.instance
      .uniffi_matrix_sdk_ffi_fn_free_roompreview(ptr, status));
});

class RoomPreview {
  late final Pointer<Void> _ptr;

  RoomPreview._(this._ptr) {
    _RoomPreviewFinalizer.attach(this, _ptr, detach: this);
  }

  factory RoomPreview.lift(Pointer<Void> ptr) {
    return RoomPreview._(ptr);
  }

  static Pointer<Void> lower(RoomPreview value) {
    return value.uniffiClonePointer();
  }

  Pointer<Void> uniffiClonePointer() {
    return rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_clone_roompreview(_ptr, status));
  }

  static int allocationSize(RoomPreview value) {
    return 8;
  }

  static LiftRetVal<RoomPreview> read(Uint8List buf) {
    final handle = buf.buffer.asByteData(buf.offsetInBytes).getInt64(0);
    final pointer = Pointer<Void>.fromAddress(handle);
    return LiftRetVal(RoomPreview.lift(pointer), 8);
  }

  static int write(RoomPreview value, Uint8List buf) {
    final handle = lower(value);
    buf.buffer.asByteData(buf.offsetInBytes).setInt64(0, handle.address);
    return 8;
  }

  void dispose() {
    _RoomPreviewFinalizer.detach(this);
    rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_free_roompreview(_ptr, status));
  }

  Future<void> forget() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_roompreview_forget(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  RoomPreviewInfo info() {
    return rustCall(
        (status) => FfiConverterRoomPreviewInfo.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_roompreview_info(
                uniffiClonePointer(), status)),
        null);
  }

  Future<RoomMember?> inviter() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_roompreview_inviter(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_rust_buffer,
      FfiConverterOptionalRoomMember.lift,
      null,
    );
  }

  Future<void> leave() {
    return uniffiRustCallAsync(
      () =>
          _UniffiLib.instance.uniffi_matrix_sdk_ffi_fn_method_roompreview_leave(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  Future<RoomMemberWithSenderInfo?> ownMembershipDetails() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_roompreview_own_membership_details(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_rust_buffer,
      FfiConverterOptionalRoomMemberWithSenderInfo.lift,
      null,
    );
  }
}

final _SendAttachmentJoinHandleFinalizer = Finalizer<Pointer<Void>>((ptr) {
  rustCall((status) => _UniffiLib.instance
      .uniffi_matrix_sdk_ffi_fn_free_sendattachmentjoinhandle(ptr, status));
});

class SendAttachmentJoinHandle {
  late final Pointer<Void> _ptr;

  SendAttachmentJoinHandle._(this._ptr) {
    _SendAttachmentJoinHandleFinalizer.attach(this, _ptr, detach: this);
  }

  factory SendAttachmentJoinHandle.lift(Pointer<Void> ptr) {
    return SendAttachmentJoinHandle._(ptr);
  }

  static Pointer<Void> lower(SendAttachmentJoinHandle value) {
    return value.uniffiClonePointer();
  }

  Pointer<Void> uniffiClonePointer() {
    return rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_clone_sendattachmentjoinhandle(_ptr, status));
  }

  static int allocationSize(SendAttachmentJoinHandle value) {
    return 8;
  }

  static LiftRetVal<SendAttachmentJoinHandle> read(Uint8List buf) {
    final handle = buf.buffer.asByteData(buf.offsetInBytes).getInt64(0);
    final pointer = Pointer<Void>.fromAddress(handle);
    return LiftRetVal(SendAttachmentJoinHandle.lift(pointer), 8);
  }

  static int write(SendAttachmentJoinHandle value, Uint8List buf) {
    final handle = lower(value);
    buf.buffer.asByteData(buf.offsetInBytes).setInt64(0, handle.address);
    return 8;
  }

  void dispose() {
    _SendAttachmentJoinHandleFinalizer.detach(this);
    rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_free_sendattachmentjoinhandle(_ptr, status));
  }

  void cancel() {
    return rustCall((status) {
      _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_sendattachmentjoinhandle_cancel(
              uniffiClonePointer(), status);
    }, null);
  }

  Future<void> join() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_sendattachmentjoinhandle_join(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      roomExceptionErrorHandler,
    );
  }
}

final _SendGalleryJoinHandleFinalizer = Finalizer<Pointer<Void>>((ptr) {
  rustCall((status) => _UniffiLib.instance
      .uniffi_matrix_sdk_ffi_fn_free_sendgalleryjoinhandle(ptr, status));
});

class SendGalleryJoinHandle {
  late final Pointer<Void> _ptr;

  SendGalleryJoinHandle._(this._ptr) {
    _SendGalleryJoinHandleFinalizer.attach(this, _ptr, detach: this);
  }

  factory SendGalleryJoinHandle.lift(Pointer<Void> ptr) {
    return SendGalleryJoinHandle._(ptr);
  }

  static Pointer<Void> lower(SendGalleryJoinHandle value) {
    return value.uniffiClonePointer();
  }

  Pointer<Void> uniffiClonePointer() {
    return rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_clone_sendgalleryjoinhandle(_ptr, status));
  }

  static int allocationSize(SendGalleryJoinHandle value) {
    return 8;
  }

  static LiftRetVal<SendGalleryJoinHandle> read(Uint8List buf) {
    final handle = buf.buffer.asByteData(buf.offsetInBytes).getInt64(0);
    final pointer = Pointer<Void>.fromAddress(handle);
    return LiftRetVal(SendGalleryJoinHandle.lift(pointer), 8);
  }

  static int write(SendGalleryJoinHandle value, Uint8List buf) {
    final handle = lower(value);
    buf.buffer.asByteData(buf.offsetInBytes).setInt64(0, handle.address);
    return 8;
  }

  void dispose() {
    _SendGalleryJoinHandleFinalizer.detach(this);
    rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_free_sendgalleryjoinhandle(_ptr, status));
  }

  void cancel() {
    return rustCall((status) {
      _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_sendgalleryjoinhandle_cancel(
              uniffiClonePointer(), status);
    }, null);
  }

  Future<void> join() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_sendgalleryjoinhandle_join(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      roomExceptionErrorHandler,
    );
  }
}

final _SendHandleFinalizer = Finalizer<Pointer<Void>>((ptr) {
  rustCall((status) => _UniffiLib.instance
      .uniffi_matrix_sdk_ffi_fn_free_sendhandle(ptr, status));
});

class SendHandle {
  late final Pointer<Void> _ptr;

  SendHandle._(this._ptr) {
    _SendHandleFinalizer.attach(this, _ptr, detach: this);
  }

  factory SendHandle.lift(Pointer<Void> ptr) {
    return SendHandle._(ptr);
  }

  static Pointer<Void> lower(SendHandle value) {
    return value.uniffiClonePointer();
  }

  Pointer<Void> uniffiClonePointer() {
    return rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_clone_sendhandle(_ptr, status));
  }

  static int allocationSize(SendHandle value) {
    return 8;
  }

  static LiftRetVal<SendHandle> read(Uint8List buf) {
    final handle = buf.buffer.asByteData(buf.offsetInBytes).getInt64(0);
    final pointer = Pointer<Void>.fromAddress(handle);
    return LiftRetVal(SendHandle.lift(pointer), 8);
  }

  static int write(SendHandle value, Uint8List buf) {
    final handle = lower(value);
    buf.buffer.asByteData(buf.offsetInBytes).setInt64(0, handle.address);
    return 8;
  }

  void dispose() {
    _SendHandleFinalizer.detach(this);
    rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_free_sendhandle(_ptr, status));
  }

  Future<bool> abort() {
    return uniffiRustCallAsync(
      () =>
          _UniffiLib.instance.uniffi_matrix_sdk_ffi_fn_method_sendhandle_abort(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_i8,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_i8,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_i8,
      FfiConverterBool.lift,
      clientExceptionErrorHandler,
    );
  }

  Future<void> tryResend() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_sendhandle_try_resend(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }
}

final _SessionVerificationControllerFinalizer = Finalizer<Pointer<Void>>((ptr) {
  rustCall((status) => _UniffiLib.instance
      .uniffi_matrix_sdk_ffi_fn_free_sessionverificationcontroller(
          ptr, status));
});

class SessionVerificationController {
  late final Pointer<Void> _ptr;

  SessionVerificationController._(this._ptr) {
    _SessionVerificationControllerFinalizer.attach(this, _ptr, detach: this);
  }

  factory SessionVerificationController.lift(Pointer<Void> ptr) {
    return SessionVerificationController._(ptr);
  }

  static Pointer<Void> lower(SessionVerificationController value) {
    return value.uniffiClonePointer();
  }

  Pointer<Void> uniffiClonePointer() {
    return rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_clone_sessionverificationcontroller(
            _ptr, status));
  }

  static int allocationSize(SessionVerificationController value) {
    return 8;
  }

  static LiftRetVal<SessionVerificationController> read(Uint8List buf) {
    final handle = buf.buffer.asByteData(buf.offsetInBytes).getInt64(0);
    final pointer = Pointer<Void>.fromAddress(handle);
    return LiftRetVal(SessionVerificationController.lift(pointer), 8);
  }

  static int write(SessionVerificationController value, Uint8List buf) {
    final handle = lower(value);
    buf.buffer.asByteData(buf.offsetInBytes).setInt64(0, handle.address);
    return 8;
  }

  void dispose() {
    _SessionVerificationControllerFinalizer.detach(this);
    rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_free_sessionverificationcontroller(
            _ptr, status));
  }

  Future<void> acceptVerificationRequest() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_sessionverificationcontroller_accept_verification_request(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  Future<void> acknowledgeVerificationRequest(
    String senderId,
    String flowId,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_sessionverificationcontroller_acknowledge_verification_request(
        uniffiClonePointer(),
        FfiConverterString.lower(senderId),
        FfiConverterString.lower(flowId),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  Future<void> approveVerification() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_sessionverificationcontroller_approve_verification(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  Future<void> cancelVerification() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_sessionverificationcontroller_cancel_verification(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  Future<void> declineVerification() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_sessionverificationcontroller_decline_verification(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  Future<void> requestDeviceVerification() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_sessionverificationcontroller_request_device_verification(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  Future<void> requestUserVerification(
    String userId,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_sessionverificationcontroller_request_user_verification(
        uniffiClonePointer(),
        FfiConverterString.lower(userId),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  void setDelegate(
    SessionVerificationControllerDelegate? delegate,
  ) {
    return rustCall((status) {
      _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_sessionverificationcontroller_set_delegate(
              uniffiClonePointer(),
              FfiConverterOptionalCallbackInterfaceSessionVerificationControllerDelegate
                  .lower(delegate),
              status);
    }, null);
  }

  Future<void> startSasVerification() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_sessionverificationcontroller_start_sas_verification(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }
}

final _SessionVerificationEmojiFinalizer = Finalizer<Pointer<Void>>((ptr) {
  rustCall((status) => _UniffiLib.instance
      .uniffi_matrix_sdk_ffi_fn_free_sessionverificationemoji(ptr, status));
});

class SessionVerificationEmoji {
  late final Pointer<Void> _ptr;

  SessionVerificationEmoji._(this._ptr) {
    _SessionVerificationEmojiFinalizer.attach(this, _ptr, detach: this);
  }

  factory SessionVerificationEmoji.lift(Pointer<Void> ptr) {
    return SessionVerificationEmoji._(ptr);
  }

  static Pointer<Void> lower(SessionVerificationEmoji value) {
    return value.uniffiClonePointer();
  }

  Pointer<Void> uniffiClonePointer() {
    return rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_clone_sessionverificationemoji(_ptr, status));
  }

  static int allocationSize(SessionVerificationEmoji value) {
    return 8;
  }

  static LiftRetVal<SessionVerificationEmoji> read(Uint8List buf) {
    final handle = buf.buffer.asByteData(buf.offsetInBytes).getInt64(0);
    final pointer = Pointer<Void>.fromAddress(handle);
    return LiftRetVal(SessionVerificationEmoji.lift(pointer), 8);
  }

  static int write(SessionVerificationEmoji value, Uint8List buf) {
    final handle = lower(value);
    buf.buffer.asByteData(buf.offsetInBytes).setInt64(0, handle.address);
    return 8;
  }

  void dispose() {
    _SessionVerificationEmojiFinalizer.detach(this);
    rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_free_sessionverificationemoji(_ptr, status));
  }

  String description() {
    return rustCall(
        (status) => FfiConverterString.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_sessionverificationemoji_description(
                uniffiClonePointer(), status)),
        null);
  }

  String symbol() {
    return rustCall(
        (status) => FfiConverterString.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_sessionverificationemoji_symbol(
                uniffiClonePointer(), status)),
        null);
  }
}

final _SpanFinalizer = Finalizer<Pointer<Void>>((ptr) {
  rustCall((status) =>
      _UniffiLib.instance.uniffi_matrix_sdk_ffi_fn_free_span(ptr, status));
});

class Span {
  late final Pointer<Void> _ptr;

  Span._(this._ptr) {
    _SpanFinalizer.attach(this, _ptr, detach: this);
  }

  Span.current()
      : _ptr = rustCall(
            (status) => _UniffiLib.instance
                .uniffi_matrix_sdk_ffi_fn_constructor_span_current(status),
            null) {
    _SpanFinalizer.attach(this, _ptr, detach: this);
  }
  Span({
    required String file,
    int? line,
    required LogLevel level,
    required String target,
    required String name,
  }) : _ptr = rustCall(
            (status) => _UniffiLib.instance
                .uniffi_matrix_sdk_ffi_fn_constructor_span_new(
                    FfiConverterString.lower(file),
                    FfiConverterOptionalUInt32.lower(line),
                    FfiConverterLogLevel.lower(level),
                    FfiConverterString.lower(target),
                    FfiConverterString.lower(name),
                    status),
            null) {
    _SpanFinalizer.attach(this, _ptr, detach: this);
  }

  factory Span.lift(Pointer<Void> ptr) {
    return Span._(ptr);
  }

  static Pointer<Void> lower(Span value) {
    return value.uniffiClonePointer();
  }

  Pointer<Void> uniffiClonePointer() {
    return rustCall((status) =>
        _UniffiLib.instance.uniffi_matrix_sdk_ffi_fn_clone_span(_ptr, status));
  }

  static int allocationSize(Span value) {
    return 8;
  }

  static LiftRetVal<Span> read(Uint8List buf) {
    final handle = buf.buffer.asByteData(buf.offsetInBytes).getInt64(0);
    final pointer = Pointer<Void>.fromAddress(handle);
    return LiftRetVal(Span.lift(pointer), 8);
  }

  static int write(Span value, Uint8List buf) {
    final handle = lower(value);
    buf.buffer.asByteData(buf.offsetInBytes).setInt64(0, handle.address);
    return 8;
  }

  void dispose() {
    _SpanFinalizer.detach(this);
    rustCall((status) =>
        _UniffiLib.instance.uniffi_matrix_sdk_ffi_fn_free_span(_ptr, status));
  }

  void enter() {
    return rustCall((status) {
      _UniffiLib.instance.uniffi_matrix_sdk_ffi_fn_method_span_enter(
          uniffiClonePointer(), status);
    }, null);
  }

  void exit() {
    return rustCall((status) {
      _UniffiLib.instance.uniffi_matrix_sdk_ffi_fn_method_span_exit(
          uniffiClonePointer(), status);
    }, null);
  }

  bool isNone() {
    return rustCall(
        (status) => FfiConverterBool.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_span_is_none(
                uniffiClonePointer(), status)),
        null);
  }
}

final _SsoHandlerFinalizer = Finalizer<Pointer<Void>>((ptr) {
  rustCall((status) => _UniffiLib.instance
      .uniffi_matrix_sdk_ffi_fn_free_ssohandler(ptr, status));
});

class SsoHandler {
  late final Pointer<Void> _ptr;

  SsoHandler._(this._ptr) {
    _SsoHandlerFinalizer.attach(this, _ptr, detach: this);
  }

  factory SsoHandler.lift(Pointer<Void> ptr) {
    return SsoHandler._(ptr);
  }

  static Pointer<Void> lower(SsoHandler value) {
    return value.uniffiClonePointer();
  }

  Pointer<Void> uniffiClonePointer() {
    return rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_clone_ssohandler(_ptr, status));
  }

  static int allocationSize(SsoHandler value) {
    return 8;
  }

  static LiftRetVal<SsoHandler> read(Uint8List buf) {
    final handle = buf.buffer.asByteData(buf.offsetInBytes).getInt64(0);
    final pointer = Pointer<Void>.fromAddress(handle);
    return LiftRetVal(SsoHandler.lift(pointer), 8);
  }

  static int write(SsoHandler value, Uint8List buf) {
    final handle = lower(value);
    buf.buffer.asByteData(buf.offsetInBytes).setInt64(0, handle.address);
    return 8;
  }

  void dispose() {
    _SsoHandlerFinalizer.detach(this);
    rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_free_ssohandler(_ptr, status));
  }

  Future<void> finish(
    String callbackUrl,
  ) {
    return uniffiRustCallAsync(
      () =>
          _UniffiLib.instance.uniffi_matrix_sdk_ffi_fn_method_ssohandler_finish(
        uniffiClonePointer(),
        FfiConverterString.lower(callbackUrl),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      ssoExceptionErrorHandler,
    );
  }

  String url() {
    return rustCall(
        (status) => FfiConverterString.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_ssohandler_url(
                uniffiClonePointer(), status)),
        null);
  }
}

final _SyncServiceFinalizer = Finalizer<Pointer<Void>>((ptr) {
  rustCall((status) => _UniffiLib.instance
      .uniffi_matrix_sdk_ffi_fn_free_syncservice(ptr, status));
});

class SyncService {
  late final Pointer<Void> _ptr;

  SyncService._(this._ptr) {
    _SyncServiceFinalizer.attach(this, _ptr, detach: this);
  }

  factory SyncService.lift(Pointer<Void> ptr) {
    return SyncService._(ptr);
  }

  static Pointer<Void> lower(SyncService value) {
    return value.uniffiClonePointer();
  }

  Pointer<Void> uniffiClonePointer() {
    return rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_clone_syncservice(_ptr, status));
  }

  static int allocationSize(SyncService value) {
    return 8;
  }

  static LiftRetVal<SyncService> read(Uint8List buf) {
    final handle = buf.buffer.asByteData(buf.offsetInBytes).getInt64(0);
    final pointer = Pointer<Void>.fromAddress(handle);
    return LiftRetVal(SyncService.lift(pointer), 8);
  }

  static int write(SyncService value, Uint8List buf) {
    final handle = lower(value);
    buf.buffer.asByteData(buf.offsetInBytes).setInt64(0, handle.address);
    return 8;
  }

  void dispose() {
    _SyncServiceFinalizer.detach(this);
    rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_free_syncservice(_ptr, status));
  }

  RoomListService roomListService() {
    return rustCall(
        (status) => RoomListService.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_syncservice_room_list_service(
                uniffiClonePointer(), status)),
        null);
  }

  Future<void> start() {
    return uniffiRustCallAsync(
      () =>
          _UniffiLib.instance.uniffi_matrix_sdk_ffi_fn_method_syncservice_start(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      null,
    );
  }

  TaskHandle state(
    SyncServiceStateObserver listener,
  ) {
    return rustCall(
        (status) => TaskHandle.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_syncservice_state(
                uniffiClonePointer(),
                FfiConverterCallbackInterfaceSyncServiceStateObserver.lower(
                    listener),
                status)),
        null);
  }

  Future<void> stop() {
    return uniffiRustCallAsync(
      () =>
          _UniffiLib.instance.uniffi_matrix_sdk_ffi_fn_method_syncservice_stop(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      null,
    );
  }
}

final _SyncServiceBuilderFinalizer = Finalizer<Pointer<Void>>((ptr) {
  rustCall((status) => _UniffiLib.instance
      .uniffi_matrix_sdk_ffi_fn_free_syncservicebuilder(ptr, status));
});

class SyncServiceBuilder {
  late final Pointer<Void> _ptr;

  SyncServiceBuilder._(this._ptr) {
    _SyncServiceBuilderFinalizer.attach(this, _ptr, detach: this);
  }

  factory SyncServiceBuilder.lift(Pointer<Void> ptr) {
    return SyncServiceBuilder._(ptr);
  }

  static Pointer<Void> lower(SyncServiceBuilder value) {
    return value.uniffiClonePointer();
  }

  Pointer<Void> uniffiClonePointer() {
    return rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_clone_syncservicebuilder(_ptr, status));
  }

  static int allocationSize(SyncServiceBuilder value) {
    return 8;
  }

  static LiftRetVal<SyncServiceBuilder> read(Uint8List buf) {
    final handle = buf.buffer.asByteData(buf.offsetInBytes).getInt64(0);
    final pointer = Pointer<Void>.fromAddress(handle);
    return LiftRetVal(SyncServiceBuilder.lift(pointer), 8);
  }

  static int write(SyncServiceBuilder value, Uint8List buf) {
    final handle = lower(value);
    buf.buffer.asByteData(buf.offsetInBytes).setInt64(0, handle.address);
    return 8;
  }

  void dispose() {
    _SyncServiceBuilderFinalizer.detach(this);
    rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_free_syncservicebuilder(_ptr, status));
  }

  Future<SyncService> finish() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_syncservicebuilder_finish(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_pointer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_pointer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_pointer,
      SyncService.lift,
      clientExceptionErrorHandler,
    );
  }

  SyncServiceBuilder withCrossProcessLock() {
    return rustCall(
        (status) => SyncServiceBuilder.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_syncservicebuilder_with_cross_process_lock(
                uniffiClonePointer(), status)),
        null);
  }

  SyncServiceBuilder withOfflineMode() {
    return rustCall(
        (status) => SyncServiceBuilder.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_syncservicebuilder_with_offline_mode(
                uniffiClonePointer(), status)),
        null);
  }

  SyncServiceBuilder withSharePos(
    bool enable,
  ) {
    return rustCall(
        (status) => SyncServiceBuilder.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_syncservicebuilder_with_share_pos(
                uniffiClonePointer(), FfiConverterBool.lower(enable), status)),
        null);
  }
}

final _TaskHandleFinalizer = Finalizer<Pointer<Void>>((ptr) {
  rustCall((status) => _UniffiLib.instance
      .uniffi_matrix_sdk_ffi_fn_free_taskhandle(ptr, status));
});

class TaskHandle {
  late final Pointer<Void> _ptr;

  TaskHandle._(this._ptr) {
    _TaskHandleFinalizer.attach(this, _ptr, detach: this);
  }

  factory TaskHandle.lift(Pointer<Void> ptr) {
    return TaskHandle._(ptr);
  }

  static Pointer<Void> lower(TaskHandle value) {
    return value.uniffiClonePointer();
  }

  Pointer<Void> uniffiClonePointer() {
    return rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_clone_taskhandle(_ptr, status));
  }

  static int allocationSize(TaskHandle value) {
    return 8;
  }

  static LiftRetVal<TaskHandle> read(Uint8List buf) {
    final handle = buf.buffer.asByteData(buf.offsetInBytes).getInt64(0);
    final pointer = Pointer<Void>.fromAddress(handle);
    return LiftRetVal(TaskHandle.lift(pointer), 8);
  }

  static int write(TaskHandle value, Uint8List buf) {
    final handle = lower(value);
    buf.buffer.asByteData(buf.offsetInBytes).setInt64(0, handle.address);
    return 8;
  }

  void dispose() {
    _TaskHandleFinalizer.detach(this);
    rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_free_taskhandle(_ptr, status));
  }

  void cancel() {
    return rustCall((status) {
      _UniffiLib.instance.uniffi_matrix_sdk_ffi_fn_method_taskhandle_cancel(
          uniffiClonePointer(), status);
    }, null);
  }

  bool isFinished() {
    return rustCall(
        (status) => FfiConverterBool.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_taskhandle_is_finished(
                uniffiClonePointer(), status)),
        null);
  }
}

final _ThreadSummaryFinalizer = Finalizer<Pointer<Void>>((ptr) {
  rustCall((status) => _UniffiLib.instance
      .uniffi_matrix_sdk_ffi_fn_free_threadsummary(ptr, status));
});

class ThreadSummary {
  late final Pointer<Void> _ptr;

  ThreadSummary._(this._ptr) {
    _ThreadSummaryFinalizer.attach(this, _ptr, detach: this);
  }

  factory ThreadSummary.lift(Pointer<Void> ptr) {
    return ThreadSummary._(ptr);
  }

  static Pointer<Void> lower(ThreadSummary value) {
    return value.uniffiClonePointer();
  }

  Pointer<Void> uniffiClonePointer() {
    return rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_clone_threadsummary(_ptr, status));
  }

  static int allocationSize(ThreadSummary value) {
    return 8;
  }

  static LiftRetVal<ThreadSummary> read(Uint8List buf) {
    final handle = buf.buffer.asByteData(buf.offsetInBytes).getInt64(0);
    final pointer = Pointer<Void>.fromAddress(handle);
    return LiftRetVal(ThreadSummary.lift(pointer), 8);
  }

  static int write(ThreadSummary value, Uint8List buf) {
    final handle = lower(value);
    buf.buffer.asByteData(buf.offsetInBytes).setInt64(0, handle.address);
    return 8;
  }

  void dispose() {
    _ThreadSummaryFinalizer.detach(this);
    rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_free_threadsummary(_ptr, status));
  }

  EmbeddedEventDetails latestEvent() {
    return rustCall(
        (status) => FfiConverterEmbeddedEventDetails.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_threadsummary_latest_event(
                uniffiClonePointer(), status)),
        null);
  }

  int numReplies() {
    return rustCall(
        (status) => FfiConverterUInt64.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_threadsummary_num_replies(
                uniffiClonePointer(), status)),
        null);
  }
}

final _TimelineFinalizer = Finalizer<Pointer<Void>>((ptr) {
  rustCall((status) =>
      _UniffiLib.instance.uniffi_matrix_sdk_ffi_fn_free_timeline(ptr, status));
});

class Timeline {
  late final Pointer<Void> _ptr;

  Timeline._(this._ptr) {
    _TimelineFinalizer.attach(this, _ptr, detach: this);
  }

  factory Timeline.lift(Pointer<Void> ptr) {
    return Timeline._(ptr);
  }

  static Pointer<Void> lower(Timeline value) {
    return value.uniffiClonePointer();
  }

  Pointer<Void> uniffiClonePointer() {
    return rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_clone_timeline(_ptr, status));
  }

  static int allocationSize(Timeline value) {
    return 8;
  }

  static LiftRetVal<Timeline> read(Uint8List buf) {
    final handle = buf.buffer.asByteData(buf.offsetInBytes).getInt64(0);
    final pointer = Pointer<Void>.fromAddress(handle);
    return LiftRetVal(Timeline.lift(pointer), 8);
  }

  static int write(Timeline value, Uint8List buf) {
    final handle = lower(value);
    buf.buffer.asByteData(buf.offsetInBytes).setInt64(0, handle.address);
    return 8;
  }

  void dispose() {
    _TimelineFinalizer.detach(this);
    rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_free_timeline(_ptr, status));
  }

  Future<TaskHandle> addListener(
    TimelineListener listener,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_timeline_add_listener(
        uniffiClonePointer(),
        FfiConverterCallbackInterfaceTimelineListener.lower(listener),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_pointer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_pointer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_pointer,
      TaskHandle.lift,
      null,
    );
  }

  RoomMessageEventContentWithoutRelation? createMessageContent(
    MessageType msgType,
  ) {
    return rustCall(
        (status) => FfiConverterOptionalRoomMessageEventContentWithoutRelation
            .lift(_UniffiLib.instance
                .uniffi_matrix_sdk_ffi_fn_method_timeline_create_message_content(
                    uniffiClonePointer(),
                    FfiConverterMessageType.lower(msgType),
                    status)),
        null);
  }

  Future<void> createPoll(
    String question,
    List<String> answers,
    int maxSelections,
    PollKind pollKind,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_timeline_create_poll(
        uniffiClonePointer(),
        FfiConverterString.lower(question),
        FfiConverterSequenceString.lower(answers),
        maxSelections,
        FfiConverterPollKind.lower(pollKind),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  Future<void> edit(
    EventOrTransactionId eventOrTransactionId,
    EditedContent newContent,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance.uniffi_matrix_sdk_ffi_fn_method_timeline_edit(
        uniffiClonePointer(),
        FfiConverterEventOrTransactionId.lower(eventOrTransactionId),
        FfiConverterEditedContent.lower(newContent),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  Future<void> endPoll(
    String pollStartEventId,
    String text,
  ) {
    return uniffiRustCallAsync(
      () =>
          _UniffiLib.instance.uniffi_matrix_sdk_ffi_fn_method_timeline_end_poll(
        uniffiClonePointer(),
        FfiConverterString.lower(pollStartEventId),
        FfiConverterString.lower(text),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  Future<void> fetchDetailsForEvent(
    String eventId,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_timeline_fetch_details_for_event(
        uniffiClonePointer(),
        FfiConverterString.lower(eventId),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  Future<void> fetchMembers() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_timeline_fetch_members(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      null,
    );
  }

  Future<EventTimelineItem> getEventTimelineItemByEventId(
    String eventId,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_timeline_get_event_timeline_item_by_event_id(
        uniffiClonePointer(),
        FfiConverterString.lower(eventId),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_rust_buffer,
      FfiConverterEventTimelineItem.lift,
      clientExceptionErrorHandler,
    );
  }

  Future<InReplyToDetails> loadReplyDetails(
    String eventIdStr,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_timeline_load_reply_details(
        uniffiClonePointer(),
        FfiConverterString.lower(eventIdStr),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_pointer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_pointer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_pointer,
      InReplyToDetails.lift,
      clientExceptionErrorHandler,
    );
  }

  Future<void> markAsRead(
    ReceiptType receiptType,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_timeline_mark_as_read(
        uniffiClonePointer(),
        FfiConverterReceiptType.lower(receiptType),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  Future<bool> paginateBackwards(
    int numEvents,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_timeline_paginate_backwards(
        uniffiClonePointer(),
        numEvents,
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_i8,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_i8,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_i8,
      FfiConverterBool.lift,
      clientExceptionErrorHandler,
    );
  }

  Future<bool> paginateForwards(
    int numEvents,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_timeline_paginate_forwards(
        uniffiClonePointer(),
        numEvents,
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_i8,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_i8,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_i8,
      FfiConverterBool.lift,
      clientExceptionErrorHandler,
    );
  }

  Future<bool> pinEvent(
    String eventId,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_timeline_pin_event(
        uniffiClonePointer(),
        FfiConverterString.lower(eventId),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_i8,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_i8,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_i8,
      FfiConverterBool.lift,
      clientExceptionErrorHandler,
    );
  }

  Future<void> redactEvent(
    EventOrTransactionId eventOrTransactionId,
    String? reason,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_timeline_redact_event(
        uniffiClonePointer(),
        FfiConverterEventOrTransactionId.lower(eventOrTransactionId),
        FfiConverterOptionalString.lower(reason),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  void retryDecryption(
    List<String> sessionIds,
  ) {
    return rustCall((status) {
      _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_timeline_retry_decryption(
              uniffiClonePointer(),
              FfiConverterSequenceString.lower(sessionIds),
              status);
    }, null);
  }

  Future<SendHandle> send(
    RoomMessageEventContentWithoutRelation msg,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance.uniffi_matrix_sdk_ffi_fn_method_timeline_send(
        uniffiClonePointer(),
        RoomMessageEventContentWithoutRelation.lower(msg),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_pointer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_pointer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_pointer,
      SendHandle.lift,
      clientExceptionErrorHandler,
    );
  }

  SendAttachmentJoinHandle sendAudio(
    UploadParameters params,
    AudioInfo audioInfo,
    ProgressWatcher? progressWatcher,
  ) {
    return rustCall(
        (status) => SendAttachmentJoinHandle.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_timeline_send_audio(
                uniffiClonePointer(),
                FfiConverterUploadParameters.lower(params),
                FfiConverterAudioInfo.lower(audioInfo),
                FfiConverterOptionalCallbackInterfaceProgressWatcher.lower(
                    progressWatcher),
                status)),
        roomExceptionErrorHandler);
  }

  SendAttachmentJoinHandle sendFile(
    UploadParameters params,
    FileInfo fileInfo,
    ProgressWatcher? progressWatcher,
  ) {
    return rustCall(
        (status) => SendAttachmentJoinHandle.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_timeline_send_file(
                uniffiClonePointer(),
                FfiConverterUploadParameters.lower(params),
                FfiConverterFileInfo.lower(fileInfo),
                FfiConverterOptionalCallbackInterfaceProgressWatcher.lower(
                    progressWatcher),
                status)),
        roomExceptionErrorHandler);
  }

  SendGalleryJoinHandle sendGallery(
    GalleryUploadParameters params,
    List<GalleryItemInfo> itemInfos,
  ) {
    return rustCall(
        (status) => SendGalleryJoinHandle.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_timeline_send_gallery(
                uniffiClonePointer(),
                FfiConverterGalleryUploadParameters.lower(params),
                FfiConverterSequenceGalleryItemInfo.lower(itemInfos),
                status)),
        roomExceptionErrorHandler);
  }

  SendAttachmentJoinHandle sendImage(
    UploadParameters params,
    String? thumbnailPath,
    ImageInfo imageInfo,
    ProgressWatcher? progressWatcher,
  ) {
    return rustCall(
        (status) => SendAttachmentJoinHandle.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_timeline_send_image(
                uniffiClonePointer(),
                FfiConverterUploadParameters.lower(params),
                FfiConverterOptionalString.lower(thumbnailPath),
                FfiConverterImageInfo.lower(imageInfo),
                FfiConverterOptionalCallbackInterfaceProgressWatcher.lower(
                    progressWatcher),
                status)),
        roomExceptionErrorHandler);
  }

  Future<void> sendLocation(
    String body,
    String geoUri,
    String? description,
    int? zoomLevel,
    AssetType? assetType,
    String? repliedToEventId,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_timeline_send_location(
        uniffiClonePointer(),
        FfiConverterString.lower(body),
        FfiConverterString.lower(geoUri),
        FfiConverterOptionalString.lower(description),
        FfiConverterOptionalUInt8.lower(zoomLevel),
        FfiConverterOptionalAssetType.lower(assetType),
        FfiConverterOptionalString.lower(repliedToEventId),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  Future<void> sendPollResponse(
    String pollStartEventId,
    List<String> answers,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_timeline_send_poll_response(
        uniffiClonePointer(),
        FfiConverterString.lower(pollStartEventId),
        FfiConverterSequenceString.lower(answers),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  Future<void> sendReadReceipt(
    ReceiptType receiptType,
    String eventId,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_timeline_send_read_receipt(
        uniffiClonePointer(),
        FfiConverterReceiptType.lower(receiptType),
        FfiConverterString.lower(eventId),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  Future<void> sendReply(
    RoomMessageEventContentWithoutRelation msg,
    String eventId,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_timeline_send_reply(
        uniffiClonePointer(),
        RoomMessageEventContentWithoutRelation.lower(msg),
        FfiConverterString.lower(eventId),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  SendAttachmentJoinHandle sendVideo(
    UploadParameters params,
    String? thumbnailPath,
    VideoInfo videoInfo,
    ProgressWatcher? progressWatcher,
  ) {
    return rustCall(
        (status) => SendAttachmentJoinHandle.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_timeline_send_video(
                uniffiClonePointer(),
                FfiConverterUploadParameters.lower(params),
                FfiConverterOptionalString.lower(thumbnailPath),
                FfiConverterVideoInfo.lower(videoInfo),
                FfiConverterOptionalCallbackInterfaceProgressWatcher.lower(
                    progressWatcher),
                status)),
        roomExceptionErrorHandler);
  }

  SendAttachmentJoinHandle sendVoiceMessage(
    UploadParameters params,
    AudioInfo audioInfo,
    List<int> waveform,
    ProgressWatcher? progressWatcher,
  ) {
    return rustCall(
        (status) => SendAttachmentJoinHandle.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_timeline_send_voice_message(
                uniffiClonePointer(),
                FfiConverterUploadParameters.lower(params),
                FfiConverterAudioInfo.lower(audioInfo),
                FfiConverterSequenceUInt16.lower(waveform),
                FfiConverterOptionalCallbackInterfaceProgressWatcher.lower(
                    progressWatcher),
                status)),
        roomExceptionErrorHandler);
  }

  Future<TaskHandle> subscribeToBackPaginationStatus(
    PaginationStatusListener listener,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_timeline_subscribe_to_back_pagination_status(
        uniffiClonePointer(),
        FfiConverterCallbackInterfacePaginationStatusListener.lower(listener),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_pointer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_pointer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_pointer,
      TaskHandle.lift,
      clientExceptionErrorHandler,
    );
  }

  Future<void> toggleReaction(
    EventOrTransactionId itemId,
    String key,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_timeline_toggle_reaction(
        uniffiClonePointer(),
        FfiConverterEventOrTransactionId.lower(itemId),
        FfiConverterString.lower(key),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  Future<bool> unpinEvent(
    String eventId,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_timeline_unpin_event(
        uniffiClonePointer(),
        FfiConverterString.lower(eventId),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_i8,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_i8,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_i8,
      FfiConverterBool.lift,
      clientExceptionErrorHandler,
    );
  }
}

final _TimelineEventFinalizer = Finalizer<Pointer<Void>>((ptr) {
  rustCall((status) => _UniffiLib.instance
      .uniffi_matrix_sdk_ffi_fn_free_timelineevent(ptr, status));
});

class TimelineEvent {
  late final Pointer<Void> _ptr;

  TimelineEvent._(this._ptr) {
    _TimelineEventFinalizer.attach(this, _ptr, detach: this);
  }

  factory TimelineEvent.lift(Pointer<Void> ptr) {
    return TimelineEvent._(ptr);
  }

  static Pointer<Void> lower(TimelineEvent value) {
    return value.uniffiClonePointer();
  }

  Pointer<Void> uniffiClonePointer() {
    return rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_clone_timelineevent(_ptr, status));
  }

  static int allocationSize(TimelineEvent value) {
    return 8;
  }

  static LiftRetVal<TimelineEvent> read(Uint8List buf) {
    final handle = buf.buffer.asByteData(buf.offsetInBytes).getInt64(0);
    final pointer = Pointer<Void>.fromAddress(handle);
    return LiftRetVal(TimelineEvent.lift(pointer), 8);
  }

  static int write(TimelineEvent value, Uint8List buf) {
    final handle = lower(value);
    buf.buffer.asByteData(buf.offsetInBytes).setInt64(0, handle.address);
    return 8;
  }

  void dispose() {
    _TimelineEventFinalizer.detach(this);
    rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_free_timelineevent(_ptr, status));
  }

  String eventId() {
    return rustCall(
        (status) => FfiConverterString.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_timelineevent_event_id(
                uniffiClonePointer(), status)),
        null);
  }

  TimelineEventType eventType() {
    return rustCall(
        (status) => FfiConverterTimelineEventType.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_timelineevent_event_type(
                uniffiClonePointer(), status)),
        clientExceptionErrorHandler);
  }

  String senderId() {
    return rustCall(
        (status) => FfiConverterString.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_timelineevent_sender_id(
                uniffiClonePointer(), status)),
        null);
  }

  Timestamp timestamp() {
    return rustCall(
        (status) => FfiConverterTimestamp.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_timelineevent_timestamp(
                uniffiClonePointer(), status)),
        null);
  }
}

final _TimelineEventTypeFilterFinalizer = Finalizer<Pointer<Void>>((ptr) {
  rustCall((status) => _UniffiLib.instance
      .uniffi_matrix_sdk_ffi_fn_free_timelineeventtypefilter(ptr, status));
});

class TimelineEventTypeFilter {
  late final Pointer<Void> _ptr;

  TimelineEventTypeFilter._(this._ptr) {
    _TimelineEventTypeFilterFinalizer.attach(this, _ptr, detach: this);
  }

  TimelineEventTypeFilter.exclude({
    required List<FilterTimelineEventType> eventTypes,
  }) : _ptr = rustCall(
            (status) => _UniffiLib.instance
                .uniffi_matrix_sdk_ffi_fn_constructor_timelineeventtypefilter_exclude(
                    FfiConverterSequenceFilterTimelineEventType.lower(
                        eventTypes),
                    status),
            null) {
    _TimelineEventTypeFilterFinalizer.attach(this, _ptr, detach: this);
  }
  TimelineEventTypeFilter.include({
    required List<FilterTimelineEventType> eventTypes,
  }) : _ptr = rustCall(
            (status) => _UniffiLib.instance
                .uniffi_matrix_sdk_ffi_fn_constructor_timelineeventtypefilter_include(
                    FfiConverterSequenceFilterTimelineEventType.lower(
                        eventTypes),
                    status),
            null) {
    _TimelineEventTypeFilterFinalizer.attach(this, _ptr, detach: this);
  }

  factory TimelineEventTypeFilter.lift(Pointer<Void> ptr) {
    return TimelineEventTypeFilter._(ptr);
  }

  static Pointer<Void> lower(TimelineEventTypeFilter value) {
    return value.uniffiClonePointer();
  }

  Pointer<Void> uniffiClonePointer() {
    return rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_clone_timelineeventtypefilter(_ptr, status));
  }

  static int allocationSize(TimelineEventTypeFilter value) {
    return 8;
  }

  static LiftRetVal<TimelineEventTypeFilter> read(Uint8List buf) {
    final handle = buf.buffer.asByteData(buf.offsetInBytes).getInt64(0);
    final pointer = Pointer<Void>.fromAddress(handle);
    return LiftRetVal(TimelineEventTypeFilter.lift(pointer), 8);
  }

  static int write(TimelineEventTypeFilter value, Uint8List buf) {
    final handle = lower(value);
    buf.buffer.asByteData(buf.offsetInBytes).setInt64(0, handle.address);
    return 8;
  }

  void dispose() {
    _TimelineEventTypeFilterFinalizer.detach(this);
    rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_free_timelineeventtypefilter(_ptr, status));
  }
}

final _TimelineItemFinalizer = Finalizer<Pointer<Void>>((ptr) {
  rustCall((status) => _UniffiLib.instance
      .uniffi_matrix_sdk_ffi_fn_free_timelineitem(ptr, status));
});

class TimelineItem {
  late final Pointer<Void> _ptr;

  TimelineItem._(this._ptr) {
    _TimelineItemFinalizer.attach(this, _ptr, detach: this);
  }

  factory TimelineItem.lift(Pointer<Void> ptr) {
    return TimelineItem._(ptr);
  }

  static Pointer<Void> lower(TimelineItem value) {
    return value.uniffiClonePointer();
  }

  Pointer<Void> uniffiClonePointer() {
    return rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_clone_timelineitem(_ptr, status));
  }

  static int allocationSize(TimelineItem value) {
    return 8;
  }

  static LiftRetVal<TimelineItem> read(Uint8List buf) {
    final handle = buf.buffer.asByteData(buf.offsetInBytes).getInt64(0);
    final pointer = Pointer<Void>.fromAddress(handle);
    return LiftRetVal(TimelineItem.lift(pointer), 8);
  }

  static int write(TimelineItem value, Uint8List buf) {
    final handle = lower(value);
    buf.buffer.asByteData(buf.offsetInBytes).setInt64(0, handle.address);
    return 8;
  }

  void dispose() {
    _TimelineItemFinalizer.detach(this);
    rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_free_timelineitem(_ptr, status));
  }

  EventTimelineItem? asEvent() {
    return rustCall(
        (status) => FfiConverterOptionalEventTimelineItem.lift(_UniffiLib
            .instance
            .uniffi_matrix_sdk_ffi_fn_method_timelineitem_as_event(
                uniffiClonePointer(), status)),
        null);
  }

  VirtualTimelineItem? asVirtual() {
    return rustCall(
        (status) => FfiConverterOptionalVirtualTimelineItem.lift(_UniffiLib
            .instance
            .uniffi_matrix_sdk_ffi_fn_method_timelineitem_as_virtual(
                uniffiClonePointer(), status)),
        null);
  }

  String fmtDebug() {
    return rustCall(
        (status) => FfiConverterString.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_timelineitem_fmt_debug(
                uniffiClonePointer(), status)),
        null);
  }

  TimelineUniqueId uniqueId() {
    return rustCall(
        (status) => FfiConverterTimelineUniqueId.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_timelineitem_unique_id(
                uniffiClonePointer(), status)),
        null);
  }
}

final _UnreadNotificationsCountFinalizer = Finalizer<Pointer<Void>>((ptr) {
  rustCall((status) => _UniffiLib.instance
      .uniffi_matrix_sdk_ffi_fn_free_unreadnotificationscount(ptr, status));
});

class UnreadNotificationsCount {
  late final Pointer<Void> _ptr;

  UnreadNotificationsCount._(this._ptr) {
    _UnreadNotificationsCountFinalizer.attach(this, _ptr, detach: this);
  }

  factory UnreadNotificationsCount.lift(Pointer<Void> ptr) {
    return UnreadNotificationsCount._(ptr);
  }

  static Pointer<Void> lower(UnreadNotificationsCount value) {
    return value.uniffiClonePointer();
  }

  Pointer<Void> uniffiClonePointer() {
    return rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_clone_unreadnotificationscount(_ptr, status));
  }

  static int allocationSize(UnreadNotificationsCount value) {
    return 8;
  }

  static LiftRetVal<UnreadNotificationsCount> read(Uint8List buf) {
    final handle = buf.buffer.asByteData(buf.offsetInBytes).getInt64(0);
    final pointer = Pointer<Void>.fromAddress(handle);
    return LiftRetVal(UnreadNotificationsCount.lift(pointer), 8);
  }

  static int write(UnreadNotificationsCount value, Uint8List buf) {
    final handle = lower(value);
    buf.buffer.asByteData(buf.offsetInBytes).setInt64(0, handle.address);
    return 8;
  }

  void dispose() {
    _UnreadNotificationsCountFinalizer.detach(this);
    rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_free_unreadnotificationscount(_ptr, status));
  }

  bool hasNotifications() {
    return rustCall(
        (status) => FfiConverterBool.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_unreadnotificationscount_has_notifications(
                uniffiClonePointer(), status)),
        null);
  }

  int highlightCount() {
    return rustCall(
        (status) => FfiConverterUInt32.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_unreadnotificationscount_highlight_count(
                uniffiClonePointer(), status)),
        null);
  }

  int notificationCount() {
    return rustCall(
        (status) => FfiConverterUInt32.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_unreadnotificationscount_notification_count(
                uniffiClonePointer(), status)),
        null);
  }
}

final _UserIdentityFinalizer = Finalizer<Pointer<Void>>((ptr) {
  rustCall((status) => _UniffiLib.instance
      .uniffi_matrix_sdk_ffi_fn_free_useridentity(ptr, status));
});

class UserIdentity {
  late final Pointer<Void> _ptr;

  UserIdentity._(this._ptr) {
    _UserIdentityFinalizer.attach(this, _ptr, detach: this);
  }

  factory UserIdentity.lift(Pointer<Void> ptr) {
    return UserIdentity._(ptr);
  }

  static Pointer<Void> lower(UserIdentity value) {
    return value.uniffiClonePointer();
  }

  Pointer<Void> uniffiClonePointer() {
    return rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_clone_useridentity(_ptr, status));
  }

  static int allocationSize(UserIdentity value) {
    return 8;
  }

  static LiftRetVal<UserIdentity> read(Uint8List buf) {
    final handle = buf.buffer.asByteData(buf.offsetInBytes).getInt64(0);
    final pointer = Pointer<Void>.fromAddress(handle);
    return LiftRetVal(UserIdentity.lift(pointer), 8);
  }

  static int write(UserIdentity value, Uint8List buf) {
    final handle = lower(value);
    buf.buffer.asByteData(buf.offsetInBytes).setInt64(0, handle.address);
    return 8;
  }

  void dispose() {
    _UserIdentityFinalizer.detach(this);
    rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_free_useridentity(_ptr, status));
  }

  bool hasVerificationViolation() {
    return rustCall(
        (status) => FfiConverterBool.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_useridentity_has_verification_violation(
                uniffiClonePointer(), status)),
        null);
  }

  bool isVerified() {
    return rustCall(
        (status) => FfiConverterBool.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_useridentity_is_verified(
                uniffiClonePointer(), status)),
        null);
  }

  String? masterKey() {
    return rustCall(
        (status) => FfiConverterOptionalString.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_useridentity_master_key(
                uniffiClonePointer(), status)),
        null);
  }

  Future<void> pin() {
    return uniffiRustCallAsync(
      () =>
          _UniffiLib.instance.uniffi_matrix_sdk_ffi_fn_method_useridentity_pin(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }

  bool wasPreviouslyVerified() {
    return rustCall(
        (status) => FfiConverterBool.lift(_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_fn_method_useridentity_was_previously_verified(
                uniffiClonePointer(), status)),
        null);
  }

  Future<void> withdrawVerification() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_useridentity_withdraw_verification(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      clientExceptionErrorHandler,
    );
  }
}

final _WidgetDriverFinalizer = Finalizer<Pointer<Void>>((ptr) {
  rustCall((status) => _UniffiLib.instance
      .uniffi_matrix_sdk_ffi_fn_free_widgetdriver(ptr, status));
});

class WidgetDriver {
  late final Pointer<Void> _ptr;

  WidgetDriver._(this._ptr) {
    _WidgetDriverFinalizer.attach(this, _ptr, detach: this);
  }

  factory WidgetDriver.lift(Pointer<Void> ptr) {
    return WidgetDriver._(ptr);
  }

  static Pointer<Void> lower(WidgetDriver value) {
    return value.uniffiClonePointer();
  }

  Pointer<Void> uniffiClonePointer() {
    return rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_clone_widgetdriver(_ptr, status));
  }

  static int allocationSize(WidgetDriver value) {
    return 8;
  }

  static LiftRetVal<WidgetDriver> read(Uint8List buf) {
    final handle = buf.buffer.asByteData(buf.offsetInBytes).getInt64(0);
    final pointer = Pointer<Void>.fromAddress(handle);
    return LiftRetVal(WidgetDriver.lift(pointer), 8);
  }

  static int write(WidgetDriver value, Uint8List buf) {
    final handle = lower(value);
    buf.buffer.asByteData(buf.offsetInBytes).setInt64(0, handle.address);
    return 8;
  }

  void dispose() {
    _WidgetDriverFinalizer.detach(this);
    rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_free_widgetdriver(_ptr, status));
  }

  Future<void> run(
    Room room,
    WidgetCapabilitiesProvider capabilitiesProvider,
  ) {
    return uniffiRustCallAsync(
      () =>
          _UniffiLib.instance.uniffi_matrix_sdk_ffi_fn_method_widgetdriver_run(
        uniffiClonePointer(),
        Room.lower(room),
        FfiConverterCallbackInterfaceWidgetCapabilitiesProvider.lower(
            capabilitiesProvider),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_void,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_void,
      (_) {},
      null,
    );
  }
}

final _WidgetDriverHandleFinalizer = Finalizer<Pointer<Void>>((ptr) {
  rustCall((status) => _UniffiLib.instance
      .uniffi_matrix_sdk_ffi_fn_free_widgetdriverhandle(ptr, status));
});

class WidgetDriverHandle {
  late final Pointer<Void> _ptr;

  WidgetDriverHandle._(this._ptr) {
    _WidgetDriverHandleFinalizer.attach(this, _ptr, detach: this);
  }

  factory WidgetDriverHandle.lift(Pointer<Void> ptr) {
    return WidgetDriverHandle._(ptr);
  }

  static Pointer<Void> lower(WidgetDriverHandle value) {
    return value.uniffiClonePointer();
  }

  Pointer<Void> uniffiClonePointer() {
    return rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_clone_widgetdriverhandle(_ptr, status));
  }

  static int allocationSize(WidgetDriverHandle value) {
    return 8;
  }

  static LiftRetVal<WidgetDriverHandle> read(Uint8List buf) {
    final handle = buf.buffer.asByteData(buf.offsetInBytes).getInt64(0);
    final pointer = Pointer<Void>.fromAddress(handle);
    return LiftRetVal(WidgetDriverHandle.lift(pointer), 8);
  }

  static int write(WidgetDriverHandle value, Uint8List buf) {
    final handle = lower(value);
    buf.buffer.asByteData(buf.offsetInBytes).setInt64(0, handle.address);
    return 8;
  }

  void dispose() {
    _WidgetDriverHandleFinalizer.detach(this);
    rustCall((status) => _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_free_widgetdriverhandle(_ptr, status));
  }

  Future<String?> recv() {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_widgetdriverhandle_recv(
        uniffiClonePointer(),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_rust_buffer,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_rust_buffer,
      FfiConverterOptionalString.lift,
      null,
    );
  }

  Future<bool> send(
    String msg,
  ) {
    return uniffiRustCallAsync(
      () => _UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_method_widgetdriverhandle_send(
        uniffiClonePointer(),
        FfiConverterString.lower(msg),
      ),
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_i8,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_i8,
      _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_i8,
      FfiConverterBool.lift,
      null,
    );
  }
}

class UniffiInternalError implements Exception {
  static const int bufferOverflow = 0;
  static const int incompleteData = 1;
  static const int unexpectedOptionalTag = 2;
  static const int unexpectedEnumCase = 3;
  static const int unexpectedNullPointer = 4;
  static const int unexpectedRustCallStatusCode = 5;
  static const int unexpectedRustCallError = 6;
  static const int unexpectedStaleHandle = 7;
  static const int rustPanic = 8;

  final int errorCode;
  final String? panicMessage;

  const UniffiInternalError(this.errorCode, this.panicMessage);

  static UniffiInternalError panicked(String message) {
    return UniffiInternalError(rustPanic, message);
  }

  @override
  String toString() {
    switch (errorCode) {
      case bufferOverflow:
        return "UniFfi::BufferOverflow";
      case incompleteData:
        return "UniFfi::IncompleteData";
      case unexpectedOptionalTag:
        return "UniFfi::UnexpectedOptionalTag";
      case unexpectedEnumCase:
        return "UniFfi::UnexpectedEnumCase";
      case unexpectedNullPointer:
        return "UniFfi::UnexpectedNullPointer";
      case unexpectedRustCallStatusCode:
        return "UniFfi::UnexpectedRustCallStatusCode";
      case unexpectedRustCallError:
        return "UniFfi::UnexpectedRustCallError";
      case unexpectedStaleHandle:
        return "UniFfi::UnexpectedStaleHandle";
      case rustPanic:
        return "UniFfi::rustPanic: $panicMessage";
      default:
        return "UniFfi::UnknownError: $errorCode";
    }
  }
}

const int CALL_SUCCESS = 0;
const int CALL_ERROR = 1;
const int CALL_UNEXPECTED_ERROR = 2;

final class RustCallStatus extends Struct {
  @Int8()
  external int code;

  external RustBuffer errorBuf;
}

void checkCallStatus(UniffiRustCallStatusErrorHandler errorHandler,
    Pointer<RustCallStatus> status) {
  if (status.ref.code == CALL_SUCCESS) {
    return;
  } else if (status.ref.code == CALL_ERROR) {
    throw errorHandler.lift(status.ref.errorBuf);
  } else if (status.ref.code == CALL_UNEXPECTED_ERROR) {
    if (status.ref.errorBuf.len > 0) {
      throw UniffiInternalError.panicked(
          FfiConverterString.lift(status.ref.errorBuf));
    } else {
      throw UniffiInternalError.panicked("Rust panic");
    }
  } else {
    throw UniffiInternalError.panicked(
        "Unexpected RustCallStatus code: \${status.ref.code}");
  }
}

T rustCall<T>(T Function(Pointer<RustCallStatus>) callback,
    [UniffiRustCallStatusErrorHandler? errorHandler]) {
  final status = calloc<RustCallStatus>();
  try {
    final result = callback(status);
    checkCallStatus(errorHandler ?? NullRustCallStatusErrorHandler(), status);
    return result;
  } finally {
    calloc.free(status);
  }
}

class NullRustCallStatusErrorHandler extends UniffiRustCallStatusErrorHandler {
  @override
  Exception lift(RustBuffer errorBuf) {
    errorBuf.free();
    return UniffiInternalError.panicked("Unexpected CALL_ERROR");
  }
}

class ParseExceptionErrorHandler extends UniffiRustCallStatusErrorHandler {
  @override
  Exception lift(RustBuffer errorBuf) {
    final message = FfiConverterString.lift(errorBuf);
    return FormatException(message);
  }
}

class MatrixExceptionErrorHandler extends UniffiRustCallStatusErrorHandler {
  @override
  Exception lift(RustBuffer errorBuf) {
    final message = FfiConverterString.lift(errorBuf);
    return FormatException("Matrix error: \$message");
  }
}

final parseExceptionErrorHandler = ParseExceptionErrorHandler();
final matrixExceptionErrorHandler = MatrixExceptionErrorHandler();

abstract class UniffiRustCallStatusErrorHandler {
  Exception lift(RustBuffer errorBuf);
}

final class RustBuffer extends Struct {
  @Uint64()
  external int capacity;

  @Uint64()
  external int len;

  external Pointer<Uint8> data;

  static RustBuffer alloc(int size) {
    return rustCall((status) =>
        _UniffiLib.instance.ffi_matrix_sdk_ffi_rustbuffer_alloc(size, status));
  }

  static RustBuffer fromBytes(ForeignBytes bytes) {
    return rustCall((status) => _UniffiLib.instance
        .ffi_matrix_sdk_ffi_rustbuffer_from_bytes(bytes, status));
  }

  void free() {
    rustCall((status) =>
        _UniffiLib.instance.ffi_matrix_sdk_ffi_rustbuffer_free(this, status));
  }

  RustBuffer reserve(int additionalCapacity) {
    return rustCall((status) => _UniffiLib.instance
        .ffi_matrix_sdk_ffi_rustbuffer_reserve(
            this, additionalCapacity, status));
  }

  Uint8List asUint8List() {
    final dataList = data.asTypedList(len);
    final byteData = ByteData.sublistView(dataList);
    return Uint8List.view(byteData.buffer);
  }

  @override
  String toString() {
    return "RustBuffer{capacity: \$capacity, len: \$len, data: \$data}";
  }
}

RustBuffer toRustBuffer(Uint8List data) {
  final length = data.length;

  final Pointer<Uint8> frameData = calloc<Uint8>(length);
  final pointerList = frameData.asTypedList(length);
  pointerList.setAll(0, data);

  final bytes = calloc<ForeignBytes>();
  bytes.ref.len = length;
  bytes.ref.data = frameData;
  return RustBuffer.fromBytes(bytes.ref);
}

final class ForeignBytes extends Struct {
  @Int32()
  external int len;
  external Pointer<Uint8> data;

  void free() {
    calloc.free(data);
  }
}

class LiftRetVal<T> {
  final T value;
  final int bytesRead;
  const LiftRetVal(this.value, this.bytesRead);

  LiftRetVal<T> copyWithOffset(int offset) {
    return LiftRetVal(value, bytesRead + offset);
  }
}

abstract class FfiConverter<D, F> {
  const FfiConverter();

  D lift(F value);
  F lower(D value);
  D read(ByteData buffer, int offset);
  void write(D value, ByteData buffer, int offset);
  int size(D value);
}

mixin FfiConverterPrimitive<T> on FfiConverter<T, T> {
  @override
  T lift(T value) => value;

  @override
  T lower(T value) => value;
}

Uint8List createUint8ListFromInt(int value) {
  int length = value.bitLength ~/ 8 + 1;

  if (length != 4 && length != 8) {
    length = (value < 0x100000000) ? 4 : 8;
  }

  Uint8List uint8List = Uint8List(length);

  for (int i = length - 1; i >= 0; i--) {
    uint8List[i] = value & 0xFF;
    value >>= 8;
  }

  return uint8List;
}

class FfiConverterDouble64 {
  static double lift(double value) => value;

  static LiftRetVal<double> read(Uint8List buf) {
    return LiftRetVal(
        buf.buffer.asByteData(buf.offsetInBytes).getFloat64(0), 8);
  }

  static double lower(double value) => value;

  static int allocationSize([double value = 0]) {
    return 8;
  }

  static int write(double value, Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setFloat64(0, value);
    return FfiConverterDouble64.allocationSize();
  }
}

class FfiConverterUint32 {
  static int lift(int value) => value;
  static int lower(int value) => value;
  static LiftRetVal<int> read(Uint8List buf) {
    final end = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0) + 4;
    final result =
        buf.buffer.asByteData().getUint32(buf.offsetInBytes, Endian.little);
    return LiftRetVal(result, end);
  }

  static int write(int value, Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, value);
    int offset = buf.offsetInBytes + 4;
    offset +=
        FfiConverterInt32.write(value, Uint8List.view(buf.buffer, offset));
    return offset - buf.offsetInBytes;
  }

  static int allocationSize(int value) => 4;
}

class FfiConverterInt32 {
  static int lift(int value) => value;
  static int lower(int value) => value;
  static LiftRetVal<int> read(Uint8List buf) {
    final end = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0) + 4;
    final result =
        buf.buffer.asByteData().getInt32(buf.offsetInBytes, Endian.little);
    return LiftRetVal(result, end);
  }

  static int write(int value, Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, value);
    int offset = buf.offsetInBytes + 4;
    offset +=
        FfiConverterInt32.write(value, Uint8List.view(buf.buffer, offset));
    return offset - buf.offsetInBytes;
  }

  static int allocationSize(int value) => 4;
}

class FfiConverterBool {
  static bool lift(int value) {
    return value == 1;
  }

  static int lower(bool value) {
    return value ? 1 : 0;
  }

  static LiftRetVal<bool> read(Uint8List buf) {
    return LiftRetVal(FfiConverterBool.lift(buf.first), 1);
  }

  static RustBuffer lowerIntoRustBuffer(bool value) {
    return toRustBuffer(Uint8List.fromList([FfiConverterBool.lower(value)]));
  }

  static int allocationSize([bool value = false]) => 1;

  static int write(bool value, Uint8List buf) {
    buf.setAll(0, [value ? 1 : 0]);
    return allocationSize();
  }
}

class FfiConverterUint8List {
  static Uint8List lift(RustBuffer value) => value.asUint8List();
  static RustBuffer lower(Uint8List value) => toRustBuffer(value);
  static LiftRetVal<Uint8List> read(Uint8List buf) {
    final end = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0) + 4;
    final length =
        buf.buffer.asByteData().getUint32(buf.offsetInBytes, Endian.little);
    final result = Uint8List.view(buf.buffer, buf.offsetInBytes + 4, length);
    return LiftRetVal(result, end);
  }

  static int write(Uint8List value, Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, value.length);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < value.length; i++) {
      offset +=
          FfiConverterInt32.write(value[i], Uint8List.view(buf.buffer, offset));
    }
    return offset - buf.offsetInBytes;
  }

  static int allocationSize(Uint8List value) => 4 + value.length;
}

abstract class RoomDirectorySearchEntriesListener {
  void onUpdate(
    List<RoomDirectorySearchEntryUpdate> roomEntriesUpdate,
  );
}

class FfiConverterCallbackInterfaceRoomDirectorySearchEntriesListener {
  static final _handleMap =
      UniffiHandleMap<RoomDirectorySearchEntriesListener>();
  static bool _vtableInitialized = false;

  static RoomDirectorySearchEntriesListener lift(int handle) {
    return _handleMap.get(handle);
  }

  static int lower(RoomDirectorySearchEntriesListener value) {
    _ensureVTableInitialized();
    return _handleMap.insert(value);
  }

  static void _ensureVTableInitialized() {
    if (!_vtableInitialized) {
      initRoomDirectorySearchEntriesListenerVTable();
      _vtableInitialized = true;
    }
  }

  static LiftRetVal<RoomDirectorySearchEntriesListener> read(Uint8List buf) {
    final handle = buf.buffer.asByteData(buf.offsetInBytes).getInt64(0);
    return LiftRetVal(lift(handle), 8);
  }

  static int write(RoomDirectorySearchEntriesListener value, Uint8List buf) {
    final handle = lower(value);
    buf.buffer.asByteData(buf.offsetInBytes).setInt64(0, handle);
    return 8;
  }

  static int allocationSize(RoomDirectorySearchEntriesListener value) {
    return 8;
  }
}

typedef UniffiCallbackInterfaceRoomDirectorySearchEntriesListenerMethod0 = Void
    Function(Uint64, RustBuffer, Pointer<Void>, Pointer<RustCallStatus>);
typedef UniffiCallbackInterfaceRoomDirectorySearchEntriesListenerMethod0Dart
    = void Function(int, RustBuffer, Pointer<Void>, Pointer<RustCallStatus>);
typedef UniffiCallbackInterfaceRoomDirectorySearchEntriesListenerFree = Void
    Function(Uint64);
typedef UniffiCallbackInterfaceRoomDirectorySearchEntriesListenerFreeDart = void
    Function(int);

final class UniffiVTableCallbackInterfaceRoomDirectorySearchEntriesListener
    extends Struct {
  external Pointer<
          NativeFunction<
              UniffiCallbackInterfaceRoomDirectorySearchEntriesListenerMethod0>>
      onUpdate;
  external Pointer<
          NativeFunction<
              UniffiCallbackInterfaceRoomDirectorySearchEntriesListenerFree>>
      uniffiFree;
}

void roomDirectorySearchEntriesListenerOnUpdate(
    int uniffiHandle,
    RustBuffer roomEntriesUpdate,
    Pointer<Void> outReturn,
    Pointer<RustCallStatus> callStatus) {
  final status = callStatus.ref;
  try {
    final obj = FfiConverterCallbackInterfaceRoomDirectorySearchEntriesListener
        ._handleMap
        .get(uniffiHandle);
    final arg0 = FfiConverterSequenceRoomDirectorySearchEntryUpdate.lift(
        roomEntriesUpdate);
    obj.onUpdate(
      arg0,
    );
    status.code = CALL_SUCCESS;
  } catch (e) {
    status.code = CALL_UNEXPECTED_ERROR;
    status.errorBuf = FfiConverterString.lower(e.toString());
  }
}

final NativeCallable<
        UniffiCallbackInterfaceRoomDirectorySearchEntriesListenerMethod0>
    roomDirectorySearchEntriesListenerOnUpdateNativeCallable = NativeCallable<
            UniffiCallbackInterfaceRoomDirectorySearchEntriesListenerMethod0>.listener(
        roomDirectorySearchEntriesListenerOnUpdate);

void roomDirectorySearchEntriesListenerFreeCallback(int handle) {
  try {
    FfiConverterCallbackInterfaceRoomDirectorySearchEntriesListener._handleMap
        .remove(handle);
  } catch (e) {}
}

final Pointer<
        NativeFunction<
            UniffiCallbackInterfaceRoomDirectorySearchEntriesListenerFree>>
    roomDirectorySearchEntriesListenerFreePointer = Pointer.fromFunction<
            UniffiCallbackInterfaceRoomDirectorySearchEntriesListenerFree>(
        roomDirectorySearchEntriesListenerFreeCallback);
late final Pointer<
        UniffiVTableCallbackInterfaceRoomDirectorySearchEntriesListener>
    roomDirectorySearchEntriesListenerVTable;

void initRoomDirectorySearchEntriesListenerVTable() {
  if (FfiConverterCallbackInterfaceRoomDirectorySearchEntriesListener
      ._vtableInitialized) {
    return;
  }

  roomDirectorySearchEntriesListenerVTable =
      calloc<UniffiVTableCallbackInterfaceRoomDirectorySearchEntriesListener>();
  roomDirectorySearchEntriesListenerVTable.ref.onUpdate =
      roomDirectorySearchEntriesListenerOnUpdateNativeCallable.nativeFunction;
  roomDirectorySearchEntriesListenerVTable.ref.uniffiFree =
      roomDirectorySearchEntriesListenerFreePointer;

  rustCall((status) {
    _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_init_callback_vtable_roomdirectorysearchentrieslistener(
      roomDirectorySearchEntriesListenerVTable,
    );
    checkCallStatus(NullRustCallStatusErrorHandler(), status);
  });

  FfiConverterCallbackInterfaceRoomDirectorySearchEntriesListener
      ._vtableInitialized = true;
}

class FfiConverterSequenceNotificationItemsRequest {
  static List<NotificationItemsRequest> lift(RustBuffer buf) {
    return FfiConverterSequenceNotificationItemsRequest.read(buf.asUint8List())
        .value;
  }

  static LiftRetVal<List<NotificationItemsRequest>> read(Uint8List buf) {
    List<NotificationItemsRequest> res = [];
    final length =
        buf.buffer.asByteData().getInt32(buf.offsetInBytes, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < length; i++) {
      final ret = FfiConverterNotificationItemsRequest.read(
          Uint8List.view(buf.buffer, offset));
      offset += ret.bytesRead;
      res.add(ret.value);
    }
    return LiftRetVal(res, offset - buf.offsetInBytes);
  }

  static int write(List<NotificationItemsRequest> value, Uint8List buf) {
    buf.buffer
        .asByteData()
        .setInt32(buf.offsetInBytes, value.length, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < value.length; i++) {
      offset += FfiConverterNotificationItemsRequest.write(
          value[i], Uint8List.view(buf.buffer, offset));
    }
    return offset - buf.offsetInBytes;
  }

  static int allocationSize(List<NotificationItemsRequest> value) {
    int total = 4;
    for (var item in value) {
      total += FfiConverterNotificationItemsRequest.allocationSize(item);
    }
    return total;
  }

  static RustBuffer lower(List<NotificationItemsRequest> value) {
    final buf = Uint8List(allocationSize(value));
    write(value, buf);
    return toRustBuffer(buf);
  }
}

abstract class TypingNotificationsListener {
  void call(
    List<String> typingUserIds,
  );
}

class FfiConverterCallbackInterfaceTypingNotificationsListener {
  static final _handleMap = UniffiHandleMap<TypingNotificationsListener>();
  static bool _vtableInitialized = false;

  static TypingNotificationsListener lift(int handle) {
    return _handleMap.get(handle);
  }

  static int lower(TypingNotificationsListener value) {
    _ensureVTableInitialized();
    return _handleMap.insert(value);
  }

  static void _ensureVTableInitialized() {
    if (!_vtableInitialized) {
      initTypingNotificationsListenerVTable();
      _vtableInitialized = true;
    }
  }

  static LiftRetVal<TypingNotificationsListener> read(Uint8List buf) {
    final handle = buf.buffer.asByteData(buf.offsetInBytes).getInt64(0);
    return LiftRetVal(lift(handle), 8);
  }

  static int write(TypingNotificationsListener value, Uint8List buf) {
    final handle = lower(value);
    buf.buffer.asByteData(buf.offsetInBytes).setInt64(0, handle);
    return 8;
  }

  static int allocationSize(TypingNotificationsListener value) {
    return 8;
  }
}

typedef UniffiCallbackInterfaceTypingNotificationsListenerMethod0 = Void
    Function(Uint64, RustBuffer, Pointer<Void>, Pointer<RustCallStatus>);
typedef UniffiCallbackInterfaceTypingNotificationsListenerMethod0Dart = void
    Function(int, RustBuffer, Pointer<Void>, Pointer<RustCallStatus>);
typedef UniffiCallbackInterfaceTypingNotificationsListenerFree = Void Function(
    Uint64);
typedef UniffiCallbackInterfaceTypingNotificationsListenerFreeDart = void
    Function(int);

final class UniffiVTableCallbackInterfaceTypingNotificationsListener
    extends Struct {
  external Pointer<
      NativeFunction<
          UniffiCallbackInterfaceTypingNotificationsListenerMethod0>> call;
  external Pointer<
      NativeFunction<
          UniffiCallbackInterfaceTypingNotificationsListenerFree>> uniffiFree;
}

void typingNotificationsListenerCall(int uniffiHandle, RustBuffer typingUserIds,
    Pointer<Void> outReturn, Pointer<RustCallStatus> callStatus) {
  final status = callStatus.ref;
  try {
    final obj = FfiConverterCallbackInterfaceTypingNotificationsListener
        ._handleMap
        .get(uniffiHandle);
    final arg0 = FfiConverterSequenceString.lift(typingUserIds);
    obj.call(
      arg0,
    );
    status.code = CALL_SUCCESS;
  } catch (e) {
    status.code = CALL_UNEXPECTED_ERROR;
    status.errorBuf = FfiConverterString.lower(e.toString());
  }
}

final NativeCallable<UniffiCallbackInterfaceTypingNotificationsListenerMethod0>
    typingNotificationsListenerCallNativeCallable = NativeCallable<
            UniffiCallbackInterfaceTypingNotificationsListenerMethod0>.listener(
        typingNotificationsListenerCall);

void typingNotificationsListenerFreeCallback(int handle) {
  try {
    FfiConverterCallbackInterfaceTypingNotificationsListener._handleMap
        .remove(handle);
  } catch (e) {}
}

final Pointer<
        NativeFunction<UniffiCallbackInterfaceTypingNotificationsListenerFree>>
    typingNotificationsListenerFreePointer = Pointer.fromFunction<
            UniffiCallbackInterfaceTypingNotificationsListenerFree>(
        typingNotificationsListenerFreeCallback);
late final Pointer<UniffiVTableCallbackInterfaceTypingNotificationsListener>
    typingNotificationsListenerVTable;

void initTypingNotificationsListenerVTable() {
  if (FfiConverterCallbackInterfaceTypingNotificationsListener
      ._vtableInitialized) {
    return;
  }

  typingNotificationsListenerVTable =
      calloc<UniffiVTableCallbackInterfaceTypingNotificationsListener>();
  typingNotificationsListenerVTable.ref.call =
      typingNotificationsListenerCallNativeCallable.nativeFunction;
  typingNotificationsListenerVTable.ref.uniffiFree =
      typingNotificationsListenerFreePointer;

  rustCall((status) {
    _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_init_callback_vtable_typingnotificationslistener(
      typingNotificationsListenerVTable,
    );
    checkCallStatus(NullRustCallStatusErrorHandler(), status);
  });

  FfiConverterCallbackInterfaceTypingNotificationsListener._vtableInitialized =
      true;
}

class FfiConverterInt64 {
  static int lift(int value) => value;

  static LiftRetVal<int> read(Uint8List buf) {
    return LiftRetVal(buf.buffer.asByteData(buf.offsetInBytes).getInt64(0), 8);
  }

  static int lower(int value) => value;

  static int allocationSize([int value = 0]) {
    return 8;
  }

  static int write(int value, Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt64(0, value);
    return FfiConverterInt64.allocationSize();
  }
}

abstract class KnockRequestsListener {
  void call(
    List<KnockRequest> joinRequests,
  );
}

class FfiConverterCallbackInterfaceKnockRequestsListener {
  static final _handleMap = UniffiHandleMap<KnockRequestsListener>();
  static bool _vtableInitialized = false;

  static KnockRequestsListener lift(int handle) {
    return _handleMap.get(handle);
  }

  static int lower(KnockRequestsListener value) {
    _ensureVTableInitialized();
    return _handleMap.insert(value);
  }

  static void _ensureVTableInitialized() {
    if (!_vtableInitialized) {
      initKnockRequestsListenerVTable();
      _vtableInitialized = true;
    }
  }

  static LiftRetVal<KnockRequestsListener> read(Uint8List buf) {
    final handle = buf.buffer.asByteData(buf.offsetInBytes).getInt64(0);
    return LiftRetVal(lift(handle), 8);
  }

  static int write(KnockRequestsListener value, Uint8List buf) {
    final handle = lower(value);
    buf.buffer.asByteData(buf.offsetInBytes).setInt64(0, handle);
    return 8;
  }

  static int allocationSize(KnockRequestsListener value) {
    return 8;
  }
}

typedef UniffiCallbackInterfaceKnockRequestsListenerMethod0 = Void Function(
    Uint64, RustBuffer, Pointer<Void>, Pointer<RustCallStatus>);
typedef UniffiCallbackInterfaceKnockRequestsListenerMethod0Dart = void Function(
    int, RustBuffer, Pointer<Void>, Pointer<RustCallStatus>);
typedef UniffiCallbackInterfaceKnockRequestsListenerFree = Void Function(
    Uint64);
typedef UniffiCallbackInterfaceKnockRequestsListenerFreeDart = void Function(
    int);

final class UniffiVTableCallbackInterfaceKnockRequestsListener extends Struct {
  external Pointer<
      NativeFunction<UniffiCallbackInterfaceKnockRequestsListenerMethod0>> call;
  external Pointer<
          NativeFunction<UniffiCallbackInterfaceKnockRequestsListenerFree>>
      uniffiFree;
}

void knockRequestsListenerCall(int uniffiHandle, RustBuffer joinRequests,
    Pointer<Void> outReturn, Pointer<RustCallStatus> callStatus) {
  final status = callStatus.ref;
  try {
    final obj = FfiConverterCallbackInterfaceKnockRequestsListener._handleMap
        .get(uniffiHandle);
    final arg0 = FfiConverterSequenceKnockRequest.lift(joinRequests);
    obj.call(
      arg0,
    );
    status.code = CALL_SUCCESS;
  } catch (e) {
    status.code = CALL_UNEXPECTED_ERROR;
    status.errorBuf = FfiConverterString.lower(e.toString());
  }
}

final NativeCallable<UniffiCallbackInterfaceKnockRequestsListenerMethod0>
    knockRequestsListenerCallNativeCallable = NativeCallable<
            UniffiCallbackInterfaceKnockRequestsListenerMethod0>.listener(
        knockRequestsListenerCall);

void knockRequestsListenerFreeCallback(int handle) {
  try {
    FfiConverterCallbackInterfaceKnockRequestsListener._handleMap
        .remove(handle);
  } catch (e) {}
}

final Pointer<NativeFunction<UniffiCallbackInterfaceKnockRequestsListenerFree>>
    knockRequestsListenerFreePointer =
    Pointer.fromFunction<UniffiCallbackInterfaceKnockRequestsListenerFree>(
        knockRequestsListenerFreeCallback);
late final Pointer<UniffiVTableCallbackInterfaceKnockRequestsListener>
    knockRequestsListenerVTable;

void initKnockRequestsListenerVTable() {
  if (FfiConverterCallbackInterfaceKnockRequestsListener._vtableInitialized) {
    return;
  }

  knockRequestsListenerVTable =
      calloc<UniffiVTableCallbackInterfaceKnockRequestsListener>();
  knockRequestsListenerVTable.ref.call =
      knockRequestsListenerCallNativeCallable.nativeFunction;
  knockRequestsListenerVTable.ref.uniffiFree = knockRequestsListenerFreePointer;

  rustCall((status) {
    _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_init_callback_vtable_knockrequestslistener(
      knockRequestsListenerVTable,
    );
    checkCallStatus(NullRustCallStatusErrorHandler(), status);
  });

  FfiConverterCallbackInterfaceKnockRequestsListener._vtableInitialized = true;
}

class FfiConverterSequenceRoomDescription {
  static List<RoomDescription> lift(RustBuffer buf) {
    return FfiConverterSequenceRoomDescription.read(buf.asUint8List()).value;
  }

  static LiftRetVal<List<RoomDescription>> read(Uint8List buf) {
    List<RoomDescription> res = [];
    final length =
        buf.buffer.asByteData().getInt32(buf.offsetInBytes, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < length; i++) {
      final ret =
          FfiConverterRoomDescription.read(Uint8List.view(buf.buffer, offset));
      offset += ret.bytesRead;
      res.add(ret.value);
    }
    return LiftRetVal(res, offset - buf.offsetInBytes);
  }

  static int write(List<RoomDescription> value, Uint8List buf) {
    buf.buffer
        .asByteData()
        .setInt32(buf.offsetInBytes, value.length, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < value.length; i++) {
      offset += FfiConverterRoomDescription.write(
          value[i], Uint8List.view(buf.buffer, offset));
    }
    return offset - buf.offsetInBytes;
  }

  static int allocationSize(List<RoomDescription> value) {
    int total = 4;
    for (var item in value) {
      total += FfiConverterRoomDescription.allocationSize(item);
    }
    return total;
  }

  static RustBuffer lower(List<RoomDescription> value) {
    final buf = Uint8List(allocationSize(value));
    write(value, buf);
    return toRustBuffer(buf);
  }
}

class FfiConverterSequenceGalleryItemType {
  static List<GalleryItemType> lift(RustBuffer buf) {
    return FfiConverterSequenceGalleryItemType.read(buf.asUint8List()).value;
  }

  static LiftRetVal<List<GalleryItemType>> read(Uint8List buf) {
    List<GalleryItemType> res = [];
    final length =
        buf.buffer.asByteData().getInt32(buf.offsetInBytes, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < length; i++) {
      final ret =
          FfiConverterGalleryItemType.read(Uint8List.view(buf.buffer, offset));
      offset += ret.bytesRead;
      res.add(ret.value);
    }
    return LiftRetVal(res, offset - buf.offsetInBytes);
  }

  static int write(List<GalleryItemType> value, Uint8List buf) {
    buf.buffer
        .asByteData()
        .setInt32(buf.offsetInBytes, value.length, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < value.length; i++) {
      offset += FfiConverterGalleryItemType.write(
          value[i], Uint8List.view(buf.buffer, offset));
    }
    return offset - buf.offsetInBytes;
  }

  static int allocationSize(List<GalleryItemType> value) {
    int total = 4;
    for (var item in value) {
      total += FfiConverterGalleryItemType.allocationSize(item);
    }
    return total;
  }

  static RustBuffer lower(List<GalleryItemType> value) {
    final buf = Uint8List(allocationSize(value));
    write(value, buf);
    return toRustBuffer(buf);
  }
}

class FfiConverterOptionalTracingFileConfiguration {
  static TracingFileConfiguration? lift(RustBuffer buf) {
    return FfiConverterOptionalTracingFileConfiguration.read(buf.asUint8List())
        .value;
  }

  static LiftRetVal<TracingFileConfiguration?> read(Uint8List buf) {
    if (ByteData.view(buf.buffer, buf.offsetInBytes).getInt8(0) == 0) {
      return LiftRetVal(null, 1);
    }
    final result = FfiConverterTracingFileConfiguration.read(
        Uint8List.view(buf.buffer, buf.offsetInBytes + 1));
    return LiftRetVal<TracingFileConfiguration?>(
        result.value, result.bytesRead + 1);
  }

  static int allocationSize([TracingFileConfiguration? value]) {
    if (value == null) {
      return 1;
    }
    return FfiConverterTracingFileConfiguration.allocationSize(value) + 1;
  }

  static RustBuffer lower(TracingFileConfiguration? value) {
    if (value == null) {
      return toRustBuffer(Uint8List.fromList([0]));
    }

    final length =
        FfiConverterOptionalTracingFileConfiguration.allocationSize(value);

    final Pointer<Uint8> frameData = calloc<Uint8>(length);
    final buf = frameData.asTypedList(length);

    FfiConverterOptionalTracingFileConfiguration.write(value, buf);

    final bytes = calloc<ForeignBytes>();
    bytes.ref.len = length;
    bytes.ref.data = frameData;
    return RustBuffer.fromBytes(bytes.ref);
  }

  static int write(TracingFileConfiguration? value, Uint8List buf) {
    if (value == null) {
      buf[0] = 0;
      return 1;
    }

    buf[0] = 1;

    return FfiConverterTracingFileConfiguration.write(
            value, Uint8List.view(buf.buffer, buf.offsetInBytes + 1)) +
        1;
  }
}

abstract class UnableToDecryptDelegate {
  void onUtd(
    UnableToDecryptInfo info,
  );
}

class FfiConverterCallbackInterfaceUnableToDecryptDelegate {
  static final _handleMap = UniffiHandleMap<UnableToDecryptDelegate>();
  static bool _vtableInitialized = false;

  static UnableToDecryptDelegate lift(int handle) {
    return _handleMap.get(handle);
  }

  static int lower(UnableToDecryptDelegate value) {
    _ensureVTableInitialized();
    return _handleMap.insert(value);
  }

  static void _ensureVTableInitialized() {
    if (!_vtableInitialized) {
      initUnableToDecryptDelegateVTable();
      _vtableInitialized = true;
    }
  }

  static LiftRetVal<UnableToDecryptDelegate> read(Uint8List buf) {
    final handle = buf.buffer.asByteData(buf.offsetInBytes).getInt64(0);
    return LiftRetVal(lift(handle), 8);
  }

  static int write(UnableToDecryptDelegate value, Uint8List buf) {
    final handle = lower(value);
    buf.buffer.asByteData(buf.offsetInBytes).setInt64(0, handle);
    return 8;
  }

  static int allocationSize(UnableToDecryptDelegate value) {
    return 8;
  }
}

typedef UniffiCallbackInterfaceUnableToDecryptDelegateMethod0 = Void Function(
    Uint64, RustBuffer, Pointer<Void>, Pointer<RustCallStatus>);
typedef UniffiCallbackInterfaceUnableToDecryptDelegateMethod0Dart = void
    Function(int, RustBuffer, Pointer<Void>, Pointer<RustCallStatus>);
typedef UniffiCallbackInterfaceUnableToDecryptDelegateFree = Void Function(
    Uint64);
typedef UniffiCallbackInterfaceUnableToDecryptDelegateFreeDart = void Function(
    int);

final class UniffiVTableCallbackInterfaceUnableToDecryptDelegate
    extends Struct {
  external Pointer<
          NativeFunction<UniffiCallbackInterfaceUnableToDecryptDelegateMethod0>>
      onUtd;
  external Pointer<
          NativeFunction<UniffiCallbackInterfaceUnableToDecryptDelegateFree>>
      uniffiFree;
}

void unableToDecryptDelegateOnUtd(int uniffiHandle, RustBuffer info,
    Pointer<Void> outReturn, Pointer<RustCallStatus> callStatus) {
  final status = callStatus.ref;
  try {
    final obj = FfiConverterCallbackInterfaceUnableToDecryptDelegate._handleMap
        .get(uniffiHandle);
    final arg0 = FfiConverterUnableToDecryptInfo.lift(info);
    obj.onUtd(
      arg0,
    );
    status.code = CALL_SUCCESS;
  } catch (e) {
    status.code = CALL_UNEXPECTED_ERROR;
    status.errorBuf = FfiConverterString.lower(e.toString());
  }
}

final NativeCallable<UniffiCallbackInterfaceUnableToDecryptDelegateMethod0>
    unableToDecryptDelegateOnUtdNativeCallable = NativeCallable<
            UniffiCallbackInterfaceUnableToDecryptDelegateMethod0>.listener(
        unableToDecryptDelegateOnUtd);

void unableToDecryptDelegateFreeCallback(int handle) {
  try {
    FfiConverterCallbackInterfaceUnableToDecryptDelegate._handleMap
        .remove(handle);
  } catch (e) {}
}

final Pointer<
        NativeFunction<UniffiCallbackInterfaceUnableToDecryptDelegateFree>>
    unableToDecryptDelegateFreePointer =
    Pointer.fromFunction<UniffiCallbackInterfaceUnableToDecryptDelegateFree>(
        unableToDecryptDelegateFreeCallback);
late final Pointer<UniffiVTableCallbackInterfaceUnableToDecryptDelegate>
    unableToDecryptDelegateVTable;

void initUnableToDecryptDelegateVTable() {
  if (FfiConverterCallbackInterfaceUnableToDecryptDelegate._vtableInitialized) {
    return;
  }

  unableToDecryptDelegateVTable =
      calloc<UniffiVTableCallbackInterfaceUnableToDecryptDelegate>();
  unableToDecryptDelegateVTable.ref.onUtd =
      unableToDecryptDelegateOnUtdNativeCallable.nativeFunction;
  unableToDecryptDelegateVTable.ref.uniffiFree =
      unableToDecryptDelegateFreePointer;

  rustCall((status) {
    _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_init_callback_vtable_unabletodecryptdelegate(
      unableToDecryptDelegateVTable,
    );
    checkCallStatus(NullRustCallStatusErrorHandler(), status);
  });

  FfiConverterCallbackInterfaceUnableToDecryptDelegate._vtableInitialized =
      true;
}

class FfiConverterSequenceUserPowerLevelUpdate {
  static List<UserPowerLevelUpdate> lift(RustBuffer buf) {
    return FfiConverterSequenceUserPowerLevelUpdate.read(buf.asUint8List())
        .value;
  }

  static LiftRetVal<List<UserPowerLevelUpdate>> read(Uint8List buf) {
    List<UserPowerLevelUpdate> res = [];
    final length =
        buf.buffer.asByteData().getInt32(buf.offsetInBytes, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < length; i++) {
      final ret = FfiConverterUserPowerLevelUpdate.read(
          Uint8List.view(buf.buffer, offset));
      offset += ret.bytesRead;
      res.add(ret.value);
    }
    return LiftRetVal(res, offset - buf.offsetInBytes);
  }

  static int write(List<UserPowerLevelUpdate> value, Uint8List buf) {
    buf.buffer
        .asByteData()
        .setInt32(buf.offsetInBytes, value.length, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < value.length; i++) {
      offset += FfiConverterUserPowerLevelUpdate.write(
          value[i], Uint8List.view(buf.buffer, offset));
    }
    return offset - buf.offsetInBytes;
  }

  static int allocationSize(List<UserPowerLevelUpdate> value) {
    int total = 4;
    for (var item in value) {
      total += FfiConverterUserPowerLevelUpdate.allocationSize(item);
    }
    return total;
  }

  static RustBuffer lower(List<UserPowerLevelUpdate> value) {
    final buf = Uint8List(allocationSize(value));
    write(value, buf);
    return toRustBuffer(buf);
  }
}

class FfiConverterOptionalShieldState {
  static ShieldState? lift(RustBuffer buf) {
    return FfiConverterOptionalShieldState.read(buf.asUint8List()).value;
  }

  static LiftRetVal<ShieldState?> read(Uint8List buf) {
    if (ByteData.view(buf.buffer, buf.offsetInBytes).getInt8(0) == 0) {
      return LiftRetVal(null, 1);
    }
    final result = FfiConverterShieldState.read(
        Uint8List.view(buf.buffer, buf.offsetInBytes + 1));
    return LiftRetVal<ShieldState?>(result.value, result.bytesRead + 1);
  }

  static int allocationSize([ShieldState? value]) {
    if (value == null) {
      return 1;
    }
    return FfiConverterShieldState.allocationSize(value) + 1;
  }

  static RustBuffer lower(ShieldState? value) {
    if (value == null) {
      return toRustBuffer(Uint8List.fromList([0]));
    }

    final length = FfiConverterOptionalShieldState.allocationSize(value);

    final Pointer<Uint8> frameData = calloc<Uint8>(length);
    final buf = frameData.asTypedList(length);

    FfiConverterOptionalShieldState.write(value, buf);

    final bytes = calloc<ForeignBytes>();
    bytes.ref.len = length;
    bytes.ref.data = frameData;
    return RustBuffer.fromBytes(bytes.ref);
  }

  static int write(ShieldState? value, Uint8List buf) {
    if (value == null) {
      buf[0] = 0;
      return 1;
    }

    buf[0] = 1;

    return FfiConverterShieldState.write(
            value, Uint8List.view(buf.buffer, buf.offsetInBytes + 1)) +
        1;
  }
}

abstract class RecoveryStateListener {
  void onUpdate(
    RecoveryState status,
  );
}

class FfiConverterCallbackInterfaceRecoveryStateListener {
  static final _handleMap = UniffiHandleMap<RecoveryStateListener>();
  static bool _vtableInitialized = false;

  static RecoveryStateListener lift(int handle) {
    return _handleMap.get(handle);
  }

  static int lower(RecoveryStateListener value) {
    _ensureVTableInitialized();
    return _handleMap.insert(value);
  }

  static void _ensureVTableInitialized() {
    if (!_vtableInitialized) {
      initRecoveryStateListenerVTable();
      _vtableInitialized = true;
    }
  }

  static LiftRetVal<RecoveryStateListener> read(Uint8List buf) {
    final handle = buf.buffer.asByteData(buf.offsetInBytes).getInt64(0);
    return LiftRetVal(lift(handle), 8);
  }

  static int write(RecoveryStateListener value, Uint8List buf) {
    final handle = lower(value);
    buf.buffer.asByteData(buf.offsetInBytes).setInt64(0, handle);
    return 8;
  }

  static int allocationSize(RecoveryStateListener value) {
    return 8;
  }
}

typedef UniffiCallbackInterfaceRecoveryStateListenerMethod0 = Void Function(
    Uint64, RustBuffer, Pointer<Void>, Pointer<RustCallStatus>);
typedef UniffiCallbackInterfaceRecoveryStateListenerMethod0Dart = void Function(
    int, int, Pointer<Void>, Pointer<RustCallStatus>);
typedef UniffiCallbackInterfaceRecoveryStateListenerFree = Void Function(
    Uint64);
typedef UniffiCallbackInterfaceRecoveryStateListenerFreeDart = void Function(
    int);

final class UniffiVTableCallbackInterfaceRecoveryStateListener extends Struct {
  external Pointer<
          NativeFunction<UniffiCallbackInterfaceRecoveryStateListenerMethod0>>
      onUpdate;
  external Pointer<
          NativeFunction<UniffiCallbackInterfaceRecoveryStateListenerFree>>
      uniffiFree;
}

void recoveryStateListenerOnUpdate(int uniffiHandle, RustBuffer status,
    Pointer<Void> outReturn, Pointer<RustCallStatus> callStatus) {
  final statusRef = callStatus.ref;
  try {
    final obj = FfiConverterCallbackInterfaceRecoveryStateListener._handleMap
        .get(uniffiHandle);
    final arg0 = FfiConverterRecoveryState.lift(status);
    obj.onUpdate(
      arg0,
    );
    statusRef.code = CALL_SUCCESS;
  } catch (e) {
    statusRef.code = CALL_UNEXPECTED_ERROR;
    statusRef.errorBuf = FfiConverterString.lower(e.toString());
  }
}

final NativeCallable<UniffiCallbackInterfaceRecoveryStateListenerMethod0>
    recoveryStateListenerOnUpdateNativeCallable = NativeCallable<
            UniffiCallbackInterfaceRecoveryStateListenerMethod0>.listener(
        recoveryStateListenerOnUpdate);

void recoveryStateListenerFreeCallback(int handle) {
  try {
    FfiConverterCallbackInterfaceRecoveryStateListener._handleMap
        .remove(handle);
  } catch (e) {}
}

final Pointer<NativeFunction<UniffiCallbackInterfaceRecoveryStateListenerFree>>
    recoveryStateListenerFreePointer =
    Pointer.fromFunction<UniffiCallbackInterfaceRecoveryStateListenerFree>(
        recoveryStateListenerFreeCallback);
late final Pointer<UniffiVTableCallbackInterfaceRecoveryStateListener>
    recoveryStateListenerVTable;

void initRecoveryStateListenerVTable() {
  if (FfiConverterCallbackInterfaceRecoveryStateListener._vtableInitialized) {
    return;
  }

  recoveryStateListenerVTable =
      calloc<UniffiVTableCallbackInterfaceRecoveryStateListener>();
  recoveryStateListenerVTable.ref.onUpdate =
      recoveryStateListenerOnUpdateNativeCallable.nativeFunction;
  recoveryStateListenerVTable.ref.uniffiFree = recoveryStateListenerFreePointer;

  rustCall((status) {
    _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_init_callback_vtable_recoverystatelistener(
      recoveryStateListenerVTable,
    );
    checkCallStatus(NullRustCallStatusErrorHandler(), status);
  });

  FfiConverterCallbackInterfaceRecoveryStateListener._vtableInitialized = true;
}

class FfiConverterOptionalCallbackInterfaceProgressWatcher {
  static ProgressWatcher? lift(RustBuffer buf) {
    return FfiConverterOptionalCallbackInterfaceProgressWatcher.read(
            buf.asUint8List())
        .value;
  }

  static LiftRetVal<ProgressWatcher?> read(Uint8List buf) {
    if (ByteData.view(buf.buffer, buf.offsetInBytes).getInt8(0) == 0) {
      return LiftRetVal(null, 1);
    }
    final result = FfiConverterCallbackInterfaceProgressWatcher.read(
        Uint8List.view(buf.buffer, buf.offsetInBytes + 1));
    return LiftRetVal<ProgressWatcher?>(result.value, result.bytesRead + 1);
  }

  static int allocationSize([ProgressWatcher? value]) {
    if (value == null) {
      return 1;
    }
    return FfiConverterCallbackInterfaceProgressWatcher.allocationSize(value) +
        1;
  }

  static RustBuffer lower(ProgressWatcher? value) {
    if (value == null) {
      return toRustBuffer(Uint8List.fromList([0]));
    }

    final length =
        FfiConverterOptionalCallbackInterfaceProgressWatcher.allocationSize(
            value);

    final Pointer<Uint8> frameData = calloc<Uint8>(length);
    final buf = frameData.asTypedList(length);

    FfiConverterOptionalCallbackInterfaceProgressWatcher.write(value, buf);

    final bytes = calloc<ForeignBytes>();
    bytes.ref.len = length;
    bytes.ref.data = frameData;
    return RustBuffer.fromBytes(bytes.ref);
  }

  static int write(ProgressWatcher? value, Uint8List buf) {
    if (value == null) {
      buf[0] = 0;
      return 1;
    }

    buf[0] = 1;

    return FfiConverterCallbackInterfaceProgressWatcher.write(
            value, Uint8List.view(buf.buffer, buf.offsetInBytes + 1)) +
        1;
  }
}

abstract class BackupStateListener {
  void onUpdate(
    BackupState status,
  );
}

class FfiConverterCallbackInterfaceBackupStateListener {
  static final _handleMap = UniffiHandleMap<BackupStateListener>();
  static bool _vtableInitialized = false;

  static BackupStateListener lift(int handle) {
    return _handleMap.get(handle);
  }

  static int lower(BackupStateListener value) {
    _ensureVTableInitialized();
    return _handleMap.insert(value);
  }

  static void _ensureVTableInitialized() {
    if (!_vtableInitialized) {
      initBackupStateListenerVTable();
      _vtableInitialized = true;
    }
  }

  static LiftRetVal<BackupStateListener> read(Uint8List buf) {
    final handle = buf.buffer.asByteData(buf.offsetInBytes).getInt64(0);
    return LiftRetVal(lift(handle), 8);
  }

  static int write(BackupStateListener value, Uint8List buf) {
    final handle = lower(value);
    buf.buffer.asByteData(buf.offsetInBytes).setInt64(0, handle);
    return 8;
  }

  static int allocationSize(BackupStateListener value) {
    return 8;
  }
}

typedef UniffiCallbackInterfaceBackupStateListenerMethod0 = Void Function(
    Uint64, RustBuffer, Pointer<Void>, Pointer<RustCallStatus>);
typedef UniffiCallbackInterfaceBackupStateListenerMethod0Dart = void Function(
    int, int, Pointer<Void>, Pointer<RustCallStatus>);
typedef UniffiCallbackInterfaceBackupStateListenerFree = Void Function(Uint64);
typedef UniffiCallbackInterfaceBackupStateListenerFreeDart = void Function(int);

final class UniffiVTableCallbackInterfaceBackupStateListener extends Struct {
  external Pointer<
          NativeFunction<UniffiCallbackInterfaceBackupStateListenerMethod0>>
      onUpdate;
  external Pointer<
          NativeFunction<UniffiCallbackInterfaceBackupStateListenerFree>>
      uniffiFree;
}

void backupStateListenerOnUpdate(int uniffiHandle, RustBuffer status,
    Pointer<Void> outReturn, Pointer<RustCallStatus> callStatus) {
  final statusRef = callStatus.ref;
  try {
    final obj = FfiConverterCallbackInterfaceBackupStateListener._handleMap
        .get(uniffiHandle);
    final arg0 = FfiConverterBackupState.lift(status);
    obj.onUpdate(
      arg0,
    );
    statusRef.code = CALL_SUCCESS;
  } catch (e) {
    statusRef.code = CALL_UNEXPECTED_ERROR;
    statusRef.errorBuf = FfiConverterString.lower(e.toString());
  }
}

final NativeCallable<UniffiCallbackInterfaceBackupStateListenerMethod0>
    backupStateListenerOnUpdateNativeCallable =
    NativeCallable<UniffiCallbackInterfaceBackupStateListenerMethod0>.listener(
        backupStateListenerOnUpdate);

void backupStateListenerFreeCallback(int handle) {
  try {
    FfiConverterCallbackInterfaceBackupStateListener._handleMap.remove(handle);
  } catch (e) {}
}

final Pointer<NativeFunction<UniffiCallbackInterfaceBackupStateListenerFree>>
    backupStateListenerFreePointer =
    Pointer.fromFunction<UniffiCallbackInterfaceBackupStateListenerFree>(
        backupStateListenerFreeCallback);
late final Pointer<UniffiVTableCallbackInterfaceBackupStateListener>
    backupStateListenerVTable;

void initBackupStateListenerVTable() {
  if (FfiConverterCallbackInterfaceBackupStateListener._vtableInitialized) {
    return;
  }

  backupStateListenerVTable =
      calloc<UniffiVTableCallbackInterfaceBackupStateListener>();
  backupStateListenerVTable.ref.onUpdate =
      backupStateListenerOnUpdateNativeCallable.nativeFunction;
  backupStateListenerVTable.ref.uniffiFree = backupStateListenerFreePointer;

  rustCall((status) {
    _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_init_callback_vtable_backupstatelistener(
      backupStateListenerVTable,
    );
    checkCallStatus(NullRustCallStatusErrorHandler(), status);
  });

  FfiConverterCallbackInterfaceBackupStateListener._vtableInitialized = true;
}

class FfiConverterOptionalInviteAvatars {
  static InviteAvatars? lift(RustBuffer buf) {
    return FfiConverterOptionalInviteAvatars.read(buf.asUint8List()).value;
  }

  static LiftRetVal<InviteAvatars?> read(Uint8List buf) {
    if (ByteData.view(buf.buffer, buf.offsetInBytes).getInt8(0) == 0) {
      return LiftRetVal(null, 1);
    }
    final result = FfiConverterInviteAvatars.read(
        Uint8List.view(buf.buffer, buf.offsetInBytes + 1));
    return LiftRetVal<InviteAvatars?>(result.value, result.bytesRead + 1);
  }

  static int allocationSize([InviteAvatars? value]) {
    if (value == null) {
      return 1;
    }
    return FfiConverterInviteAvatars.allocationSize(value) + 1;
  }

  static RustBuffer lower(InviteAvatars? value) {
    if (value == null) {
      return toRustBuffer(Uint8List.fromList([0]));
    }

    final length = FfiConverterOptionalInviteAvatars.allocationSize(value);

    final Pointer<Uint8> frameData = calloc<Uint8>(length);
    final buf = frameData.asTypedList(length);

    FfiConverterOptionalInviteAvatars.write(value, buf);

    final bytes = calloc<ForeignBytes>();
    bytes.ref.len = length;
    bytes.ref.data = frameData;
    return RustBuffer.fromBytes(bytes.ref);
  }

  static int write(InviteAvatars? value, Uint8List buf) {
    if (value == null) {
      buf[0] = 0;
      return 1;
    }

    buf[0] = 1;

    return FfiConverterInviteAvatars.write(
            value, Uint8List.view(buf.buffer, buf.offsetInBytes + 1)) +
        1;
  }
}

abstract class SessionVerificationControllerDelegate {
  void didReceiveVerificationRequest(
    SessionVerificationRequestDetails details,
  );
  void didAcceptVerificationRequest();
  void didStartSasVerification();
  void didReceiveVerificationData(
    SessionVerificationData data,
  );
  void didFail();
  void didCancel();
  void didFinish();
}

class FfiConverterCallbackInterfaceSessionVerificationControllerDelegate {
  static final _handleMap =
      UniffiHandleMap<SessionVerificationControllerDelegate>();
  static bool _vtableInitialized = false;

  static SessionVerificationControllerDelegate lift(int handle) {
    return _handleMap.get(handle);
  }

  static int lower(SessionVerificationControllerDelegate value) {
    _ensureVTableInitialized();
    return _handleMap.insert(value);
  }

  static void _ensureVTableInitialized() {
    if (!_vtableInitialized) {
      initSessionVerificationControllerDelegateVTable();
      _vtableInitialized = true;
    }
  }

  static LiftRetVal<SessionVerificationControllerDelegate> read(Uint8List buf) {
    final handle = buf.buffer.asByteData(buf.offsetInBytes).getInt64(0);
    return LiftRetVal(lift(handle), 8);
  }

  static int write(SessionVerificationControllerDelegate value, Uint8List buf) {
    final handle = lower(value);
    buf.buffer.asByteData(buf.offsetInBytes).setInt64(0, handle);
    return 8;
  }

  static int allocationSize(SessionVerificationControllerDelegate value) {
    return 8;
  }
}

typedef UniffiCallbackInterfaceSessionVerificationControllerDelegateMethod0
    = Void Function(Uint64, RustBuffer, Pointer<Void>, Pointer<RustCallStatus>);
typedef UniffiCallbackInterfaceSessionVerificationControllerDelegateMethod0Dart
    = void Function(int, RustBuffer, Pointer<Void>, Pointer<RustCallStatus>);
typedef UniffiCallbackInterfaceSessionVerificationControllerDelegateMethod1
    = Void Function(Uint64, Pointer<Void>, Pointer<RustCallStatus>);
typedef UniffiCallbackInterfaceSessionVerificationControllerDelegateMethod1Dart
    = void Function(int, Pointer<Void>, Pointer<RustCallStatus>);
typedef UniffiCallbackInterfaceSessionVerificationControllerDelegateMethod2
    = Void Function(Uint64, Pointer<Void>, Pointer<RustCallStatus>);
typedef UniffiCallbackInterfaceSessionVerificationControllerDelegateMethod2Dart
    = void Function(int, Pointer<Void>, Pointer<RustCallStatus>);
typedef UniffiCallbackInterfaceSessionVerificationControllerDelegateMethod3
    = Void Function(Uint64, RustBuffer, Pointer<Void>, Pointer<RustCallStatus>);
typedef UniffiCallbackInterfaceSessionVerificationControllerDelegateMethod3Dart
    = void Function(int, int, Pointer<Void>, Pointer<RustCallStatus>);
typedef UniffiCallbackInterfaceSessionVerificationControllerDelegateMethod4
    = Void Function(Uint64, Pointer<Void>, Pointer<RustCallStatus>);
typedef UniffiCallbackInterfaceSessionVerificationControllerDelegateMethod4Dart
    = void Function(int, Pointer<Void>, Pointer<RustCallStatus>);
typedef UniffiCallbackInterfaceSessionVerificationControllerDelegateMethod5
    = Void Function(Uint64, Pointer<Void>, Pointer<RustCallStatus>);
typedef UniffiCallbackInterfaceSessionVerificationControllerDelegateMethod5Dart
    = void Function(int, Pointer<Void>, Pointer<RustCallStatus>);
typedef UniffiCallbackInterfaceSessionVerificationControllerDelegateMethod6
    = Void Function(Uint64, Pointer<Void>, Pointer<RustCallStatus>);
typedef UniffiCallbackInterfaceSessionVerificationControllerDelegateMethod6Dart
    = void Function(int, Pointer<Void>, Pointer<RustCallStatus>);
typedef UniffiCallbackInterfaceSessionVerificationControllerDelegateFree = Void
    Function(Uint64);
typedef UniffiCallbackInterfaceSessionVerificationControllerDelegateFreeDart
    = void Function(int);

final class UniffiVTableCallbackInterfaceSessionVerificationControllerDelegate
    extends Struct {
  external Pointer<
          NativeFunction<
              UniffiCallbackInterfaceSessionVerificationControllerDelegateMethod0>>
      didReceiveVerificationRequest;
  external Pointer<
          NativeFunction<
              UniffiCallbackInterfaceSessionVerificationControllerDelegateMethod1>>
      didAcceptVerificationRequest;
  external Pointer<
          NativeFunction<
              UniffiCallbackInterfaceSessionVerificationControllerDelegateMethod2>>
      didStartSasVerification;
  external Pointer<
          NativeFunction<
              UniffiCallbackInterfaceSessionVerificationControllerDelegateMethod3>>
      didReceiveVerificationData;
  external Pointer<
          NativeFunction<
              UniffiCallbackInterfaceSessionVerificationControllerDelegateMethod4>>
      didFail;
  external Pointer<
          NativeFunction<
              UniffiCallbackInterfaceSessionVerificationControllerDelegateMethod5>>
      didCancel;
  external Pointer<
          NativeFunction<
              UniffiCallbackInterfaceSessionVerificationControllerDelegateMethod6>>
      didFinish;
  external Pointer<
          NativeFunction<
              UniffiCallbackInterfaceSessionVerificationControllerDelegateFree>>
      uniffiFree;
}

void sessionVerificationControllerDelegateDidReceiveVerificationRequest(
    int uniffiHandle,
    RustBuffer details,
    Pointer<Void> outReturn,
    Pointer<RustCallStatus> callStatus) {
  final status = callStatus.ref;
  try {
    final obj =
        FfiConverterCallbackInterfaceSessionVerificationControllerDelegate
            ._handleMap
            .get(uniffiHandle);
    final arg0 = FfiConverterSessionVerificationRequestDetails.lift(details);
    obj.didReceiveVerificationRequest(
      arg0,
    );
    status.code = CALL_SUCCESS;
  } catch (e) {
    status.code = CALL_UNEXPECTED_ERROR;
    status.errorBuf = FfiConverterString.lower(e.toString());
  }
}

final NativeCallable<
        UniffiCallbackInterfaceSessionVerificationControllerDelegateMethod0>
    sessionVerificationControllerDelegateDidReceiveVerificationRequestNativeCallable =
    NativeCallable<
            UniffiCallbackInterfaceSessionVerificationControllerDelegateMethod0>.listener(
        sessionVerificationControllerDelegateDidReceiveVerificationRequest);
void sessionVerificationControllerDelegateDidAcceptVerificationRequest(
    int uniffiHandle,
    Pointer<Void> outReturn,
    Pointer<RustCallStatus> callStatus) {
  final status = callStatus.ref;
  try {
    final obj =
        FfiConverterCallbackInterfaceSessionVerificationControllerDelegate
            ._handleMap
            .get(uniffiHandle);
    obj.didAcceptVerificationRequest();
    status.code = CALL_SUCCESS;
  } catch (e) {
    status.code = CALL_UNEXPECTED_ERROR;
    status.errorBuf = FfiConverterString.lower(e.toString());
  }
}

final NativeCallable<
        UniffiCallbackInterfaceSessionVerificationControllerDelegateMethod1>
    sessionVerificationControllerDelegateDidAcceptVerificationRequestNativeCallable =
    NativeCallable<
            UniffiCallbackInterfaceSessionVerificationControllerDelegateMethod1>.listener(
        sessionVerificationControllerDelegateDidAcceptVerificationRequest);
void sessionVerificationControllerDelegateDidStartSasVerification(
    int uniffiHandle,
    Pointer<Void> outReturn,
    Pointer<RustCallStatus> callStatus) {
  final status = callStatus.ref;
  try {
    final obj =
        FfiConverterCallbackInterfaceSessionVerificationControllerDelegate
            ._handleMap
            .get(uniffiHandle);
    obj.didStartSasVerification();
    status.code = CALL_SUCCESS;
  } catch (e) {
    status.code = CALL_UNEXPECTED_ERROR;
    status.errorBuf = FfiConverterString.lower(e.toString());
  }
}

final NativeCallable<
        UniffiCallbackInterfaceSessionVerificationControllerDelegateMethod2>
    sessionVerificationControllerDelegateDidStartSasVerificationNativeCallable =
    NativeCallable<
            UniffiCallbackInterfaceSessionVerificationControllerDelegateMethod2>.listener(
        sessionVerificationControllerDelegateDidStartSasVerification);
void sessionVerificationControllerDelegateDidReceiveVerificationData(
    int uniffiHandle,
    RustBuffer data,
    Pointer<Void> outReturn,
    Pointer<RustCallStatus> callStatus) {
  final status = callStatus.ref;
  try {
    final obj =
        FfiConverterCallbackInterfaceSessionVerificationControllerDelegate
            ._handleMap
            .get(uniffiHandle);
    final arg0 = FfiConverterSessionVerificationData.lift(data);
    obj.didReceiveVerificationData(
      arg0,
    );
    status.code = CALL_SUCCESS;
  } catch (e) {
    status.code = CALL_UNEXPECTED_ERROR;
    status.errorBuf = FfiConverterString.lower(e.toString());
  }
}

final NativeCallable<
        UniffiCallbackInterfaceSessionVerificationControllerDelegateMethod3>
    sessionVerificationControllerDelegateDidReceiveVerificationDataNativeCallable =
    NativeCallable<
            UniffiCallbackInterfaceSessionVerificationControllerDelegateMethod3>.listener(
        sessionVerificationControllerDelegateDidReceiveVerificationData);
void sessionVerificationControllerDelegateDidFail(int uniffiHandle,
    Pointer<Void> outReturn, Pointer<RustCallStatus> callStatus) {
  final status = callStatus.ref;
  try {
    final obj =
        FfiConverterCallbackInterfaceSessionVerificationControllerDelegate
            ._handleMap
            .get(uniffiHandle);
    obj.didFail();
    status.code = CALL_SUCCESS;
  } catch (e) {
    status.code = CALL_UNEXPECTED_ERROR;
    status.errorBuf = FfiConverterString.lower(e.toString());
  }
}

final NativeCallable<
        UniffiCallbackInterfaceSessionVerificationControllerDelegateMethod4>
    sessionVerificationControllerDelegateDidFailNativeCallable = NativeCallable<
            UniffiCallbackInterfaceSessionVerificationControllerDelegateMethod4>.listener(
        sessionVerificationControllerDelegateDidFail);
void sessionVerificationControllerDelegateDidCancel(int uniffiHandle,
    Pointer<Void> outReturn, Pointer<RustCallStatus> callStatus) {
  final status = callStatus.ref;
  try {
    final obj =
        FfiConverterCallbackInterfaceSessionVerificationControllerDelegate
            ._handleMap
            .get(uniffiHandle);
    obj.didCancel();
    status.code = CALL_SUCCESS;
  } catch (e) {
    status.code = CALL_UNEXPECTED_ERROR;
    status.errorBuf = FfiConverterString.lower(e.toString());
  }
}

final NativeCallable<
        UniffiCallbackInterfaceSessionVerificationControllerDelegateMethod5>
    sessionVerificationControllerDelegateDidCancelNativeCallable =
    NativeCallable<
            UniffiCallbackInterfaceSessionVerificationControllerDelegateMethod5>.listener(
        sessionVerificationControllerDelegateDidCancel);
void sessionVerificationControllerDelegateDidFinish(int uniffiHandle,
    Pointer<Void> outReturn, Pointer<RustCallStatus> callStatus) {
  final status = callStatus.ref;
  try {
    final obj =
        FfiConverterCallbackInterfaceSessionVerificationControllerDelegate
            ._handleMap
            .get(uniffiHandle);
    obj.didFinish();
    status.code = CALL_SUCCESS;
  } catch (e) {
    status.code = CALL_UNEXPECTED_ERROR;
    status.errorBuf = FfiConverterString.lower(e.toString());
  }
}

final NativeCallable<
        UniffiCallbackInterfaceSessionVerificationControllerDelegateMethod6>
    sessionVerificationControllerDelegateDidFinishNativeCallable =
    NativeCallable<
            UniffiCallbackInterfaceSessionVerificationControllerDelegateMethod6>.listener(
        sessionVerificationControllerDelegateDidFinish);

void sessionVerificationControllerDelegateFreeCallback(int handle) {
  try {
    FfiConverterCallbackInterfaceSessionVerificationControllerDelegate
        ._handleMap
        .remove(handle);
  } catch (e) {}
}

final Pointer<
        NativeFunction<
            UniffiCallbackInterfaceSessionVerificationControllerDelegateFree>>
    sessionVerificationControllerDelegateFreePointer = Pointer.fromFunction<
            UniffiCallbackInterfaceSessionVerificationControllerDelegateFree>(
        sessionVerificationControllerDelegateFreeCallback);
late final Pointer<
        UniffiVTableCallbackInterfaceSessionVerificationControllerDelegate>
    sessionVerificationControllerDelegateVTable;

void initSessionVerificationControllerDelegateVTable() {
  if (FfiConverterCallbackInterfaceSessionVerificationControllerDelegate
      ._vtableInitialized) {
    return;
  }

  sessionVerificationControllerDelegateVTable = calloc<
      UniffiVTableCallbackInterfaceSessionVerificationControllerDelegate>();
  sessionVerificationControllerDelegateVTable
          .ref.didReceiveVerificationRequest =
      sessionVerificationControllerDelegateDidReceiveVerificationRequestNativeCallable
          .nativeFunction;
  sessionVerificationControllerDelegateVTable.ref.didAcceptVerificationRequest =
      sessionVerificationControllerDelegateDidAcceptVerificationRequestNativeCallable
          .nativeFunction;
  sessionVerificationControllerDelegateVTable.ref.didStartSasVerification =
      sessionVerificationControllerDelegateDidStartSasVerificationNativeCallable
          .nativeFunction;
  sessionVerificationControllerDelegateVTable.ref.didReceiveVerificationData =
      sessionVerificationControllerDelegateDidReceiveVerificationDataNativeCallable
          .nativeFunction;
  sessionVerificationControllerDelegateVTable.ref.didFail =
      sessionVerificationControllerDelegateDidFailNativeCallable.nativeFunction;
  sessionVerificationControllerDelegateVTable.ref.didCancel =
      sessionVerificationControllerDelegateDidCancelNativeCallable
          .nativeFunction;
  sessionVerificationControllerDelegateVTable.ref.didFinish =
      sessionVerificationControllerDelegateDidFinishNativeCallable
          .nativeFunction;
  sessionVerificationControllerDelegateVTable.ref.uniffiFree =
      sessionVerificationControllerDelegateFreePointer;

  rustCall((status) {
    _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_init_callback_vtable_sessionverificationcontrollerdelegate(
      sessionVerificationControllerDelegateVTable,
    );
    checkCallStatus(NullRustCallStatusErrorHandler(), status);
  });

  FfiConverterCallbackInterfaceSessionVerificationControllerDelegate
      ._vtableInitialized = true;
}

class FfiConverterSequenceTimelineItem {
  static List<TimelineItem> lift(RustBuffer buf) {
    return FfiConverterSequenceTimelineItem.read(buf.asUint8List()).value;
  }

  static LiftRetVal<List<TimelineItem>> read(Uint8List buf) {
    List<TimelineItem> res = [];
    final length =
        buf.buffer.asByteData().getInt32(buf.offsetInBytes, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < length; i++) {
      final ret = TimelineItem.read(Uint8List.view(buf.buffer, offset));
      offset += ret.bytesRead;
      res.add(ret.value);
    }
    return LiftRetVal(res, offset - buf.offsetInBytes);
  }

  static int write(List<TimelineItem> value, Uint8List buf) {
    buf.buffer
        .asByteData()
        .setInt32(buf.offsetInBytes, value.length, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < value.length; i++) {
      offset +=
          TimelineItem.write(value[i], Uint8List.view(buf.buffer, offset));
    }
    return offset - buf.offsetInBytes;
  }

  static int allocationSize(List<TimelineItem> value) {
    int total = 4;
    for (var item in value) {
      total += TimelineItem.allocationSize(item);
    }
    return total;
  }

  static RustBuffer lower(List<TimelineItem> value) {
    final buf = Uint8List(allocationSize(value));
    write(value, buf);
    return toRustBuffer(buf);
  }
}

class FfiConverterSequenceReactionSenderData {
  static List<ReactionSenderData> lift(RustBuffer buf) {
    return FfiConverterSequenceReactionSenderData.read(buf.asUint8List()).value;
  }

  static LiftRetVal<List<ReactionSenderData>> read(Uint8List buf) {
    List<ReactionSenderData> res = [];
    final length =
        buf.buffer.asByteData().getInt32(buf.offsetInBytes, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < length; i++) {
      final ret = FfiConverterReactionSenderData.read(
          Uint8List.view(buf.buffer, offset));
      offset += ret.bytesRead;
      res.add(ret.value);
    }
    return LiftRetVal(res, offset - buf.offsetInBytes);
  }

  static int write(List<ReactionSenderData> value, Uint8List buf) {
    buf.buffer
        .asByteData()
        .setInt32(buf.offsetInBytes, value.length, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < value.length; i++) {
      offset += FfiConverterReactionSenderData.write(
          value[i], Uint8List.view(buf.buffer, offset));
    }
    return offset - buf.offsetInBytes;
  }

  static int allocationSize(List<ReactionSenderData> value) {
    int total = 4;
    for (var item in value) {
      total += FfiConverterReactionSenderData.allocationSize(item);
    }
    return total;
  }

  static RustBuffer lower(List<ReactionSenderData> value) {
    final buf = Uint8List(allocationSize(value));
    write(value, buf);
    return toRustBuffer(buf);
  }
}

class FfiConverterOptionalComposerDraft {
  static ComposerDraft? lift(RustBuffer buf) {
    return FfiConverterOptionalComposerDraft.read(buf.asUint8List()).value;
  }

  static LiftRetVal<ComposerDraft?> read(Uint8List buf) {
    if (ByteData.view(buf.buffer, buf.offsetInBytes).getInt8(0) == 0) {
      return LiftRetVal(null, 1);
    }
    final result = FfiConverterComposerDraft.read(
        Uint8List.view(buf.buffer, buf.offsetInBytes + 1));
    return LiftRetVal<ComposerDraft?>(result.value, result.bytesRead + 1);
  }

  static int allocationSize([ComposerDraft? value]) {
    if (value == null) {
      return 1;
    }
    return FfiConverterComposerDraft.allocationSize(value) + 1;
  }

  static RustBuffer lower(ComposerDraft? value) {
    if (value == null) {
      return toRustBuffer(Uint8List.fromList([0]));
    }

    final length = FfiConverterOptionalComposerDraft.allocationSize(value);

    final Pointer<Uint8> frameData = calloc<Uint8>(length);
    final buf = frameData.asTypedList(length);

    FfiConverterOptionalComposerDraft.write(value, buf);

    final bytes = calloc<ForeignBytes>();
    bytes.ref.len = length;
    bytes.ref.data = frameData;
    return RustBuffer.fromBytes(bytes.ref);
  }

  static int write(ComposerDraft? value, Uint8List buf) {
    if (value == null) {
      buf[0] = 0;
      return 1;
    }

    buf[0] = 1;

    return FfiConverterComposerDraft.write(
            value, Uint8List.view(buf.buffer, buf.offsetInBytes + 1)) +
        1;
  }
}

abstract class AccountDataListener {
  void onChange(
    AccountDataEvent event,
  );
}

class FfiConverterCallbackInterfaceAccountDataListener {
  static final _handleMap = UniffiHandleMap<AccountDataListener>();
  static bool _vtableInitialized = false;

  static AccountDataListener lift(int handle) {
    return _handleMap.get(handle);
  }

  static int lower(AccountDataListener value) {
    _ensureVTableInitialized();
    return _handleMap.insert(value);
  }

  static void _ensureVTableInitialized() {
    if (!_vtableInitialized) {
      initAccountDataListenerVTable();
      _vtableInitialized = true;
    }
  }

  static LiftRetVal<AccountDataListener> read(Uint8List buf) {
    final handle = buf.buffer.asByteData(buf.offsetInBytes).getInt64(0);
    return LiftRetVal(lift(handle), 8);
  }

  static int write(AccountDataListener value, Uint8List buf) {
    final handle = lower(value);
    buf.buffer.asByteData(buf.offsetInBytes).setInt64(0, handle);
    return 8;
  }

  static int allocationSize(AccountDataListener value) {
    return 8;
  }
}

typedef UniffiCallbackInterfaceAccountDataListenerMethod0 = Void Function(
    Uint64, RustBuffer, Pointer<Void>, Pointer<RustCallStatus>);
typedef UniffiCallbackInterfaceAccountDataListenerMethod0Dart = void Function(
    int, int, Pointer<Void>, Pointer<RustCallStatus>);
typedef UniffiCallbackInterfaceAccountDataListenerFree = Void Function(Uint64);
typedef UniffiCallbackInterfaceAccountDataListenerFreeDart = void Function(int);

final class UniffiVTableCallbackInterfaceAccountDataListener extends Struct {
  external Pointer<
          NativeFunction<UniffiCallbackInterfaceAccountDataListenerMethod0>>
      onChange;
  external Pointer<
          NativeFunction<UniffiCallbackInterfaceAccountDataListenerFree>>
      uniffiFree;
}

void accountDataListenerOnChange(int uniffiHandle, RustBuffer event,
    Pointer<Void> outReturn, Pointer<RustCallStatus> callStatus) {
  final status = callStatus.ref;
  try {
    final obj = FfiConverterCallbackInterfaceAccountDataListener._handleMap
        .get(uniffiHandle);
    final arg0 = FfiConverterAccountDataEvent.lift(event);
    obj.onChange(
      arg0,
    );
    status.code = CALL_SUCCESS;
  } catch (e) {
    status.code = CALL_UNEXPECTED_ERROR;
    status.errorBuf = FfiConverterString.lower(e.toString());
  }
}

final NativeCallable<UniffiCallbackInterfaceAccountDataListenerMethod0>
    accountDataListenerOnChangeNativeCallable =
    NativeCallable<UniffiCallbackInterfaceAccountDataListenerMethod0>.listener(
        accountDataListenerOnChange);

void accountDataListenerFreeCallback(int handle) {
  try {
    FfiConverterCallbackInterfaceAccountDataListener._handleMap.remove(handle);
  } catch (e) {}
}

final Pointer<NativeFunction<UniffiCallbackInterfaceAccountDataListenerFree>>
    accountDataListenerFreePointer =
    Pointer.fromFunction<UniffiCallbackInterfaceAccountDataListenerFree>(
        accountDataListenerFreeCallback);
late final Pointer<UniffiVTableCallbackInterfaceAccountDataListener>
    accountDataListenerVTable;

void initAccountDataListenerVTable() {
  if (FfiConverterCallbackInterfaceAccountDataListener._vtableInitialized) {
    return;
  }

  accountDataListenerVTable =
      calloc<UniffiVTableCallbackInterfaceAccountDataListener>();
  accountDataListenerVTable.ref.onChange =
      accountDataListenerOnChangeNativeCallable.nativeFunction;
  accountDataListenerVTable.ref.uniffiFree = accountDataListenerFreePointer;

  rustCall((status) {
    _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_init_callback_vtable_accountdatalistener(
      accountDataListenerVTable,
    );
    checkCallStatus(NullRustCallStatusErrorHandler(), status);
  });

  FfiConverterCallbackInterfaceAccountDataListener._vtableInitialized = true;
}

class FfiConverterSequenceTimelineDiff {
  static List<TimelineDiff> lift(RustBuffer buf) {
    return FfiConverterSequenceTimelineDiff.read(buf.asUint8List()).value;
  }

  static LiftRetVal<List<TimelineDiff>> read(Uint8List buf) {
    List<TimelineDiff> res = [];
    final length =
        buf.buffer.asByteData().getInt32(buf.offsetInBytes, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < length; i++) {
      final ret =
          FfiConverterTimelineDiff.read(Uint8List.view(buf.buffer, offset));
      offset += ret.bytesRead;
      res.add(ret.value);
    }
    return LiftRetVal(res, offset - buf.offsetInBytes);
  }

  static int write(List<TimelineDiff> value, Uint8List buf) {
    buf.buffer
        .asByteData()
        .setInt32(buf.offsetInBytes, value.length, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < value.length; i++) {
      offset += FfiConverterTimelineDiff.write(
          value[i], Uint8List.view(buf.buffer, offset));
    }
    return offset - buf.offsetInBytes;
  }

  static int allocationSize(List<TimelineDiff> value) {
    int total = 4;
    for (var item in value) {
      total += FfiConverterTimelineDiff.allocationSize(item);
    }
    return total;
  }

  static RustBuffer lower(List<TimelineDiff> value) {
    final buf = Uint8List(allocationSize(value));
    write(value, buf);
    return toRustBuffer(buf);
  }
}

abstract class SyncServiceStateObserver {
  void onUpdate(
    SyncServiceState state,
  );
}

class FfiConverterCallbackInterfaceSyncServiceStateObserver {
  static final _handleMap = UniffiHandleMap<SyncServiceStateObserver>();
  static bool _vtableInitialized = false;

  static SyncServiceStateObserver lift(int handle) {
    return _handleMap.get(handle);
  }

  static int lower(SyncServiceStateObserver value) {
    _ensureVTableInitialized();
    return _handleMap.insert(value);
  }

  static void _ensureVTableInitialized() {
    if (!_vtableInitialized) {
      initSyncServiceStateObserverVTable();
      _vtableInitialized = true;
    }
  }

  static LiftRetVal<SyncServiceStateObserver> read(Uint8List buf) {
    final handle = buf.buffer.asByteData(buf.offsetInBytes).getInt64(0);
    return LiftRetVal(lift(handle), 8);
  }

  static int write(SyncServiceStateObserver value, Uint8List buf) {
    final handle = lower(value);
    buf.buffer.asByteData(buf.offsetInBytes).setInt64(0, handle);
    return 8;
  }

  static int allocationSize(SyncServiceStateObserver value) {
    return 8;
  }
}

typedef UniffiCallbackInterfaceSyncServiceStateObserverMethod0 = Void Function(
    Uint64, RustBuffer, Pointer<Void>, Pointer<RustCallStatus>);
typedef UniffiCallbackInterfaceSyncServiceStateObserverMethod0Dart = void
    Function(int, int, Pointer<Void>, Pointer<RustCallStatus>);
typedef UniffiCallbackInterfaceSyncServiceStateObserverFree = Void Function(
    Uint64);
typedef UniffiCallbackInterfaceSyncServiceStateObserverFreeDart = void Function(
    int);

final class UniffiVTableCallbackInterfaceSyncServiceStateObserver
    extends Struct {
  external Pointer<
      NativeFunction<
          UniffiCallbackInterfaceSyncServiceStateObserverMethod0>> onUpdate;
  external Pointer<
          NativeFunction<UniffiCallbackInterfaceSyncServiceStateObserverFree>>
      uniffiFree;
}

void syncServiceStateObserverOnUpdate(int uniffiHandle, RustBuffer state,
    Pointer<Void> outReturn, Pointer<RustCallStatus> callStatus) {
  final status = callStatus.ref;
  try {
    final obj = FfiConverterCallbackInterfaceSyncServiceStateObserver._handleMap
        .get(uniffiHandle);
    final arg0 = FfiConverterSyncServiceState.lift(state);
    obj.onUpdate(
      arg0,
    );
    status.code = CALL_SUCCESS;
  } catch (e) {
    status.code = CALL_UNEXPECTED_ERROR;
    status.errorBuf = FfiConverterString.lower(e.toString());
  }
}

final NativeCallable<UniffiCallbackInterfaceSyncServiceStateObserverMethod0>
    syncServiceStateObserverOnUpdateNativeCallable = NativeCallable<
            UniffiCallbackInterfaceSyncServiceStateObserverMethod0>.listener(
        syncServiceStateObserverOnUpdate);

void syncServiceStateObserverFreeCallback(int handle) {
  try {
    FfiConverterCallbackInterfaceSyncServiceStateObserver._handleMap
        .remove(handle);
  } catch (e) {}
}

final Pointer<
        NativeFunction<UniffiCallbackInterfaceSyncServiceStateObserverFree>>
    syncServiceStateObserverFreePointer =
    Pointer.fromFunction<UniffiCallbackInterfaceSyncServiceStateObserverFree>(
        syncServiceStateObserverFreeCallback);
late final Pointer<UniffiVTableCallbackInterfaceSyncServiceStateObserver>
    syncServiceStateObserverVTable;

void initSyncServiceStateObserverVTable() {
  if (FfiConverterCallbackInterfaceSyncServiceStateObserver
      ._vtableInitialized) {
    return;
  }

  syncServiceStateObserverVTable =
      calloc<UniffiVTableCallbackInterfaceSyncServiceStateObserver>();
  syncServiceStateObserverVTable.ref.onUpdate =
      syncServiceStateObserverOnUpdateNativeCallable.nativeFunction;
  syncServiceStateObserverVTable.ref.uniffiFree =
      syncServiceStateObserverFreePointer;

  rustCall((status) {
    _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_init_callback_vtable_syncservicestateobserver(
      syncServiceStateObserverVTable,
    );
    checkCallStatus(NullRustCallStatusErrorHandler(), status);
  });

  FfiConverterCallbackInterfaceSyncServiceStateObserver._vtableInitialized =
      true;
}

abstract class RoomAccountDataListener {
  void onChange(
    RoomAccountDataEvent event,
    String roomId,
  );
}

class FfiConverterCallbackInterfaceRoomAccountDataListener {
  static final _handleMap = UniffiHandleMap<RoomAccountDataListener>();
  static bool _vtableInitialized = false;

  static RoomAccountDataListener lift(int handle) {
    return _handleMap.get(handle);
  }

  static int lower(RoomAccountDataListener value) {
    _ensureVTableInitialized();
    return _handleMap.insert(value);
  }

  static void _ensureVTableInitialized() {
    if (!_vtableInitialized) {
      initRoomAccountDataListenerVTable();
      _vtableInitialized = true;
    }
  }

  static LiftRetVal<RoomAccountDataListener> read(Uint8List buf) {
    final handle = buf.buffer.asByteData(buf.offsetInBytes).getInt64(0);
    return LiftRetVal(lift(handle), 8);
  }

  static int write(RoomAccountDataListener value, Uint8List buf) {
    final handle = lower(value);
    buf.buffer.asByteData(buf.offsetInBytes).setInt64(0, handle);
    return 8;
  }

  static int allocationSize(RoomAccountDataListener value) {
    return 8;
  }
}

typedef UniffiCallbackInterfaceRoomAccountDataListenerMethod0 = Void Function(
    Uint64, RustBuffer, RustBuffer, Pointer<Void>, Pointer<RustCallStatus>);
typedef UniffiCallbackInterfaceRoomAccountDataListenerMethod0Dart = void
    Function(int, int, RustBuffer, Pointer<Void>, Pointer<RustCallStatus>);
typedef UniffiCallbackInterfaceRoomAccountDataListenerFree = Void Function(
    Uint64);
typedef UniffiCallbackInterfaceRoomAccountDataListenerFreeDart = void Function(
    int);

final class UniffiVTableCallbackInterfaceRoomAccountDataListener
    extends Struct {
  external Pointer<
          NativeFunction<UniffiCallbackInterfaceRoomAccountDataListenerMethod0>>
      onChange;
  external Pointer<
          NativeFunction<UniffiCallbackInterfaceRoomAccountDataListenerFree>>
      uniffiFree;
}

void roomAccountDataListenerOnChange(
    int uniffiHandle,
    RustBuffer event,
    RustBuffer roomIdBuffer,
    Pointer<Void> outReturn,
    Pointer<RustCallStatus> callStatus) {
  final status = callStatus.ref;
  try {
    final obj = FfiConverterCallbackInterfaceRoomAccountDataListener._handleMap
        .get(uniffiHandle);
    final arg0 = FfiConverterRoomAccountDataEvent.lift(event);
    final arg1 = FfiConverterString.lift(roomIdBuffer);
    obj.onChange(
      arg0,
      arg1,
    );
    status.code = CALL_SUCCESS;
  } catch (e) {
    status.code = CALL_UNEXPECTED_ERROR;
    status.errorBuf = FfiConverterString.lower(e.toString());
  }
}

final NativeCallable<UniffiCallbackInterfaceRoomAccountDataListenerMethod0>
    roomAccountDataListenerOnChangeNativeCallable = NativeCallable<
            UniffiCallbackInterfaceRoomAccountDataListenerMethod0>.listener(
        roomAccountDataListenerOnChange);

void roomAccountDataListenerFreeCallback(int handle) {
  try {
    FfiConverterCallbackInterfaceRoomAccountDataListener._handleMap
        .remove(handle);
  } catch (e) {}
}

final Pointer<
        NativeFunction<UniffiCallbackInterfaceRoomAccountDataListenerFree>>
    roomAccountDataListenerFreePointer =
    Pointer.fromFunction<UniffiCallbackInterfaceRoomAccountDataListenerFree>(
        roomAccountDataListenerFreeCallback);
late final Pointer<UniffiVTableCallbackInterfaceRoomAccountDataListener>
    roomAccountDataListenerVTable;

void initRoomAccountDataListenerVTable() {
  if (FfiConverterCallbackInterfaceRoomAccountDataListener._vtableInitialized) {
    return;
  }

  roomAccountDataListenerVTable =
      calloc<UniffiVTableCallbackInterfaceRoomAccountDataListener>();
  roomAccountDataListenerVTable.ref.onChange =
      roomAccountDataListenerOnChangeNativeCallable.nativeFunction;
  roomAccountDataListenerVTable.ref.uniffiFree =
      roomAccountDataListenerFreePointer;

  rustCall((status) {
    _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_init_callback_vtable_roomaccountdatalistener(
      roomAccountDataListenerVTable,
    );
    checkCallStatus(NullRustCallStatusErrorHandler(), status);
  });

  FfiConverterCallbackInterfaceRoomAccountDataListener._vtableInitialized =
      true;
}

class FfiConverterOptionalBool {
  static bool? lift(RustBuffer buf) {
    return FfiConverterOptionalBool.read(buf.asUint8List()).value;
  }

  static LiftRetVal<bool?> read(Uint8List buf) {
    if (ByteData.view(buf.buffer, buf.offsetInBytes).getInt8(0) == 0) {
      return LiftRetVal(null, 1);
    }
    final result = FfiConverterBool.read(
        Uint8List.view(buf.buffer, buf.offsetInBytes + 1));
    return LiftRetVal<bool?>(result.value, result.bytesRead + 1);
  }

  static int allocationSize([bool? value]) {
    if (value == null) {
      return 1;
    }
    return FfiConverterBool.allocationSize(value) + 1;
  }

  static RustBuffer lower(bool? value) {
    if (value == null) {
      return toRustBuffer(Uint8List.fromList([0]));
    }

    final length = FfiConverterOptionalBool.allocationSize(value);

    final Pointer<Uint8> frameData = calloc<Uint8>(length);
    final buf = frameData.asTypedList(length);

    FfiConverterOptionalBool.write(value, buf);

    final bytes = calloc<ForeignBytes>();
    bytes.ref.len = length;
    bytes.ref.data = frameData;
    return RustBuffer.fromBytes(bytes.ref);
  }

  static int write(bool? value, Uint8List buf) {
    if (value == null) {
      buf[0] = 0;
      return 1;
    }

    buf[0] = 1;

    return FfiConverterBool.write(
            value, Uint8List.view(buf.buffer, buf.offsetInBytes + 1)) +
        1;
  }
}

class FfiConverterSequenceTraceLogPacks {
  static List<TraceLogPacks> lift(RustBuffer buf) {
    return FfiConverterSequenceTraceLogPacks.read(buf.asUint8List()).value;
  }

  static LiftRetVal<List<TraceLogPacks>> read(Uint8List buf) {
    List<TraceLogPacks> res = [];
    final length =
        buf.buffer.asByteData().getInt32(buf.offsetInBytes, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < length; i++) {
      final ret =
          FfiConverterTraceLogPacks.read(Uint8List.view(buf.buffer, offset));
      offset += ret.bytesRead;
      res.add(ret.value);
    }
    return LiftRetVal(res, offset - buf.offsetInBytes);
  }

  static int write(List<TraceLogPacks> value, Uint8List buf) {
    buf.buffer
        .asByteData()
        .setInt32(buf.offsetInBytes, value.length, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < value.length; i++) {
      offset += FfiConverterTraceLogPacks.write(
          value[i], Uint8List.view(buf.buffer, offset));
    }
    return offset - buf.offsetInBytes;
  }

  static int allocationSize(List<TraceLogPacks> value) {
    int total = 4;
    for (var item in value) {
      total += FfiConverterTraceLogPacks.allocationSize(item);
    }
    return total;
  }

  static RustBuffer lower(List<TraceLogPacks> value) {
    final buf = Uint8List(allocationSize(value));
    write(value, buf);
    return toRustBuffer(buf);
  }
}

class FfiConverterOptionalOidcPrompt {
  static OidcPrompt? lift(RustBuffer buf) {
    return FfiConverterOptionalOidcPrompt.read(buf.asUint8List()).value;
  }

  static LiftRetVal<OidcPrompt?> read(Uint8List buf) {
    if (ByteData.view(buf.buffer, buf.offsetInBytes).getInt8(0) == 0) {
      return LiftRetVal(null, 1);
    }
    final result = FfiConverterOidcPrompt.read(
        Uint8List.view(buf.buffer, buf.offsetInBytes + 1));
    return LiftRetVal<OidcPrompt?>(result.value, result.bytesRead + 1);
  }

  static int allocationSize([OidcPrompt? value]) {
    if (value == null) {
      return 1;
    }
    return FfiConverterOidcPrompt.allocationSize(value) + 1;
  }

  static RustBuffer lower(OidcPrompt? value) {
    if (value == null) {
      return toRustBuffer(Uint8List.fromList([0]));
    }

    final length = FfiConverterOptionalOidcPrompt.allocationSize(value);

    final Pointer<Uint8> frameData = calloc<Uint8>(length);
    final buf = frameData.asTypedList(length);

    FfiConverterOptionalOidcPrompt.write(value, buf);

    final bytes = calloc<ForeignBytes>();
    bytes.ref.len = length;
    bytes.ref.data = frameData;
    return RustBuffer.fromBytes(bytes.ref);
  }

  static int write(OidcPrompt? value, Uint8List buf) {
    if (value == null) {
      buf[0] = 0;
      return 1;
    }

    buf[0] = 1;

    return FfiConverterOidcPrompt.write(
            value, Uint8List.view(buf.buffer, buf.offsetInBytes + 1)) +
        1;
  }
}

class FfiConverterSequenceConditionalPushRule {
  static List<ConditionalPushRule> lift(RustBuffer buf) {
    return FfiConverterSequenceConditionalPushRule.read(buf.asUint8List())
        .value;
  }

  static LiftRetVal<List<ConditionalPushRule>> read(Uint8List buf) {
    List<ConditionalPushRule> res = [];
    final length =
        buf.buffer.asByteData().getInt32(buf.offsetInBytes, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < length; i++) {
      final ret = FfiConverterConditionalPushRule.read(
          Uint8List.view(buf.buffer, offset));
      offset += ret.bytesRead;
      res.add(ret.value);
    }
    return LiftRetVal(res, offset - buf.offsetInBytes);
  }

  static int write(List<ConditionalPushRule> value, Uint8List buf) {
    buf.buffer
        .asByteData()
        .setInt32(buf.offsetInBytes, value.length, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < value.length; i++) {
      offset += FfiConverterConditionalPushRule.write(
          value[i], Uint8List.view(buf.buffer, offset));
    }
    return offset - buf.offsetInBytes;
  }

  static int allocationSize(List<ConditionalPushRule> value) {
    int total = 4;
    for (var item in value) {
      total += FfiConverterConditionalPushRule.allocationSize(item);
    }
    return total;
  }

  static RustBuffer lower(List<ConditionalPushRule> value) {
    final buf = Uint8List(allocationSize(value));
    write(value, buf);
    return toRustBuffer(buf);
  }
}

class FfiConverterMapStringString {
  static Map lift(RustBuffer buf) {
    return FfiConverterMapStringString.read(buf.asUint8List()).value;
  }

  static LiftRetVal<Map> read(Uint8List buf) {
    Map res = {};
    final length =
        buf.buffer.asByteData().getInt32(buf.offsetInBytes, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < length; i++) {
      final k = FfiConverterString.read(Uint8List.view(buf.buffer, offset));
      offset += k.bytesRead;
      final v = FfiConverterString.read(Uint8List.view(buf.buffer, offset));
      offset += v.bytesRead;
      res[k.value] = v.value;
    }
    return LiftRetVal(res, offset - buf.offsetInBytes);
  }

  static int write(Map value, Uint8List buf) {
    buf.buffer
        .asByteData()
        .setInt32(buf.offsetInBytes, value.length, Endian.little);
    int offset = buf.offsetInBytes + 4;
    value.forEach((k, v) {
      offset += FfiConverterString.write(k, Uint8List.view(buf.buffer, offset));
      offset += FfiConverterString.write(v, Uint8List.view(buf.buffer, offset));
    });
    return offset - buf.offsetInBytes;
  }

  static int allocationSize(Map value) {
    int total = 4;
    value.forEach((k, v) {
      total += FfiConverterString.allocationSize(k);
      total += FfiConverterString.allocationSize(v);
    });
    return total;
  }

  static RustBuffer lower(Map value) {
    final buf = Uint8List(allocationSize(value));
    write(value, buf);
    return toRustBuffer(buf);
  }
}

class FfiConverterOptionalUInt64 {
  static int? lift(RustBuffer buf) {
    return FfiConverterOptionalUInt64.read(buf.asUint8List()).value;
  }

  static LiftRetVal<int?> read(Uint8List buf) {
    if (ByteData.view(buf.buffer, buf.offsetInBytes).getInt8(0) == 0) {
      return LiftRetVal(null, 1);
    }
    final result = FfiConverterUInt64.read(
        Uint8List.view(buf.buffer, buf.offsetInBytes + 1));
    return LiftRetVal<int?>(result.value, result.bytesRead + 1);
  }

  static int allocationSize([int? value]) {
    if (value == null) {
      return 1;
    }
    return FfiConverterUInt64.allocationSize(value) + 1;
  }

  static RustBuffer lower(int? value) {
    if (value == null) {
      return toRustBuffer(Uint8List.fromList([0]));
    }

    final length = FfiConverterOptionalUInt64.allocationSize(value);

    final Pointer<Uint8> frameData = calloc<Uint8>(length);
    final buf = frameData.asTypedList(length);

    FfiConverterOptionalUInt64.write(value, buf);

    final bytes = calloc<ForeignBytes>();
    bytes.ref.len = length;
    bytes.ref.data = frameData;
    return RustBuffer.fromBytes(bytes.ref);
  }

  static int write(int? value, Uint8List buf) {
    if (value == null) {
      buf[0] = 0;
      return 1;
    }

    buf[0] = 1;

    return FfiConverterUInt64.write(
            value, Uint8List.view(buf.buffer, buf.offsetInBytes + 1)) +
        1;
  }
}

abstract class TimelineListener {
  void onUpdate(
    List<TimelineDiff> diff,
  );
}

class FfiConverterCallbackInterfaceTimelineListener {
  static final _handleMap = UniffiHandleMap<TimelineListener>();
  static bool _vtableInitialized = false;

  static TimelineListener lift(int handle) {
    return _handleMap.get(handle);
  }

  static int lower(TimelineListener value) {
    _ensureVTableInitialized();
    return _handleMap.insert(value);
  }

  static void _ensureVTableInitialized() {
    if (!_vtableInitialized) {
      initTimelineListenerVTable();
      _vtableInitialized = true;
    }
  }

  static LiftRetVal<TimelineListener> read(Uint8List buf) {
    final handle = buf.buffer.asByteData(buf.offsetInBytes).getInt64(0);
    return LiftRetVal(lift(handle), 8);
  }

  static int write(TimelineListener value, Uint8List buf) {
    final handle = lower(value);
    buf.buffer.asByteData(buf.offsetInBytes).setInt64(0, handle);
    return 8;
  }

  static int allocationSize(TimelineListener value) {
    return 8;
  }
}

typedef UniffiCallbackInterfaceTimelineListenerMethod0 = Void Function(
    Uint64, RustBuffer, Pointer<Void>, Pointer<RustCallStatus>);
typedef UniffiCallbackInterfaceTimelineListenerMethod0Dart = void Function(
    int, RustBuffer, Pointer<Void>, Pointer<RustCallStatus>);
typedef UniffiCallbackInterfaceTimelineListenerFree = Void Function(Uint64);
typedef UniffiCallbackInterfaceTimelineListenerFreeDart = void Function(int);

final class UniffiVTableCallbackInterfaceTimelineListener extends Struct {
  external Pointer<
      NativeFunction<UniffiCallbackInterfaceTimelineListenerMethod0>> onUpdate;
  external Pointer<NativeFunction<UniffiCallbackInterfaceTimelineListenerFree>>
      uniffiFree;
}

void timelineListenerOnUpdate(int uniffiHandle, RustBuffer diff,
    Pointer<Void> outReturn, Pointer<RustCallStatus> callStatus) {
  final status = callStatus.ref;
  try {
    final obj = FfiConverterCallbackInterfaceTimelineListener._handleMap
        .get(uniffiHandle);
    final arg0 = FfiConverterSequenceTimelineDiff.lift(diff);
    obj.onUpdate(
      arg0,
    );
    status.code = CALL_SUCCESS;
  } catch (e) {
    status.code = CALL_UNEXPECTED_ERROR;
    status.errorBuf = FfiConverterString.lower(e.toString());
  }
}

final NativeCallable<UniffiCallbackInterfaceTimelineListenerMethod0>
    timelineListenerOnUpdateNativeCallable =
    NativeCallable<UniffiCallbackInterfaceTimelineListenerMethod0>.listener(
        timelineListenerOnUpdate);

void timelineListenerFreeCallback(int handle) {
  try {
    FfiConverterCallbackInterfaceTimelineListener._handleMap.remove(handle);
  } catch (e) {}
}

final Pointer<NativeFunction<UniffiCallbackInterfaceTimelineListenerFree>>
    timelineListenerFreePointer =
    Pointer.fromFunction<UniffiCallbackInterfaceTimelineListenerFree>(
        timelineListenerFreeCallback);
late final Pointer<UniffiVTableCallbackInterfaceTimelineListener>
    timelineListenerVTable;

void initTimelineListenerVTable() {
  if (FfiConverterCallbackInterfaceTimelineListener._vtableInitialized) {
    return;
  }

  timelineListenerVTable =
      calloc<UniffiVTableCallbackInterfaceTimelineListener>();
  timelineListenerVTable.ref.onUpdate =
      timelineListenerOnUpdateNativeCallable.nativeFunction;
  timelineListenerVTable.ref.uniffiFree = timelineListenerFreePointer;

  rustCall((status) {
    _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_init_callback_vtable_timelinelistener(
      timelineListenerVTable,
    );
    checkCallStatus(NullRustCallStatusErrorHandler(), status);
  });

  FfiConverterCallbackInterfaceTimelineListener._vtableInitialized = true;
}

class FfiConverterOptionalRoomMessageEventContentWithoutRelation {
  static RoomMessageEventContentWithoutRelation? lift(RustBuffer buf) {
    return FfiConverterOptionalRoomMessageEventContentWithoutRelation.read(
            buf.asUint8List())
        .value;
  }

  static LiftRetVal<RoomMessageEventContentWithoutRelation?> read(
      Uint8List buf) {
    if (ByteData.view(buf.buffer, buf.offsetInBytes).getInt8(0) == 0) {
      return LiftRetVal(null, 1);
    }
    final result = RoomMessageEventContentWithoutRelation.read(
        Uint8List.view(buf.buffer, buf.offsetInBytes + 1));
    return LiftRetVal<RoomMessageEventContentWithoutRelation?>(
        result.value, result.bytesRead + 1);
  }

  static int allocationSize([RoomMessageEventContentWithoutRelation? value]) {
    if (value == null) {
      return 1;
    }
    return RoomMessageEventContentWithoutRelation.allocationSize(value) + 1;
  }

  static RustBuffer lower(RoomMessageEventContentWithoutRelation? value) {
    if (value == null) {
      return toRustBuffer(Uint8List.fromList([0]));
    }

    final length = FfiConverterOptionalRoomMessageEventContentWithoutRelation
        .allocationSize(value);

    final Pointer<Uint8> frameData = calloc<Uint8>(length);
    final buf = frameData.asTypedList(length);

    FfiConverterOptionalRoomMessageEventContentWithoutRelation.write(
        value, buf);

    final bytes = calloc<ForeignBytes>();
    bytes.ref.len = length;
    bytes.ref.data = frameData;
    return RustBuffer.fromBytes(bytes.ref);
  }

  static int write(
      RoomMessageEventContentWithoutRelation? value, Uint8List buf) {
    if (value == null) {
      buf[0] = 0;
      return 1;
    }

    buf[0] = 1;

    return RoomMessageEventContentWithoutRelation.write(
            value, Uint8List.view(buf.buffer, buf.offsetInBytes + 1)) +
        1;
  }
}

class FfiConverterOptionalMediaPreviews {
  static MediaPreviews? lift(RustBuffer buf) {
    return FfiConverterOptionalMediaPreviews.read(buf.asUint8List()).value;
  }

  static LiftRetVal<MediaPreviews?> read(Uint8List buf) {
    if (ByteData.view(buf.buffer, buf.offsetInBytes).getInt8(0) == 0) {
      return LiftRetVal(null, 1);
    }
    final result = FfiConverterMediaPreviews.read(
        Uint8List.view(buf.buffer, buf.offsetInBytes + 1));
    return LiftRetVal<MediaPreviews?>(result.value, result.bytesRead + 1);
  }

  static int allocationSize([MediaPreviews? value]) {
    if (value == null) {
      return 1;
    }
    return FfiConverterMediaPreviews.allocationSize(value) + 1;
  }

  static RustBuffer lower(MediaPreviews? value) {
    if (value == null) {
      return toRustBuffer(Uint8List.fromList([0]));
    }

    final length = FfiConverterOptionalMediaPreviews.allocationSize(value);

    final Pointer<Uint8> frameData = calloc<Uint8>(length);
    final buf = frameData.asTypedList(length);

    FfiConverterOptionalMediaPreviews.write(value, buf);

    final bytes = calloc<ForeignBytes>();
    bytes.ref.len = length;
    bytes.ref.data = frameData;
    return RustBuffer.fromBytes(bytes.ref);
  }

  static int write(MediaPreviews? value, Uint8List buf) {
    if (value == null) {
      buf[0] = 0;
      return 1;
    }

    buf[0] = 1;

    return FfiConverterMediaPreviews.write(
            value, Uint8List.view(buf.buffer, buf.offsetInBytes + 1)) +
        1;
  }
}

class FfiConverterOptionalThreadSummary {
  static ThreadSummary? lift(RustBuffer buf) {
    return FfiConverterOptionalThreadSummary.read(buf.asUint8List()).value;
  }

  static LiftRetVal<ThreadSummary?> read(Uint8List buf) {
    if (ByteData.view(buf.buffer, buf.offsetInBytes).getInt8(0) == 0) {
      return LiftRetVal(null, 1);
    }
    final result =
        ThreadSummary.read(Uint8List.view(buf.buffer, buf.offsetInBytes + 1));
    return LiftRetVal<ThreadSummary?>(result.value, result.bytesRead + 1);
  }

  static int allocationSize([ThreadSummary? value]) {
    if (value == null) {
      return 1;
    }
    return ThreadSummary.allocationSize(value) + 1;
  }

  static RustBuffer lower(ThreadSummary? value) {
    if (value == null) {
      return toRustBuffer(Uint8List.fromList([0]));
    }

    final length = FfiConverterOptionalThreadSummary.allocationSize(value);

    final Pointer<Uint8> frameData = calloc<Uint8>(length);
    final buf = frameData.asTypedList(length);

    FfiConverterOptionalThreadSummary.write(value, buf);

    final bytes = calloc<ForeignBytes>();
    bytes.ref.len = length;
    bytes.ref.data = frameData;
    return RustBuffer.fromBytes(bytes.ref);
  }

  static int write(ThreadSummary? value, Uint8List buf) {
    if (value == null) {
      buf[0] = 0;
      return 1;
    }

    buf[0] = 1;

    return ThreadSummary.write(
            value, Uint8List.view(buf.buffer, buf.offsetInBytes + 1)) +
        1;
  }
}

class FfiConverterMapStringInt32 {
  static Map<String, int> lift(RustBuffer buf) {
    return FfiConverterMapStringInt32.read(buf.asUint8List()).value;
  }

  static LiftRetVal<Map<String, int>> read(Uint8List buf) {
    Map<String, int> res = <String, int>{};
    final length =
        buf.buffer.asByteData().getInt32(buf.offsetInBytes, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < length; i++) {
      final k = FfiConverterString.read(Uint8List.view(buf.buffer, offset));
      offset += k.bytesRead;
      final v = FfiConverterInt32.read(Uint8List.view(buf.buffer, offset));
      offset += v.bytesRead;
      res[k.value] = v.value;
    }
    return LiftRetVal(res, offset - buf.offsetInBytes);
  }

  static int write(Map<String, int> value, Uint8List buf) {
    buf.buffer
        .asByteData()
        .setInt32(buf.offsetInBytes, value.length, Endian.little);
    int offset = buf.offsetInBytes + 4;
    value.forEach((k, v) {
      offset += FfiConverterString.write(k, Uint8List.view(buf.buffer, offset));
      offset += FfiConverterInt32.write(v, Uint8List.view(buf.buffer, offset));
    });
    return offset - buf.offsetInBytes;
  }

  static int allocationSize(Map<String, int> value) {
    int total = 4;
    value.forEach((k, v) {
      total += FfiConverterString.allocationSize(k);
      total += FfiConverterInt32.allocationSize(v);
    });
    return total;
  }

  static RustBuffer lower(Map<String, int> value) {
    final buf = Uint8List(allocationSize(value));
    write(value, buf);
    return toRustBuffer(buf);
  }
}

class FfiConverterOptionalRoomPowerLevels {
  static RoomPowerLevels? lift(RustBuffer buf) {
    return FfiConverterOptionalRoomPowerLevels.read(buf.asUint8List()).value;
  }

  static LiftRetVal<RoomPowerLevels?> read(Uint8List buf) {
    if (ByteData.view(buf.buffer, buf.offsetInBytes).getInt8(0) == 0) {
      return LiftRetVal(null, 1);
    }
    final result =
        RoomPowerLevels.read(Uint8List.view(buf.buffer, buf.offsetInBytes + 1));
    return LiftRetVal<RoomPowerLevels?>(result.value, result.bytesRead + 1);
  }

  static int allocationSize([RoomPowerLevels? value]) {
    if (value == null) {
      return 1;
    }
    return RoomPowerLevels.allocationSize(value) + 1;
  }

  static RustBuffer lower(RoomPowerLevels? value) {
    if (value == null) {
      return toRustBuffer(Uint8List.fromList([0]));
    }

    final length = FfiConverterOptionalRoomPowerLevels.allocationSize(value);

    final Pointer<Uint8> frameData = calloc<Uint8>(length);
    final buf = frameData.asTypedList(length);

    FfiConverterOptionalRoomPowerLevels.write(value, buf);

    final bytes = calloc<ForeignBytes>();
    bytes.ref.len = length;
    bytes.ref.data = frameData;
    return RustBuffer.fromBytes(bytes.ref);
  }

  static int write(RoomPowerLevels? value, Uint8List buf) {
    if (value == null) {
      buf[0] = 0;
      return 1;
    }

    buf[0] = 1;

    return RoomPowerLevels.write(
            value, Uint8List.view(buf.buffer, buf.offsetInBytes + 1)) +
        1;
  }
}

class FfiConverterSequenceReaction {
  static List<Reaction> lift(RustBuffer buf) {
    return FfiConverterSequenceReaction.read(buf.asUint8List()).value;
  }

  static LiftRetVal<List<Reaction>> read(Uint8List buf) {
    List<Reaction> res = [];
    final length =
        buf.buffer.asByteData().getInt32(buf.offsetInBytes, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < length; i++) {
      final ret = FfiConverterReaction.read(Uint8List.view(buf.buffer, offset));
      offset += ret.bytesRead;
      res.add(ret.value);
    }
    return LiftRetVal(res, offset - buf.offsetInBytes);
  }

  static int write(List<Reaction> value, Uint8List buf) {
    buf.buffer
        .asByteData()
        .setInt32(buf.offsetInBytes, value.length, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < value.length; i++) {
      offset += FfiConverterReaction.write(
          value[i], Uint8List.view(buf.buffer, offset));
    }
    return offset - buf.offsetInBytes;
  }

  static int allocationSize(List<Reaction> value) {
    int total = 4;
    for (var item in value) {
      total += FfiConverterReaction.allocationSize(item);
    }
    return total;
  }

  static RustBuffer lower(List<Reaction> value) {
    final buf = Uint8List(allocationSize(value));
    write(value, buf);
    return toRustBuffer(buf);
  }
}

class FfiConverterOptionalTaskHandle {
  static TaskHandle? lift(RustBuffer buf) {
    return FfiConverterOptionalTaskHandle.read(buf.asUint8List()).value;
  }

  static LiftRetVal<TaskHandle?> read(Uint8List buf) {
    if (ByteData.view(buf.buffer, buf.offsetInBytes).getInt8(0) == 0) {
      return LiftRetVal(null, 1);
    }
    final result =
        TaskHandle.read(Uint8List.view(buf.buffer, buf.offsetInBytes + 1));
    return LiftRetVal<TaskHandle?>(result.value, result.bytesRead + 1);
  }

  static int allocationSize([TaskHandle? value]) {
    if (value == null) {
      return 1;
    }
    return TaskHandle.allocationSize(value) + 1;
  }

  static RustBuffer lower(TaskHandle? value) {
    if (value == null) {
      return toRustBuffer(Uint8List.fromList([0]));
    }

    final length = FfiConverterOptionalTaskHandle.allocationSize(value);

    final Pointer<Uint8> frameData = calloc<Uint8>(length);
    final buf = frameData.asTypedList(length);

    FfiConverterOptionalTaskHandle.write(value, buf);

    final bytes = calloc<ForeignBytes>();
    bytes.ref.len = length;
    bytes.ref.data = frameData;
    return RustBuffer.fromBytes(bytes.ref);
  }

  static int write(TaskHandle? value, Uint8List buf) {
    if (value == null) {
      buf[0] = 0;
      return 1;
    }

    buf[0] = 1;

    return TaskHandle.write(
            value, Uint8List.view(buf.buffer, buf.offsetInBytes + 1)) +
        1;
  }
}

class FfiConverterOptionalSuccessorRoom {
  static SuccessorRoom? lift(RustBuffer buf) {
    return FfiConverterOptionalSuccessorRoom.read(buf.asUint8List()).value;
  }

  static LiftRetVal<SuccessorRoom?> read(Uint8List buf) {
    if (ByteData.view(buf.buffer, buf.offsetInBytes).getInt8(0) == 0) {
      return LiftRetVal(null, 1);
    }
    final result = FfiConverterSuccessorRoom.read(
        Uint8List.view(buf.buffer, buf.offsetInBytes + 1));
    return LiftRetVal<SuccessorRoom?>(result.value, result.bytesRead + 1);
  }

  static int allocationSize([SuccessorRoom? value]) {
    if (value == null) {
      return 1;
    }
    return FfiConverterSuccessorRoom.allocationSize(value) + 1;
  }

  static RustBuffer lower(SuccessorRoom? value) {
    if (value == null) {
      return toRustBuffer(Uint8List.fromList([0]));
    }

    final length = FfiConverterOptionalSuccessorRoom.allocationSize(value);

    final Pointer<Uint8> frameData = calloc<Uint8>(length);
    final buf = frameData.asTypedList(length);

    FfiConverterOptionalSuccessorRoom.write(value, buf);

    final bytes = calloc<ForeignBytes>();
    bytes.ref.len = length;
    bytes.ref.data = frameData;
    return RustBuffer.fromBytes(bytes.ref);
  }

  static int write(SuccessorRoom? value, Uint8List buf) {
    if (value == null) {
      buf[0] = 0;
      return 1;
    }

    buf[0] = 1;

    return FfiConverterSuccessorRoom.write(
            value, Uint8List.view(buf.buffer, buf.offsetInBytes + 1)) +
        1;
  }
}

class FfiConverterSequenceRoomHero {
  static List<RoomHero> lift(RustBuffer buf) {
    return FfiConverterSequenceRoomHero.read(buf.asUint8List()).value;
  }

  static LiftRetVal<List<RoomHero>> read(Uint8List buf) {
    List<RoomHero> res = [];
    final length =
        buf.buffer.asByteData().getInt32(buf.offsetInBytes, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < length; i++) {
      final ret = FfiConverterRoomHero.read(Uint8List.view(buf.buffer, offset));
      offset += ret.bytesRead;
      res.add(ret.value);
    }
    return LiftRetVal(res, offset - buf.offsetInBytes);
  }

  static int write(List<RoomHero> value, Uint8List buf) {
    buf.buffer
        .asByteData()
        .setInt32(buf.offsetInBytes, value.length, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < value.length; i++) {
      offset += FfiConverterRoomHero.write(
          value[i], Uint8List.view(buf.buffer, offset));
    }
    return offset - buf.offsetInBytes;
  }

  static int allocationSize(List<RoomHero> value) {
    int total = 4;
    for (var item in value) {
      total += FfiConverterRoomHero.allocationSize(item);
    }
    return total;
  }

  static RustBuffer lower(List<RoomHero> value) {
    final buf = Uint8List(allocationSize(value));
    write(value, buf);
    return toRustBuffer(buf);
  }
}

abstract class RoomListLoadingStateListener {
  void onUpdate(
    RoomListLoadingState state,
  );
}

class FfiConverterCallbackInterfaceRoomListLoadingStateListener {
  static final _handleMap = UniffiHandleMap<RoomListLoadingStateListener>();
  static bool _vtableInitialized = false;

  static RoomListLoadingStateListener lift(int handle) {
    return _handleMap.get(handle);
  }

  static int lower(RoomListLoadingStateListener value) {
    _ensureVTableInitialized();
    return _handleMap.insert(value);
  }

  static void _ensureVTableInitialized() {
    if (!_vtableInitialized) {
      initRoomListLoadingStateListenerVTable();
      _vtableInitialized = true;
    }
  }

  static LiftRetVal<RoomListLoadingStateListener> read(Uint8List buf) {
    final handle = buf.buffer.asByteData(buf.offsetInBytes).getInt64(0);
    return LiftRetVal(lift(handle), 8);
  }

  static int write(RoomListLoadingStateListener value, Uint8List buf) {
    final handle = lower(value);
    buf.buffer.asByteData(buf.offsetInBytes).setInt64(0, handle);
    return 8;
  }

  static int allocationSize(RoomListLoadingStateListener value) {
    return 8;
  }
}

typedef UniffiCallbackInterfaceRoomListLoadingStateListenerMethod0 = Void
    Function(Uint64, RustBuffer, Pointer<Void>, Pointer<RustCallStatus>);
typedef UniffiCallbackInterfaceRoomListLoadingStateListenerMethod0Dart = void
    Function(int, int, Pointer<Void>, Pointer<RustCallStatus>);
typedef UniffiCallbackInterfaceRoomListLoadingStateListenerFree = Void Function(
    Uint64);
typedef UniffiCallbackInterfaceRoomListLoadingStateListenerFreeDart = void
    Function(int);

final class UniffiVTableCallbackInterfaceRoomListLoadingStateListener
    extends Struct {
  external Pointer<
      NativeFunction<
          UniffiCallbackInterfaceRoomListLoadingStateListenerMethod0>> onUpdate;
  external Pointer<
      NativeFunction<
          UniffiCallbackInterfaceRoomListLoadingStateListenerFree>> uniffiFree;
}

void roomListLoadingStateListenerOnUpdate(int uniffiHandle, RustBuffer state,
    Pointer<Void> outReturn, Pointer<RustCallStatus> callStatus) {
  final statusRef = callStatus.ref;
  try {
    final obj = FfiConverterCallbackInterfaceRoomListLoadingStateListener
        ._handleMap
        .get(uniffiHandle);
    final arg0 = FfiConverterRoomListLoadingState.lift(state);
    obj.onUpdate(
      arg0,
    );
    statusRef.code = CALL_SUCCESS;
  } catch (e) {
    statusRef.code = CALL_UNEXPECTED_ERROR;
    statusRef.errorBuf = FfiConverterString.lower(e.toString());
  }
}

final NativeCallable<UniffiCallbackInterfaceRoomListLoadingStateListenerMethod0>
    roomListLoadingStateListenerOnUpdateNativeCallable = NativeCallable<
            UniffiCallbackInterfaceRoomListLoadingStateListenerMethod0>.listener(
        roomListLoadingStateListenerOnUpdate);

void roomListLoadingStateListenerFreeCallback(int handle) {
  try {
    FfiConverterCallbackInterfaceRoomListLoadingStateListener._handleMap
        .remove(handle);
  } catch (e) {}
}

final Pointer<
        NativeFunction<UniffiCallbackInterfaceRoomListLoadingStateListenerFree>>
    roomListLoadingStateListenerFreePointer = Pointer.fromFunction<
            UniffiCallbackInterfaceRoomListLoadingStateListenerFree>(
        roomListLoadingStateListenerFreeCallback);
late final Pointer<UniffiVTableCallbackInterfaceRoomListLoadingStateListener>
    roomListLoadingStateListenerVTable;

void initRoomListLoadingStateListenerVTable() {
  if (FfiConverterCallbackInterfaceRoomListLoadingStateListener
      ._vtableInitialized) {
    return;
  }

  roomListLoadingStateListenerVTable =
      calloc<UniffiVTableCallbackInterfaceRoomListLoadingStateListener>();
  roomListLoadingStateListenerVTable.ref.onUpdate =
      roomListLoadingStateListenerOnUpdateNativeCallable.nativeFunction;
  roomListLoadingStateListenerVTable.ref.uniffiFree =
      roomListLoadingStateListenerFreePointer;

  rustCall((status) {
    _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_init_callback_vtable_roomlistloadingstatelistener(
      roomListLoadingStateListenerVTable,
    );
    checkCallStatus(NullRustCallStatusErrorHandler(), status);
  });

  FfiConverterCallbackInterfaceRoomListLoadingStateListener._vtableInitialized =
      true;
}

abstract class PaginationStatusListener {
  void onUpdate(
    RoomPaginationStatus status,
  );
}

class FfiConverterCallbackInterfacePaginationStatusListener {
  static final _handleMap = UniffiHandleMap<PaginationStatusListener>();
  static bool _vtableInitialized = false;

  static PaginationStatusListener lift(int handle) {
    return _handleMap.get(handle);
  }

  static int lower(PaginationStatusListener value) {
    _ensureVTableInitialized();
    return _handleMap.insert(value);
  }

  static void _ensureVTableInitialized() {
    if (!_vtableInitialized) {
      initPaginationStatusListenerVTable();
      _vtableInitialized = true;
    }
  }

  static LiftRetVal<PaginationStatusListener> read(Uint8List buf) {
    final handle = buf.buffer.asByteData(buf.offsetInBytes).getInt64(0);
    return LiftRetVal(lift(handle), 8);
  }

  static int write(PaginationStatusListener value, Uint8List buf) {
    final handle = lower(value);
    buf.buffer.asByteData(buf.offsetInBytes).setInt64(0, handle);
    return 8;
  }

  static int allocationSize(PaginationStatusListener value) {
    return 8;
  }
}

typedef UniffiCallbackInterfacePaginationStatusListenerMethod0 = Void Function(
    Uint64, RustBuffer, Pointer<Void>, Pointer<RustCallStatus>);
typedef UniffiCallbackInterfacePaginationStatusListenerMethod0Dart = void
    Function(int, int, Pointer<Void>, Pointer<RustCallStatus>);
typedef UniffiCallbackInterfacePaginationStatusListenerFree = Void Function(
    Uint64);
typedef UniffiCallbackInterfacePaginationStatusListenerFreeDart = void Function(
    int);

final class UniffiVTableCallbackInterfacePaginationStatusListener
    extends Struct {
  external Pointer<
      NativeFunction<
          UniffiCallbackInterfacePaginationStatusListenerMethod0>> onUpdate;
  external Pointer<
          NativeFunction<UniffiCallbackInterfacePaginationStatusListenerFree>>
      uniffiFree;
}

void paginationStatusListenerOnUpdate(int uniffiHandle, RustBuffer status,
    Pointer<Void> outReturn, Pointer<RustCallStatus> callStatus) {
  final statusRef = callStatus.ref;
  try {
    final obj = FfiConverterCallbackInterfacePaginationStatusListener._handleMap
        .get(uniffiHandle);
    final arg0 = FfiConverterRoomPaginationStatus.lift(status);
    obj.onUpdate(
      arg0,
    );
    statusRef.code = CALL_SUCCESS;
  } catch (e) {
    statusRef.code = CALL_UNEXPECTED_ERROR;
    statusRef.errorBuf = FfiConverterString.lower(e.toString());
  }
}

final NativeCallable<UniffiCallbackInterfacePaginationStatusListenerMethod0>
    paginationStatusListenerOnUpdateNativeCallable = NativeCallable<
            UniffiCallbackInterfacePaginationStatusListenerMethod0>.listener(
        paginationStatusListenerOnUpdate);

void paginationStatusListenerFreeCallback(int handle) {
  try {
    FfiConverterCallbackInterfacePaginationStatusListener._handleMap
        .remove(handle);
  } catch (e) {}
}

final Pointer<
        NativeFunction<UniffiCallbackInterfacePaginationStatusListenerFree>>
    paginationStatusListenerFreePointer =
    Pointer.fromFunction<UniffiCallbackInterfacePaginationStatusListenerFree>(
        paginationStatusListenerFreeCallback);
late final Pointer<UniffiVTableCallbackInterfacePaginationStatusListener>
    paginationStatusListenerVTable;

void initPaginationStatusListenerVTable() {
  if (FfiConverterCallbackInterfacePaginationStatusListener
      ._vtableInitialized) {
    return;
  }

  paginationStatusListenerVTable =
      calloc<UniffiVTableCallbackInterfacePaginationStatusListener>();
  paginationStatusListenerVTable.ref.onUpdate =
      paginationStatusListenerOnUpdateNativeCallable.nativeFunction;
  paginationStatusListenerVTable.ref.uniffiFree =
      paginationStatusListenerFreePointer;

  rustCall((status) {
    _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_init_callback_vtable_paginationstatuslistener(
      paginationStatusListenerVTable,
    );
    checkCallStatus(NullRustCallStatusErrorHandler(), status);
  });

  FfiConverterCallbackInterfacePaginationStatusListener._vtableInitialized =
      true;
}

class FfiConverterOptionalVideoInfo {
  static VideoInfo? lift(RustBuffer buf) {
    return FfiConverterOptionalVideoInfo.read(buf.asUint8List()).value;
  }

  static LiftRetVal<VideoInfo?> read(Uint8List buf) {
    if (ByteData.view(buf.buffer, buf.offsetInBytes).getInt8(0) == 0) {
      return LiftRetVal(null, 1);
    }
    final result = FfiConverterVideoInfo.read(
        Uint8List.view(buf.buffer, buf.offsetInBytes + 1));
    return LiftRetVal<VideoInfo?>(result.value, result.bytesRead + 1);
  }

  static int allocationSize([VideoInfo? value]) {
    if (value == null) {
      return 1;
    }
    return FfiConverterVideoInfo.allocationSize(value) + 1;
  }

  static RustBuffer lower(VideoInfo? value) {
    if (value == null) {
      return toRustBuffer(Uint8List.fromList([0]));
    }

    final length = FfiConverterOptionalVideoInfo.allocationSize(value);

    final Pointer<Uint8> frameData = calloc<Uint8>(length);
    final buf = frameData.asTypedList(length);

    FfiConverterOptionalVideoInfo.write(value, buf);

    final bytes = calloc<ForeignBytes>();
    bytes.ref.len = length;
    bytes.ref.data = frameData;
    return RustBuffer.fromBytes(bytes.ref);
  }

  static int write(VideoInfo? value, Uint8List buf) {
    if (value == null) {
      buf[0] = 0;
      return 1;
    }

    buf[0] = 1;

    return FfiConverterVideoInfo.write(
            value, Uint8List.view(buf.buffer, buf.offsetInBytes + 1)) +
        1;
  }
}

class FfiConverterSequenceRoom {
  static List<Room> lift(RustBuffer buf) {
    return FfiConverterSequenceRoom.read(buf.asUint8List()).value;
  }

  static LiftRetVal<List<Room>> read(Uint8List buf) {
    List<Room> res = [];
    final length =
        buf.buffer.asByteData().getInt32(buf.offsetInBytes, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < length; i++) {
      final ret = Room.read(Uint8List.view(buf.buffer, offset));
      offset += ret.bytesRead;
      res.add(ret.value);
    }
    return LiftRetVal(res, offset - buf.offsetInBytes);
  }

  static int write(List<Room> value, Uint8List buf) {
    buf.buffer
        .asByteData()
        .setInt32(buf.offsetInBytes, value.length, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < value.length; i++) {
      offset += Room.write(value[i], Uint8List.view(buf.buffer, offset));
    }
    return offset - buf.offsetInBytes;
  }

  static int allocationSize(List<Room> value) {
    int total = 4;
    for (var item in value) {
      total += Room.allocationSize(item);
    }
    return total;
  }

  static RustBuffer lower(List<Room> value) {
    final buf = Uint8List(allocationSize(value));
    write(value, buf);
    return toRustBuffer(buf);
  }
}

class FfiConverterSequenceSessionVerificationEmoji {
  static List<SessionVerificationEmoji> lift(RustBuffer buf) {
    return FfiConverterSequenceSessionVerificationEmoji.read(buf.asUint8List())
        .value;
  }

  static LiftRetVal<List<SessionVerificationEmoji>> read(Uint8List buf) {
    List<SessionVerificationEmoji> res = [];
    final length =
        buf.buffer.asByteData().getInt32(buf.offsetInBytes, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < length; i++) {
      final ret =
          SessionVerificationEmoji.read(Uint8List.view(buf.buffer, offset));
      offset += ret.bytesRead;
      res.add(ret.value);
    }
    return LiftRetVal(res, offset - buf.offsetInBytes);
  }

  static int write(List<SessionVerificationEmoji> value, Uint8List buf) {
    buf.buffer
        .asByteData()
        .setInt32(buf.offsetInBytes, value.length, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < value.length; i++) {
      offset += SessionVerificationEmoji.write(
          value[i], Uint8List.view(buf.buffer, offset));
    }
    return offset - buf.offsetInBytes;
  }

  static int allocationSize(List<SessionVerificationEmoji> value) {
    int total = 4;
    for (var item in value) {
      total += SessionVerificationEmoji.allocationSize(item);
    }
    return total;
  }

  static RustBuffer lower(List<SessionVerificationEmoji> value) {
    final buf = Uint8List(allocationSize(value));
    write(value, buf);
    return toRustBuffer(buf);
  }
}

class FfiConverterOptionalFileInfo {
  static FileInfo? lift(RustBuffer buf) {
    return FfiConverterOptionalFileInfo.read(buf.asUint8List()).value;
  }

  static LiftRetVal<FileInfo?> read(Uint8List buf) {
    if (ByteData.view(buf.buffer, buf.offsetInBytes).getInt8(0) == 0) {
      return LiftRetVal(null, 1);
    }
    final result = FfiConverterFileInfo.read(
        Uint8List.view(buf.buffer, buf.offsetInBytes + 1));
    return LiftRetVal<FileInfo?>(result.value, result.bytesRead + 1);
  }

  static int allocationSize([FileInfo? value]) {
    if (value == null) {
      return 1;
    }
    return FfiConverterFileInfo.allocationSize(value) + 1;
  }

  static RustBuffer lower(FileInfo? value) {
    if (value == null) {
      return toRustBuffer(Uint8List.fromList([0]));
    }

    final length = FfiConverterOptionalFileInfo.allocationSize(value);

    final Pointer<Uint8> frameData = calloc<Uint8>(length);
    final buf = frameData.asTypedList(length);

    FfiConverterOptionalFileInfo.write(value, buf);

    final bytes = calloc<ForeignBytes>();
    bytes.ref.len = length;
    bytes.ref.data = frameData;
    return RustBuffer.fromBytes(bytes.ref);
  }

  static int write(FileInfo? value, Uint8List buf) {
    if (value == null) {
      buf[0] = 0;
      return 1;
    }

    buf[0] = 1;

    return FfiConverterFileInfo.write(
            value, Uint8List.view(buf.buffer, buf.offsetInBytes + 1)) +
        1;
  }
}

class FfiConverterOptionalAudioInfo {
  static AudioInfo? lift(RustBuffer buf) {
    return FfiConverterOptionalAudioInfo.read(buf.asUint8List()).value;
  }

  static LiftRetVal<AudioInfo?> read(Uint8List buf) {
    if (ByteData.view(buf.buffer, buf.offsetInBytes).getInt8(0) == 0) {
      return LiftRetVal(null, 1);
    }
    final result = FfiConverterAudioInfo.read(
        Uint8List.view(buf.buffer, buf.offsetInBytes + 1));
    return LiftRetVal<AudioInfo?>(result.value, result.bytesRead + 1);
  }

  static int allocationSize([AudioInfo? value]) {
    if (value == null) {
      return 1;
    }
    return FfiConverterAudioInfo.allocationSize(value) + 1;
  }

  static RustBuffer lower(AudioInfo? value) {
    if (value == null) {
      return toRustBuffer(Uint8List.fromList([0]));
    }

    final length = FfiConverterOptionalAudioInfo.allocationSize(value);

    final Pointer<Uint8> frameData = calloc<Uint8>(length);
    final buf = frameData.asTypedList(length);

    FfiConverterOptionalAudioInfo.write(value, buf);

    final bytes = calloc<ForeignBytes>();
    bytes.ref.len = length;
    bytes.ref.data = frameData;
    return RustBuffer.fromBytes(bytes.ref);
  }

  static int write(AudioInfo? value, Uint8List buf) {
    if (value == null) {
      buf[0] = 0;
      return 1;
    }

    buf[0] = 1;

    return FfiConverterAudioInfo.write(
            value, Uint8List.view(buf.buffer, buf.offsetInBytes + 1)) +
        1;
  }
}

class FfiConverterOptionalResolvedRoomAlias {
  static ResolvedRoomAlias? lift(RustBuffer buf) {
    return FfiConverterOptionalResolvedRoomAlias.read(buf.asUint8List()).value;
  }

  static LiftRetVal<ResolvedRoomAlias?> read(Uint8List buf) {
    if (ByteData.view(buf.buffer, buf.offsetInBytes).getInt8(0) == 0) {
      return LiftRetVal(null, 1);
    }
    final result = FfiConverterResolvedRoomAlias.read(
        Uint8List.view(buf.buffer, buf.offsetInBytes + 1));
    return LiftRetVal<ResolvedRoomAlias?>(result.value, result.bytesRead + 1);
  }

  static int allocationSize([ResolvedRoomAlias? value]) {
    if (value == null) {
      return 1;
    }
    return FfiConverterResolvedRoomAlias.allocationSize(value) + 1;
  }

  static RustBuffer lower(ResolvedRoomAlias? value) {
    if (value == null) {
      return toRustBuffer(Uint8List.fromList([0]));
    }

    final length = FfiConverterOptionalResolvedRoomAlias.allocationSize(value);

    final Pointer<Uint8> frameData = calloc<Uint8>(length);
    final buf = frameData.asTypedList(length);

    FfiConverterOptionalResolvedRoomAlias.write(value, buf);

    final bytes = calloc<ForeignBytes>();
    bytes.ref.len = length;
    bytes.ref.data = frameData;
    return RustBuffer.fromBytes(bytes.ref);
  }

  static int write(ResolvedRoomAlias? value, Uint8List buf) {
    if (value == null) {
      buf[0] = 0;
      return 1;
    }

    buf[0] = 1;

    return FfiConverterResolvedRoomAlias.write(
            value, Uint8List.view(buf.buffer, buf.offsetInBytes + 1)) +
        1;
  }
}

class FfiConverterOptionalSequenceRoomMember {
  static List<RoomMember>? lift(RustBuffer buf) {
    return FfiConverterOptionalSequenceRoomMember.read(buf.asUint8List()).value;
  }

  static LiftRetVal<List<RoomMember>?> read(Uint8List buf) {
    if (ByteData.view(buf.buffer, buf.offsetInBytes).getInt8(0) == 0) {
      return LiftRetVal(null, 1);
    }
    final result = FfiConverterSequenceRoomMember.read(
        Uint8List.view(buf.buffer, buf.offsetInBytes + 1));
    return LiftRetVal<List<RoomMember>?>(result.value, result.bytesRead + 1);
  }

  static int allocationSize([List<RoomMember>? value]) {
    if (value == null) {
      return 1;
    }
    return FfiConverterSequenceRoomMember.allocationSize(value) + 1;
  }

  static RustBuffer lower(List<RoomMember>? value) {
    if (value == null) {
      return toRustBuffer(Uint8List.fromList([0]));
    }

    final length = FfiConverterOptionalSequenceRoomMember.allocationSize(value);

    final Pointer<Uint8> frameData = calloc<Uint8>(length);
    final buf = frameData.asTypedList(length);

    FfiConverterOptionalSequenceRoomMember.write(value, buf);

    final bytes = calloc<ForeignBytes>();
    bytes.ref.len = length;
    bytes.ref.data = frameData;
    return RustBuffer.fromBytes(bytes.ref);
  }

  static int write(List<RoomMember>? value, Uint8List buf) {
    if (value == null) {
      buf[0] = 0;
      return 1;
    }

    buf[0] = 1;

    return FfiConverterSequenceRoomMember.write(
            value, Uint8List.view(buf.buffer, buf.offsetInBytes + 1)) +
        1;
  }
}

class FfiConverterOptionalCallbackInterfaceBackupSteadyStateListener {
  static BackupSteadyStateListener? lift(RustBuffer buf) {
    return FfiConverterOptionalCallbackInterfaceBackupSteadyStateListener.read(
            buf.asUint8List())
        .value;
  }

  static LiftRetVal<BackupSteadyStateListener?> read(Uint8List buf) {
    if (ByteData.view(buf.buffer, buf.offsetInBytes).getInt8(0) == 0) {
      return LiftRetVal(null, 1);
    }
    final result = FfiConverterCallbackInterfaceBackupSteadyStateListener.read(
        Uint8List.view(buf.buffer, buf.offsetInBytes + 1));
    return LiftRetVal<BackupSteadyStateListener?>(
        result.value, result.bytesRead + 1);
  }

  static int allocationSize([BackupSteadyStateListener? value]) {
    if (value == null) {
      return 1;
    }
    return FfiConverterCallbackInterfaceBackupSteadyStateListener
            .allocationSize(value) +
        1;
  }

  static RustBuffer lower(BackupSteadyStateListener? value) {
    if (value == null) {
      return toRustBuffer(Uint8List.fromList([0]));
    }

    final length =
        FfiConverterOptionalCallbackInterfaceBackupSteadyStateListener
            .allocationSize(value);

    final Pointer<Uint8> frameData = calloc<Uint8>(length);
    final buf = frameData.asTypedList(length);

    FfiConverterOptionalCallbackInterfaceBackupSteadyStateListener.write(
        value, buf);

    final bytes = calloc<ForeignBytes>();
    bytes.ref.len = length;
    bytes.ref.data = frameData;
    return RustBuffer.fromBytes(bytes.ref);
  }

  static int write(BackupSteadyStateListener? value, Uint8List buf) {
    if (value == null) {
      buf[0] = 0;
      return 1;
    }

    buf[0] = 1;

    return FfiConverterCallbackInterfaceBackupSteadyStateListener.write(
            value, Uint8List.view(buf.buffer, buf.offsetInBytes + 1)) +
        1;
  }
}

class FfiConverterSequenceLiveLocationShare {
  static List<LiveLocationShare> lift(RustBuffer buf) {
    return FfiConverterSequenceLiveLocationShare.read(buf.asUint8List()).value;
  }

  static LiftRetVal<List<LiveLocationShare>> read(Uint8List buf) {
    List<LiveLocationShare> res = [];
    final length =
        buf.buffer.asByteData().getInt32(buf.offsetInBytes, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < length; i++) {
      final ret = FfiConverterLiveLocationShare.read(
          Uint8List.view(buf.buffer, offset));
      offset += ret.bytesRead;
      res.add(ret.value);
    }
    return LiftRetVal(res, offset - buf.offsetInBytes);
  }

  static int write(List<LiveLocationShare> value, Uint8List buf) {
    buf.buffer
        .asByteData()
        .setInt32(buf.offsetInBytes, value.length, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < value.length; i++) {
      offset += FfiConverterLiveLocationShare.write(
          value[i], Uint8List.view(buf.buffer, offset));
    }
    return offset - buf.offsetInBytes;
  }

  static int allocationSize(List<LiveLocationShare> value) {
    int total = 4;
    for (var item in value) {
      total += FfiConverterLiveLocationShare.allocationSize(item);
    }
    return total;
  }

  static RustBuffer lower(List<LiveLocationShare> value) {
    final buf = Uint8List(allocationSize(value));
    write(value, buf);
    return toRustBuffer(buf);
  }
}

class FfiConverterMapStringIgnoredUser {
  static Map lift(RustBuffer buf) {
    return FfiConverterMapStringIgnoredUser.read(buf.asUint8List()).value;
  }

  static LiftRetVal<Map> read(Uint8List buf) {
    Map res = {};
    final length =
        buf.buffer.asByteData().getInt32(buf.offsetInBytes, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < length; i++) {
      final k = FfiConverterString.read(Uint8List.view(buf.buffer, offset));
      offset += k.bytesRead;
      final v =
          FfiConverterIgnoredUser.read(Uint8List.view(buf.buffer, offset));
      offset += v.bytesRead;
      res[k.value] = v.value;
    }
    return LiftRetVal(res, offset - buf.offsetInBytes);
  }

  static int write(Map value, Uint8List buf) {
    buf.buffer
        .asByteData()
        .setInt32(buf.offsetInBytes, value.length, Endian.little);
    int offset = buf.offsetInBytes + 4;
    value.forEach((k, v) {
      offset += FfiConverterString.write(k, Uint8List.view(buf.buffer, offset));
      offset +=
          FfiConverterIgnoredUser.write(v, Uint8List.view(buf.buffer, offset));
    });
    return offset - buf.offsetInBytes;
  }

  static int allocationSize(Map value) {
    int total = 4;
    value.forEach((k, v) {
      total += FfiConverterString.allocationSize(k);
      total += FfiConverterIgnoredUser.allocationSize(v);
    });
    return total;
  }

  static RustBuffer lower(Map value) {
    final buf = Uint8List(allocationSize(value));
    write(value, buf);
    return toRustBuffer(buf);
  }
}

class FfiConverterOptionalSequenceRoomHero {
  static List<RoomHero>? lift(RustBuffer buf) {
    return FfiConverterOptionalSequenceRoomHero.read(buf.asUint8List()).value;
  }

  static LiftRetVal<List<RoomHero>?> read(Uint8List buf) {
    if (ByteData.view(buf.buffer, buf.offsetInBytes).getInt8(0) == 0) {
      return LiftRetVal(null, 1);
    }
    final result = FfiConverterSequenceRoomHero.read(
        Uint8List.view(buf.buffer, buf.offsetInBytes + 1));
    return LiftRetVal<List<RoomHero>?>(result.value, result.bytesRead + 1);
  }

  static int allocationSize([List<RoomHero>? value]) {
    if (value == null) {
      return 1;
    }
    return FfiConverterSequenceRoomHero.allocationSize(value) + 1;
  }

  static RustBuffer lower(List<RoomHero>? value) {
    if (value == null) {
      return toRustBuffer(Uint8List.fromList([0]));
    }

    final length = FfiConverterOptionalSequenceRoomHero.allocationSize(value);

    final Pointer<Uint8> frameData = calloc<Uint8>(length);
    final buf = frameData.asTypedList(length);

    FfiConverterOptionalSequenceRoomHero.write(value, buf);

    final bytes = calloc<ForeignBytes>();
    bytes.ref.len = length;
    bytes.ref.data = frameData;
    return RustBuffer.fromBytes(bytes.ref);
  }

  static int write(List<RoomHero>? value, Uint8List buf) {
    if (value == null) {
      buf[0] = 0;
      return 1;
    }

    buf[0] = 1;

    return FfiConverterSequenceRoomHero.write(
            value, Uint8List.view(buf.buffer, buf.offsetInBytes + 1)) +
        1;
  }
}

class FfiConverterOptionalFormattedBody {
  static FormattedBody? lift(RustBuffer buf) {
    return FfiConverterOptionalFormattedBody.read(buf.asUint8List()).value;
  }

  static LiftRetVal<FormattedBody?> read(Uint8List buf) {
    if (ByteData.view(buf.buffer, buf.offsetInBytes).getInt8(0) == 0) {
      return LiftRetVal(null, 1);
    }
    final result = FfiConverterFormattedBody.read(
        Uint8List.view(buf.buffer, buf.offsetInBytes + 1));
    return LiftRetVal<FormattedBody?>(result.value, result.bytesRead + 1);
  }

  static int allocationSize([FormattedBody? value]) {
    if (value == null) {
      return 1;
    }
    return FfiConverterFormattedBody.allocationSize(value) + 1;
  }

  static RustBuffer lower(FormattedBody? value) {
    if (value == null) {
      return toRustBuffer(Uint8List.fromList([0]));
    }

    final length = FfiConverterOptionalFormattedBody.allocationSize(value);

    final Pointer<Uint8> frameData = calloc<Uint8>(length);
    final buf = frameData.asTypedList(length);

    FfiConverterOptionalFormattedBody.write(value, buf);

    final bytes = calloc<ForeignBytes>();
    bytes.ref.len = length;
    bytes.ref.data = frameData;
    return RustBuffer.fromBytes(bytes.ref);
  }

  static int write(FormattedBody? value, Uint8List buf) {
    if (value == null) {
      buf[0] = 0;
      return 1;
    }

    buf[0] = 1;

    return FfiConverterFormattedBody.write(
            value, Uint8List.view(buf.buffer, buf.offsetInBytes + 1)) +
        1;
  }
}

abstract class RoomInfoListener {
  void call(
    RoomInfo roomInfo,
  );
}

class FfiConverterCallbackInterfaceRoomInfoListener {
  static final _handleMap = UniffiHandleMap<RoomInfoListener>();
  static bool _vtableInitialized = false;

  static RoomInfoListener lift(int handle) {
    return _handleMap.get(handle);
  }

  static int lower(RoomInfoListener value) {
    _ensureVTableInitialized();
    return _handleMap.insert(value);
  }

  static void _ensureVTableInitialized() {
    if (!_vtableInitialized) {
      initRoomInfoListenerVTable();
      _vtableInitialized = true;
    }
  }

  static LiftRetVal<RoomInfoListener> read(Uint8List buf) {
    final handle = buf.buffer.asByteData(buf.offsetInBytes).getInt64(0);
    return LiftRetVal(lift(handle), 8);
  }

  static int write(RoomInfoListener value, Uint8List buf) {
    final handle = lower(value);
    buf.buffer.asByteData(buf.offsetInBytes).setInt64(0, handle);
    return 8;
  }

  static int allocationSize(RoomInfoListener value) {
    return 8;
  }
}

typedef UniffiCallbackInterfaceRoomInfoListenerMethod0 = Void Function(
    Uint64, RustBuffer, Pointer<Void>, Pointer<RustCallStatus>);
typedef UniffiCallbackInterfaceRoomInfoListenerMethod0Dart = void Function(
    int, RustBuffer, Pointer<Void>, Pointer<RustCallStatus>);
typedef UniffiCallbackInterfaceRoomInfoListenerFree = Void Function(Uint64);
typedef UniffiCallbackInterfaceRoomInfoListenerFreeDart = void Function(int);

final class UniffiVTableCallbackInterfaceRoomInfoListener extends Struct {
  external Pointer<
      NativeFunction<UniffiCallbackInterfaceRoomInfoListenerMethod0>> call;
  external Pointer<NativeFunction<UniffiCallbackInterfaceRoomInfoListenerFree>>
      uniffiFree;
}

void roomInfoListenerCall(int uniffiHandle, RustBuffer roomInfo,
    Pointer<Void> outReturn, Pointer<RustCallStatus> callStatus) {
  final status = callStatus.ref;
  try {
    final obj = FfiConverterCallbackInterfaceRoomInfoListener._handleMap
        .get(uniffiHandle);
    final arg0 = FfiConverterRoomInfo.lift(roomInfo);
    obj.call(
      arg0,
    );
    status.code = CALL_SUCCESS;
  } catch (e) {
    status.code = CALL_UNEXPECTED_ERROR;
    status.errorBuf = FfiConverterString.lower(e.toString());
  }
}

final NativeCallable<UniffiCallbackInterfaceRoomInfoListenerMethod0>
    roomInfoListenerCallNativeCallable =
    NativeCallable<UniffiCallbackInterfaceRoomInfoListenerMethod0>.listener(
        roomInfoListenerCall);

void roomInfoListenerFreeCallback(int handle) {
  try {
    FfiConverterCallbackInterfaceRoomInfoListener._handleMap.remove(handle);
  } catch (e) {}
}

final Pointer<NativeFunction<UniffiCallbackInterfaceRoomInfoListenerFree>>
    roomInfoListenerFreePointer =
    Pointer.fromFunction<UniffiCallbackInterfaceRoomInfoListenerFree>(
        roomInfoListenerFreeCallback);
late final Pointer<UniffiVTableCallbackInterfaceRoomInfoListener>
    roomInfoListenerVTable;

void initRoomInfoListenerVTable() {
  if (FfiConverterCallbackInterfaceRoomInfoListener._vtableInitialized) {
    return;
  }

  roomInfoListenerVTable =
      calloc<UniffiVTableCallbackInterfaceRoomInfoListener>();
  roomInfoListenerVTable.ref.call =
      roomInfoListenerCallNativeCallable.nativeFunction;
  roomInfoListenerVTable.ref.uniffiFree = roomInfoListenerFreePointer;

  rustCall((status) {
    _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_init_callback_vtable_roominfolistener(
      roomInfoListenerVTable,
    );
    checkCallStatus(NullRustCallStatusErrorHandler(), status);
  });

  FfiConverterCallbackInterfaceRoomInfoListener._vtableInitialized = true;
}

class FfiConverterOptionalAssetType {
  static AssetType? lift(RustBuffer buf) {
    return FfiConverterOptionalAssetType.read(buf.asUint8List()).value;
  }

  static LiftRetVal<AssetType?> read(Uint8List buf) {
    if (ByteData.view(buf.buffer, buf.offsetInBytes).getInt8(0) == 0) {
      return LiftRetVal(null, 1);
    }
    final result = FfiConverterAssetType.read(
        Uint8List.view(buf.buffer, buf.offsetInBytes + 1));
    return LiftRetVal<AssetType?>(result.value, result.bytesRead + 1);
  }

  static int allocationSize([AssetType? value]) {
    if (value == null) {
      return 1;
    }
    return FfiConverterAssetType.allocationSize(value) + 1;
  }

  static RustBuffer lower(AssetType? value) {
    if (value == null) {
      return toRustBuffer(Uint8List.fromList([0]));
    }

    final length = FfiConverterOptionalAssetType.allocationSize(value);

    final Pointer<Uint8> frameData = calloc<Uint8>(length);
    final buf = frameData.asTypedList(length);

    FfiConverterOptionalAssetType.write(value, buf);

    final bytes = calloc<ForeignBytes>();
    bytes.ref.len = length;
    bytes.ref.data = frameData;
    return RustBuffer.fromBytes(bytes.ref);
  }

  static int write(AssetType? value, Uint8List buf) {
    if (value == null) {
      buf[0] = 0;
      return 1;
    }

    buf[0] = 1;

    return FfiConverterAssetType.write(
            value, Uint8List.view(buf.buffer, buf.offsetInBytes + 1)) +
        1;
  }
}

class FfiConverterOptionalThumbnailInfo {
  static ThumbnailInfo? lift(RustBuffer buf) {
    return FfiConverterOptionalThumbnailInfo.read(buf.asUint8List()).value;
  }

  static LiftRetVal<ThumbnailInfo?> read(Uint8List buf) {
    if (ByteData.view(buf.buffer, buf.offsetInBytes).getInt8(0) == 0) {
      return LiftRetVal(null, 1);
    }
    final result = FfiConverterThumbnailInfo.read(
        Uint8List.view(buf.buffer, buf.offsetInBytes + 1));
    return LiftRetVal<ThumbnailInfo?>(result.value, result.bytesRead + 1);
  }

  static int allocationSize([ThumbnailInfo? value]) {
    if (value == null) {
      return 1;
    }
    return FfiConverterThumbnailInfo.allocationSize(value) + 1;
  }

  static RustBuffer lower(ThumbnailInfo? value) {
    if (value == null) {
      return toRustBuffer(Uint8List.fromList([0]));
    }

    final length = FfiConverterOptionalThumbnailInfo.allocationSize(value);

    final Pointer<Uint8> frameData = calloc<Uint8>(length);
    final buf = frameData.asTypedList(length);

    FfiConverterOptionalThumbnailInfo.write(value, buf);

    final bytes = calloc<ForeignBytes>();
    bytes.ref.len = length;
    bytes.ref.data = frameData;
    return RustBuffer.fromBytes(bytes.ref);
  }

  static int write(ThumbnailInfo? value, Uint8List buf) {
    if (value == null) {
      buf[0] = 0;
      return 1;
    }

    buf[0] = 1;

    return FfiConverterThumbnailInfo.write(
            value, Uint8List.view(buf.buffer, buf.offsetInBytes + 1)) +
        1;
  }
}

class FfiConverterOptionalTimestamp {
  static Timestamp? lift(RustBuffer buf) {
    return FfiConverterOptionalTimestamp.read(buf.asUint8List()).value;
  }

  static LiftRetVal<Timestamp?> read(Uint8List buf) {
    if (ByteData.view(buf.buffer, buf.offsetInBytes).getInt8(0) == 0) {
      return LiftRetVal(null, 1);
    }
    final result = FfiConverterTimestamp.read(
        Uint8List.view(buf.buffer, buf.offsetInBytes + 1));
    return LiftRetVal<Timestamp?>(result.value, result.bytesRead + 1);
  }

  static int allocationSize([Timestamp? value]) {
    if (value == null) {
      return 1;
    }
    return FfiConverterTimestamp.allocationSize(value) + 1;
  }

  static RustBuffer lower(Timestamp? value) {
    if (value == null) {
      return toRustBuffer(Uint8List.fromList([0]));
    }

    final length = FfiConverterOptionalTimestamp.allocationSize(value);

    final Pointer<Uint8> frameData = calloc<Uint8>(length);
    final buf = frameData.asTypedList(length);

    FfiConverterOptionalTimestamp.write(value, buf);

    final bytes = calloc<ForeignBytes>();
    bytes.ref.len = length;
    bytes.ref.data = frameData;
    return RustBuffer.fromBytes(bytes.ref);
  }

  static int write(Timestamp? value, Uint8List buf) {
    if (value == null) {
      buf[0] = 0;
      return 1;
    }

    buf[0] = 1;

    return FfiConverterTimestamp.write(
            value, Uint8List.view(buf.buffer, buf.offsetInBytes + 1)) +
        1;
  }
}

class FfiConverterOptionalUInt16 {
  static int? lift(RustBuffer buf) {
    return FfiConverterOptionalUInt16.read(buf.asUint8List()).value;
  }

  static LiftRetVal<int?> read(Uint8List buf) {
    if (ByteData.view(buf.buffer, buf.offsetInBytes).getInt8(0) == 0) {
      return LiftRetVal(null, 1);
    }
    final result = FfiConverterUInt16.read(
        Uint8List.view(buf.buffer, buf.offsetInBytes + 1));
    return LiftRetVal<int?>(result.value, result.bytesRead + 1);
  }

  static int allocationSize([int? value]) {
    if (value == null) {
      return 1;
    }
    return FfiConverterUInt16.allocationSize(value) + 1;
  }

  static RustBuffer lower(int? value) {
    if (value == null) {
      return toRustBuffer(Uint8List.fromList([0]));
    }

    final length = FfiConverterOptionalUInt16.allocationSize(value);

    final Pointer<Uint8> frameData = calloc<Uint8>(length);
    final buf = frameData.asTypedList(length);

    FfiConverterOptionalUInt16.write(value, buf);

    final bytes = calloc<ForeignBytes>();
    bytes.ref.len = length;
    bytes.ref.data = frameData;
    return RustBuffer.fromBytes(bytes.ref);
  }

  static int write(int? value, Uint8List buf) {
    if (value == null) {
      buf[0] = 0;
      return 1;
    }

    buf[0] = 1;

    return FfiConverterUInt16.write(
            value, Uint8List.view(buf.buffer, buf.offsetInBytes + 1)) +
        1;
  }
}

class FfiConverterSequenceMembership {
  static List<Membership> lift(RustBuffer buf) {
    return FfiConverterSequenceMembership.read(buf.asUint8List()).value;
  }

  static LiftRetVal<List<Membership>> read(Uint8List buf) {
    List<Membership> res = [];
    final length =
        buf.buffer.asByteData().getInt32(buf.offsetInBytes, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < length; i++) {
      final ret =
          FfiConverterMembership.read(Uint8List.view(buf.buffer, offset));
      offset += ret.bytesRead;
      res.add(ret.value);
    }
    return LiftRetVal(res, offset - buf.offsetInBytes);
  }

  static int write(List<Membership> value, Uint8List buf) {
    buf.buffer
        .asByteData()
        .setInt32(buf.offsetInBytes, value.length, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < value.length; i++) {
      offset += FfiConverterMembership.write(
          value[i], Uint8List.view(buf.buffer, offset));
    }
    return offset - buf.offsetInBytes;
  }

  static int allocationSize(List<Membership> value) {
    int total = 4;
    for (var item in value) {
      total += FfiConverterMembership.allocationSize(item);
    }
    return total;
  }

  static RustBuffer lower(List<Membership> value) {
    final buf = Uint8List(allocationSize(value));
    write(value, buf);
    return toRustBuffer(buf);
  }
}

class FfiConverterSequenceRoomMessageEventMessageType {
  static List<RoomMessageEventMessageType> lift(RustBuffer buf) {
    return FfiConverterSequenceRoomMessageEventMessageType.read(
            buf.asUint8List())
        .value;
  }

  static LiftRetVal<List<RoomMessageEventMessageType>> read(Uint8List buf) {
    List<RoomMessageEventMessageType> res = [];
    final length =
        buf.buffer.asByteData().getInt32(buf.offsetInBytes, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < length; i++) {
      final ret = FfiConverterRoomMessageEventMessageType.read(
          Uint8List.view(buf.buffer, offset));
      offset += ret.bytesRead;
      res.add(ret.value);
    }
    return LiftRetVal(res, offset - buf.offsetInBytes);
  }

  static int write(List<RoomMessageEventMessageType> value, Uint8List buf) {
    buf.buffer
        .asByteData()
        .setInt32(buf.offsetInBytes, value.length, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < value.length; i++) {
      offset += FfiConverterRoomMessageEventMessageType.write(
          value[i], Uint8List.view(buf.buffer, offset));
    }
    return offset - buf.offsetInBytes;
  }

  static int allocationSize(List<RoomMessageEventMessageType> value) {
    int total = 4;
    for (var item in value) {
      total += FfiConverterRoomMessageEventMessageType.allocationSize(item);
    }
    return total;
  }

  static RustBuffer lower(List<RoomMessageEventMessageType> value) {
    final buf = Uint8List(allocationSize(value));
    write(value, buf);
    return toRustBuffer(buf);
  }
}

class FfiConverterSequenceSlidingSyncVersion {
  static List<SlidingSyncVersion> lift(RustBuffer buf) {
    return FfiConverterSequenceSlidingSyncVersion.read(buf.asUint8List()).value;
  }

  static LiftRetVal<List<SlidingSyncVersion>> read(Uint8List buf) {
    List<SlidingSyncVersion> res = [];
    final length = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < length; i++) {
      final ret = FfiConverterSlidingSyncVersion.read(
        Uint8List.view(buf.buffer, offset),
      );
      offset += ret.bytesRead;
      res.add(ret.value);
    }
    return LiftRetVal(res, offset - buf.offsetInBytes);
  }

  static int write(List<SlidingSyncVersion> value, Uint8List buf) {
    buf.buffer
        .asByteData()
        .setInt32(buf.offsetInBytes, value.length, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < value.length; i++) {
      offset += FfiConverterSlidingSyncVersion.write(
          value[i], Uint8List.view(buf.buffer, offset));
    }
    return offset - buf.offsetInBytes;
  }

  static int allocationSize(List<SlidingSyncVersion> value) {
    int total = 4;
    for (var item in value) {
      total += FfiConverterSlidingSyncVersion.allocationSize(item);
    }
    return total;
  }

  static RustBuffer lower(List<SlidingSyncVersion> value) {
    final buf = Uint8List(allocationSize(value));
    write(value, buf);
    return toRustBuffer(buf);
  }
}

abstract class NotificationSettingsDelegate {
  void settingsDidChange();
}

class FfiConverterCallbackInterfaceNotificationSettingsDelegate {
  static final _handleMap = UniffiHandleMap<NotificationSettingsDelegate>();
  static bool _vtableInitialized = false;

  static NotificationSettingsDelegate lift(int handle) {
    return _handleMap.get(handle);
  }

  static int lower(NotificationSettingsDelegate value) {
    _ensureVTableInitialized();
    return _handleMap.insert(value);
  }

  static void _ensureVTableInitialized() {
    if (!_vtableInitialized) {
      initNotificationSettingsDelegateVTable();
      _vtableInitialized = true;
    }
  }

  static LiftRetVal<NotificationSettingsDelegate> read(Uint8List buf) {
    final handle = buf.buffer.asByteData(buf.offsetInBytes).getInt64(0);
    return LiftRetVal(lift(handle), 8);
  }

  static int write(NotificationSettingsDelegate value, Uint8List buf) {
    final handle = lower(value);
    buf.buffer.asByteData(buf.offsetInBytes).setInt64(0, handle);
    return 8;
  }

  static int allocationSize(NotificationSettingsDelegate value) {
    return 8;
  }
}

typedef UniffiCallbackInterfaceNotificationSettingsDelegateMethod0 = Void
    Function(Uint64, Pointer<Void>, Pointer<RustCallStatus>);
typedef UniffiCallbackInterfaceNotificationSettingsDelegateMethod0Dart = void
    Function(int, Pointer<Void>, Pointer<RustCallStatus>);
typedef UniffiCallbackInterfaceNotificationSettingsDelegateFree = Void Function(
    Uint64);
typedef UniffiCallbackInterfaceNotificationSettingsDelegateFreeDart = void
    Function(int);

final class UniffiVTableCallbackInterfaceNotificationSettingsDelegate
    extends Struct {
  external Pointer<
          NativeFunction<
              UniffiCallbackInterfaceNotificationSettingsDelegateMethod0>>
      settingsDidChange;
  external Pointer<
      NativeFunction<
          UniffiCallbackInterfaceNotificationSettingsDelegateFree>> uniffiFree;
}

void notificationSettingsDelegateSettingsDidChange(int uniffiHandle,
    Pointer<Void> outReturn, Pointer<RustCallStatus> callStatus) {
  final status = callStatus.ref;
  try {
    final obj = FfiConverterCallbackInterfaceNotificationSettingsDelegate
        ._handleMap
        .get(uniffiHandle);
    obj.settingsDidChange();
    status.code = CALL_SUCCESS;
  } catch (e) {
    status.code = CALL_UNEXPECTED_ERROR;
    status.errorBuf = FfiConverterString.lower(e.toString());
  }
}

final NativeCallable<UniffiCallbackInterfaceNotificationSettingsDelegateMethod0>
    notificationSettingsDelegateSettingsDidChangeNativeCallable =
    NativeCallable<
            UniffiCallbackInterfaceNotificationSettingsDelegateMethod0>.listener(
        notificationSettingsDelegateSettingsDidChange);

void notificationSettingsDelegateFreeCallback(int handle) {
  try {
    FfiConverterCallbackInterfaceNotificationSettingsDelegate._handleMap
        .remove(handle);
  } catch (e) {}
}

final Pointer<
        NativeFunction<UniffiCallbackInterfaceNotificationSettingsDelegateFree>>
    notificationSettingsDelegateFreePointer = Pointer.fromFunction<
            UniffiCallbackInterfaceNotificationSettingsDelegateFree>(
        notificationSettingsDelegateFreeCallback);
late final Pointer<UniffiVTableCallbackInterfaceNotificationSettingsDelegate>
    notificationSettingsDelegateVTable;

void initNotificationSettingsDelegateVTable() {
  if (FfiConverterCallbackInterfaceNotificationSettingsDelegate
      ._vtableInitialized) {
    return;
  }

  notificationSettingsDelegateVTable =
      calloc<UniffiVTableCallbackInterfaceNotificationSettingsDelegate>();
  notificationSettingsDelegateVTable.ref.settingsDidChange =
      notificationSettingsDelegateSettingsDidChangeNativeCallable
          .nativeFunction;
  notificationSettingsDelegateVTable.ref.uniffiFree =
      notificationSettingsDelegateFreePointer;

  rustCall((status) {
    _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_init_callback_vtable_notificationsettingsdelegate(
      notificationSettingsDelegateVTable,
    );
    checkCallStatus(NullRustCallStatusErrorHandler(), status);
  });

  FfiConverterCallbackInterfaceNotificationSettingsDelegate._vtableInitialized =
      true;
}

class FfiConverterSequenceGalleryItemInfo {
  static List<GalleryItemInfo> lift(RustBuffer buf) {
    return FfiConverterSequenceGalleryItemInfo.read(buf.asUint8List()).value;
  }

  static LiftRetVal<List<GalleryItemInfo>> read(Uint8List buf) {
    List<GalleryItemInfo> res = [];
    final length =
        buf.buffer.asByteData().getInt32(buf.offsetInBytes, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < length; i++) {
      final ret =
          FfiConverterGalleryItemInfo.read(Uint8List.view(buf.buffer, offset));
      offset += ret.bytesRead;
      res.add(ret.value);
    }
    return LiftRetVal(res, offset - buf.offsetInBytes);
  }

  static int write(List<GalleryItemInfo> value, Uint8List buf) {
    buf.buffer
        .asByteData()
        .setInt32(buf.offsetInBytes, value.length, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < value.length; i++) {
      offset += FfiConverterGalleryItemInfo.write(
          value[i], Uint8List.view(buf.buffer, offset));
    }
    return offset - buf.offsetInBytes;
  }

  static int allocationSize(List<GalleryItemInfo> value) {
    int total = 4;
    for (var item in value) {
      total += FfiConverterGalleryItemInfo.allocationSize(item);
    }
    return total;
  }

  static RustBuffer lower(List<GalleryItemInfo> value) {
    final buf = Uint8List(allocationSize(value));
    write(value, buf);
    return toRustBuffer(buf);
  }
}

class FfiConverterSequenceRoomDirectorySearchEntryUpdate {
  static List<RoomDirectorySearchEntryUpdate> lift(RustBuffer buf) {
    return FfiConverterSequenceRoomDirectorySearchEntryUpdate.read(
            buf.asUint8List())
        .value;
  }

  static LiftRetVal<List<RoomDirectorySearchEntryUpdate>> read(Uint8List buf) {
    List<RoomDirectorySearchEntryUpdate> res = [];
    final length =
        buf.buffer.asByteData().getInt32(buf.offsetInBytes, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < length; i++) {
      final ret = FfiConverterRoomDirectorySearchEntryUpdate.read(
          Uint8List.view(buf.buffer, offset));
      offset += ret.bytesRead;
      res.add(ret.value);
    }
    return LiftRetVal(res, offset - buf.offsetInBytes);
  }

  static int write(List<RoomDirectorySearchEntryUpdate> value, Uint8List buf) {
    buf.buffer
        .asByteData()
        .setInt32(buf.offsetInBytes, value.length, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < value.length; i++) {
      offset += FfiConverterRoomDirectorySearchEntryUpdate.write(
          value[i], Uint8List.view(buf.buffer, offset));
    }
    return offset - buf.offsetInBytes;
  }

  static int allocationSize(List<RoomDirectorySearchEntryUpdate> value) {
    int total = 4;
    for (var item in value) {
      total += FfiConverterRoomDirectorySearchEntryUpdate.allocationSize(item);
    }
    return total;
  }

  static RustBuffer lower(List<RoomDirectorySearchEntryUpdate> value) {
    final buf = Uint8List(allocationSize(value));
    write(value, buf);
    return toRustBuffer(buf);
  }
}

class FfiConverterMapStringBatchNotificationResult {
  static Map<String, BatchNotificationResult> lift(RustBuffer buf) {
    return FfiConverterMapStringBatchNotificationResult.read(buf.asUint8List())
        .value;
  }

  static LiftRetVal<Map<String, BatchNotificationResult>> read(Uint8List buf) {
    Map<String, BatchNotificationResult> res = {};
    final length =
        buf.buffer.asByteData().getInt32(buf.offsetInBytes, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < length; i++) {
      final k = FfiConverterString.read(Uint8List.view(buf.buffer, offset));
      offset += k.bytesRead;
      final v = FfiConverterBatchNotificationResult.read(
          Uint8List.view(buf.buffer, offset));
      offset += v.bytesRead;
      res[k.value] = v.value;
    }
    return LiftRetVal(res, offset - buf.offsetInBytes);
  }

  static int write(Map value, Uint8List buf) {
    buf.buffer
        .asByteData()
        .setInt32(buf.offsetInBytes, value.length, Endian.little);
    int offset = buf.offsetInBytes + 4;
    value.forEach((k, v) {
      offset += FfiConverterString.write(k, Uint8List.view(buf.buffer, offset));
      offset += FfiConverterBatchNotificationResult.write(
          v, Uint8List.view(buf.buffer, offset));
    });
    return offset - buf.offsetInBytes;
  }

  static int allocationSize(Map value) {
    int total = 4;
    value.forEach((k, v) {
      total += FfiConverterString.allocationSize(k);
      total += FfiConverterBatchNotificationResult.allocationSize(v);
    });
    return total;
  }

  static RustBuffer lower(Map value) {
    final buf = Uint8List(allocationSize(value));
    write(value, buf);
    return toRustBuffer(buf);
  }
}

class FfiConverterUInt16 {
  static int lift(int value) => value;

  static LiftRetVal<int> read(Uint8List buf) {
    return LiftRetVal(buf.buffer.asByteData(buf.offsetInBytes).getUint16(0), 2);
  }

  static int lower(int value) => value;

  static int allocationSize([int value = 0]) {
    return 2;
  }

  static int write(int value, Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setUint16(0, value);
    return FfiConverterUInt16.allocationSize();
  }
}

class FfiConverterOptionalMembershipChange {
  static MembershipChange? lift(RustBuffer buf) {
    return FfiConverterOptionalMembershipChange.read(buf.asUint8List()).value;
  }

  static LiftRetVal<MembershipChange?> read(Uint8List buf) {
    if (ByteData.view(buf.buffer, buf.offsetInBytes).getInt8(0) == 0) {
      return LiftRetVal(null, 1);
    }
    final result = FfiConverterMembershipChange.read(
        Uint8List.view(buf.buffer, buf.offsetInBytes + 1));
    return LiftRetVal<MembershipChange?>(result.value, result.bytesRead + 1);
  }

  static int allocationSize([MembershipChange? value]) {
    if (value == null) {
      return 1;
    }
    return FfiConverterMembershipChange.allocationSize(value) + 1;
  }

  static RustBuffer lower(MembershipChange? value) {
    if (value == null) {
      return toRustBuffer(Uint8List.fromList([0]));
    }

    final length = FfiConverterOptionalMembershipChange.allocationSize(value);

    final Pointer<Uint8> frameData = calloc<Uint8>(length);
    final buf = frameData.asTypedList(length);

    FfiConverterOptionalMembershipChange.write(value, buf);

    final bytes = calloc<ForeignBytes>();
    bytes.ref.len = length;
    bytes.ref.data = frameData;
    return RustBuffer.fromBytes(bytes.ref);
  }

  static int write(MembershipChange? value, Uint8List buf) {
    if (value == null) {
      buf[0] = 0;
      return 1;
    }

    buf[0] = 1;

    return FfiConverterMembershipChange.write(
            value, Uint8List.view(buf.buffer, buf.offsetInBytes + 1)) +
        1;
  }
}

abstract class EnableRecoveryProgressListener {
  void onUpdate(
    EnableRecoveryProgress status,
  );
}

class FfiConverterCallbackInterfaceEnableRecoveryProgressListener {
  static final _handleMap = UniffiHandleMap<EnableRecoveryProgressListener>();
  static bool _vtableInitialized = false;

  static EnableRecoveryProgressListener lift(int handle) {
    return _handleMap.get(handle);
  }

  static int lower(EnableRecoveryProgressListener value) {
    _ensureVTableInitialized();
    return _handleMap.insert(value);
  }

  static void _ensureVTableInitialized() {
    if (!_vtableInitialized) {
      initEnableRecoveryProgressListenerVTable();
      _vtableInitialized = true;
    }
  }

  static LiftRetVal<EnableRecoveryProgressListener> read(Uint8List buf) {
    final handle = buf.buffer.asByteData(buf.offsetInBytes).getInt64(0);
    return LiftRetVal(lift(handle), 8);
  }

  static int write(EnableRecoveryProgressListener value, Uint8List buf) {
    final handle = lower(value);
    buf.buffer.asByteData(buf.offsetInBytes).setInt64(0, handle);
    return 8;
  }

  static int allocationSize(EnableRecoveryProgressListener value) {
    return 8;
  }
}

typedef UniffiCallbackInterfaceEnableRecoveryProgressListenerMethod0 = Void
    Function(Uint64, RustBuffer, Pointer<Void>, Pointer<RustCallStatus>);
typedef UniffiCallbackInterfaceEnableRecoveryProgressListenerMethod0Dart = void
    Function(int, int, Pointer<Void>, Pointer<RustCallStatus>);
typedef UniffiCallbackInterfaceEnableRecoveryProgressListenerFree = Void
    Function(Uint64);
typedef UniffiCallbackInterfaceEnableRecoveryProgressListenerFreeDart = void
    Function(int);

final class UniffiVTableCallbackInterfaceEnableRecoveryProgressListener
    extends Struct {
  external Pointer<
          NativeFunction<
              UniffiCallbackInterfaceEnableRecoveryProgressListenerMethod0>>
      onUpdate;
  external Pointer<
          NativeFunction<
              UniffiCallbackInterfaceEnableRecoveryProgressListenerFree>>
      uniffiFree;
}

void enableRecoveryProgressListenerOnUpdate(int uniffiHandle, RustBuffer status,
    Pointer<Void> outReturn, Pointer<RustCallStatus> callStatus) {
  final statusRef = callStatus.ref;
  try {
    final obj = FfiConverterCallbackInterfaceEnableRecoveryProgressListener
        ._handleMap
        .get(uniffiHandle);
    final arg0 = FfiConverterEnableRecoveryProgress.lift(status);
    obj.onUpdate(
      arg0,
    );
    statusRef.code = CALL_SUCCESS;
  } catch (e) {
    statusRef.code = CALL_UNEXPECTED_ERROR;
    statusRef.errorBuf = FfiConverterString.lower(e.toString());
  }
}

final NativeCallable<
        UniffiCallbackInterfaceEnableRecoveryProgressListenerMethod0>
    enableRecoveryProgressListenerOnUpdateNativeCallable = NativeCallable<
            UniffiCallbackInterfaceEnableRecoveryProgressListenerMethod0>.listener(
        enableRecoveryProgressListenerOnUpdate);

void enableRecoveryProgressListenerFreeCallback(int handle) {
  try {
    FfiConverterCallbackInterfaceEnableRecoveryProgressListener._handleMap
        .remove(handle);
  } catch (e) {}
}

final Pointer<
        NativeFunction<
            UniffiCallbackInterfaceEnableRecoveryProgressListenerFree>>
    enableRecoveryProgressListenerFreePointer = Pointer.fromFunction<
            UniffiCallbackInterfaceEnableRecoveryProgressListenerFree>(
        enableRecoveryProgressListenerFreeCallback);
late final Pointer<UniffiVTableCallbackInterfaceEnableRecoveryProgressListener>
    enableRecoveryProgressListenerVTable;

void initEnableRecoveryProgressListenerVTable() {
  if (FfiConverterCallbackInterfaceEnableRecoveryProgressListener
      ._vtableInitialized) {
    return;
  }

  enableRecoveryProgressListenerVTable =
      calloc<UniffiVTableCallbackInterfaceEnableRecoveryProgressListener>();
  enableRecoveryProgressListenerVTable.ref.onUpdate =
      enableRecoveryProgressListenerOnUpdateNativeCallable.nativeFunction;
  enableRecoveryProgressListenerVTable.ref.uniffiFree =
      enableRecoveryProgressListenerFreePointer;

  rustCall((status) {
    _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_init_callback_vtable_enablerecoveryprogresslistener(
      enableRecoveryProgressListenerVTable,
    );
    checkCallStatus(NullRustCallStatusErrorHandler(), status);
  });

  FfiConverterCallbackInterfaceEnableRecoveryProgressListener
      ._vtableInitialized = true;
}

class FfiConverterOptionalCallbackInterfaceClientDelegate {
  static ClientDelegate? lift(RustBuffer buf) {
    return FfiConverterOptionalCallbackInterfaceClientDelegate.read(
            buf.asUint8List())
        .value;
  }

  static LiftRetVal<ClientDelegate?> read(Uint8List buf) {
    if (ByteData.view(buf.buffer, buf.offsetInBytes).getInt8(0) == 0) {
      return LiftRetVal(null, 1);
    }
    final result = FfiConverterCallbackInterfaceClientDelegate.read(
        Uint8List.view(buf.buffer, buf.offsetInBytes + 1));
    return LiftRetVal<ClientDelegate?>(result.value, result.bytesRead + 1);
  }

  static int allocationSize([ClientDelegate? value]) {
    if (value == null) {
      return 1;
    }
    return FfiConverterCallbackInterfaceClientDelegate.allocationSize(value) +
        1;
  }

  static RustBuffer lower(ClientDelegate? value) {
    if (value == null) {
      return toRustBuffer(Uint8List.fromList([0]));
    }

    final length =
        FfiConverterOptionalCallbackInterfaceClientDelegate.allocationSize(
            value);

    final Pointer<Uint8> frameData = calloc<Uint8>(length);
    final buf = frameData.asTypedList(length);

    FfiConverterOptionalCallbackInterfaceClientDelegate.write(value, buf);

    final bytes = calloc<ForeignBytes>();
    bytes.ref.len = length;
    bytes.ref.data = frameData;
    return RustBuffer.fromBytes(bytes.ref);
  }

  static int write(ClientDelegate? value, Uint8List buf) {
    if (value == null) {
      buf[0] = 0;
      return 1;
    }

    buf[0] = 1;

    return FfiConverterCallbackInterfaceClientDelegate.write(
            value, Uint8List.view(buf.buffer, buf.offsetInBytes + 1)) +
        1;
  }
}

class FfiConverterOptionalMembership {
  static Membership? lift(RustBuffer buf) {
    return FfiConverterOptionalMembership.read(buf.asUint8List()).value;
  }

  static LiftRetVal<Membership?> read(Uint8List buf) {
    if (ByteData.view(buf.buffer, buf.offsetInBytes).getInt8(0) == 0) {
      return LiftRetVal(null, 1);
    }
    final result = FfiConverterMembership.read(
        Uint8List.view(buf.buffer, buf.offsetInBytes + 1));
    return LiftRetVal<Membership?>(result.value, result.bytesRead + 1);
  }

  static int allocationSize([Membership? value]) {
    if (value == null) {
      return 1;
    }
    return FfiConverterMembership.allocationSize(value) + 1;
  }

  static RustBuffer lower(Membership? value) {
    if (value == null) {
      return toRustBuffer(Uint8List.fromList([0]));
    }

    final length = FfiConverterOptionalMembership.allocationSize(value);

    final Pointer<Uint8> frameData = calloc<Uint8>(length);
    final buf = frameData.asTypedList(length);

    FfiConverterOptionalMembership.write(value, buf);

    final bytes = calloc<ForeignBytes>();
    bytes.ref.len = length;
    bytes.ref.data = frameData;
    return RustBuffer.fromBytes(bytes.ref);
  }

  static int write(Membership? value, Uint8List buf) {
    if (value == null) {
      buf[0] = 0;
      return 1;
    }

    buf[0] = 1;

    return FfiConverterMembership.write(
            value, Uint8List.view(buf.buffer, buf.offsetInBytes + 1)) +
        1;
  }
}

class FfiConverterSequenceUInt16 {
  static List<int> lift(RustBuffer buf) {
    return FfiConverterSequenceUInt16.read(buf.asUint8List()).value;
  }

  static LiftRetVal<List<int>> read(Uint8List buf) {
    List<int> res = [];
    final length =
        buf.buffer.asByteData().getInt32(buf.offsetInBytes, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < length; i++) {
      final ret = FfiConverterUInt16.read(Uint8List.view(buf.buffer, offset));
      offset += ret.bytesRead;
      res.add(ret.value);
    }
    return LiftRetVal(res, offset - buf.offsetInBytes);
  }

  static int write(List<int> value, Uint8List buf) {
    buf.buffer
        .asByteData()
        .setInt32(buf.offsetInBytes, value.length, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < value.length; i++) {
      offset += FfiConverterUInt16.write(
          value[i], Uint8List.view(buf.buffer, offset));
    }
    return offset - buf.offsetInBytes;
  }

  static int allocationSize(List<int> value) {
    int total = 4;
    for (var item in value) {
      total += FfiConverterUInt16.allocationSize(item);
    }
    return total;
  }

  static RustBuffer lower(List<int> value) {
    final buf = Uint8List(allocationSize(value));
    write(value, buf);
    return toRustBuffer(buf);
  }
}

class FfiConverterOptionalMatrixEntity {
  static MatrixEntity? lift(RustBuffer buf) {
    return FfiConverterOptionalMatrixEntity.read(buf.asUint8List()).value;
  }

  static LiftRetVal<MatrixEntity?> read(Uint8List buf) {
    if (ByteData.view(buf.buffer, buf.offsetInBytes).getInt8(0) == 0) {
      return LiftRetVal(null, 1);
    }
    final result = FfiConverterMatrixEntity.read(
        Uint8List.view(buf.buffer, buf.offsetInBytes + 1));
    return LiftRetVal<MatrixEntity?>(result.value, result.bytesRead + 1);
  }

  static int allocationSize([MatrixEntity? value]) {
    if (value == null) {
      return 1;
    }
    return FfiConverterMatrixEntity.allocationSize(value) + 1;
  }

  static RustBuffer lower(MatrixEntity? value) {
    if (value == null) {
      return toRustBuffer(Uint8List.fromList([0]));
    }

    final length = FfiConverterOptionalMatrixEntity.allocationSize(value);

    final Pointer<Uint8> frameData = calloc<Uint8>(length);
    final buf = frameData.asTypedList(length);

    FfiConverterOptionalMatrixEntity.write(value, buf);

    final bytes = calloc<ForeignBytes>();
    bytes.ref.len = length;
    bytes.ref.data = frameData;
    return RustBuffer.fromBytes(bytes.ref);
  }

  static int write(MatrixEntity? value, Uint8List buf) {
    if (value == null) {
      buf[0] = 0;
      return 1;
    }

    buf[0] = 1;

    return FfiConverterMatrixEntity.write(
            value, Uint8List.view(buf.buffer, buf.offsetInBytes + 1)) +
        1;
  }
}

class FfiConverterSequencePollAnswer {
  static List<PollAnswer> lift(RustBuffer buf) {
    return FfiConverterSequencePollAnswer.read(buf.asUint8List()).value;
  }

  static LiftRetVal<List<PollAnswer>> read(Uint8List buf) {
    List<PollAnswer> res = [];
    final length =
        buf.buffer.asByteData().getInt32(buf.offsetInBytes, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < length; i++) {
      final ret =
          FfiConverterPollAnswer.read(Uint8List.view(buf.buffer, offset));
      offset += ret.bytesRead;
      res.add(ret.value);
    }
    return LiftRetVal(res, offset - buf.offsetInBytes);
  }

  static int write(List<PollAnswer> value, Uint8List buf) {
    buf.buffer
        .asByteData()
        .setInt32(buf.offsetInBytes, value.length, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < value.length; i++) {
      offset += FfiConverterPollAnswer.write(
          value[i], Uint8List.view(buf.buffer, offset));
    }
    return offset - buf.offsetInBytes;
  }

  static int allocationSize(List<PollAnswer> value) {
    int total = 4;
    for (var item in value) {
      total += FfiConverterPollAnswer.allocationSize(item);
    }
    return total;
  }

  static RustBuffer lower(List<PollAnswer> value) {
    final buf = Uint8List(allocationSize(value));
    write(value, buf);
    return toRustBuffer(buf);
  }
}

abstract class SendQueueRoomErrorListener {
  void onError(
    String roomId,
    ClientException error,
  );
}

class FfiConverterCallbackInterfaceSendQueueRoomErrorListener {
  static final _handleMap = UniffiHandleMap<SendQueueRoomErrorListener>();
  static bool _vtableInitialized = false;

  static SendQueueRoomErrorListener lift(int handle) {
    return _handleMap.get(handle);
  }

  static int lower(SendQueueRoomErrorListener value) {
    _ensureVTableInitialized();
    return _handleMap.insert(value);
  }

  static void _ensureVTableInitialized() {
    if (!_vtableInitialized) {
      initSendQueueRoomErrorListenerVTable();
      _vtableInitialized = true;
    }
  }

  static LiftRetVal<SendQueueRoomErrorListener> read(Uint8List buf) {
    final handle = buf.buffer.asByteData(buf.offsetInBytes).getInt64(0);
    return LiftRetVal(lift(handle), 8);
  }

  static int write(SendQueueRoomErrorListener value, Uint8List buf) {
    final handle = lower(value);
    buf.buffer.asByteData(buf.offsetInBytes).setInt64(0, handle);
    return 8;
  }

  static int allocationSize(SendQueueRoomErrorListener value) {
    return 8;
  }
}

typedef UniffiCallbackInterfaceSendQueueRoomErrorListenerMethod0
    = Void Function(
        Uint64, RustBuffer, RustBuffer, Pointer<Void>, Pointer<RustCallStatus>);
typedef UniffiCallbackInterfaceSendQueueRoomErrorListenerMethod0Dart = void
    Function(int, RustBuffer, int, Pointer<Void>, Pointer<RustCallStatus>);
typedef UniffiCallbackInterfaceSendQueueRoomErrorListenerFree = Void Function(
    Uint64);
typedef UniffiCallbackInterfaceSendQueueRoomErrorListenerFreeDart = void
    Function(int);

final class UniffiVTableCallbackInterfaceSendQueueRoomErrorListener
    extends Struct {
  external Pointer<
      NativeFunction<
          UniffiCallbackInterfaceSendQueueRoomErrorListenerMethod0>> onError;
  external Pointer<
          NativeFunction<UniffiCallbackInterfaceSendQueueRoomErrorListenerFree>>
      uniffiFree;
}

void sendQueueRoomErrorListenerOnException(
    int uniffiHandle,
    RustBuffer roomIdBuffer,
    RustBuffer error,
    Pointer<Void> outReturn,
    Pointer<RustCallStatus> callStatus) {
  final status = callStatus.ref;
  try {
    final obj = FfiConverterCallbackInterfaceSendQueueRoomErrorListener
        ._handleMap
        .get(uniffiHandle);
    final arg0 = FfiConverterString.lift(roomIdBuffer);
    final arg1 = FfiConverterClientException.lift(error);
    obj.onError(
      arg0,
      arg1,
    );
    status.code = CALL_SUCCESS;
  } catch (e) {
    status.code = CALL_UNEXPECTED_ERROR;
    status.errorBuf = FfiConverterString.lower(e.toString());
  }
}

final NativeCallable<UniffiCallbackInterfaceSendQueueRoomErrorListenerMethod0>
    sendQueueRoomErrorListenerOnExceptionNativeCallable = NativeCallable<
            UniffiCallbackInterfaceSendQueueRoomErrorListenerMethod0>.listener(
        sendQueueRoomErrorListenerOnException);

void sendQueueRoomErrorListenerFreeCallback(int handle) {
  try {
    FfiConverterCallbackInterfaceSendQueueRoomErrorListener._handleMap
        .remove(handle);
  } catch (e) {}
}

final Pointer<
        NativeFunction<UniffiCallbackInterfaceSendQueueRoomErrorListenerFree>>
    sendQueueRoomErrorListenerFreePointer =
    Pointer.fromFunction<UniffiCallbackInterfaceSendQueueRoomErrorListenerFree>(
        sendQueueRoomErrorListenerFreeCallback);
late final Pointer<UniffiVTableCallbackInterfaceSendQueueRoomErrorListener>
    sendQueueRoomErrorListenerVTable;

void initSendQueueRoomErrorListenerVTable() {
  if (FfiConverterCallbackInterfaceSendQueueRoomErrorListener
      ._vtableInitialized) {
    return;
  }

  sendQueueRoomErrorListenerVTable =
      calloc<UniffiVTableCallbackInterfaceSendQueueRoomErrorListener>();
  sendQueueRoomErrorListenerVTable.ref.onError =
      sendQueueRoomErrorListenerOnExceptionNativeCallable.nativeFunction;
  sendQueueRoomErrorListenerVTable.ref.uniffiFree =
      sendQueueRoomErrorListenerFreePointer;

  rustCall((status) {
    _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_init_callback_vtable_sendqueueroomerrorlistener(
      sendQueueRoomErrorListenerVTable,
    );
    checkCallStatus(NullRustCallStatusErrorHandler(), status);
  });

  FfiConverterCallbackInterfaceSendQueueRoomErrorListener._vtableInitialized =
      true;
}

class FfiConverterMapStringInt64 {
  static Map<String, int> lift(RustBuffer buf) {
    return FfiConverterMapStringInt64.read(buf.asUint8List()).value;
  }

  static LiftRetVal<Map<String, int>> read(Uint8List buf) {
    Map<String, int> res = {};
    final length =
        buf.buffer.asByteData().getInt32(buf.offsetInBytes, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < length; i++) {
      final k = FfiConverterString.read(Uint8List.view(buf.buffer, offset));
      offset += k.bytesRead;
      final v = FfiConverterInt64.read(Uint8List.view(buf.buffer, offset));
      offset += v.bytesRead;
      res[k.value] = v.value;
    }
    return LiftRetVal(res, offset - buf.offsetInBytes);
  }

  static int write(Map<String, int> value, Uint8List buf) {
    buf.buffer
        .asByteData()
        .setInt32(buf.offsetInBytes, value.length, Endian.little);
    int offset = buf.offsetInBytes + 4;
    value.forEach((k, v) {
      offset += FfiConverterString.write(k, Uint8List.view(buf.buffer, offset));
      offset += FfiConverterInt64.write(v, Uint8List.view(buf.buffer, offset));
    });
    return offset - buf.offsetInBytes;
  }

  static int allocationSize(Map<String, int> value) {
    int total = 4;
    value.forEach((k, v) {
      total += FfiConverterString.allocationSize(k);
      total += FfiConverterInt64.allocationSize(v);
    });
    return total;
  }

  static RustBuffer lower(Map<String, int> value) {
    final buf = Uint8List(allocationSize(value));
    write(value, buf);
    return toRustBuffer(buf);
  }
}

class FfiConverterOptionalRoomHistoryVisibility {
  static RoomHistoryVisibility? lift(RustBuffer buf) {
    return FfiConverterOptionalRoomHistoryVisibility.read(buf.asUint8List())
        .value;
  }

  static LiftRetVal<RoomHistoryVisibility?> read(Uint8List buf) {
    if (ByteData.view(buf.buffer, buf.offsetInBytes).getInt8(0) == 0) {
      return LiftRetVal(null, 1);
    }
    final result = FfiConverterRoomHistoryVisibility.read(
        Uint8List.view(buf.buffer, buf.offsetInBytes + 1));
    return LiftRetVal<RoomHistoryVisibility?>(
        result.value, result.bytesRead + 1);
  }

  static int allocationSize([RoomHistoryVisibility? value]) {
    if (value == null) {
      return 1;
    }
    return FfiConverterRoomHistoryVisibility.allocationSize(value) + 1;
  }

  static RustBuffer lower(RoomHistoryVisibility? value) {
    if (value == null) {
      return toRustBuffer(Uint8List.fromList([0]));
    }

    final length =
        FfiConverterOptionalRoomHistoryVisibility.allocationSize(value);

    final Pointer<Uint8> frameData = calloc<Uint8>(length);
    final buf = frameData.asTypedList(length);

    FfiConverterOptionalRoomHistoryVisibility.write(value, buf);

    final bytes = calloc<ForeignBytes>();
    bytes.ref.len = length;
    bytes.ref.data = frameData;
    return RustBuffer.fromBytes(bytes.ref);
  }

  static int write(RoomHistoryVisibility? value, Uint8List buf) {
    if (value == null) {
      buf[0] = 0;
      return 1;
    }

    buf[0] = 1;

    return FfiConverterRoomHistoryVisibility.write(
            value, Uint8List.view(buf.buffer, buf.offsetInBytes + 1)) +
        1;
  }
}

class FfiConverterOptionalRoomMember {
  static RoomMember? lift(RustBuffer buf) {
    return FfiConverterOptionalRoomMember.read(buf.asUint8List()).value;
  }

  static LiftRetVal<RoomMember?> read(Uint8List buf) {
    if (ByteData.view(buf.buffer, buf.offsetInBytes).getInt8(0) == 0) {
      return LiftRetVal(null, 1);
    }
    final result = FfiConverterRoomMember.read(
        Uint8List.view(buf.buffer, buf.offsetInBytes + 1));
    return LiftRetVal<RoomMember?>(result.value, result.bytesRead + 1);
  }

  static int allocationSize([RoomMember? value]) {
    if (value == null) {
      return 1;
    }
    return FfiConverterRoomMember.allocationSize(value) + 1;
  }

  static RustBuffer lower(RoomMember? value) {
    if (value == null) {
      return toRustBuffer(Uint8List.fromList([0]));
    }

    final length = FfiConverterOptionalRoomMember.allocationSize(value);

    final Pointer<Uint8> frameData = calloc<Uint8>(length);
    final buf = frameData.asTypedList(length);

    FfiConverterOptionalRoomMember.write(value, buf);

    final bytes = calloc<ForeignBytes>();
    bytes.ref.len = length;
    bytes.ref.data = frameData;
    return RustBuffer.fromBytes(bytes.ref);
  }

  static int write(RoomMember? value, Uint8List buf) {
    if (value == null) {
      buf[0] = 0;
      return 1;
    }

    buf[0] = 1;

    return FfiConverterRoomMember.write(
            value, Uint8List.view(buf.buffer, buf.offsetInBytes + 1)) +
        1;
  }
}

class FfiConverterOptionalDuration {
  static Duration? lift(RustBuffer buf) {
    return FfiConverterOptionalDuration.read(buf.asUint8List()).value;
  }

  static LiftRetVal<Duration?> read(Uint8List buf) {
    if (ByteData.view(buf.buffer, buf.offsetInBytes).getInt8(0) == 0) {
      return LiftRetVal(null, 1);
    }
    final result = FfiConverterDuration.read(
        Uint8List.view(buf.buffer, buf.offsetInBytes + 1));
    return LiftRetVal<Duration?>(result.value, result.bytesRead + 1);
  }

  static int allocationSize([Duration? value]) {
    if (value == null) {
      return 1;
    }
    return FfiConverterDuration.allocationSize(value) + 1;
  }

  static RustBuffer lower(Duration? value) {
    if (value == null) {
      return toRustBuffer(Uint8List.fromList([0]));
    }

    final length = FfiConverterOptionalDuration.allocationSize(value);

    final Pointer<Uint8> frameData = calloc<Uint8>(length);
    final buf = frameData.asTypedList(length);

    FfiConverterOptionalDuration.write(value, buf);

    final bytes = calloc<ForeignBytes>();
    bytes.ref.len = length;
    bytes.ref.data = frameData;
    return RustBuffer.fromBytes(bytes.ref);
  }

  static int write(Duration? value, Uint8List buf) {
    if (value == null) {
      buf[0] = 0;
      return 1;
    }

    buf[0] = 1;

    return FfiConverterDuration.write(
            value, Uint8List.view(buf.buffer, buf.offsetInBytes + 1)) +
        1;
  }
}

class FfiConverterOptionalJoinRule {
  static JoinRule? lift(RustBuffer buf) {
    return FfiConverterOptionalJoinRule.read(buf.asUint8List()).value;
  }

  static LiftRetVal<JoinRule?> read(Uint8List buf) {
    if (ByteData.view(buf.buffer, buf.offsetInBytes).getInt8(0) == 0) {
      return LiftRetVal(null, 1);
    }
    final result = FfiConverterJoinRule.read(
        Uint8List.view(buf.buffer, buf.offsetInBytes + 1));
    return LiftRetVal<JoinRule?>(result.value, result.bytesRead + 1);
  }

  static int allocationSize([JoinRule? value]) {
    if (value == null) {
      return 1;
    }
    return FfiConverterJoinRule.allocationSize(value) + 1;
  }

  static RustBuffer lower(JoinRule? value) {
    if (value == null) {
      return toRustBuffer(Uint8List.fromList([0]));
    }

    final length = FfiConverterOptionalJoinRule.allocationSize(value);

    final Pointer<Uint8> frameData = calloc<Uint8>(length);
    final buf = frameData.asTypedList(length);

    FfiConverterOptionalJoinRule.write(value, buf);

    final bytes = calloc<ForeignBytes>();
    bytes.ref.len = length;
    bytes.ref.data = frameData;
    return RustBuffer.fromBytes(bytes.ref);
  }

  static int write(JoinRule? value, Uint8List buf) {
    if (value == null) {
      buf[0] = 0;
      return 1;
    }

    buf[0] = 1;

    return FfiConverterJoinRule.write(
            value, Uint8List.view(buf.buffer, buf.offsetInBytes + 1)) +
        1;
  }
}

class FfiConverterOptionalUserIdentity {
  static UserIdentity? lift(RustBuffer buf) {
    return FfiConverterOptionalUserIdentity.read(buf.asUint8List()).value;
  }

  static LiftRetVal<UserIdentity?> read(Uint8List buf) {
    if (ByteData.view(buf.buffer, buf.offsetInBytes).getInt8(0) == 0) {
      return LiftRetVal(null, 1);
    }
    final result =
        UserIdentity.read(Uint8List.view(buf.buffer, buf.offsetInBytes + 1));
    return LiftRetVal<UserIdentity?>(result.value, result.bytesRead + 1);
  }

  static int allocationSize([UserIdentity? value]) {
    if (value == null) {
      return 1;
    }
    return UserIdentity.allocationSize(value) + 1;
  }

  static RustBuffer lower(UserIdentity? value) {
    if (value == null) {
      return toRustBuffer(Uint8List.fromList([0]));
    }

    final length = FfiConverterOptionalUserIdentity.allocationSize(value);

    final Pointer<Uint8> frameData = calloc<Uint8>(length);
    final buf = frameData.asTypedList(length);

    FfiConverterOptionalUserIdentity.write(value, buf);

    final bytes = calloc<ForeignBytes>();
    bytes.ref.len = length;
    bytes.ref.data = frameData;
    return RustBuffer.fromBytes(bytes.ref);
  }

  static int write(UserIdentity? value, Uint8List buf) {
    if (value == null) {
      buf[0] = 0;
      return 1;
    }

    buf[0] = 1;

    return UserIdentity.write(
            value, Uint8List.view(buf.buffer, buf.offsetInBytes + 1)) +
        1;
  }
}

class FfiConverterOptionalSendHandle {
  static SendHandle? lift(RustBuffer buf) {
    return FfiConverterOptionalSendHandle.read(buf.asUint8List()).value;
  }

  static LiftRetVal<SendHandle?> read(Uint8List buf) {
    if (ByteData.view(buf.buffer, buf.offsetInBytes).getInt8(0) == 0) {
      return LiftRetVal(null, 1);
    }
    final result =
        SendHandle.read(Uint8List.view(buf.buffer, buf.offsetInBytes + 1));
    return LiftRetVal<SendHandle?>(result.value, result.bytesRead + 1);
  }

  static int allocationSize([SendHandle? value]) {
    if (value == null) {
      return 1;
    }
    return SendHandle.allocationSize(value) + 1;
  }

  static RustBuffer lower(SendHandle? value) {
    if (value == null) {
      return toRustBuffer(Uint8List.fromList([0]));
    }

    final length = FfiConverterOptionalSendHandle.allocationSize(value);

    final Pointer<Uint8> frameData = calloc<Uint8>(length);
    final buf = frameData.asTypedList(length);

    FfiConverterOptionalSendHandle.write(value, buf);

    final bytes = calloc<ForeignBytes>();
    bytes.ref.len = length;
    bytes.ref.data = frameData;
    return RustBuffer.fromBytes(bytes.ref);
  }

  static int write(SendHandle? value, Uint8List buf) {
    if (value == null) {
      buf[0] = 0;
      return 1;
    }

    buf[0] = 1;

    return SendHandle.write(
            value, Uint8List.view(buf.buffer, buf.offsetInBytes + 1)) +
        1;
  }
}

class FfiConverterSequenceSimplePushRule {
  static List<SimplePushRule> lift(RustBuffer buf) {
    return FfiConverterSequenceSimplePushRule.read(buf.asUint8List()).value;
  }

  static LiftRetVal<List<SimplePushRule>> read(Uint8List buf) {
    List<SimplePushRule> res = [];
    final length =
        buf.buffer.asByteData().getInt32(buf.offsetInBytes, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < length; i++) {
      final ret =
          FfiConverterSimplePushRule.read(Uint8List.view(buf.buffer, offset));
      offset += ret.bytesRead;
      res.add(ret.value);
    }
    return LiftRetVal(res, offset - buf.offsetInBytes);
  }

  static int write(List<SimplePushRule> value, Uint8List buf) {
    buf.buffer
        .asByteData()
        .setInt32(buf.offsetInBytes, value.length, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < value.length; i++) {
      offset += FfiConverterSimplePushRule.write(
          value[i], Uint8List.view(buf.buffer, offset));
    }
    return offset - buf.offsetInBytes;
  }

  static int allocationSize(List<SimplePushRule> value) {
    int total = 4;
    for (var item in value) {
      total += FfiConverterSimplePushRule.allocationSize(item);
    }
    return total;
  }

  static RustBuffer lower(List<SimplePushRule> value) {
    final buf = Uint8List(allocationSize(value));
    write(value, buf);
    return toRustBuffer(buf);
  }
}

class FfiConverterOptionalRoomMemberWithSenderInfo {
  static RoomMemberWithSenderInfo? lift(RustBuffer buf) {
    return FfiConverterOptionalRoomMemberWithSenderInfo.read(buf.asUint8List())
        .value;
  }

  static LiftRetVal<RoomMemberWithSenderInfo?> read(Uint8List buf) {
    if (ByteData.view(buf.buffer, buf.offsetInBytes).getInt8(0) == 0) {
      return LiftRetVal(null, 1);
    }
    final result = FfiConverterRoomMemberWithSenderInfo.read(
        Uint8List.view(buf.buffer, buf.offsetInBytes + 1));
    return LiftRetVal<RoomMemberWithSenderInfo?>(
        result.value, result.bytesRead + 1);
  }

  static int allocationSize([RoomMemberWithSenderInfo? value]) {
    if (value == null) {
      return 1;
    }
    return FfiConverterRoomMemberWithSenderInfo.allocationSize(value) + 1;
  }

  static RustBuffer lower(RoomMemberWithSenderInfo? value) {
    if (value == null) {
      return toRustBuffer(Uint8List.fromList([0]));
    }

    final length =
        FfiConverterOptionalRoomMemberWithSenderInfo.allocationSize(value);

    final Pointer<Uint8> frameData = calloc<Uint8>(length);
    final buf = frameData.asTypedList(length);

    FfiConverterOptionalRoomMemberWithSenderInfo.write(value, buf);

    final bytes = calloc<ForeignBytes>();
    bytes.ref.len = length;
    bytes.ref.data = frameData;
    return RustBuffer.fromBytes(bytes.ref);
  }

  static int write(RoomMemberWithSenderInfo? value, Uint8List buf) {
    if (value == null) {
      buf[0] = 0;
      return 1;
    }

    buf[0] = 1;

    return FfiConverterRoomMemberWithSenderInfo.write(
            value, Uint8List.view(buf.buffer, buf.offsetInBytes + 1)) +
        1;
  }
}

abstract class IgnoredUsersListener {
  void call(
    List<String> ignoredUserIds,
  );
}

class FfiConverterCallbackInterfaceIgnoredUsersListener {
  static final _handleMap = UniffiHandleMap<IgnoredUsersListener>();
  static bool _vtableInitialized = false;

  static IgnoredUsersListener lift(int handle) {
    return _handleMap.get(handle);
  }

  static int lower(IgnoredUsersListener value) {
    _ensureVTableInitialized();
    return _handleMap.insert(value);
  }

  static void _ensureVTableInitialized() {
    if (!_vtableInitialized) {
      initIgnoredUsersListenerVTable();
      _vtableInitialized = true;
    }
  }

  static LiftRetVal<IgnoredUsersListener> read(Uint8List buf) {
    final handle = buf.buffer.asByteData(buf.offsetInBytes).getInt64(0);
    return LiftRetVal(lift(handle), 8);
  }

  static int write(IgnoredUsersListener value, Uint8List buf) {
    final handle = lower(value);
    buf.buffer.asByteData(buf.offsetInBytes).setInt64(0, handle);
    return 8;
  }

  static int allocationSize(IgnoredUsersListener value) {
    return 8;
  }
}

typedef UniffiCallbackInterfaceIgnoredUsersListenerMethod0 = Void Function(
    Uint64, RustBuffer, Pointer<Void>, Pointer<RustCallStatus>);
typedef UniffiCallbackInterfaceIgnoredUsersListenerMethod0Dart = void Function(
    int, RustBuffer, Pointer<Void>, Pointer<RustCallStatus>);
typedef UniffiCallbackInterfaceIgnoredUsersListenerFree = Void Function(Uint64);
typedef UniffiCallbackInterfaceIgnoredUsersListenerFreeDart = void Function(
    int);

final class UniffiVTableCallbackInterfaceIgnoredUsersListener extends Struct {
  external Pointer<
      NativeFunction<UniffiCallbackInterfaceIgnoredUsersListenerMethod0>> call;
  external Pointer<
          NativeFunction<UniffiCallbackInterfaceIgnoredUsersListenerFree>>
      uniffiFree;
}

void ignoredUsersListenerCall(int uniffiHandle, RustBuffer ignoredUserIds,
    Pointer<Void> outReturn, Pointer<RustCallStatus> callStatus) {
  final status = callStatus.ref;
  try {
    final obj = FfiConverterCallbackInterfaceIgnoredUsersListener._handleMap
        .get(uniffiHandle);
    final arg0 = FfiConverterSequenceString.lift(ignoredUserIds);
    obj.call(
      arg0,
    );
    status.code = CALL_SUCCESS;
  } catch (e) {
    status.code = CALL_UNEXPECTED_ERROR;
    status.errorBuf = FfiConverterString.lower(e.toString());
  }
}

final NativeCallable<UniffiCallbackInterfaceIgnoredUsersListenerMethod0>
    ignoredUsersListenerCallNativeCallable =
    NativeCallable<UniffiCallbackInterfaceIgnoredUsersListenerMethod0>.listener(
        ignoredUsersListenerCall);

void ignoredUsersListenerFreeCallback(int handle) {
  try {
    FfiConverterCallbackInterfaceIgnoredUsersListener._handleMap.remove(handle);
  } catch (e) {}
}

final Pointer<NativeFunction<UniffiCallbackInterfaceIgnoredUsersListenerFree>>
    ignoredUsersListenerFreePointer =
    Pointer.fromFunction<UniffiCallbackInterfaceIgnoredUsersListenerFree>(
        ignoredUsersListenerFreeCallback);
late final Pointer<UniffiVTableCallbackInterfaceIgnoredUsersListener>
    ignoredUsersListenerVTable;

void initIgnoredUsersListenerVTable() {
  if (FfiConverterCallbackInterfaceIgnoredUsersListener._vtableInitialized) {
    return;
  }

  ignoredUsersListenerVTable =
      calloc<UniffiVTableCallbackInterfaceIgnoredUsersListener>();
  ignoredUsersListenerVTable.ref.call =
      ignoredUsersListenerCallNativeCallable.nativeFunction;
  ignoredUsersListenerVTable.ref.uniffiFree = ignoredUsersListenerFreePointer;

  rustCall((status) {
    _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_init_callback_vtable_ignoreduserslistener(
      ignoredUsersListenerVTable,
    );
    checkCallStatus(NullRustCallStatusErrorHandler(), status);
  });

  FfiConverterCallbackInterfaceIgnoredUsersListener._vtableInitialized = true;
}

class FfiConverterOptionalString {
  static String? lift(RustBuffer buf) {
    return FfiConverterOptionalString.read(buf.asUint8List()).value;
  }

  static LiftRetVal<String?> read(Uint8List buf) {
    if (ByteData.view(buf.buffer, buf.offsetInBytes).getInt8(0) == 0) {
      return LiftRetVal(null, 1);
    }
    final result = FfiConverterString.read(
        Uint8List.view(buf.buffer, buf.offsetInBytes + 1));
    return LiftRetVal<String?>(result.value, result.bytesRead + 1);
  }

  static int allocationSize([String? value]) {
    if (value == null) {
      return 1;
    }
    return FfiConverterString.allocationSize(value) + 1;
  }

  static RustBuffer lower(String? value) {
    if (value == null) {
      return toRustBuffer(Uint8List.fromList([0]));
    }

    final length = FfiConverterOptionalString.allocationSize(value);

    final Pointer<Uint8> frameData = calloc<Uint8>(length);
    final buf = frameData.asTypedList(length);

    FfiConverterOptionalString.write(value, buf);

    final bytes = calloc<ForeignBytes>();
    bytes.ref.len = length;
    bytes.ref.data = frameData;
    return RustBuffer.fromBytes(bytes.ref);
  }

  static int write(String? value, Uint8List buf) {
    if (value == null) {
      buf[0] = 0;
      return 1;
    }

    buf[0] = 1;

    return FfiConverterString.write(
            value, Uint8List.view(buf.buffer, buf.offsetInBytes + 1)) +
        1;
  }
}

class FfiConverterOptionalNotificationPowerLevels {
  static NotificationPowerLevels? lift(RustBuffer buf) {
    return FfiConverterOptionalNotificationPowerLevels.read(buf.asUint8List())
        .value;
  }

  static LiftRetVal<NotificationPowerLevels?> read(Uint8List buf) {
    if (ByteData.view(buf.buffer, buf.offsetInBytes).getInt8(0) == 0) {
      return LiftRetVal(null, 1);
    }
    final result = FfiConverterNotificationPowerLevels.read(
        Uint8List.view(buf.buffer, buf.offsetInBytes + 1));
    return LiftRetVal<NotificationPowerLevels?>(
        result.value, result.bytesRead + 1);
  }

  static int allocationSize([NotificationPowerLevels? value]) {
    if (value == null) {
      return 1;
    }
    return FfiConverterNotificationPowerLevels.allocationSize(value) + 1;
  }

  static RustBuffer lower(NotificationPowerLevels? value) {
    if (value == null) {
      return toRustBuffer(Uint8List.fromList([0]));
    }

    final length =
        FfiConverterOptionalNotificationPowerLevels.allocationSize(value);

    final Pointer<Uint8> frameData = calloc<Uint8>(length);
    final buf = frameData.asTypedList(length);

    FfiConverterOptionalNotificationPowerLevels.write(value, buf);

    final bytes = calloc<ForeignBytes>();
    bytes.ref.len = length;
    bytes.ref.data = frameData;
    return RustBuffer.fromBytes(bytes.ref);
  }

  static int write(NotificationPowerLevels? value, Uint8List buf) {
    if (value == null) {
      buf[0] = 0;
      return 1;
    }

    buf[0] = 1;

    return FfiConverterNotificationPowerLevels.write(
            value, Uint8List.view(buf.buffer, buf.offsetInBytes + 1)) +
        1;
  }
}

abstract class QrLoginProgressListener {
  void onUpdate(
    QrLoginProgress state,
  );
}

class FfiConverterCallbackInterfaceQrLoginProgressListener {
  static final _handleMap = UniffiHandleMap<QrLoginProgressListener>();
  static bool _vtableInitialized = false;

  static QrLoginProgressListener lift(int handle) {
    return _handleMap.get(handle);
  }

  static int lower(QrLoginProgressListener value) {
    _ensureVTableInitialized();
    return _handleMap.insert(value);
  }

  static void _ensureVTableInitialized() {
    if (!_vtableInitialized) {
      initQrLoginProgressListenerVTable();
      _vtableInitialized = true;
    }
  }

  static LiftRetVal<QrLoginProgressListener> read(Uint8List buf) {
    final handle = buf.buffer.asByteData(buf.offsetInBytes).getInt64(0);
    return LiftRetVal(lift(handle), 8);
  }

  static int write(QrLoginProgressListener value, Uint8List buf) {
    final handle = lower(value);
    buf.buffer.asByteData(buf.offsetInBytes).setInt64(0, handle);
    return 8;
  }

  static int allocationSize(QrLoginProgressListener value) {
    return 8;
  }
}

typedef UniffiCallbackInterfaceQrLoginProgressListenerMethod0 = Void Function(
    Uint64, RustBuffer, Pointer<Void>, Pointer<RustCallStatus>);
typedef UniffiCallbackInterfaceQrLoginProgressListenerMethod0Dart = void
    Function(int, int, Pointer<Void>, Pointer<RustCallStatus>);
typedef UniffiCallbackInterfaceQrLoginProgressListenerFree = Void Function(
    Uint64);
typedef UniffiCallbackInterfaceQrLoginProgressListenerFreeDart = void Function(
    int);

final class UniffiVTableCallbackInterfaceQrLoginProgressListener
    extends Struct {
  external Pointer<
          NativeFunction<UniffiCallbackInterfaceQrLoginProgressListenerMethod0>>
      onUpdate;
  external Pointer<
          NativeFunction<UniffiCallbackInterfaceQrLoginProgressListenerFree>>
      uniffiFree;
}

void qrLoginProgressListenerOnUpdate(int uniffiHandle, RustBuffer state,
    Pointer<Void> outReturn, Pointer<RustCallStatus> callStatus) {
  final status = callStatus.ref;
  try {
    final obj = FfiConverterCallbackInterfaceQrLoginProgressListener._handleMap
        .get(uniffiHandle);
    final arg0 = FfiConverterQrLoginProgress.lift(state);
    obj.onUpdate(
      arg0,
    );
    status.code = CALL_SUCCESS;
  } catch (e) {
    status.code = CALL_UNEXPECTED_ERROR;
    status.errorBuf = FfiConverterString.lower(e.toString());
  }
}

final NativeCallable<UniffiCallbackInterfaceQrLoginProgressListenerMethod0>
    qrLoginProgressListenerOnUpdateNativeCallable = NativeCallable<
            UniffiCallbackInterfaceQrLoginProgressListenerMethod0>.listener(
        qrLoginProgressListenerOnUpdate);

void qrLoginProgressListenerFreeCallback(int handle) {
  try {
    FfiConverterCallbackInterfaceQrLoginProgressListener._handleMap
        .remove(handle);
  } catch (e) {}
}

final Pointer<
        NativeFunction<UniffiCallbackInterfaceQrLoginProgressListenerFree>>
    qrLoginProgressListenerFreePointer =
    Pointer.fromFunction<UniffiCallbackInterfaceQrLoginProgressListenerFree>(
        qrLoginProgressListenerFreeCallback);
late final Pointer<UniffiVTableCallbackInterfaceQrLoginProgressListener>
    qrLoginProgressListenerVTable;

void initQrLoginProgressListenerVTable() {
  if (FfiConverterCallbackInterfaceQrLoginProgressListener._vtableInitialized) {
    return;
  }

  qrLoginProgressListenerVTable =
      calloc<UniffiVTableCallbackInterfaceQrLoginProgressListener>();
  qrLoginProgressListenerVTable.ref.onUpdate =
      qrLoginProgressListenerOnUpdateNativeCallable.nativeFunction;
  qrLoginProgressListenerVTable.ref.uniffiFree =
      qrLoginProgressListenerFreePointer;

  rustCall((status) {
    _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_init_callback_vtable_qrloginprogresslistener(
      qrLoginProgressListenerVTable,
    );
    checkCallStatus(NullRustCallStatusErrorHandler(), status);
  });

  FfiConverterCallbackInterfaceQrLoginProgressListener._vtableInitialized =
      true;
}

class FfiConverterSequenceAllowRule {
  static List<AllowRule> lift(RustBuffer buf) {
    return FfiConverterSequenceAllowRule.read(buf.asUint8List()).value;
  }

  static LiftRetVal<List<AllowRule>> read(Uint8List buf) {
    List<AllowRule> res = [];
    final length =
        buf.buffer.asByteData().getInt32(buf.offsetInBytes, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < length; i++) {
      final ret =
          FfiConverterAllowRule.read(Uint8List.view(buf.buffer, offset));
      offset += ret.bytesRead;
      res.add(ret.value);
    }
    return LiftRetVal(res, offset - buf.offsetInBytes);
  }

  static int write(List<AllowRule> value, Uint8List buf) {
    buf.buffer
        .asByteData()
        .setInt32(buf.offsetInBytes, value.length, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < value.length; i++) {
      offset += FfiConverterAllowRule.write(
          value[i], Uint8List.view(buf.buffer, offset));
    }
    return offset - buf.offsetInBytes;
  }

  static int allocationSize(List<AllowRule> value) {
    int total = 4;
    for (var item in value) {
      total += FfiConverterAllowRule.allocationSize(item);
    }
    return total;
  }

  static RustBuffer lower(List<AllowRule> value) {
    final buf = Uint8List(allocationSize(value));
    write(value, buf);
    return toRustBuffer(buf);
  }
}

class FfiConverterOptionalMapStringInt64 {
  static Map<String, int>? lift(RustBuffer buf) {
    return FfiConverterOptionalMapStringInt64.read(buf.asUint8List()).value;
  }

  static LiftRetVal<Map<String, int>?> read(Uint8List buf) {
    if (ByteData.view(buf.buffer, buf.offsetInBytes).getInt8(0) == 0) {
      return LiftRetVal(null, 1);
    }
    final result = FfiConverterMapStringInt64.read(
        Uint8List.view(buf.buffer, buf.offsetInBytes + 1));
    return LiftRetVal<Map<String, int>?>(result.value, result.bytesRead + 1);
  }

  static int allocationSize([Map<String, int>? value]) {
    if (value == null) {
      return 1;
    }
    return FfiConverterMapStringInt64.allocationSize(value) + 1;
  }

  static RustBuffer lower(Map<String, int>? value) {
    if (value == null) {
      return toRustBuffer(Uint8List.fromList([0]));
    }

    final length = FfiConverterOptionalMapStringInt64.allocationSize(value);

    final Pointer<Uint8> frameData = calloc<Uint8>(length);
    final buf = frameData.asTypedList(length);

    FfiConverterOptionalMapStringInt64.write(value, buf);

    final bytes = calloc<ForeignBytes>();
    bytes.ref.len = length;
    bytes.ref.data = frameData;
    return RustBuffer.fromBytes(bytes.ref);
  }

  static int write(Map<String, int>? value, Uint8List buf) {
    if (value == null) {
      buf[0] = 0;
      return 1;
    }

    buf[0] = 1;

    return FfiConverterMapStringInt64.write(
            value, Uint8List.view(buf.buffer, buf.offsetInBytes + 1)) +
        1;
  }
}

abstract class ClientSessionDelegate {
  Session retrieveSessionFromKeychain(
    String userId,
  );
  void saveSessionInKeychain(
    Session session,
  );
}

class FfiConverterCallbackInterfaceClientSessionDelegate {
  static final _handleMap = UniffiHandleMap<ClientSessionDelegate>();
  static bool _vtableInitialized = false;

  static ClientSessionDelegate lift(int handle) {
    return _handleMap.get(handle);
  }

  static int lower(ClientSessionDelegate value) {
    _ensureVTableInitialized();
    return _handleMap.insert(value);
  }

  static void _ensureVTableInitialized() {
    if (!_vtableInitialized) {
      initClientSessionDelegateVTable();
      _vtableInitialized = true;
    }
  }

  static LiftRetVal<ClientSessionDelegate> read(Uint8List buf) {
    final handle = buf.buffer.asByteData(buf.offsetInBytes).getInt64(0);
    return LiftRetVal(lift(handle), 8);
  }

  static int write(ClientSessionDelegate value, Uint8List buf) {
    final handle = lower(value);
    buf.buffer.asByteData(buf.offsetInBytes).setInt64(0, handle);
    return 8;
  }

  static int allocationSize(ClientSessionDelegate value) {
    return 8;
  }
}

typedef UniffiCallbackInterfaceClientSessionDelegateMethod0 = Void Function(
    Uint64, RustBuffer, Pointer<RustBuffer>, Pointer<RustCallStatus>);
typedef UniffiCallbackInterfaceClientSessionDelegateMethod0Dart = void Function(
    int, RustBuffer, Pointer<RustBuffer>, Pointer<RustCallStatus>);
typedef UniffiCallbackInterfaceClientSessionDelegateMethod1 = Void Function(
    Uint64, RustBuffer, Pointer<Void>, Pointer<RustCallStatus>);
typedef UniffiCallbackInterfaceClientSessionDelegateMethod1Dart = void Function(
    int, RustBuffer, Pointer<Void>, Pointer<RustCallStatus>);
typedef UniffiCallbackInterfaceClientSessionDelegateFree = Void Function(
    Uint64);
typedef UniffiCallbackInterfaceClientSessionDelegateFreeDart = void Function(
    int);

final class UniffiVTableCallbackInterfaceClientSessionDelegate extends Struct {
  external Pointer<
          NativeFunction<UniffiCallbackInterfaceClientSessionDelegateMethod0>>
      retrieveSessionFromKeychain;
  external Pointer<
          NativeFunction<UniffiCallbackInterfaceClientSessionDelegateMethod1>>
      saveSessionInKeychain;
  external Pointer<
          NativeFunction<UniffiCallbackInterfaceClientSessionDelegateFree>>
      uniffiFree;
}

void clientSessionDelegateRetrieveSessionFromKeychain(
    int uniffiHandle,
    RustBuffer userIdBuffer,
    Pointer<RustBuffer> outReturn,
    Pointer<RustCallStatus> callStatus) {
  final status = callStatus.ref;
  try {
    final obj = FfiConverterCallbackInterfaceClientSessionDelegate._handleMap
        .get(uniffiHandle);
    final arg0 = FfiConverterString.lift(userIdBuffer);
    final result = obj.retrieveSessionFromKeychain(
      arg0,
    );
    outReturn.ref = FfiConverterSession.lower(result);
  } catch (e) {
    status.code = CALL_UNEXPECTED_ERROR;
    status.errorBuf = FfiConverterString.lower(e.toString());
  }
}

final NativeCallable<UniffiCallbackInterfaceClientSessionDelegateMethod0>
    clientSessionDelegateRetrieveSessionFromKeychainNativeCallable =
    NativeCallable<
            UniffiCallbackInterfaceClientSessionDelegateMethod0>.listener(
        clientSessionDelegateRetrieveSessionFromKeychain);
void clientSessionDelegateSaveSessionInKeychain(
    int uniffiHandle,
    RustBuffer session,
    Pointer<Void> outReturn,
    Pointer<RustCallStatus> callStatus) {
  final status = callStatus.ref;
  try {
    final obj = FfiConverterCallbackInterfaceClientSessionDelegate._handleMap
        .get(uniffiHandle);
    final arg0 = FfiConverterSession.lift(session);
    obj.saveSessionInKeychain(
      arg0,
    );
    status.code = CALL_SUCCESS;
  } catch (e) {
    status.code = CALL_UNEXPECTED_ERROR;
    status.errorBuf = FfiConverterString.lower(e.toString());
  }
}

final NativeCallable<UniffiCallbackInterfaceClientSessionDelegateMethod1>
    clientSessionDelegateSaveSessionInKeychainNativeCallable = NativeCallable<
            UniffiCallbackInterfaceClientSessionDelegateMethod1>.listener(
        clientSessionDelegateSaveSessionInKeychain);

void clientSessionDelegateFreeCallback(int handle) {
  try {
    FfiConverterCallbackInterfaceClientSessionDelegate._handleMap
        .remove(handle);
  } catch (e) {}
}

final Pointer<NativeFunction<UniffiCallbackInterfaceClientSessionDelegateFree>>
    clientSessionDelegateFreePointer =
    Pointer.fromFunction<UniffiCallbackInterfaceClientSessionDelegateFree>(
        clientSessionDelegateFreeCallback);
late final Pointer<UniffiVTableCallbackInterfaceClientSessionDelegate>
    clientSessionDelegateVTable;

void initClientSessionDelegateVTable() {
  if (FfiConverterCallbackInterfaceClientSessionDelegate._vtableInitialized) {
    return;
  }

  clientSessionDelegateVTable =
      calloc<UniffiVTableCallbackInterfaceClientSessionDelegate>();
  clientSessionDelegateVTable.ref.retrieveSessionFromKeychain =
      clientSessionDelegateRetrieveSessionFromKeychainNativeCallable
          .nativeFunction;
  clientSessionDelegateVTable.ref.saveSessionInKeychain =
      clientSessionDelegateSaveSessionInKeychainNativeCallable.nativeFunction;
  clientSessionDelegateVTable.ref.uniffiFree = clientSessionDelegateFreePointer;

  rustCall((status) {
    _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_init_callback_vtable_clientsessiondelegate(
      clientSessionDelegateVTable,
    );
    checkCallStatus(NullRustCallStatusErrorHandler(), status);
  });

  FfiConverterCallbackInterfaceClientSessionDelegate._vtableInitialized = true;
}

class FfiConverterSequenceRoomListEntriesUpdate {
  static List<RoomListEntriesUpdate> lift(RustBuffer buf) {
    return FfiConverterSequenceRoomListEntriesUpdate.read(buf.asUint8List())
        .value;
  }

  static LiftRetVal<List<RoomListEntriesUpdate>> read(Uint8List buf) {
    List<RoomListEntriesUpdate> res = [];
    final length =
        buf.buffer.asByteData().getInt32(buf.offsetInBytes, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < length; i++) {
      final ret = FfiConverterRoomListEntriesUpdate.read(
          Uint8List.view(buf.buffer, offset));
      offset += ret.bytesRead;
      res.add(ret.value);
    }
    return LiftRetVal(res, offset - buf.offsetInBytes);
  }

  static int write(List<RoomListEntriesUpdate> value, Uint8List buf) {
    buf.buffer
        .asByteData()
        .setInt32(buf.offsetInBytes, value.length, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < value.length; i++) {
      offset += FfiConverterRoomListEntriesUpdate.write(
          value[i], Uint8List.view(buf.buffer, offset));
    }
    return offset - buf.offsetInBytes;
  }

  static int allocationSize(List<RoomListEntriesUpdate> value) {
    int total = 4;
    for (var item in value) {
      total += FfiConverterRoomListEntriesUpdate.allocationSize(item);
    }
    return total;
  }

  static RustBuffer lower(List<RoomListEntriesUpdate> value) {
    final buf = Uint8List(allocationSize(value));
    write(value, buf);
    return toRustBuffer(buf);
  }
}

class FfiConverterOptionalRoomNotificationMode {
  static RoomNotificationMode? lift(RustBuffer buf) {
    return FfiConverterOptionalRoomNotificationMode.read(buf.asUint8List())
        .value;
  }

  static LiftRetVal<RoomNotificationMode?> read(Uint8List buf) {
    if (ByteData.view(buf.buffer, buf.offsetInBytes).getInt8(0) == 0) {
      return LiftRetVal(null, 1);
    }
    final result = FfiConverterRoomNotificationMode.read(
        Uint8List.view(buf.buffer, buf.offsetInBytes + 1));
    return LiftRetVal<RoomNotificationMode?>(
        result.value, result.bytesRead + 1);
  }

  static int allocationSize([RoomNotificationMode? value]) {
    if (value == null) {
      return 1;
    }
    return FfiConverterRoomNotificationMode.allocationSize(value) + 1;
  }

  static RustBuffer lower(RoomNotificationMode? value) {
    if (value == null) {
      return toRustBuffer(Uint8List.fromList([0]));
    }

    final length =
        FfiConverterOptionalRoomNotificationMode.allocationSize(value);

    final Pointer<Uint8> frameData = calloc<Uint8>(length);
    final buf = frameData.asTypedList(length);

    FfiConverterOptionalRoomNotificationMode.write(value, buf);

    final bytes = calloc<ForeignBytes>();
    bytes.ref.len = length;
    bytes.ref.data = frameData;
    return RustBuffer.fromBytes(bytes.ref);
  }

  static int write(RoomNotificationMode? value, Uint8List buf) {
    if (value == null) {
      buf[0] = 0;
      return 1;
    }

    buf[0] = 1;

    return FfiConverterRoomNotificationMode.write(
            value, Uint8List.view(buf.buffer, buf.offsetInBytes + 1)) +
        1;
  }
}

class FfiConverterOptionalMediaPreviewConfig {
  static MediaPreviewConfig? lift(RustBuffer buf) {
    return FfiConverterOptionalMediaPreviewConfig.read(buf.asUint8List()).value;
  }

  static LiftRetVal<MediaPreviewConfig?> read(Uint8List buf) {
    if (ByteData.view(buf.buffer, buf.offsetInBytes).getInt8(0) == 0) {
      return LiftRetVal(null, 1);
    }
    final result = FfiConverterMediaPreviewConfig.read(
        Uint8List.view(buf.buffer, buf.offsetInBytes + 1));
    return LiftRetVal<MediaPreviewConfig?>(result.value, result.bytesRead + 1);
  }

  static int allocationSize([MediaPreviewConfig? value]) {
    if (value == null) {
      return 1;
    }
    return FfiConverterMediaPreviewConfig.allocationSize(value) + 1;
  }

  static RustBuffer lower(MediaPreviewConfig? value) {
    if (value == null) {
      return toRustBuffer(Uint8List.fromList([0]));
    }

    final length = FfiConverterOptionalMediaPreviewConfig.allocationSize(value);

    final Pointer<Uint8> frameData = calloc<Uint8>(length);
    final buf = frameData.asTypedList(length);

    FfiConverterOptionalMediaPreviewConfig.write(value, buf);

    final bytes = calloc<ForeignBytes>();
    bytes.ref.len = length;
    bytes.ref.data = frameData;
    return RustBuffer.fromBytes(bytes.ref);
  }

  static int write(MediaPreviewConfig? value, Uint8List buf) {
    if (value == null) {
      buf[0] = 0;
      return 1;
    }

    buf[0] = 1;

    return FfiConverterMediaPreviewConfig.write(
            value, Uint8List.view(buf.buffer, buf.offsetInBytes + 1)) +
        1;
  }
}

class FfiConverterOptionalAuthData {
  static AuthData? lift(RustBuffer buf) {
    return FfiConverterOptionalAuthData.read(buf.asUint8List()).value;
  }

  static LiftRetVal<AuthData?> read(Uint8List buf) {
    if (ByteData.view(buf.buffer, buf.offsetInBytes).getInt8(0) == 0) {
      return LiftRetVal(null, 1);
    }
    final result = FfiConverterAuthData.read(
        Uint8List.view(buf.buffer, buf.offsetInBytes + 1));
    return LiftRetVal<AuthData?>(result.value, result.bytesRead + 1);
  }

  static int allocationSize([AuthData? value]) {
    if (value == null) {
      return 1;
    }
    return FfiConverterAuthData.allocationSize(value) + 1;
  }

  static RustBuffer lower(AuthData? value) {
    if (value == null) {
      return toRustBuffer(Uint8List.fromList([0]));
    }

    final length = FfiConverterOptionalAuthData.allocationSize(value);

    final Pointer<Uint8> frameData = calloc<Uint8>(length);
    final buf = frameData.asTypedList(length);

    FfiConverterOptionalAuthData.write(value, buf);

    final bytes = calloc<ForeignBytes>();
    bytes.ref.len = length;
    bytes.ref.data = frameData;
    return RustBuffer.fromBytes(bytes.ref);
  }

  static int write(AuthData? value, Uint8List buf) {
    if (value == null) {
      buf[0] = 0;
      return 1;
    }

    buf[0] = 1;

    return FfiConverterAuthData.write(
            value, Uint8List.view(buf.buffer, buf.offsetInBytes + 1)) +
        1;
  }
}

class FfiConverterOptionalPredecessorRoom {
  static PredecessorRoom? lift(RustBuffer buf) {
    return FfiConverterOptionalPredecessorRoom.read(buf.asUint8List()).value;
  }

  static LiftRetVal<PredecessorRoom?> read(Uint8List buf) {
    if (ByteData.view(buf.buffer, buf.offsetInBytes).getInt8(0) == 0) {
      return LiftRetVal(null, 1);
    }
    final result = FfiConverterPredecessorRoom.read(
        Uint8List.view(buf.buffer, buf.offsetInBytes + 1));
    return LiftRetVal<PredecessorRoom?>(result.value, result.bytesRead + 1);
  }

  static int allocationSize([PredecessorRoom? value]) {
    if (value == null) {
      return 1;
    }
    return FfiConverterPredecessorRoom.allocationSize(value) + 1;
  }

  static RustBuffer lower(PredecessorRoom? value) {
    if (value == null) {
      return toRustBuffer(Uint8List.fromList([0]));
    }

    final length = FfiConverterOptionalPredecessorRoom.allocationSize(value);

    final Pointer<Uint8> frameData = calloc<Uint8>(length);
    final buf = frameData.asTypedList(length);

    FfiConverterOptionalPredecessorRoom.write(value, buf);

    final bytes = calloc<ForeignBytes>();
    bytes.ref.len = length;
    bytes.ref.data = frameData;
    return RustBuffer.fromBytes(bytes.ref);
  }

  static int write(PredecessorRoom? value, Uint8List buf) {
    if (value == null) {
      buf[0] = 0;
      return 1;
    }

    buf[0] = 1;

    return FfiConverterPredecessorRoom.write(
            value, Uint8List.view(buf.buffer, buf.offsetInBytes + 1)) +
        1;
  }
}

abstract class WidgetCapabilitiesProvider {
  WidgetCapabilities acquireCapabilities(
    WidgetCapabilities capabilities,
  );
}

class FfiConverterCallbackInterfaceWidgetCapabilitiesProvider {
  static final _handleMap = UniffiHandleMap<WidgetCapabilitiesProvider>();
  static bool _vtableInitialized = false;

  static WidgetCapabilitiesProvider lift(int handle) {
    return _handleMap.get(handle);
  }

  static int lower(WidgetCapabilitiesProvider value) {
    _ensureVTableInitialized();
    return _handleMap.insert(value);
  }

  static void _ensureVTableInitialized() {
    if (!_vtableInitialized) {
      initWidgetCapabilitiesProviderVTable();
      _vtableInitialized = true;
    }
  }

  static LiftRetVal<WidgetCapabilitiesProvider> read(Uint8List buf) {
    final handle = buf.buffer.asByteData(buf.offsetInBytes).getInt64(0);
    return LiftRetVal(lift(handle), 8);
  }

  static int write(WidgetCapabilitiesProvider value, Uint8List buf) {
    final handle = lower(value);
    buf.buffer.asByteData(buf.offsetInBytes).setInt64(0, handle);
    return 8;
  }

  static int allocationSize(WidgetCapabilitiesProvider value) {
    return 8;
  }
}

typedef UniffiCallbackInterfaceWidgetCapabilitiesProviderMethod0 = Void
    Function(Uint64, RustBuffer, Pointer<RustBuffer>, Pointer<RustCallStatus>);
typedef UniffiCallbackInterfaceWidgetCapabilitiesProviderMethod0Dart = void
    Function(int, RustBuffer, Pointer<RustBuffer>, Pointer<RustCallStatus>);
typedef UniffiCallbackInterfaceWidgetCapabilitiesProviderFree = Void Function(
    Uint64);
typedef UniffiCallbackInterfaceWidgetCapabilitiesProviderFreeDart = void
    Function(int);

final class UniffiVTableCallbackInterfaceWidgetCapabilitiesProvider
    extends Struct {
  external Pointer<
          NativeFunction<
              UniffiCallbackInterfaceWidgetCapabilitiesProviderMethod0>>
      acquireCapabilities;
  external Pointer<
          NativeFunction<UniffiCallbackInterfaceWidgetCapabilitiesProviderFree>>
      uniffiFree;
}

void widgetCapabilitiesProviderAcquireCapabilities(
    int uniffiHandle,
    RustBuffer capabilities,
    Pointer<RustBuffer> outReturn,
    Pointer<RustCallStatus> callStatus) {
  final status = callStatus.ref;
  try {
    final obj = FfiConverterCallbackInterfaceWidgetCapabilitiesProvider
        ._handleMap
        .get(uniffiHandle);
    final arg0 = FfiConverterWidgetCapabilities.lift(capabilities);
    final result = obj.acquireCapabilities(
      arg0,
    );
    outReturn.ref = FfiConverterWidgetCapabilities.lower(result);
  } catch (e) {
    status.code = CALL_UNEXPECTED_ERROR;
    status.errorBuf = FfiConverterString.lower(e.toString());
  }
}

final NativeCallable<UniffiCallbackInterfaceWidgetCapabilitiesProviderMethod0>
    widgetCapabilitiesProviderAcquireCapabilitiesNativeCallable =
    NativeCallable<
            UniffiCallbackInterfaceWidgetCapabilitiesProviderMethod0>.listener(
        widgetCapabilitiesProviderAcquireCapabilities);

void widgetCapabilitiesProviderFreeCallback(int handle) {
  try {
    FfiConverterCallbackInterfaceWidgetCapabilitiesProvider._handleMap
        .remove(handle);
  } catch (e) {}
}

final Pointer<
        NativeFunction<UniffiCallbackInterfaceWidgetCapabilitiesProviderFree>>
    widgetCapabilitiesProviderFreePointer =
    Pointer.fromFunction<UniffiCallbackInterfaceWidgetCapabilitiesProviderFree>(
        widgetCapabilitiesProviderFreeCallback);
late final Pointer<UniffiVTableCallbackInterfaceWidgetCapabilitiesProvider>
    widgetCapabilitiesProviderVTable;

void initWidgetCapabilitiesProviderVTable() {
  if (FfiConverterCallbackInterfaceWidgetCapabilitiesProvider
      ._vtableInitialized) {
    return;
  }

  widgetCapabilitiesProviderVTable =
      calloc<UniffiVTableCallbackInterfaceWidgetCapabilitiesProvider>();
  widgetCapabilitiesProviderVTable.ref.acquireCapabilities =
      widgetCapabilitiesProviderAcquireCapabilitiesNativeCallable
          .nativeFunction;
  widgetCapabilitiesProviderVTable.ref.uniffiFree =
      widgetCapabilitiesProviderFreePointer;

  rustCall((status) {
    _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_init_callback_vtable_widgetcapabilitiesprovider(
      widgetCapabilitiesProviderVTable,
    );
    checkCallStatus(NullRustCallStatusErrorHandler(), status);
  });

  FfiConverterCallbackInterfaceWidgetCapabilitiesProvider._vtableInitialized =
      true;
}

class FfiConverterSequenceRoomMember {
  static List<RoomMember> lift(RustBuffer buf) {
    return FfiConverterSequenceRoomMember.read(buf.asUint8List()).value;
  }

  static LiftRetVal<List<RoomMember>> read(Uint8List buf) {
    List<RoomMember> res = [];
    final length =
        buf.buffer.asByteData().getInt32(buf.offsetInBytes, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < length; i++) {
      final ret =
          FfiConverterRoomMember.read(Uint8List.view(buf.buffer, offset));
      offset += ret.bytesRead;
      res.add(ret.value);
    }
    return LiftRetVal(res, offset - buf.offsetInBytes);
  }

  static int write(List<RoomMember> value, Uint8List buf) {
    buf.buffer
        .asByteData()
        .setInt32(buf.offsetInBytes, value.length, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < value.length; i++) {
      offset += FfiConverterRoomMember.write(
          value[i], Uint8List.view(buf.buffer, offset));
    }
    return offset - buf.offsetInBytes;
  }

  static int allocationSize(List<RoomMember> value) {
    int total = 4;
    for (var item in value) {
      total += FfiConverterRoomMember.allocationSize(item);
    }
    return total;
  }

  static RustBuffer lower(List<RoomMember> value) {
    final buf = Uint8List(allocationSize(value));
    write(value, buf);
    return toRustBuffer(buf);
  }
}

class FfiConverterOptionalSyncService {
  static SyncService? lift(RustBuffer buf) {
    return FfiConverterOptionalSyncService.read(buf.asUint8List()).value;
  }

  static LiftRetVal<SyncService?> read(Uint8List buf) {
    if (ByteData.view(buf.buffer, buf.offsetInBytes).getInt8(0) == 0) {
      return LiftRetVal(null, 1);
    }
    final result =
        SyncService.read(Uint8List.view(buf.buffer, buf.offsetInBytes + 1));
    return LiftRetVal<SyncService?>(result.value, result.bytesRead + 1);
  }

  static int allocationSize([SyncService? value]) {
    if (value == null) {
      return 1;
    }
    return SyncService.allocationSize(value) + 1;
  }

  static RustBuffer lower(SyncService? value) {
    if (value == null) {
      return toRustBuffer(Uint8List.fromList([0]));
    }

    final length = FfiConverterOptionalSyncService.allocationSize(value);

    final Pointer<Uint8> frameData = calloc<Uint8>(length);
    final buf = frameData.asTypedList(length);

    FfiConverterOptionalSyncService.write(value, buf);

    final bytes = calloc<ForeignBytes>();
    bytes.ref.len = length;
    bytes.ref.data = frameData;
    return RustBuffer.fromBytes(bytes.ref);
  }

  static int write(SyncService? value, Uint8List buf) {
    if (value == null) {
      buf[0] = 0;
      return 1;
    }

    buf[0] = 1;

    return SyncService.write(
            value, Uint8List.view(buf.buffer, buf.offsetInBytes + 1)) +
        1;
  }
}

class FfiConverterSequencePatternedPushRule {
  static List<PatternedPushRule> lift(RustBuffer buf) {
    return FfiConverterSequencePatternedPushRule.read(buf.asUint8List()).value;
  }

  static LiftRetVal<List<PatternedPushRule>> read(Uint8List buf) {
    List<PatternedPushRule> res = [];
    final length =
        buf.buffer.asByteData().getInt32(buf.offsetInBytes, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < length; i++) {
      final ret = FfiConverterPatternedPushRule.read(
          Uint8List.view(buf.buffer, offset));
      offset += ret.bytesRead;
      res.add(ret.value);
    }
    return LiftRetVal(res, offset - buf.offsetInBytes);
  }

  static int write(List<PatternedPushRule> value, Uint8List buf) {
    buf.buffer
        .asByteData()
        .setInt32(buf.offsetInBytes, value.length, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < value.length; i++) {
      offset += FfiConverterPatternedPushRule.write(
          value[i], Uint8List.view(buf.buffer, offset));
    }
    return offset - buf.offsetInBytes;
  }

  static int allocationSize(List<PatternedPushRule> value) {
    int total = 4;
    for (var item in value) {
      total += FfiConverterPatternedPushRule.allocationSize(item);
    }
    return total;
  }

  static RustBuffer lower(List<PatternedPushRule> value) {
    final buf = Uint8List(allocationSize(value));
    write(value, buf);
    return toRustBuffer(buf);
  }
}

class FfiConverterOptionalPassPhrase {
  static PassPhrase? lift(RustBuffer buf) {
    return FfiConverterOptionalPassPhrase.read(buf.asUint8List()).value;
  }

  static LiftRetVal<PassPhrase?> read(Uint8List buf) {
    if (ByteData.view(buf.buffer, buf.offsetInBytes).getInt8(0) == 0) {
      return LiftRetVal(null, 1);
    }
    final result = FfiConverterPassPhrase.read(
        Uint8List.view(buf.buffer, buf.offsetInBytes + 1));
    return LiftRetVal<PassPhrase?>(result.value, result.bytesRead + 1);
  }

  static int allocationSize([PassPhrase? value]) {
    if (value == null) {
      return 1;
    }
    return FfiConverterPassPhrase.allocationSize(value) + 1;
  }

  static RustBuffer lower(PassPhrase? value) {
    if (value == null) {
      return toRustBuffer(Uint8List.fromList([0]));
    }

    final length = FfiConverterOptionalPassPhrase.allocationSize(value);

    final Pointer<Uint8> frameData = calloc<Uint8>(length);
    final buf = frameData.asTypedList(length);

    FfiConverterOptionalPassPhrase.write(value, buf);

    final bytes = calloc<ForeignBytes>();
    bytes.ref.len = length;
    bytes.ref.data = frameData;
    return RustBuffer.fromBytes(bytes.ref);
  }

  static int write(PassPhrase? value, Uint8List buf) {
    if (value == null) {
      buf[0] = 0;
      return 1;
    }

    buf[0] = 1;

    return FfiConverterPassPhrase.write(
            value, Uint8List.view(buf.buffer, buf.offsetInBytes + 1)) +
        1;
  }
}

class FfiConverterOptionalSequenceString {
  static List<String>? lift(RustBuffer buf) {
    return FfiConverterOptionalSequenceString.read(buf.asUint8List()).value;
  }

  static LiftRetVal<List<String>?> read(Uint8List buf) {
    if (ByteData.view(buf.buffer, buf.offsetInBytes).getInt8(0) == 0) {
      return LiftRetVal(null, 1);
    }
    final result = FfiConverterSequenceString.read(
        Uint8List.view(buf.buffer, buf.offsetInBytes + 1));
    return LiftRetVal<List<String>?>(result.value, result.bytesRead + 1);
  }

  static int allocationSize([List<String>? value]) {
    if (value == null) {
      return 1;
    }
    return FfiConverterSequenceString.allocationSize(value) + 1;
  }

  static RustBuffer lower(List<String>? value) {
    if (value == null) {
      return toRustBuffer(Uint8List.fromList([0]));
    }

    final length = FfiConverterOptionalSequenceString.allocationSize(value);

    final Pointer<Uint8> frameData = calloc<Uint8>(length);
    final buf = frameData.asTypedList(length);

    FfiConverterOptionalSequenceString.write(value, buf);

    final bytes = calloc<ForeignBytes>();
    bytes.ref.len = length;
    bytes.ref.data = frameData;
    return RustBuffer.fromBytes(bytes.ref);
  }

  static int write(List<String>? value, Uint8List buf) {
    if (value == null) {
      buf[0] = 0;
      return 1;
    }

    buf[0] = 1;

    return FfiConverterSequenceString.write(
            value, Uint8List.view(buf.buffer, buf.offsetInBytes + 1)) +
        1;
  }
}

class FfiConverterOptionalInt32 {
  static int? lift(RustBuffer buf) {
    return FfiConverterOptionalInt32.read(buf.asUint8List()).value;
  }

  static LiftRetVal<int?> read(Uint8List buf) {
    if (ByteData.view(buf.buffer, buf.offsetInBytes).getInt8(0) == 0) {
      return LiftRetVal(null, 1);
    }
    final result = FfiConverterInt32.read(
        Uint8List.view(buf.buffer, buf.offsetInBytes + 1));
    return LiftRetVal<int?>(result.value, result.bytesRead + 1);
  }

  static int allocationSize([int? value]) {
    if (value == null) {
      return 1;
    }
    return FfiConverterInt32.allocationSize(value) + 1;
  }

  static RustBuffer lower(int? value) {
    if (value == null) {
      return toRustBuffer(Uint8List.fromList([0]));
    }

    final length = FfiConverterOptionalInt32.allocationSize(value);

    final Pointer<Uint8> frameData = calloc<Uint8>(length);
    final buf = frameData.asTypedList(length);

    FfiConverterOptionalInt32.write(value, buf);

    final bytes = calloc<ForeignBytes>();
    bytes.ref.len = length;
    bytes.ref.data = frameData;
    return RustBuffer.fromBytes(bytes.ref);
  }

  static int write(int? value, Uint8List buf) {
    if (value == null) {
      buf[0] = 0;
      return 1;
    }

    buf[0] = 1;

    return FfiConverterInt32.write(
            value, Uint8List.view(buf.buffer, buf.offsetInBytes + 1)) +
        1;
  }
}

class FfiConverterSequenceAction {
  static List<Action> lift(RustBuffer buf) {
    return FfiConverterSequenceAction.read(buf.asUint8List()).value;
  }

  static LiftRetVal<List<Action>> read(Uint8List buf) {
    List<Action> res = [];
    final length =
        buf.buffer.asByteData().getInt32(buf.offsetInBytes, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < length; i++) {
      final ret = FfiConverterAction.read(Uint8List.view(buf.buffer, offset));
      offset += ret.bytesRead;
      res.add(ret.value);
    }
    return LiftRetVal(res, offset - buf.offsetInBytes);
  }

  static int write(List<Action> value, Uint8List buf) {
    buf.buffer
        .asByteData()
        .setInt32(buf.offsetInBytes, value.length, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < value.length; i++) {
      offset += FfiConverterAction.write(
          value[i], Uint8List.view(buf.buffer, offset));
    }
    return offset - buf.offsetInBytes;
  }

  static int allocationSize(List<Action> value) {
    int total = 4;
    for (var item in value) {
      total += FfiConverterAction.allocationSize(item);
    }
    return total;
  }

  static RustBuffer lower(List<Action> value) {
    final buf = Uint8List(allocationSize(value));
    write(value, buf);
    return toRustBuffer(buf);
  }
}

class FfiConverterMapStringReceipt {
  static Map<String, Receipt> lift(RustBuffer buf) {
    return FfiConverterMapStringReceipt.read(buf.asUint8List()).value;
  }

  static LiftRetVal<Map<String, Receipt>> read(Uint8List buf) {
    Map<String, Receipt> res = {};
    final length =
        buf.buffer.asByteData().getInt32(buf.offsetInBytes, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < length; i++) {
      final k = FfiConverterString.read(Uint8List.view(buf.buffer, offset));
      offset += k.bytesRead;
      final v = FfiConverterReceipt.read(Uint8List.view(buf.buffer, offset));
      offset += v.bytesRead;
      res[k.value] = v.value;
    }
    return LiftRetVal(res, offset - buf.offsetInBytes);
  }

  static int write(Map<String, Receipt> value, Uint8List buf) {
    buf.buffer
        .asByteData()
        .setInt32(buf.offsetInBytes, value.length, Endian.little);
    int offset = buf.offsetInBytes + 4;
    value.forEach((k, v) {
      offset += FfiConverterString.write(k, Uint8List.view(buf.buffer, offset));
      offset +=
          FfiConverterReceipt.write(v, Uint8List.view(buf.buffer, offset));
    });
    return offset - buf.offsetInBytes;
  }

  static int allocationSize(Map<String, Receipt> value) {
    int total = 4;
    value.forEach((k, v) {
      total += FfiConverterString.allocationSize(k);
      total += FfiConverterReceipt.allocationSize(v);
    });
    return total;
  }

  static RustBuffer lower(Map<String, Receipt> value) {
    final buf = Uint8List(allocationSize(value));
    write(value, buf);
    return toRustBuffer(buf);
  }
}

class FfiConverterOptionalImageInfo {
  static ImageInfo? lift(RustBuffer buf) {
    return FfiConverterOptionalImageInfo.read(buf.asUint8List()).value;
  }

  static LiftRetVal<ImageInfo?> read(Uint8List buf) {
    if (ByteData.view(buf.buffer, buf.offsetInBytes).getInt8(0) == 0) {
      return LiftRetVal(null, 1);
    }
    final result = FfiConverterImageInfo.read(
        Uint8List.view(buf.buffer, buf.offsetInBytes + 1));
    return LiftRetVal<ImageInfo?>(result.value, result.bytesRead + 1);
  }

  static int allocationSize([ImageInfo? value]) {
    if (value == null) {
      return 1;
    }
    return FfiConverterImageInfo.allocationSize(value) + 1;
  }

  static RustBuffer lower(ImageInfo? value) {
    if (value == null) {
      return toRustBuffer(Uint8List.fromList([0]));
    }

    final length = FfiConverterOptionalImageInfo.allocationSize(value);

    final Pointer<Uint8> frameData = calloc<Uint8>(length);
    final buf = frameData.asTypedList(length);

    FfiConverterOptionalImageInfo.write(value, buf);

    final bytes = calloc<ForeignBytes>();
    bytes.ref.len = length;
    bytes.ref.data = frameData;
    return RustBuffer.fromBytes(bytes.ref);
  }

  static int write(ImageInfo? value, Uint8List buf) {
    if (value == null) {
      buf[0] = 0;
      return 1;
    }

    buf[0] = 1;

    return FfiConverterImageInfo.write(
            value, Uint8List.view(buf.buffer, buf.offsetInBytes + 1)) +
        1;
  }
}

class FfiConverterOptionalEventItemOrigin {
  static EventItemOrigin? lift(RustBuffer buf) {
    return FfiConverterOptionalEventItemOrigin.read(buf.asUint8List()).value;
  }

  static LiftRetVal<EventItemOrigin?> read(Uint8List buf) {
    if (ByteData.view(buf.buffer, buf.offsetInBytes).getInt8(0) == 0) {
      return LiftRetVal(null, 1);
    }
    final result = FfiConverterEventItemOrigin.read(
        Uint8List.view(buf.buffer, buf.offsetInBytes + 1));
    return LiftRetVal<EventItemOrigin?>(result.value, result.bytesRead + 1);
  }

  static int allocationSize([EventItemOrigin? value]) {
    if (value == null) {
      return 1;
    }
    return FfiConverterEventItemOrigin.allocationSize(value) + 1;
  }

  static RustBuffer lower(EventItemOrigin? value) {
    if (value == null) {
      return toRustBuffer(Uint8List.fromList([0]));
    }

    final length = FfiConverterOptionalEventItemOrigin.allocationSize(value);

    final Pointer<Uint8> frameData = calloc<Uint8>(length);
    final buf = frameData.asTypedList(length);

    FfiConverterOptionalEventItemOrigin.write(value, buf);

    final bytes = calloc<ForeignBytes>();
    bytes.ref.len = length;
    bytes.ref.data = frameData;
    return RustBuffer.fromBytes(bytes.ref);
  }

  static int write(EventItemOrigin? value, Uint8List buf) {
    if (value == null) {
      buf[0] = 0;
      return 1;
    }

    buf[0] = 1;

    return FfiConverterEventItemOrigin.write(
            value, Uint8List.view(buf.buffer, buf.offsetInBytes + 1)) +
        1;
  }
}

class FfiConverterMapStringSequenceString {
  static Map lift(RustBuffer buf) {
    return FfiConverterMapStringSequenceString.read(buf.asUint8List()).value;
  }

  static LiftRetVal<Map> read(Uint8List buf) {
    Map res = {};
    final length =
        buf.buffer.asByteData().getInt32(buf.offsetInBytes, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < length; i++) {
      final k = FfiConverterString.read(Uint8List.view(buf.buffer, offset));
      offset += k.bytesRead;
      final v =
          FfiConverterSequenceString.read(Uint8List.view(buf.buffer, offset));
      offset += v.bytesRead;
      res[k.value] = v.value;
    }
    return LiftRetVal(res, offset - buf.offsetInBytes);
  }

  static int write(Map value, Uint8List buf) {
    buf.buffer
        .asByteData()
        .setInt32(buf.offsetInBytes, value.length, Endian.little);
    int offset = buf.offsetInBytes + 4;
    value.forEach((k, v) {
      offset += FfiConverterString.write(k, Uint8List.view(buf.buffer, offset));
      offset += FfiConverterSequenceString.write(
          v, Uint8List.view(buf.buffer, offset));
    });
    return offset - buf.offsetInBytes;
  }

  static int allocationSize(Map value) {
    int total = 4;
    value.forEach((k, v) {
      total += FfiConverterString.allocationSize(k);
      total += FfiConverterSequenceString.allocationSize(v);
    });
    return total;
  }

  static RustBuffer lower(Map value) {
    final buf = Uint8List(allocationSize(value));
    write(value, buf);
    return toRustBuffer(buf);
  }
}

abstract class RoomListEntriesListener {
  void onUpdate(
    List<RoomListEntriesUpdate> roomEntriesUpdate,
  );
}

class FfiConverterCallbackInterfaceRoomListEntriesListener {
  static final _handleMap = UniffiHandleMap<RoomListEntriesListener>();
  static bool _vtableInitialized = false;

  static RoomListEntriesListener lift(int handle) {
    return _handleMap.get(handle);
  }

  static int lower(RoomListEntriesListener value) {
    _ensureVTableInitialized();
    return _handleMap.insert(value);
  }

  static void _ensureVTableInitialized() {
    if (!_vtableInitialized) {
      initRoomListEntriesListenerVTable();
      _vtableInitialized = true;
    }
  }

  static LiftRetVal<RoomListEntriesListener> read(Uint8List buf) {
    final handle = buf.buffer.asByteData(buf.offsetInBytes).getInt64(0);
    return LiftRetVal(lift(handle), 8);
  }

  static int write(RoomListEntriesListener value, Uint8List buf) {
    final handle = lower(value);
    buf.buffer.asByteData(buf.offsetInBytes).setInt64(0, handle);
    return 8;
  }

  static int allocationSize(RoomListEntriesListener value) {
    return 8;
  }
}

typedef UniffiCallbackInterfaceRoomListEntriesListenerMethod0 = Void Function(
    Uint64, RustBuffer, Pointer<Void>, Pointer<RustCallStatus>);
typedef UniffiCallbackInterfaceRoomListEntriesListenerMethod0Dart = void
    Function(int, RustBuffer, Pointer<Void>, Pointer<RustCallStatus>);
typedef UniffiCallbackInterfaceRoomListEntriesListenerFree = Void Function(
    Uint64);
typedef UniffiCallbackInterfaceRoomListEntriesListenerFreeDart = void Function(
    int);

final class UniffiVTableCallbackInterfaceRoomListEntriesListener
    extends Struct {
  external Pointer<
          NativeFunction<UniffiCallbackInterfaceRoomListEntriesListenerMethod0>>
      onUpdate;
  external Pointer<
          NativeFunction<UniffiCallbackInterfaceRoomListEntriesListenerFree>>
      uniffiFree;
}

void roomListEntriesListenerOnUpdate(
    int uniffiHandle,
    RustBuffer roomEntriesUpdate,
    Pointer<Void> outReturn,
    Pointer<RustCallStatus> callStatus) {
  final status = callStatus.ref;
  try {
    final obj = FfiConverterCallbackInterfaceRoomListEntriesListener._handleMap
        .get(uniffiHandle);
    final arg0 =
        FfiConverterSequenceRoomListEntriesUpdate.lift(roomEntriesUpdate);
    obj.onUpdate(
      arg0,
    );
    status.code = CALL_SUCCESS;
  } catch (e) {
    status.code = CALL_UNEXPECTED_ERROR;
    status.errorBuf = FfiConverterString.lower(e.toString());
  }
}

final NativeCallable<UniffiCallbackInterfaceRoomListEntriesListenerMethod0>
    roomListEntriesListenerOnUpdateNativeCallable = NativeCallable<
            UniffiCallbackInterfaceRoomListEntriesListenerMethod0>.listener(
        roomListEntriesListenerOnUpdate);

void roomListEntriesListenerFreeCallback(int handle) {
  try {
    FfiConverterCallbackInterfaceRoomListEntriesListener._handleMap
        .remove(handle);
  } catch (e) {}
}

final Pointer<
        NativeFunction<UniffiCallbackInterfaceRoomListEntriesListenerFree>>
    roomListEntriesListenerFreePointer =
    Pointer.fromFunction<UniffiCallbackInterfaceRoomListEntriesListenerFree>(
        roomListEntriesListenerFreeCallback);
late final Pointer<UniffiVTableCallbackInterfaceRoomListEntriesListener>
    roomListEntriesListenerVTable;

void initRoomListEntriesListenerVTable() {
  if (FfiConverterCallbackInterfaceRoomListEntriesListener._vtableInitialized) {
    return;
  }

  roomListEntriesListenerVTable =
      calloc<UniffiVTableCallbackInterfaceRoomListEntriesListener>();
  roomListEntriesListenerVTable.ref.onUpdate =
      roomListEntriesListenerOnUpdateNativeCallable.nativeFunction;
  roomListEntriesListenerVTable.ref.uniffiFree =
      roomListEntriesListenerFreePointer;

  rustCall((status) {
    _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_init_callback_vtable_roomlistentrieslistener(
      roomListEntriesListenerVTable,
    );
    checkCallStatus(NullRustCallStatusErrorHandler(), status);
  });

  FfiConverterCallbackInterfaceRoomListEntriesListener._vtableInitialized =
      true;
}

abstract class RoomListServiceStateListener {
  void onUpdate(
    RoomListServiceState state,
  );
}

class FfiConverterCallbackInterfaceRoomListServiceStateListener {
  static final _handleMap = UniffiHandleMap<RoomListServiceStateListener>();
  static bool _vtableInitialized = false;

  static RoomListServiceStateListener lift(int handle) {
    return _handleMap.get(handle);
  }

  static int lower(RoomListServiceStateListener value) {
    _ensureVTableInitialized();
    return _handleMap.insert(value);
  }

  static void _ensureVTableInitialized() {
    if (!_vtableInitialized) {
      initRoomListServiceStateListenerVTable();
      _vtableInitialized = true;
    }
  }

  static LiftRetVal<RoomListServiceStateListener> read(Uint8List buf) {
    final handle = buf.buffer.asByteData(buf.offsetInBytes).getInt64(0);
    return LiftRetVal(lift(handle), 8);
  }

  static int write(RoomListServiceStateListener value, Uint8List buf) {
    final handle = lower(value);
    buf.buffer.asByteData(buf.offsetInBytes).setInt64(0, handle);
    return 8;
  }

  static int allocationSize(RoomListServiceStateListener value) {
    return 8;
  }
}

typedef UniffiCallbackInterfaceRoomListServiceStateListenerMethod0 = Void
    Function(Uint64, RustBuffer, Pointer<Void>, Pointer<RustCallStatus>);
typedef UniffiCallbackInterfaceRoomListServiceStateListenerMethod0Dart = void
    Function(int, int, Pointer<Void>, Pointer<RustCallStatus>);
typedef UniffiCallbackInterfaceRoomListServiceStateListenerFree = Void Function(
    Uint64);
typedef UniffiCallbackInterfaceRoomListServiceStateListenerFreeDart = void
    Function(int);

final class UniffiVTableCallbackInterfaceRoomListServiceStateListener
    extends Struct {
  external Pointer<
      NativeFunction<
          UniffiCallbackInterfaceRoomListServiceStateListenerMethod0>> onUpdate;
  external Pointer<
      NativeFunction<
          UniffiCallbackInterfaceRoomListServiceStateListenerFree>> uniffiFree;
}

void roomListServiceStateListenerOnUpdate(int uniffiHandle, RustBuffer state,
    Pointer<Void> outReturn, Pointer<RustCallStatus> callStatus) {
  final statusRef = callStatus.ref;
  try {
    final obj = FfiConverterCallbackInterfaceRoomListServiceStateListener
        ._handleMap
        .get(uniffiHandle);
    final arg0 = FfiConverterRoomListServiceState.lift(state);
    obj.onUpdate(
      arg0,
    );
    statusRef.code = CALL_SUCCESS;
  } catch (e) {
    statusRef.code = CALL_UNEXPECTED_ERROR;
    statusRef.errorBuf = FfiConverterString.lower(e.toString());
  }
}

final NativeCallable<UniffiCallbackInterfaceRoomListServiceStateListenerMethod0>
    roomListServiceStateListenerOnUpdateNativeCallable = NativeCallable<
            UniffiCallbackInterfaceRoomListServiceStateListenerMethod0>.listener(
        roomListServiceStateListenerOnUpdate);

void roomListServiceStateListenerFreeCallback(int handle) {
  try {
    FfiConverterCallbackInterfaceRoomListServiceStateListener._handleMap
        .remove(handle);
  } catch (e) {}
}

final Pointer<
        NativeFunction<UniffiCallbackInterfaceRoomListServiceStateListenerFree>>
    roomListServiceStateListenerFreePointer = Pointer.fromFunction<
            UniffiCallbackInterfaceRoomListServiceStateListenerFree>(
        roomListServiceStateListenerFreeCallback);
late final Pointer<UniffiVTableCallbackInterfaceRoomListServiceStateListener>
    roomListServiceStateListenerVTable;

void initRoomListServiceStateListenerVTable() {
  if (FfiConverterCallbackInterfaceRoomListServiceStateListener
      ._vtableInitialized) {
    return;
  }

  roomListServiceStateListenerVTable =
      calloc<UniffiVTableCallbackInterfaceRoomListServiceStateListener>();
  roomListServiceStateListenerVTable.ref.onUpdate =
      roomListServiceStateListenerOnUpdateNativeCallable.nativeFunction;
  roomListServiceStateListenerVTable.ref.uniffiFree =
      roomListServiceStateListenerFreePointer;

  rustCall((status) {
    _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_init_callback_vtable_roomlistservicestatelistener(
      roomListServiceStateListenerVTable,
    );
    checkCallStatus(NullRustCallStatusErrorHandler(), status);
  });

  FfiConverterCallbackInterfaceRoomListServiceStateListener._vtableInitialized =
      true;
}

class FfiConverterSequenceUint8List {
  static List<Uint8List> lift(RustBuffer buf) {
    return FfiConverterSequenceUint8List.read(buf.asUint8List()).value;
  }

  static LiftRetVal<List<Uint8List>> read(Uint8List buf) {
    List<Uint8List> res = [];
    final length =
        buf.buffer.asByteData().getInt32(buf.offsetInBytes, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < length; i++) {
      final ret =
          FfiConverterUint8List.read(Uint8List.view(buf.buffer, offset));
      offset += ret.bytesRead;
      res.add(ret.value);
    }
    return LiftRetVal(res, offset - buf.offsetInBytes);
  }

  static int write(List<Uint8List> value, Uint8List buf) {
    buf.buffer
        .asByteData()
        .setInt32(buf.offsetInBytes, value.length, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < value.length; i++) {
      offset += FfiConverterUint8List.write(
          value[i], Uint8List.view(buf.buffer, offset));
    }
    return offset - buf.offsetInBytes;
  }

  static int allocationSize(List<Uint8List> value) {
    int total = 4;
    for (var item in value) {
      total += FfiConverterUint8List.allocationSize(item);
    }
    return total;
  }

  static RustBuffer lower(List<Uint8List> value) {
    final buf = Uint8List(allocationSize(value));
    write(value, buf);
    return toRustBuffer(buf);
  }
}

class FfiConverterOptionalUnstableVoiceContent {
  static UnstableVoiceContent? lift(RustBuffer buf) {
    return FfiConverterOptionalUnstableVoiceContent.read(buf.asUint8List())
        .value;
  }

  static LiftRetVal<UnstableVoiceContent?> read(Uint8List buf) {
    if (ByteData.view(buf.buffer, buf.offsetInBytes).getInt8(0) == 0) {
      return LiftRetVal(null, 1);
    }
    final result = FfiConverterUnstableVoiceContent.read(
        Uint8List.view(buf.buffer, buf.offsetInBytes + 1));
    return LiftRetVal<UnstableVoiceContent?>(
        result.value, result.bytesRead + 1);
  }

  static int allocationSize([UnstableVoiceContent? value]) {
    if (value == null) {
      return 1;
    }
    return FfiConverterUnstableVoiceContent.allocationSize(value) + 1;
  }

  static RustBuffer lower(UnstableVoiceContent? value) {
    if (value == null) {
      return toRustBuffer(Uint8List.fromList([0]));
    }

    final length =
        FfiConverterOptionalUnstableVoiceContent.allocationSize(value);

    final Pointer<Uint8> frameData = calloc<Uint8>(length);
    final buf = frameData.asTypedList(length);

    FfiConverterOptionalUnstableVoiceContent.write(value, buf);

    final bytes = calloc<ForeignBytes>();
    bytes.ref.len = length;
    bytes.ref.data = frameData;
    return RustBuffer.fromBytes(bytes.ref);
  }

  static int write(UnstableVoiceContent? value, Uint8List buf) {
    if (value == null) {
      buf[0] = 0;
      return 1;
    }

    buf[0] = 1;

    return FfiConverterUnstableVoiceContent.write(
            value, Uint8List.view(buf.buffer, buf.offsetInBytes + 1)) +
        1;
  }
}

class FfiConverterSequenceFilterTimelineEventType {
  static List<FilterTimelineEventType> lift(RustBuffer buf) {
    return FfiConverterSequenceFilterTimelineEventType.read(buf.asUint8List())
        .value;
  }

  static LiftRetVal<List<FilterTimelineEventType>> read(Uint8List buf) {
    List<FilterTimelineEventType> res = [];
    final length =
        buf.buffer.asByteData().getInt32(buf.offsetInBytes, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < length; i++) {
      final ret = FfiConverterFilterTimelineEventType.read(
          Uint8List.view(buf.buffer, offset));
      offset += ret.bytesRead;
      res.add(ret.value);
    }
    return LiftRetVal(res, offset - buf.offsetInBytes);
  }

  static int write(List<FilterTimelineEventType> value, Uint8List buf) {
    buf.buffer
        .asByteData()
        .setInt32(buf.offsetInBytes, value.length, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < value.length; i++) {
      offset += FfiConverterFilterTimelineEventType.write(
          value[i], Uint8List.view(buf.buffer, offset));
    }
    return offset - buf.offsetInBytes;
  }

  static int allocationSize(List<FilterTimelineEventType> value) {
    int total = 4;
    for (var item in value) {
      total += FfiConverterFilterTimelineEventType.allocationSize(item);
    }
    return total;
  }

  static RustBuffer lower(List<FilterTimelineEventType> value) {
    final buf = Uint8List(allocationSize(value));
    write(value, buf);
    return toRustBuffer(buf);
  }
}

abstract class RoomListServiceSyncIndicatorListener {
  void onUpdate(
    RoomListServiceSyncIndicator syncIndicator,
  );
}

class FfiConverterCallbackInterfaceRoomListServiceSyncIndicatorListener {
  static final _handleMap =
      UniffiHandleMap<RoomListServiceSyncIndicatorListener>();
  static bool _vtableInitialized = false;

  static RoomListServiceSyncIndicatorListener lift(int handle) {
    return _handleMap.get(handle);
  }

  static int lower(RoomListServiceSyncIndicatorListener value) {
    _ensureVTableInitialized();
    return _handleMap.insert(value);
  }

  static void _ensureVTableInitialized() {
    if (!_vtableInitialized) {
      initRoomListServiceSyncIndicatorListenerVTable();
      _vtableInitialized = true;
    }
  }

  static LiftRetVal<RoomListServiceSyncIndicatorListener> read(Uint8List buf) {
    final handle = buf.buffer.asByteData(buf.offsetInBytes).getInt64(0);
    return LiftRetVal(lift(handle), 8);
  }

  static int write(RoomListServiceSyncIndicatorListener value, Uint8List buf) {
    final handle = lower(value);
    buf.buffer.asByteData(buf.offsetInBytes).setInt64(0, handle);
    return 8;
  }

  static int allocationSize(RoomListServiceSyncIndicatorListener value) {
    return 8;
  }
}

typedef UniffiCallbackInterfaceRoomListServiceSyncIndicatorListenerMethod0
    = Void Function(Uint64, RustBuffer, Pointer<Void>, Pointer<RustCallStatus>);
typedef UniffiCallbackInterfaceRoomListServiceSyncIndicatorListenerMethod0Dart
    = void Function(int, int, Pointer<Void>, Pointer<RustCallStatus>);
typedef UniffiCallbackInterfaceRoomListServiceSyncIndicatorListenerFree = Void
    Function(Uint64);
typedef UniffiCallbackInterfaceRoomListServiceSyncIndicatorListenerFreeDart
    = void Function(int);

final class UniffiVTableCallbackInterfaceRoomListServiceSyncIndicatorListener
    extends Struct {
  external Pointer<
          NativeFunction<
              UniffiCallbackInterfaceRoomListServiceSyncIndicatorListenerMethod0>>
      onUpdate;
  external Pointer<
          NativeFunction<
              UniffiCallbackInterfaceRoomListServiceSyncIndicatorListenerFree>>
      uniffiFree;
}

void roomListServiceSyncIndicatorListenerOnUpdate(
    int uniffiHandle,
    RustBuffer syncIndicator,
    Pointer<Void> outReturn,
    Pointer<RustCallStatus> callStatus) {
  final status = callStatus.ref;
  try {
    final obj =
        FfiConverterCallbackInterfaceRoomListServiceSyncIndicatorListener
            ._handleMap
            .get(uniffiHandle);
    final arg0 = FfiConverterRoomListServiceSyncIndicator.lift(syncIndicator);
    obj.onUpdate(
      arg0,
    );
    status.code = CALL_SUCCESS;
  } catch (e) {
    status.code = CALL_UNEXPECTED_ERROR;
    status.errorBuf = FfiConverterString.lower(e.toString());
  }
}

final NativeCallable<
        UniffiCallbackInterfaceRoomListServiceSyncIndicatorListenerMethod0>
    roomListServiceSyncIndicatorListenerOnUpdateNativeCallable = NativeCallable<
            UniffiCallbackInterfaceRoomListServiceSyncIndicatorListenerMethod0>.listener(
        roomListServiceSyncIndicatorListenerOnUpdate);

void roomListServiceSyncIndicatorListenerFreeCallback(int handle) {
  try {
    FfiConverterCallbackInterfaceRoomListServiceSyncIndicatorListener._handleMap
        .remove(handle);
  } catch (e) {}
}

final Pointer<
        NativeFunction<
            UniffiCallbackInterfaceRoomListServiceSyncIndicatorListenerFree>>
    roomListServiceSyncIndicatorListenerFreePointer = Pointer.fromFunction<
            UniffiCallbackInterfaceRoomListServiceSyncIndicatorListenerFree>(
        roomListServiceSyncIndicatorListenerFreeCallback);
late final Pointer<
        UniffiVTableCallbackInterfaceRoomListServiceSyncIndicatorListener>
    roomListServiceSyncIndicatorListenerVTable;

void initRoomListServiceSyncIndicatorListenerVTable() {
  if (FfiConverterCallbackInterfaceRoomListServiceSyncIndicatorListener
      ._vtableInitialized) {
    return;
  }

  roomListServiceSyncIndicatorListenerVTable = calloc<
      UniffiVTableCallbackInterfaceRoomListServiceSyncIndicatorListener>();
  roomListServiceSyncIndicatorListenerVTable.ref.onUpdate =
      roomListServiceSyncIndicatorListenerOnUpdateNativeCallable.nativeFunction;
  roomListServiceSyncIndicatorListenerVTable.ref.uniffiFree =
      roomListServiceSyncIndicatorListenerFreePointer;

  rustCall((status) {
    _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_init_callback_vtable_roomlistservicesyncindicatorlistener(
      roomListServiceSyncIndicatorListenerVTable,
    );
    checkCallStatus(NullRustCallStatusErrorHandler(), status);
  });

  FfiConverterCallbackInterfaceRoomListServiceSyncIndicatorListener
      ._vtableInitialized = true;
}

abstract class ProgressWatcher {
  void transmissionProgress(
    TransmissionProgress progress,
  );
}

class FfiConverterCallbackInterfaceProgressWatcher {
  static final _handleMap = UniffiHandleMap<ProgressWatcher>();
  static bool _vtableInitialized = false;

  static ProgressWatcher lift(int handle) {
    return _handleMap.get(handle);
  }

  static int lower(ProgressWatcher value) {
    _ensureVTableInitialized();
    return _handleMap.insert(value);
  }

  static void _ensureVTableInitialized() {
    if (!_vtableInitialized) {
      initProgressWatcherVTable();
      _vtableInitialized = true;
    }
  }

  static LiftRetVal<ProgressWatcher> read(Uint8List buf) {
    final handle = buf.buffer.asByteData(buf.offsetInBytes).getInt64(0);
    return LiftRetVal(lift(handle), 8);
  }

  static int write(ProgressWatcher value, Uint8List buf) {
    final handle = lower(value);
    buf.buffer.asByteData(buf.offsetInBytes).setInt64(0, handle);
    return 8;
  }

  static int allocationSize(ProgressWatcher value) {
    return 8;
  }
}

typedef UniffiCallbackInterfaceProgressWatcherMethod0 = Void Function(
    Uint64, RustBuffer, Pointer<Void>, Pointer<RustCallStatus>);
typedef UniffiCallbackInterfaceProgressWatcherMethod0Dart = void Function(
    int, RustBuffer, Pointer<Void>, Pointer<RustCallStatus>);
typedef UniffiCallbackInterfaceProgressWatcherFree = Void Function(Uint64);
typedef UniffiCallbackInterfaceProgressWatcherFreeDart = void Function(int);

final class UniffiVTableCallbackInterfaceProgressWatcher extends Struct {
  external Pointer<
          NativeFunction<UniffiCallbackInterfaceProgressWatcherMethod0>>
      transmissionProgress;
  external Pointer<NativeFunction<UniffiCallbackInterfaceProgressWatcherFree>>
      uniffiFree;
}

void progressWatcherTransmissionProgress(int uniffiHandle, RustBuffer progress,
    Pointer<Void> outReturn, Pointer<RustCallStatus> callStatus) {
  final status = callStatus.ref;
  try {
    final obj = FfiConverterCallbackInterfaceProgressWatcher._handleMap
        .get(uniffiHandle);
    final arg0 = FfiConverterTransmissionProgress.lift(progress);
    obj.transmissionProgress(
      arg0,
    );
    status.code = CALL_SUCCESS;
  } catch (e) {
    status.code = CALL_UNEXPECTED_ERROR;
    status.errorBuf = FfiConverterString.lower(e.toString());
  }
}

final NativeCallable<UniffiCallbackInterfaceProgressWatcherMethod0>
    progressWatcherTransmissionProgressNativeCallable =
    NativeCallable<UniffiCallbackInterfaceProgressWatcherMethod0>.listener(
        progressWatcherTransmissionProgress);

void progressWatcherFreeCallback(int handle) {
  try {
    FfiConverterCallbackInterfaceProgressWatcher._handleMap.remove(handle);
  } catch (e) {}
}

final Pointer<NativeFunction<UniffiCallbackInterfaceProgressWatcherFree>>
    progressWatcherFreePointer =
    Pointer.fromFunction<UniffiCallbackInterfaceProgressWatcherFree>(
        progressWatcherFreeCallback);
late final Pointer<UniffiVTableCallbackInterfaceProgressWatcher>
    progressWatcherVTable;

void initProgressWatcherVTable() {
  if (FfiConverterCallbackInterfaceProgressWatcher._vtableInitialized) {
    return;
  }

  progressWatcherVTable =
      calloc<UniffiVTableCallbackInterfaceProgressWatcher>();
  progressWatcherVTable.ref.transmissionProgress =
      progressWatcherTransmissionProgressNativeCallable.nativeFunction;
  progressWatcherVTable.ref.uniffiFree = progressWatcherFreePointer;

  rustCall((status) {
    _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_init_callback_vtable_progresswatcher(
      progressWatcherVTable,
    );
    checkCallStatus(NullRustCallStatusErrorHandler(), status);
  });

  FfiConverterCallbackInterfaceProgressWatcher._vtableInitialized = true;
}

class FfiConverterSequenceWidgetEventFilter {
  static List<WidgetEventFilter> lift(RustBuffer buf) {
    return FfiConverterSequenceWidgetEventFilter.read(buf.asUint8List()).value;
  }

  static LiftRetVal<List<WidgetEventFilter>> read(Uint8List buf) {
    List<WidgetEventFilter> res = [];
    final length =
        buf.buffer.asByteData().getInt32(buf.offsetInBytes, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < length; i++) {
      final ret = FfiConverterWidgetEventFilter.read(
          Uint8List.view(buf.buffer, offset));
      offset += ret.bytesRead;
      res.add(ret.value);
    }
    return LiftRetVal(res, offset - buf.offsetInBytes);
  }

  static int write(List<WidgetEventFilter> value, Uint8List buf) {
    buf.buffer
        .asByteData()
        .setInt32(buf.offsetInBytes, value.length, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < value.length; i++) {
      offset += FfiConverterWidgetEventFilter.write(
          value[i], Uint8List.view(buf.buffer, offset));
    }
    return offset - buf.offsetInBytes;
  }

  static int allocationSize(List<WidgetEventFilter> value) {
    int total = 4;
    for (var item in value) {
      total += FfiConverterWidgetEventFilter.allocationSize(item);
    }
    return total;
  }

  static RustBuffer lower(List<WidgetEventFilter> value) {
    final buf = Uint8List(allocationSize(value));
    write(value, buf);
    return toRustBuffer(buf);
  }
}

class FfiConverterOptionalEventSendState {
  static EventSendState? lift(RustBuffer buf) {
    return FfiConverterOptionalEventSendState.read(buf.asUint8List()).value;
  }

  static LiftRetVal<EventSendState?> read(Uint8List buf) {
    if (ByteData.view(buf.buffer, buf.offsetInBytes).getInt8(0) == 0) {
      return LiftRetVal(null, 1);
    }
    final result = FfiConverterEventSendState.read(
        Uint8List.view(buf.buffer, buf.offsetInBytes + 1));
    return LiftRetVal<EventSendState?>(result.value, result.bytesRead + 1);
  }

  static int allocationSize([EventSendState? value]) {
    if (value == null) {
      return 1;
    }
    return FfiConverterEventSendState.allocationSize(value) + 1;
  }

  static RustBuffer lower(EventSendState? value) {
    if (value == null) {
      return toRustBuffer(Uint8List.fromList([0]));
    }

    final length = FfiConverterOptionalEventSendState.allocationSize(value);

    final Pointer<Uint8> frameData = calloc<Uint8>(length);
    final buf = frameData.asTypedList(length);

    FfiConverterOptionalEventSendState.write(value, buf);

    final bytes = calloc<ForeignBytes>();
    bytes.ref.len = length;
    bytes.ref.data = frameData;
    return RustBuffer.fromBytes(bytes.ref);
  }

  static int write(EventSendState? value, Uint8List buf) {
    if (value == null) {
      buf[0] = 0;
      return 1;
    }

    buf[0] = 1;

    return FfiConverterEventSendState.write(
            value, Uint8List.view(buf.buffer, buf.offsetInBytes + 1)) +
        1;
  }
}

class FfiConverterOptionalDouble64 {
  static double? lift(RustBuffer buf) {
    return FfiConverterOptionalDouble64.read(buf.asUint8List()).value;
  }

  static LiftRetVal<double?> read(Uint8List buf) {
    if (ByteData.view(buf.buffer, buf.offsetInBytes).getInt8(0) == 0) {
      return LiftRetVal(null, 1);
    }
    final result = FfiConverterDouble64.read(
        Uint8List.view(buf.buffer, buf.offsetInBytes + 1));
    return LiftRetVal<double?>(result.value, result.bytesRead + 1);
  }

  static int allocationSize([double? value]) {
    if (value == null) {
      return 1;
    }
    return FfiConverterDouble64.allocationSize(value) + 1;
  }

  static RustBuffer lower(double? value) {
    if (value == null) {
      return toRustBuffer(Uint8List.fromList([0]));
    }

    final length = FfiConverterOptionalDouble64.allocationSize(value);

    final Pointer<Uint8> frameData = calloc<Uint8>(length);
    final buf = frameData.asTypedList(length);

    FfiConverterOptionalDouble64.write(value, buf);

    final bytes = calloc<ForeignBytes>();
    bytes.ref.len = length;
    bytes.ref.data = frameData;
    return RustBuffer.fromBytes(bytes.ref);
  }

  static int write(double? value, Uint8List buf) {
    if (value == null) {
      buf[0] = 0;
      return 1;
    }

    buf[0] = 1;

    return FfiConverterDouble64.write(
            value, Uint8List.view(buf.buffer, buf.offsetInBytes + 1)) +
        1;
  }
}

abstract class MediaPreviewConfigListener {
  void onChange(
    MediaPreviewConfig? mediaPreviewConfig,
  );
}

class FfiConverterCallbackInterfaceMediaPreviewConfigListener {
  static final _handleMap = UniffiHandleMap<MediaPreviewConfigListener>();
  static bool _vtableInitialized = false;

  static MediaPreviewConfigListener lift(int handle) {
    return _handleMap.get(handle);
  }

  static int lower(MediaPreviewConfigListener value) {
    _ensureVTableInitialized();
    return _handleMap.insert(value);
  }

  static void _ensureVTableInitialized() {
    if (!_vtableInitialized) {
      initMediaPreviewConfigListenerVTable();
      _vtableInitialized = true;
    }
  }

  static LiftRetVal<MediaPreviewConfigListener> read(Uint8List buf) {
    final handle = buf.buffer.asByteData(buf.offsetInBytes).getInt64(0);
    return LiftRetVal(lift(handle), 8);
  }

  static int write(MediaPreviewConfigListener value, Uint8List buf) {
    final handle = lower(value);
    buf.buffer.asByteData(buf.offsetInBytes).setInt64(0, handle);
    return 8;
  }

  static int allocationSize(MediaPreviewConfigListener value) {
    return 8;
  }
}

typedef UniffiCallbackInterfaceMediaPreviewConfigListenerMethod0 = Void
    Function(Uint64, RustBuffer, Pointer<Void>, Pointer<RustCallStatus>);
typedef UniffiCallbackInterfaceMediaPreviewConfigListenerMethod0Dart = void
    Function(int, RustBuffer, Pointer<Void>, Pointer<RustCallStatus>);
typedef UniffiCallbackInterfaceMediaPreviewConfigListenerFree = Void Function(
    Uint64);
typedef UniffiCallbackInterfaceMediaPreviewConfigListenerFreeDart = void
    Function(int);

final class UniffiVTableCallbackInterfaceMediaPreviewConfigListener
    extends Struct {
  external Pointer<
      NativeFunction<
          UniffiCallbackInterfaceMediaPreviewConfigListenerMethod0>> onChange;
  external Pointer<
          NativeFunction<UniffiCallbackInterfaceMediaPreviewConfigListenerFree>>
      uniffiFree;
}

void mediaPreviewConfigListenerOnChange(
    int uniffiHandle,
    RustBuffer mediaPreviewConfig,
    Pointer<Void> outReturn,
    Pointer<RustCallStatus> callStatus) {
  final status = callStatus.ref;
  try {
    final obj = FfiConverterCallbackInterfaceMediaPreviewConfigListener
        ._handleMap
        .get(uniffiHandle);
    final arg0 =
        FfiConverterOptionalMediaPreviewConfig.lift(mediaPreviewConfig);
    obj.onChange(
      arg0,
    );
    status.code = CALL_SUCCESS;
  } catch (e) {
    status.code = CALL_UNEXPECTED_ERROR;
    status.errorBuf = FfiConverterString.lower(e.toString());
  }
}

final NativeCallable<UniffiCallbackInterfaceMediaPreviewConfigListenerMethod0>
    mediaPreviewConfigListenerOnChangeNativeCallable = NativeCallable<
            UniffiCallbackInterfaceMediaPreviewConfigListenerMethod0>.listener(
        mediaPreviewConfigListenerOnChange);

void mediaPreviewConfigListenerFreeCallback(int handle) {
  try {
    FfiConverterCallbackInterfaceMediaPreviewConfigListener._handleMap
        .remove(handle);
  } catch (e) {}
}

final Pointer<
        NativeFunction<UniffiCallbackInterfaceMediaPreviewConfigListenerFree>>
    mediaPreviewConfigListenerFreePointer =
    Pointer.fromFunction<UniffiCallbackInterfaceMediaPreviewConfigListenerFree>(
        mediaPreviewConfigListenerFreeCallback);
late final Pointer<UniffiVTableCallbackInterfaceMediaPreviewConfigListener>
    mediaPreviewConfigListenerVTable;

void initMediaPreviewConfigListenerVTable() {
  if (FfiConverterCallbackInterfaceMediaPreviewConfigListener
      ._vtableInitialized) {
    return;
  }

  mediaPreviewConfigListenerVTable =
      calloc<UniffiVTableCallbackInterfaceMediaPreviewConfigListener>();
  mediaPreviewConfigListenerVTable.ref.onChange =
      mediaPreviewConfigListenerOnChangeNativeCallable.nativeFunction;
  mediaPreviewConfigListenerVTable.ref.uniffiFree =
      mediaPreviewConfigListenerFreePointer;

  rustCall((status) {
    _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_init_callback_vtable_mediapreviewconfiglistener(
      mediaPreviewConfigListenerVTable,
    );
    checkCallStatus(NullRustCallStatusErrorHandler(), status);
  });

  FfiConverterCallbackInterfaceMediaPreviewConfigListener._vtableInitialized =
      true;
}

class FfiConverterSequenceKnockRequest {
  static List<KnockRequest> lift(RustBuffer buf) {
    return FfiConverterSequenceKnockRequest.read(buf.asUint8List()).value;
  }

  static LiftRetVal<List<KnockRequest>> read(Uint8List buf) {
    List<KnockRequest> res = [];
    final length =
        buf.buffer.asByteData().getInt32(buf.offsetInBytes, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < length; i++) {
      final ret =
          FfiConverterKnockRequest.read(Uint8List.view(buf.buffer, offset));
      offset += ret.bytesRead;
      res.add(ret.value);
    }
    return LiftRetVal(res, offset - buf.offsetInBytes);
  }

  static int write(List<KnockRequest> value, Uint8List buf) {
    buf.buffer
        .asByteData()
        .setInt32(buf.offsetInBytes, value.length, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < value.length; i++) {
      offset += FfiConverterKnockRequest.write(
          value[i], Uint8List.view(buf.buffer, offset));
    }
    return offset - buf.offsetInBytes;
  }

  static int allocationSize(List<KnockRequest> value) {
    int total = 4;
    for (var item in value) {
      total += FfiConverterKnockRequest.allocationSize(item);
    }
    return total;
  }

  static RustBuffer lower(List<KnockRequest> value) {
    final buf = Uint8List(allocationSize(value));
    write(value, buf);
    return toRustBuffer(buf);
  }
}

class FfiConverterOptionalUInt8 {
  static int? lift(RustBuffer buf) {
    return FfiConverterOptionalUInt8.read(buf.asUint8List()).value;
  }

  static LiftRetVal<int?> read(Uint8List buf) {
    if (ByteData.view(buf.buffer, buf.offsetInBytes).getInt8(0) == 0) {
      return LiftRetVal(null, 1);
    }
    final result = FfiConverterUInt8.read(
        Uint8List.view(buf.buffer, buf.offsetInBytes + 1));
    return LiftRetVal<int?>(result.value, result.bytesRead + 1);
  }

  static int allocationSize([int? value]) {
    if (value == null) {
      return 1;
    }
    return FfiConverterUInt8.allocationSize(value) + 1;
  }

  static RustBuffer lower(int? value) {
    if (value == null) {
      return toRustBuffer(Uint8List.fromList([0]));
    }

    final length = FfiConverterOptionalUInt8.allocationSize(value);

    final Pointer<Uint8> frameData = calloc<Uint8>(length);
    final buf = frameData.asTypedList(length);

    FfiConverterOptionalUInt8.write(value, buf);

    final bytes = calloc<ForeignBytes>();
    bytes.ref.len = length;
    bytes.ref.data = frameData;
    return RustBuffer.fromBytes(bytes.ref);
  }

  static int write(int? value, Uint8List buf) {
    if (value == null) {
      buf[0] = 0;
      return 1;
    }

    buf[0] = 1;

    return FfiConverterUInt8.write(
            value, Uint8List.view(buf.buffer, buf.offsetInBytes + 1)) +
        1;
  }
}

class FfiConverterOptionalPublicRoomJoinRule {
  static PublicRoomJoinRule? lift(RustBuffer buf) {
    return FfiConverterOptionalPublicRoomJoinRule.read(buf.asUint8List()).value;
  }

  static LiftRetVal<PublicRoomJoinRule?> read(Uint8List buf) {
    if (ByteData.view(buf.buffer, buf.offsetInBytes).getInt8(0) == 0) {
      return LiftRetVal(null, 1);
    }
    final result = FfiConverterPublicRoomJoinRule.read(
        Uint8List.view(buf.buffer, buf.offsetInBytes + 1));
    return LiftRetVal<PublicRoomJoinRule?>(result.value, result.bytesRead + 1);
  }

  static int allocationSize([PublicRoomJoinRule? value]) {
    if (value == null) {
      return 1;
    }
    return FfiConverterPublicRoomJoinRule.allocationSize(value) + 1;
  }

  static RustBuffer lower(PublicRoomJoinRule? value) {
    if (value == null) {
      return toRustBuffer(Uint8List.fromList([0]));
    }

    final length = FfiConverterOptionalPublicRoomJoinRule.allocationSize(value);

    final Pointer<Uint8> frameData = calloc<Uint8>(length);
    final buf = frameData.asTypedList(length);

    FfiConverterOptionalPublicRoomJoinRule.write(value, buf);

    final bytes = calloc<ForeignBytes>();
    bytes.ref.len = length;
    bytes.ref.data = frameData;
    return RustBuffer.fromBytes(bytes.ref);
  }

  static int write(PublicRoomJoinRule? value, Uint8List buf) {
    if (value == null) {
      buf[0] = 0;
      return 1;
    }

    buf[0] = 1;

    return FfiConverterPublicRoomJoinRule.write(
            value, Uint8List.view(buf.buffer, buf.offsetInBytes + 1)) +
        1;
  }
}

class FfiConverterOptionalMentions {
  static Mentions? lift(RustBuffer buf) {
    return FfiConverterOptionalMentions.read(buf.asUint8List()).value;
  }

  static LiftRetVal<Mentions?> read(Uint8List buf) {
    if (ByteData.view(buf.buffer, buf.offsetInBytes).getInt8(0) == 0) {
      return LiftRetVal(null, 1);
    }
    final result = FfiConverterMentions.read(
        Uint8List.view(buf.buffer, buf.offsetInBytes + 1));
    return LiftRetVal<Mentions?>(result.value, result.bytesRead + 1);
  }

  static int allocationSize([Mentions? value]) {
    if (value == null) {
      return 1;
    }
    return FfiConverterMentions.allocationSize(value) + 1;
  }

  static RustBuffer lower(Mentions? value) {
    if (value == null) {
      return toRustBuffer(Uint8List.fromList([0]));
    }

    final length = FfiConverterOptionalMentions.allocationSize(value);

    final Pointer<Uint8> frameData = calloc<Uint8>(length);
    final buf = frameData.asTypedList(length);

    FfiConverterOptionalMentions.write(value, buf);

    final bytes = calloc<ForeignBytes>();
    bytes.ref.len = length;
    bytes.ref.data = frameData;
    return RustBuffer.fromBytes(bytes.ref);
  }

  static int write(Mentions? value, Uint8List buf) {
    if (value == null) {
      buf[0] = 0;
      return 1;
    }

    buf[0] = 1;

    return FfiConverterMentions.write(
            value, Uint8List.view(buf.buffer, buf.offsetInBytes + 1)) +
        1;
  }
}

class FfiConverterOptionalInReplyToDetails {
  static InReplyToDetails? lift(RustBuffer buf) {
    return FfiConverterOptionalInReplyToDetails.read(buf.asUint8List()).value;
  }

  static LiftRetVal<InReplyToDetails?> read(Uint8List buf) {
    if (ByteData.view(buf.buffer, buf.offsetInBytes).getInt8(0) == 0) {
      return LiftRetVal(null, 1);
    }
    final result = InReplyToDetails.read(
        Uint8List.view(buf.buffer, buf.offsetInBytes + 1));
    return LiftRetVal<InReplyToDetails?>(result.value, result.bytesRead + 1);
  }

  static int allocationSize([InReplyToDetails? value]) {
    if (value == null) {
      return 1;
    }
    return InReplyToDetails.allocationSize(value) + 1;
  }

  static RustBuffer lower(InReplyToDetails? value) {
    if (value == null) {
      return toRustBuffer(Uint8List.fromList([0]));
    }

    final length = FfiConverterOptionalInReplyToDetails.allocationSize(value);

    final Pointer<Uint8> frameData = calloc<Uint8>(length);
    final buf = frameData.asTypedList(length);

    FfiConverterOptionalInReplyToDetails.write(value, buf);

    final bytes = calloc<ForeignBytes>();
    bytes.ref.len = length;
    bytes.ref.data = frameData;
    return RustBuffer.fromBytes(bytes.ref);
  }

  static int write(InReplyToDetails? value, Uint8List buf) {
    if (value == null) {
      buf[0] = 0;
      return 1;
    }

    buf[0] = 1;

    return InReplyToDetails.write(
            value, Uint8List.view(buf.buffer, buf.offsetInBytes + 1)) +
        1;
  }
}

class FfiConverterOptionalUnstableAudioDetailsContent {
  static UnstableAudioDetailsContent? lift(RustBuffer buf) {
    return FfiConverterOptionalUnstableAudioDetailsContent.read(
            buf.asUint8List())
        .value;
  }

  static LiftRetVal<UnstableAudioDetailsContent?> read(Uint8List buf) {
    if (ByteData.view(buf.buffer, buf.offsetInBytes).getInt8(0) == 0) {
      return LiftRetVal(null, 1);
    }
    final result = FfiConverterUnstableAudioDetailsContent.read(
        Uint8List.view(buf.buffer, buf.offsetInBytes + 1));
    return LiftRetVal<UnstableAudioDetailsContent?>(
        result.value, result.bytesRead + 1);
  }

  static int allocationSize([UnstableAudioDetailsContent? value]) {
    if (value == null) {
      return 1;
    }
    return FfiConverterUnstableAudioDetailsContent.allocationSize(value) + 1;
  }

  static RustBuffer lower(UnstableAudioDetailsContent? value) {
    if (value == null) {
      return toRustBuffer(Uint8List.fromList([0]));
    }

    final length =
        FfiConverterOptionalUnstableAudioDetailsContent.allocationSize(value);

    final Pointer<Uint8> frameData = calloc<Uint8>(length);
    final buf = frameData.asTypedList(length);

    FfiConverterOptionalUnstableAudioDetailsContent.write(value, buf);

    final bytes = calloc<ForeignBytes>();
    bytes.ref.len = length;
    bytes.ref.data = frameData;
    return RustBuffer.fromBytes(bytes.ref);
  }

  static int write(UnstableAudioDetailsContent? value, Uint8List buf) {
    if (value == null) {
      buf[0] = 0;
      return 1;
    }

    buf[0] = 1;

    return FfiConverterUnstableAudioDetailsContent.write(
            value, Uint8List.view(buf.buffer, buf.offsetInBytes + 1)) +
        1;
  }
}

class FfiConverterOptionalCallbackInterfaceNotificationSettingsDelegate {
  static NotificationSettingsDelegate? lift(RustBuffer buf) {
    return FfiConverterOptionalCallbackInterfaceNotificationSettingsDelegate
            .read(buf.asUint8List())
        .value;
  }

  static LiftRetVal<NotificationSettingsDelegate?> read(Uint8List buf) {
    if (ByteData.view(buf.buffer, buf.offsetInBytes).getInt8(0) == 0) {
      return LiftRetVal(null, 1);
    }
    final result =
        FfiConverterCallbackInterfaceNotificationSettingsDelegate.read(
            Uint8List.view(buf.buffer, buf.offsetInBytes + 1));
    return LiftRetVal<NotificationSettingsDelegate?>(
        result.value, result.bytesRead + 1);
  }

  static int allocationSize([NotificationSettingsDelegate? value]) {
    if (value == null) {
      return 1;
    }
    return FfiConverterCallbackInterfaceNotificationSettingsDelegate
            .allocationSize(value) +
        1;
  }

  static RustBuffer lower(NotificationSettingsDelegate? value) {
    if (value == null) {
      return toRustBuffer(Uint8List.fromList([0]));
    }

    final length =
        FfiConverterOptionalCallbackInterfaceNotificationSettingsDelegate
            .allocationSize(value);

    final Pointer<Uint8> frameData = calloc<Uint8>(length);
    final buf = frameData.asTypedList(length);

    FfiConverterOptionalCallbackInterfaceNotificationSettingsDelegate.write(
        value, buf);

    final bytes = calloc<ForeignBytes>();
    bytes.ref.len = length;
    bytes.ref.data = frameData;
    return RustBuffer.fromBytes(bytes.ref);
  }

  static int write(NotificationSettingsDelegate? value, Uint8List buf) {
    if (value == null) {
      buf[0] = 0;
      return 1;
    }

    buf[0] = 1;

    return FfiConverterCallbackInterfaceNotificationSettingsDelegate.write(
            value, Uint8List.view(buf.buffer, buf.offsetInBytes + 1)) +
        1;
  }
}

class FfiConverterOptionalMediaSource {
  static MediaSource? lift(RustBuffer buf) {
    return FfiConverterOptionalMediaSource.read(buf.asUint8List()).value;
  }

  static LiftRetVal<MediaSource?> read(Uint8List buf) {
    if (ByteData.view(buf.buffer, buf.offsetInBytes).getInt8(0) == 0) {
      return LiftRetVal(null, 1);
    }
    final result =
        MediaSource.read(Uint8List.view(buf.buffer, buf.offsetInBytes + 1));
    return LiftRetVal<MediaSource?>(result.value, result.bytesRead + 1);
  }

  static int allocationSize([MediaSource? value]) {
    if (value == null) {
      return 1;
    }
    return MediaSource.allocationSize(value) + 1;
  }

  static RustBuffer lower(MediaSource? value) {
    if (value == null) {
      return toRustBuffer(Uint8List.fromList([0]));
    }

    final length = FfiConverterOptionalMediaSource.allocationSize(value);

    final Pointer<Uint8> frameData = calloc<Uint8>(length);
    final buf = frameData.asTypedList(length);

    FfiConverterOptionalMediaSource.write(value, buf);

    final bytes = calloc<ForeignBytes>();
    bytes.ref.len = length;
    bytes.ref.data = frameData;
    return RustBuffer.fromBytes(bytes.ref);
  }

  static int write(MediaSource? value, Uint8List buf) {
    if (value == null) {
      buf[0] = 0;
      return 1;
    }

    buf[0] = 1;

    return MediaSource.write(
            value, Uint8List.view(buf.buffer, buf.offsetInBytes + 1)) +
        1;
  }
}

class FfiConverterMapTagNameTagInfo {
  static Map lift(RustBuffer buf) {
    return FfiConverterMapTagNameTagInfo.read(buf.asUint8List()).value;
  }

  static LiftRetVal<Map> read(Uint8List buf) {
    Map res = {};
    final length =
        buf.buffer.asByteData().getInt32(buf.offsetInBytes, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < length; i++) {
      final k = FfiConverterTagName.read(Uint8List.view(buf.buffer, offset));
      offset += k.bytesRead;
      final v = FfiConverterTagInfo.read(Uint8List.view(buf.buffer, offset));
      offset += v.bytesRead;
      res[k.value] = v.value;
    }
    return LiftRetVal(res, offset - buf.offsetInBytes);
  }

  static int write(Map value, Uint8List buf) {
    buf.buffer
        .asByteData()
        .setInt32(buf.offsetInBytes, value.length, Endian.little);
    int offset = buf.offsetInBytes + 4;
    value.forEach((k, v) {
      offset +=
          FfiConverterTagName.write(k, Uint8List.view(buf.buffer, offset));
      offset +=
          FfiConverterTagInfo.write(v, Uint8List.view(buf.buffer, offset));
    });
    return offset - buf.offsetInBytes;
  }

  static int allocationSize(Map value) {
    int total = 4;
    value.forEach((k, v) {
      total += FfiConverterTagName.allocationSize(k);
      total += FfiConverterTagInfo.allocationSize(v);
    });
    return total;
  }

  static RustBuffer lower(Map value) {
    final buf = Uint8List(allocationSize(value));
    write(value, buf);
    return toRustBuffer(buf);
  }
}

class FfiConverterDuration {
  static Duration lift(RustBuffer buf) {
    return FfiConverterDuration.read(buf.asUint8List()).value;
  }

  static RustBuffer lower(Duration value) {
    final buf = Uint8List(allocationSize(value));
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<Duration> read(Uint8List buf) {
    final bytes = buf.buffer.asByteData(buf.offsetInBytes, 12);
    final seconds = bytes.getUint64(0);
    final micros = (bytes.getUint32(8) ~/ 1000);
    return LiftRetVal(Duration(seconds: seconds, microseconds: micros), 12);
  }

  static int allocationSize([Duration value = const Duration()]) {
    return 12;
  }

  static int write(Duration value, Uint8List buf) {
    final bytes = buf.buffer.asByteData(buf.offsetInBytes, 12);
    bytes.setUint64(0, value.inSeconds);
    final ms = (value.inMicroseconds - (value.inSeconds * 1000000)) * 1000;
    bytes.setUint32(8, ms.toInt());
    return 12;
  }
}

class FfiConverterString {
  static String lift(RustBuffer buf) {
    return utf8.decoder.convert(buf.asUint8List());
  }

  static RustBuffer lower(String value) {
    return toRustBuffer(Utf8Encoder().convert(value));
  }

  static LiftRetVal<String> read(Uint8List buf) {
    final end = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0) + 4;
    return LiftRetVal(utf8.decoder.convert(buf, 4, end), end);
  }

  static int allocationSize([String value = ""]) {
    return utf8.encoder.convert(value).length + 4;
  }

  static int write(String value, Uint8List buf) {
    final list = utf8.encoder.convert(value);
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, list.length);
    buf.setAll(4, list);
    return list.length + 4;
  }
}

class FfiConverterUInt64 {
  static int lift(int value) => value;

  static LiftRetVal<int> read(Uint8List buf) {
    return LiftRetVal(buf.buffer.asByteData(buf.offsetInBytes).getUint64(0), 8);
  }

  static int lower(int value) => value;

  static int allocationSize([int value = 0]) {
    return 8;
  }

  static int write(int value, Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setUint64(0, value);
    return FfiConverterUInt64.allocationSize();
  }
}

class FfiConverterOptionalRoom {
  static Room? lift(RustBuffer buf) {
    return FfiConverterOptionalRoom.read(buf.asUint8List()).value;
  }

  static LiftRetVal<Room?> read(Uint8List buf) {
    if (ByteData.view(buf.buffer, buf.offsetInBytes).getInt8(0) == 0) {
      return LiftRetVal(null, 1);
    }
    final result = Room.read(Uint8List.view(buf.buffer, buf.offsetInBytes + 1));
    return LiftRetVal<Room?>(result.value, result.bytesRead + 1);
  }

  static int allocationSize([Room? value]) {
    if (value == null) {
      return 1;
    }
    return Room.allocationSize(value) + 1;
  }

  static RustBuffer lower(Room? value) {
    if (value == null) {
      return toRustBuffer(Uint8List.fromList([0]));
    }

    final length = FfiConverterOptionalRoom.allocationSize(value);

    final Pointer<Uint8> frameData = calloc<Uint8>(length);
    final buf = frameData.asTypedList(length);

    FfiConverterOptionalRoom.write(value, buf);

    final bytes = calloc<ForeignBytes>();
    bytes.ref.len = length;
    bytes.ref.data = frameData;
    return RustBuffer.fromBytes(bytes.ref);
  }

  static int write(Room? value, Uint8List buf) {
    if (value == null) {
      buf[0] = 0;
      return 1;
    }

    buf[0] = 1;

    return Room.write(
            value, Uint8List.view(buf.buffer, buf.offsetInBytes + 1)) +
        1;
  }
}

abstract class IdentityStatusChangeListener {
  void call(
    List<IdentityStatusChange> identityStatusChange,
  );
}

class FfiConverterCallbackInterfaceIdentityStatusChangeListener {
  static final _handleMap = UniffiHandleMap<IdentityStatusChangeListener>();
  static bool _vtableInitialized = false;

  static IdentityStatusChangeListener lift(int handle) {
    return _handleMap.get(handle);
  }

  static int lower(IdentityStatusChangeListener value) {
    _ensureVTableInitialized();
    return _handleMap.insert(value);
  }

  static void _ensureVTableInitialized() {
    if (!_vtableInitialized) {
      initIdentityStatusChangeListenerVTable();
      _vtableInitialized = true;
    }
  }

  static LiftRetVal<IdentityStatusChangeListener> read(Uint8List buf) {
    final handle = buf.buffer.asByteData(buf.offsetInBytes).getInt64(0);
    return LiftRetVal(lift(handle), 8);
  }

  static int write(IdentityStatusChangeListener value, Uint8List buf) {
    final handle = lower(value);
    buf.buffer.asByteData(buf.offsetInBytes).setInt64(0, handle);
    return 8;
  }

  static int allocationSize(IdentityStatusChangeListener value) {
    return 8;
  }
}

typedef UniffiCallbackInterfaceIdentityStatusChangeListenerMethod0 = Void
    Function(Uint64, RustBuffer, Pointer<Void>, Pointer<RustCallStatus>);
typedef UniffiCallbackInterfaceIdentityStatusChangeListenerMethod0Dart = void
    Function(int, RustBuffer, Pointer<Void>, Pointer<RustCallStatus>);
typedef UniffiCallbackInterfaceIdentityStatusChangeListenerFree = Void Function(
    Uint64);
typedef UniffiCallbackInterfaceIdentityStatusChangeListenerFreeDart = void
    Function(int);

final class UniffiVTableCallbackInterfaceIdentityStatusChangeListener
    extends Struct {
  external Pointer<
      NativeFunction<
          UniffiCallbackInterfaceIdentityStatusChangeListenerMethod0>> call;
  external Pointer<
      NativeFunction<
          UniffiCallbackInterfaceIdentityStatusChangeListenerFree>> uniffiFree;
}

void identityStatusChangeListenerCall(
    int uniffiHandle,
    RustBuffer identityStatusChange,
    Pointer<Void> outReturn,
    Pointer<RustCallStatus> callStatus) {
  final status = callStatus.ref;
  try {
    final obj = FfiConverterCallbackInterfaceIdentityStatusChangeListener
        ._handleMap
        .get(uniffiHandle);
    final arg0 =
        FfiConverterSequenceIdentityStatusChange.lift(identityStatusChange);
    obj.call(
      arg0,
    );
    status.code = CALL_SUCCESS;
  } catch (e) {
    status.code = CALL_UNEXPECTED_ERROR;
    status.errorBuf = FfiConverterString.lower(e.toString());
  }
}

final NativeCallable<UniffiCallbackInterfaceIdentityStatusChangeListenerMethod0>
    identityStatusChangeListenerCallNativeCallable = NativeCallable<
            UniffiCallbackInterfaceIdentityStatusChangeListenerMethod0>.listener(
        identityStatusChangeListenerCall);

void identityStatusChangeListenerFreeCallback(int handle) {
  try {
    FfiConverterCallbackInterfaceIdentityStatusChangeListener._handleMap
        .remove(handle);
  } catch (e) {}
}

final Pointer<
        NativeFunction<UniffiCallbackInterfaceIdentityStatusChangeListenerFree>>
    identityStatusChangeListenerFreePointer = Pointer.fromFunction<
            UniffiCallbackInterfaceIdentityStatusChangeListenerFree>(
        identityStatusChangeListenerFreeCallback);
late final Pointer<UniffiVTableCallbackInterfaceIdentityStatusChangeListener>
    identityStatusChangeListenerVTable;

void initIdentityStatusChangeListenerVTable() {
  if (FfiConverterCallbackInterfaceIdentityStatusChangeListener
      ._vtableInitialized) {
    return;
  }

  identityStatusChangeListenerVTable =
      calloc<UniffiVTableCallbackInterfaceIdentityStatusChangeListener>();
  identityStatusChangeListenerVTable.ref.call =
      identityStatusChangeListenerCallNativeCallable.nativeFunction;
  identityStatusChangeListenerVTable.ref.uniffiFree =
      identityStatusChangeListenerFreePointer;

  rustCall((status) {
    _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_init_callback_vtable_identitystatuschangelistener(
      identityStatusChangeListenerVTable,
    );
    checkCallStatus(NullRustCallStatusErrorHandler(), status);
  });

  FfiConverterCallbackInterfaceIdentityStatusChangeListener._vtableInitialized =
      true;
}

class FfiConverterSequenceIdentityStatusChange {
  static List<IdentityStatusChange> lift(RustBuffer buf) {
    return FfiConverterSequenceIdentityStatusChange.read(buf.asUint8List())
        .value;
  }

  static LiftRetVal<List<IdentityStatusChange>> read(Uint8List buf) {
    List<IdentityStatusChange> res = [];
    final length =
        buf.buffer.asByteData().getInt32(buf.offsetInBytes, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < length; i++) {
      final ret = FfiConverterIdentityStatusChange.read(
          Uint8List.view(buf.buffer, offset));
      offset += ret.bytesRead;
      res.add(ret.value);
    }
    return LiftRetVal(res, offset - buf.offsetInBytes);
  }

  static int write(List<IdentityStatusChange> value, Uint8List buf) {
    buf.buffer
        .asByteData()
        .setInt32(buf.offsetInBytes, value.length, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < value.length; i++) {
      offset += FfiConverterIdentityStatusChange.write(
          value[i], Uint8List.view(buf.buffer, offset));
    }
    return offset - buf.offsetInBytes;
  }

  static int allocationSize(List<IdentityStatusChange> value) {
    int total = 4;
    for (var item in value) {
      total += FfiConverterIdentityStatusChange.allocationSize(item);
    }
    return total;
  }

  static RustBuffer lower(List<IdentityStatusChange> value) {
    final buf = Uint8List(allocationSize(value));
    write(value, buf);
    return toRustBuffer(buf);
  }
}

class FfiConverterSequenceString {
  static List<String> lift(RustBuffer buf) {
    return FfiConverterSequenceString.read(buf.asUint8List()).value;
  }

  static LiftRetVal<List<String>> read(Uint8List buf) {
    List<String> res = [];
    final length =
        buf.buffer.asByteData().getInt32(buf.offsetInBytes, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < length; i++) {
      final ret = FfiConverterString.read(Uint8List.view(buf.buffer, offset));
      offset += ret.bytesRead;
      res.add(ret.value);
    }
    return LiftRetVal(res, offset - buf.offsetInBytes);
  }

  static int write(List<String> value, Uint8List buf) {
    buf.buffer
        .asByteData()
        .setInt32(buf.offsetInBytes, value.length, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < value.length; i++) {
      offset += FfiConverterString.write(
          value[i], Uint8List.view(buf.buffer, offset));
    }
    return offset - buf.offsetInBytes;
  }

  static int allocationSize(List<String> value) {
    int total = 4;
    for (var item in value) {
      total += FfiConverterString.allocationSize(item);
    }
    return total;
  }

  static RustBuffer lower(List<String> value) {
    final buf = Uint8List(allocationSize(value));
    write(value, buf);
    return toRustBuffer(buf);
  }
}

class FfiConverterOptionalEventTimelineItem {
  static EventTimelineItem? lift(RustBuffer buf) {
    return FfiConverterOptionalEventTimelineItem.read(buf.asUint8List()).value;
  }

  static LiftRetVal<EventTimelineItem?> read(Uint8List buf) {
    if (ByteData.view(buf.buffer, buf.offsetInBytes).getInt8(0) == 0) {
      return LiftRetVal(null, 1);
    }
    final result = FfiConverterEventTimelineItem.read(
        Uint8List.view(buf.buffer, buf.offsetInBytes + 1));
    return LiftRetVal<EventTimelineItem?>(result.value, result.bytesRead + 1);
  }

  static int allocationSize([EventTimelineItem? value]) {
    if (value == null) {
      return 1;
    }
    return FfiConverterEventTimelineItem.allocationSize(value) + 1;
  }

  static RustBuffer lower(EventTimelineItem? value) {
    if (value == null) {
      return toRustBuffer(Uint8List.fromList([0]));
    }

    final length = FfiConverterOptionalEventTimelineItem.allocationSize(value);

    final Pointer<Uint8> frameData = calloc<Uint8>(length);
    final buf = frameData.asTypedList(length);

    FfiConverterOptionalEventTimelineItem.write(value, buf);

    final bytes = calloc<ForeignBytes>();
    bytes.ref.len = length;
    bytes.ref.data = frameData;
    return RustBuffer.fromBytes(bytes.ref);
  }

  static int write(EventTimelineItem? value, Uint8List buf) {
    if (value == null) {
      buf[0] = 0;
      return 1;
    }

    buf[0] = 1;

    return FfiConverterEventTimelineItem.write(
            value, Uint8List.view(buf.buffer, buf.offsetInBytes + 1)) +
        1;
  }
}

class FfiConverterOptionalAccountManagementAction {
  static AccountManagementAction? lift(RustBuffer buf) {
    return FfiConverterOptionalAccountManagementAction.read(buf.asUint8List())
        .value;
  }

  static LiftRetVal<AccountManagementAction?> read(Uint8List buf) {
    if (ByteData.view(buf.buffer, buf.offsetInBytes).getInt8(0) == 0) {
      return LiftRetVal(null, 1);
    }
    final result = FfiConverterAccountManagementAction.read(
        Uint8List.view(buf.buffer, buf.offsetInBytes + 1));
    return LiftRetVal<AccountManagementAction?>(
        result.value, result.bytesRead + 1);
  }

  static int allocationSize([AccountManagementAction? value]) {
    if (value == null) {
      return 1;
    }
    return FfiConverterAccountManagementAction.allocationSize(value) + 1;
  }

  static RustBuffer lower(AccountManagementAction? value) {
    if (value == null) {
      return toRustBuffer(Uint8List.fromList([0]));
    }

    final length =
        FfiConverterOptionalAccountManagementAction.allocationSize(value);

    final Pointer<Uint8> frameData = calloc<Uint8>(length);
    final buf = frameData.asTypedList(length);

    FfiConverterOptionalAccountManagementAction.write(value, buf);

    final bytes = calloc<ForeignBytes>();
    bytes.ref.len = length;
    bytes.ref.data = frameData;
    return RustBuffer.fromBytes(bytes.ref);
  }

  static int write(AccountManagementAction? value, Uint8List buf) {
    if (value == null) {
      buf[0] = 0;
      return 1;
    }

    buf[0] = 1;

    return FfiConverterAccountManagementAction.write(
            value, Uint8List.view(buf.buffer, buf.offsetInBytes + 1)) +
        1;
  }
}

class FfiConverterOptionalCallbackInterfaceSessionVerificationControllerDelegate {
  static SessionVerificationControllerDelegate? lift(RustBuffer buf) {
    return FfiConverterOptionalCallbackInterfaceSessionVerificationControllerDelegate
            .read(buf.asUint8List())
        .value;
  }

  static LiftRetVal<SessionVerificationControllerDelegate?> read(
      Uint8List buf) {
    if (ByteData.view(buf.buffer, buf.offsetInBytes).getInt8(0) == 0) {
      return LiftRetVal(null, 1);
    }
    final result =
        FfiConverterCallbackInterfaceSessionVerificationControllerDelegate.read(
            Uint8List.view(buf.buffer, buf.offsetInBytes + 1));
    return LiftRetVal<SessionVerificationControllerDelegate?>(
        result.value, result.bytesRead + 1);
  }

  static int allocationSize([SessionVerificationControllerDelegate? value]) {
    if (value == null) {
      return 1;
    }
    return FfiConverterCallbackInterfaceSessionVerificationControllerDelegate
            .allocationSize(value) +
        1;
  }

  static RustBuffer lower(SessionVerificationControllerDelegate? value) {
    if (value == null) {
      return toRustBuffer(Uint8List.fromList([0]));
    }

    final length =
        FfiConverterOptionalCallbackInterfaceSessionVerificationControllerDelegate
            .allocationSize(value);

    final Pointer<Uint8> frameData = calloc<Uint8>(length);
    final buf = frameData.asTypedList(length);

    FfiConverterOptionalCallbackInterfaceSessionVerificationControllerDelegate
        .write(value, buf);

    final bytes = calloc<ForeignBytes>();
    bytes.ref.len = length;
    bytes.ref.data = frameData;
    return RustBuffer.fromBytes(bytes.ref);
  }

  static int write(
      SessionVerificationControllerDelegate? value, Uint8List buf) {
    if (value == null) {
      buf[0] = 0;
      return 1;
    }

    buf[0] = 1;

    return FfiConverterCallbackInterfaceSessionVerificationControllerDelegate
            .write(value, Uint8List.view(buf.buffer, buf.offsetInBytes + 1)) +
        1;
  }
}

class FfiConverterSequencePushCondition {
  static List<PushCondition> lift(RustBuffer buf) {
    return FfiConverterSequencePushCondition.read(buf.asUint8List()).value;
  }

  static LiftRetVal<List<PushCondition>> read(Uint8List buf) {
    List<PushCondition> res = [];
    final length =
        buf.buffer.asByteData().getInt32(buf.offsetInBytes, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < length; i++) {
      final ret =
          FfiConverterPushCondition.read(Uint8List.view(buf.buffer, offset));
      offset += ret.bytesRead;
      res.add(ret.value);
    }
    return LiftRetVal(res, offset - buf.offsetInBytes);
  }

  static int write(List<PushCondition> value, Uint8List buf) {
    buf.buffer
        .asByteData()
        .setInt32(buf.offsetInBytes, value.length, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < value.length; i++) {
      offset += FfiConverterPushCondition.write(
          value[i], Uint8List.view(buf.buffer, offset));
    }
    return offset - buf.offsetInBytes;
  }

  static int allocationSize(List<PushCondition> value) {
    int total = 4;
    for (var item in value) {
      total += FfiConverterPushCondition.allocationSize(item);
    }
    return total;
  }

  static RustBuffer lower(List<PushCondition> value) {
    final buf = Uint8List(allocationSize(value));
    write(value, buf);
    return toRustBuffer(buf);
  }
}

class FfiConverterSequenceUserProfile {
  static List<UserProfile> lift(RustBuffer buf) {
    return FfiConverterSequenceUserProfile.read(buf.asUint8List()).value;
  }

  static LiftRetVal<List<UserProfile>> read(Uint8List buf) {
    List<UserProfile> res = [];
    final length =
        buf.buffer.asByteData().getInt32(buf.offsetInBytes, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < length; i++) {
      final ret =
          FfiConverterUserProfile.read(Uint8List.view(buf.buffer, offset));
      offset += ret.bytesRead;
      res.add(ret.value);
    }
    return LiftRetVal(res, offset - buf.offsetInBytes);
  }

  static int write(List<UserProfile> value, Uint8List buf) {
    buf.buffer
        .asByteData()
        .setInt32(buf.offsetInBytes, value.length, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < value.length; i++) {
      offset += FfiConverterUserProfile.write(
          value[i], Uint8List.view(buf.buffer, offset));
    }
    return offset - buf.offsetInBytes;
  }

  static int allocationSize(List<UserProfile> value) {
    int total = 4;
    for (var item in value) {
      total += FfiConverterUserProfile.allocationSize(item);
    }
    return total;
  }

  static RustBuffer lower(List<UserProfile> value) {
    final buf = Uint8List(allocationSize(value));
    write(value, buf);
    return toRustBuffer(buf);
  }
}

class FfiConverterOptionalIdentityResetHandle {
  static IdentityResetHandle? lift(RustBuffer buf) {
    return FfiConverterOptionalIdentityResetHandle.read(buf.asUint8List())
        .value;
  }

  static LiftRetVal<IdentityResetHandle?> read(Uint8List buf) {
    if (ByteData.view(buf.buffer, buf.offsetInBytes).getInt8(0) == 0) {
      return LiftRetVal(null, 1);
    }
    final result = IdentityResetHandle.read(
        Uint8List.view(buf.buffer, buf.offsetInBytes + 1));
    return LiftRetVal<IdentityResetHandle?>(result.value, result.bytesRead + 1);
  }

  static int allocationSize([IdentityResetHandle? value]) {
    if (value == null) {
      return 1;
    }
    return IdentityResetHandle.allocationSize(value) + 1;
  }

  static RustBuffer lower(IdentityResetHandle? value) {
    if (value == null) {
      return toRustBuffer(Uint8List.fromList([0]));
    }

    final length =
        FfiConverterOptionalIdentityResetHandle.allocationSize(value);

    final Pointer<Uint8> frameData = calloc<Uint8>(length);
    final buf = frameData.asTypedList(length);

    FfiConverterOptionalIdentityResetHandle.write(value, buf);

    final bytes = calloc<ForeignBytes>();
    bytes.ref.len = length;
    bytes.ref.data = frameData;
    return RustBuffer.fromBytes(bytes.ref);
  }

  static int write(IdentityResetHandle? value, Uint8List buf) {
    if (value == null) {
      buf[0] = 0;
      return 1;
    }

    buf[0] = 1;

    return IdentityResetHandle.write(
            value, Uint8List.view(buf.buffer, buf.offsetInBytes + 1)) +
        1;
  }
}

class FfiConverterOptionalPushFormat {
  static PushFormat? lift(RustBuffer buf) {
    return FfiConverterOptionalPushFormat.read(buf.asUint8List()).value;
  }

  static LiftRetVal<PushFormat?> read(Uint8List buf) {
    if (ByteData.view(buf.buffer, buf.offsetInBytes).getInt8(0) == 0) {
      return LiftRetVal(null, 1);
    }
    final result = FfiConverterPushFormat.read(
        Uint8List.view(buf.buffer, buf.offsetInBytes + 1));
    return LiftRetVal<PushFormat?>(result.value, result.bytesRead + 1);
  }

  static int allocationSize([PushFormat? value]) {
    if (value == null) {
      return 1;
    }
    return FfiConverterPushFormat.allocationSize(value) + 1;
  }

  static RustBuffer lower(PushFormat? value) {
    if (value == null) {
      return toRustBuffer(Uint8List.fromList([0]));
    }

    final length = FfiConverterOptionalPushFormat.allocationSize(value);

    final Pointer<Uint8> frameData = calloc<Uint8>(length);
    final buf = frameData.asTypedList(length);

    FfiConverterOptionalPushFormat.write(value, buf);

    final bytes = calloc<ForeignBytes>();
    bytes.ref.len = length;
    bytes.ref.data = frameData;
    return RustBuffer.fromBytes(bytes.ref);
  }

  static int write(PushFormat? value, Uint8List buf) {
    if (value == null) {
      buf[0] = 0;
      return 1;
    }

    buf[0] = 1;

    return FfiConverterPushFormat.write(
            value, Uint8List.view(buf.buffer, buf.offsetInBytes + 1)) +
        1;
  }
}

class FfiConverterOptionalUInt32 {
  static int? lift(RustBuffer buf) {
    return FfiConverterOptionalUInt32.read(buf.asUint8List()).value;
  }

  static LiftRetVal<int?> read(Uint8List buf) {
    if (ByteData.view(buf.buffer, buf.offsetInBytes).getInt8(0) == 0) {
      return LiftRetVal(null, 1);
    }
    final result = FfiConverterUInt32.read(
        Uint8List.view(buf.buffer, buf.offsetInBytes + 1));
    return LiftRetVal<int?>(result.value, result.bytesRead + 1);
  }

  static int allocationSize([int? value]) {
    if (value == null) {
      return 1;
    }
    return FfiConverterUInt32.allocationSize(value) + 1;
  }

  static RustBuffer lower(int? value) {
    if (value == null) {
      return toRustBuffer(Uint8List.fromList([0]));
    }

    final length = FfiConverterOptionalUInt32.allocationSize(value);

    final Pointer<Uint8> frameData = calloc<Uint8>(length);
    final buf = frameData.asTypedList(length);

    FfiConverterOptionalUInt32.write(value, buf);

    final bytes = calloc<ForeignBytes>();
    bytes.ref.len = length;
    bytes.ref.data = frameData;
    return RustBuffer.fromBytes(bytes.ref);
  }

  static int write(int? value, Uint8List buf) {
    if (value == null) {
      buf[0] = 0;
      return 1;
    }

    buf[0] = 1;

    return FfiConverterUInt32.write(
            value, Uint8List.view(buf.buffer, buf.offsetInBytes + 1)) +
        1;
  }
}

class FfiConverterUInt32 {
  static int lift(int value) => value;

  static LiftRetVal<int> read(Uint8List buf) {
    return LiftRetVal(buf.buffer.asByteData(buf.offsetInBytes).getUint32(0), 4);
  }

  static int lower(int value) => value;

  static int allocationSize([int value = 0]) {
    return 4;
  }

  static int write(int value, Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setUint32(0, value);
    return FfiConverterUInt32.allocationSize();
  }
}

class FfiConverterSequenceRoomListEntriesDynamicFilterKind {
  static List<RoomListEntriesDynamicFilterKind> lift(RustBuffer buf) {
    return FfiConverterSequenceRoomListEntriesDynamicFilterKind.read(
            buf.asUint8List())
        .value;
  }

  static LiftRetVal<List<RoomListEntriesDynamicFilterKind>> read(
      Uint8List buf) {
    List<RoomListEntriesDynamicFilterKind> res = [];
    final length =
        buf.buffer.asByteData().getInt32(buf.offsetInBytes, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < length; i++) {
      final ret = FfiConverterRoomListEntriesDynamicFilterKind.read(
          Uint8List.view(buf.buffer, offset));
      offset += ret.bytesRead;
      res.add(ret.value);
    }
    return LiftRetVal(res, offset - buf.offsetInBytes);
  }

  static int write(
      List<RoomListEntriesDynamicFilterKind> value, Uint8List buf) {
    buf.buffer
        .asByteData()
        .setInt32(buf.offsetInBytes, value.length, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < value.length; i++) {
      offset += FfiConverterRoomListEntriesDynamicFilterKind.write(
          value[i], Uint8List.view(buf.buffer, offset));
    }
    return offset - buf.offsetInBytes;
  }

  static int allocationSize(List<RoomListEntriesDynamicFilterKind> value) {
    int total = 4;
    for (var item in value) {
      total +=
          FfiConverterRoomListEntriesDynamicFilterKind.allocationSize(item);
    }
    return total;
  }

  static RustBuffer lower(List<RoomListEntriesDynamicFilterKind> value) {
    final buf = Uint8List(allocationSize(value));
    write(value, buf);
    return toRustBuffer(buf);
  }
}

abstract class ClientDelegate {
  void didReceiveAuthError(
    bool isSoftLogout,
  );
}

class FfiConverterCallbackInterfaceClientDelegate {
  static final _handleMap = UniffiHandleMap<ClientDelegate>();
  static bool _vtableInitialized = false;

  static ClientDelegate lift(int handle) {
    return _handleMap.get(handle);
  }

  static int lower(ClientDelegate value) {
    _ensureVTableInitialized();
    return _handleMap.insert(value);
  }

  static void _ensureVTableInitialized() {
    if (!_vtableInitialized) {
      initClientDelegateVTable();
      _vtableInitialized = true;
    }
  }

  static LiftRetVal<ClientDelegate> read(Uint8List buf) {
    final handle = buf.buffer.asByteData(buf.offsetInBytes).getInt64(0);
    return LiftRetVal(lift(handle), 8);
  }

  static int write(ClientDelegate value, Uint8List buf) {
    final handle = lower(value);
    buf.buffer.asByteData(buf.offsetInBytes).setInt64(0, handle);
    return 8;
  }

  static int allocationSize(ClientDelegate value) {
    return 8;
  }
}

typedef UniffiCallbackInterfaceClientDelegateMethod0 = Void Function(
    Uint64, Int8, Pointer<Void>, Pointer<RustCallStatus>);
typedef UniffiCallbackInterfaceClientDelegateMethod0Dart = void Function(
    int, int, Pointer<Void>, Pointer<RustCallStatus>);
typedef UniffiCallbackInterfaceClientDelegateFree = Void Function(Uint64);
typedef UniffiCallbackInterfaceClientDelegateFreeDart = void Function(int);

final class UniffiVTableCallbackInterfaceClientDelegate extends Struct {
  external Pointer<NativeFunction<UniffiCallbackInterfaceClientDelegateMethod0>>
      didReceiveAuthError;
  external Pointer<NativeFunction<UniffiCallbackInterfaceClientDelegateFree>>
      uniffiFree;
}

void clientDelegateDidReceiveAuthException(int uniffiHandle, int isSoftLogout,
    Pointer<Void> outReturn, Pointer<RustCallStatus> callStatus) {
  final status = callStatus.ref;
  try {
    final obj = FfiConverterCallbackInterfaceClientDelegate._handleMap
        .get(uniffiHandle);
    final bool_arg0 = isSoftLogout == 1;
    obj.didReceiveAuthError(
      bool_arg0,
    );
    status.code = CALL_SUCCESS;
  } catch (e) {
    status.code = CALL_UNEXPECTED_ERROR;
    status.errorBuf = FfiConverterString.lower(e.toString());
  }
}

final NativeCallable<UniffiCallbackInterfaceClientDelegateMethod0>
    clientDelegateDidReceiveAuthExceptionNativeCallable =
    NativeCallable<UniffiCallbackInterfaceClientDelegateMethod0>.listener(
        clientDelegateDidReceiveAuthException);

void clientDelegateFreeCallback(int handle) {
  try {
    FfiConverterCallbackInterfaceClientDelegate._handleMap.remove(handle);
  } catch (e) {}
}

final Pointer<NativeFunction<UniffiCallbackInterfaceClientDelegateFree>>
    clientDelegateFreePointer =
    Pointer.fromFunction<UniffiCallbackInterfaceClientDelegateFree>(
        clientDelegateFreeCallback);
late final Pointer<UniffiVTableCallbackInterfaceClientDelegate>
    clientDelegateVTable;

void initClientDelegateVTable() {
  if (FfiConverterCallbackInterfaceClientDelegate._vtableInitialized) {
    return;
  }

  clientDelegateVTable = calloc<UniffiVTableCallbackInterfaceClientDelegate>();
  clientDelegateVTable.ref.didReceiveAuthError =
      clientDelegateDidReceiveAuthExceptionNativeCallable.nativeFunction;
  clientDelegateVTable.ref.uniffiFree = clientDelegateFreePointer;

  rustCall((status) {
    _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_init_callback_vtable_clientdelegate(
      clientDelegateVTable,
    );
    checkCallStatus(NullRustCallStatusErrorHandler(), status);
  });

  FfiConverterCallbackInterfaceClientDelegate._vtableInitialized = true;
}

abstract class VerificationStateListener {
  void onUpdate(
    VerificationState status,
  );
}

class FfiConverterCallbackInterfaceVerificationStateListener {
  static final _handleMap = UniffiHandleMap<VerificationStateListener>();
  static bool _vtableInitialized = false;

  static VerificationStateListener lift(int handle) {
    return _handleMap.get(handle);
  }

  static int lower(VerificationStateListener value) {
    _ensureVTableInitialized();
    return _handleMap.insert(value);
  }

  static void _ensureVTableInitialized() {
    if (!_vtableInitialized) {
      initVerificationStateListenerVTable();
      _vtableInitialized = true;
    }
  }

  static LiftRetVal<VerificationStateListener> read(Uint8List buf) {
    final handle = buf.buffer.asByteData(buf.offsetInBytes).getInt64(0);
    return LiftRetVal(lift(handle), 8);
  }

  static int write(VerificationStateListener value, Uint8List buf) {
    final handle = lower(value);
    buf.buffer.asByteData(buf.offsetInBytes).setInt64(0, handle);
    return 8;
  }

  static int allocationSize(VerificationStateListener value) {
    return 8;
  }
}

typedef UniffiCallbackInterfaceVerificationStateListenerMethod0 = Void Function(
    Uint64, RustBuffer, Pointer<Void>, Pointer<RustCallStatus>);
typedef UniffiCallbackInterfaceVerificationStateListenerMethod0Dart = void
    Function(int, int, Pointer<Void>, Pointer<RustCallStatus>);
typedef UniffiCallbackInterfaceVerificationStateListenerFree = Void Function(
    Uint64);
typedef UniffiCallbackInterfaceVerificationStateListenerFreeDart = void
    Function(int);

final class UniffiVTableCallbackInterfaceVerificationStateListener
    extends Struct {
  external Pointer<
      NativeFunction<
          UniffiCallbackInterfaceVerificationStateListenerMethod0>> onUpdate;
  external Pointer<
          NativeFunction<UniffiCallbackInterfaceVerificationStateListenerFree>>
      uniffiFree;
}

void verificationStateListenerOnUpdate(int uniffiHandle, RustBuffer status,
    Pointer<Void> outReturn, Pointer<RustCallStatus> callStatus) {
  final statusRef = callStatus.ref;
  try {
    final obj = FfiConverterCallbackInterfaceVerificationStateListener
        ._handleMap
        .get(uniffiHandle);
    final arg0 = FfiConverterVerificationState.lift(status);
    obj.onUpdate(
      arg0,
    );
    statusRef.code = CALL_SUCCESS;
  } catch (e) {
    statusRef.code = CALL_UNEXPECTED_ERROR;
    statusRef.errorBuf = FfiConverterString.lower(e.toString());
  }
}

final NativeCallable<UniffiCallbackInterfaceVerificationStateListenerMethod0>
    verificationStateListenerOnUpdateNativeCallable = NativeCallable<
            UniffiCallbackInterfaceVerificationStateListenerMethod0>.listener(
        verificationStateListenerOnUpdate);

void verificationStateListenerFreeCallback(int handle) {
  try {
    FfiConverterCallbackInterfaceVerificationStateListener._handleMap
        .remove(handle);
  } catch (e) {}
}

final Pointer<
        NativeFunction<UniffiCallbackInterfaceVerificationStateListenerFree>>
    verificationStateListenerFreePointer =
    Pointer.fromFunction<UniffiCallbackInterfaceVerificationStateListenerFree>(
        verificationStateListenerFreeCallback);
late final Pointer<UniffiVTableCallbackInterfaceVerificationStateListener>
    verificationStateListenerVTable;

void initVerificationStateListenerVTable() {
  if (FfiConverterCallbackInterfaceVerificationStateListener
      ._vtableInitialized) {
    return;
  }

  verificationStateListenerVTable =
      calloc<UniffiVTableCallbackInterfaceVerificationStateListener>();
  verificationStateListenerVTable.ref.onUpdate =
      verificationStateListenerOnUpdateNativeCallable.nativeFunction;
  verificationStateListenerVTable.ref.uniffiFree =
      verificationStateListenerFreePointer;

  rustCall((status) {
    _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_init_callback_vtable_verificationstatelistener(
      verificationStateListenerVTable,
    );
    checkCallStatus(NullRustCallStatusErrorHandler(), status);
  });

  FfiConverterCallbackInterfaceVerificationStateListener._vtableInitialized =
      true;
}

class FfiConverterSequenceOidcPrompt {
  static List<OidcPrompt> lift(RustBuffer buf) {
    return FfiConverterSequenceOidcPrompt.read(buf.asUint8List()).value;
  }

  static LiftRetVal<List<OidcPrompt>> read(Uint8List buf) {
    List<OidcPrompt> res = [];
    final length =
        buf.buffer.asByteData().getInt32(buf.offsetInBytes, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < length; i++) {
      final ret =
          FfiConverterOidcPrompt.read(Uint8List.view(buf.buffer, offset));
      offset += ret.bytesRead;
      res.add(ret.value);
    }
    return LiftRetVal(res, offset - buf.offsetInBytes);
  }

  static int write(List<OidcPrompt> value, Uint8List buf) {
    buf.buffer
        .asByteData()
        .setInt32(buf.offsetInBytes, value.length, Endian.little);
    int offset = buf.offsetInBytes + 4;
    for (var i = 0; i < value.length; i++) {
      offset += FfiConverterOidcPrompt.write(
          value[i], Uint8List.view(buf.buffer, offset));
    }
    return offset - buf.offsetInBytes;
  }

  static int allocationSize(List<OidcPrompt> value) {
    int total = 4;
    for (var item in value) {
      total += FfiConverterOidcPrompt.allocationSize(item);
    }
    return total;
  }

  static RustBuffer lower(List<OidcPrompt> value) {
    final buf = Uint8List(allocationSize(value));
    write(value, buf);
    return toRustBuffer(buf);
  }
}

class FfiConverterOptionalThreadSubscription {
  static ThreadSubscription? lift(RustBuffer buf) {
    return FfiConverterOptionalThreadSubscription.read(buf.asUint8List()).value;
  }

  static LiftRetVal<ThreadSubscription?> read(Uint8List buf) {
    if (ByteData.view(buf.buffer, buf.offsetInBytes).getInt8(0) == 0) {
      return LiftRetVal(null, 1);
    }
    final result = FfiConverterThreadSubscription.read(
        Uint8List.view(buf.buffer, buf.offsetInBytes + 1));
    return LiftRetVal<ThreadSubscription?>(result.value, result.bytesRead + 1);
  }

  static int allocationSize([ThreadSubscription? value]) {
    if (value == null) {
      return 1;
    }
    return FfiConverterThreadSubscription.allocationSize(value) + 1;
  }

  static RustBuffer lower(ThreadSubscription? value) {
    if (value == null) {
      return toRustBuffer(Uint8List.fromList([0]));
    }

    final length = FfiConverterOptionalThreadSubscription.allocationSize(value);

    final Pointer<Uint8> frameData = calloc<Uint8>(length);
    final buf = frameData.asTypedList(length);

    FfiConverterOptionalThreadSubscription.write(value, buf);

    final bytes = calloc<ForeignBytes>();
    bytes.ref.len = length;
    bytes.ref.data = frameData;
    return RustBuffer.fromBytes(bytes.ref);
  }

  static int write(ThreadSubscription? value, Uint8List buf) {
    if (value == null) {
      buf[0] = 0;
      return 1;
    }

    buf[0] = 1;

    return FfiConverterThreadSubscription.write(
            value, Uint8List.view(buf.buffer, buf.offsetInBytes + 1)) +
        1;
  }
}

abstract class LiveLocationShareListener {
  void call(
    List<LiveLocationShare> liveLocationShares,
  );
}

class FfiConverterCallbackInterfaceLiveLocationShareListener {
  static final _handleMap = UniffiHandleMap<LiveLocationShareListener>();
  static bool _vtableInitialized = false;

  static LiveLocationShareListener lift(int handle) {
    return _handleMap.get(handle);
  }

  static int lower(LiveLocationShareListener value) {
    _ensureVTableInitialized();
    return _handleMap.insert(value);
  }

  static void _ensureVTableInitialized() {
    if (!_vtableInitialized) {
      initLiveLocationShareListenerVTable();
      _vtableInitialized = true;
    }
  }

  static LiftRetVal<LiveLocationShareListener> read(Uint8List buf) {
    final handle = buf.buffer.asByteData(buf.offsetInBytes).getInt64(0);
    return LiftRetVal(lift(handle), 8);
  }

  static int write(LiveLocationShareListener value, Uint8List buf) {
    final handle = lower(value);
    buf.buffer.asByteData(buf.offsetInBytes).setInt64(0, handle);
    return 8;
  }

  static int allocationSize(LiveLocationShareListener value) {
    return 8;
  }
}

typedef UniffiCallbackInterfaceLiveLocationShareListenerMethod0 = Void Function(
    Uint64, RustBuffer, Pointer<Void>, Pointer<RustCallStatus>);
typedef UniffiCallbackInterfaceLiveLocationShareListenerMethod0Dart = void
    Function(int, RustBuffer, Pointer<Void>, Pointer<RustCallStatus>);
typedef UniffiCallbackInterfaceLiveLocationShareListenerFree = Void Function(
    Uint64);
typedef UniffiCallbackInterfaceLiveLocationShareListenerFreeDart = void
    Function(int);

final class UniffiVTableCallbackInterfaceLiveLocationShareListener
    extends Struct {
  external Pointer<
      NativeFunction<
          UniffiCallbackInterfaceLiveLocationShareListenerMethod0>> call;
  external Pointer<
          NativeFunction<UniffiCallbackInterfaceLiveLocationShareListenerFree>>
      uniffiFree;
}

void liveLocationShareListenerCall(
    int uniffiHandle,
    RustBuffer liveLocationShares,
    Pointer<Void> outReturn,
    Pointer<RustCallStatus> callStatus) {
  final status = callStatus.ref;
  try {
    final obj = FfiConverterCallbackInterfaceLiveLocationShareListener
        ._handleMap
        .get(uniffiHandle);
    final arg0 = FfiConverterSequenceLiveLocationShare.lift(liveLocationShares);
    obj.call(
      arg0,
    );
    status.code = CALL_SUCCESS;
  } catch (e) {
    status.code = CALL_UNEXPECTED_ERROR;
    status.errorBuf = FfiConverterString.lower(e.toString());
  }
}

final NativeCallable<UniffiCallbackInterfaceLiveLocationShareListenerMethod0>
    liveLocationShareListenerCallNativeCallable = NativeCallable<
            UniffiCallbackInterfaceLiveLocationShareListenerMethod0>.listener(
        liveLocationShareListenerCall);

void liveLocationShareListenerFreeCallback(int handle) {
  try {
    FfiConverterCallbackInterfaceLiveLocationShareListener._handleMap
        .remove(handle);
  } catch (e) {}
}

final Pointer<
        NativeFunction<UniffiCallbackInterfaceLiveLocationShareListenerFree>>
    liveLocationShareListenerFreePointer =
    Pointer.fromFunction<UniffiCallbackInterfaceLiveLocationShareListenerFree>(
        liveLocationShareListenerFreeCallback);
late final Pointer<UniffiVTableCallbackInterfaceLiveLocationShareListener>
    liveLocationShareListenerVTable;

void initLiveLocationShareListenerVTable() {
  if (FfiConverterCallbackInterfaceLiveLocationShareListener
      ._vtableInitialized) {
    return;
  }

  liveLocationShareListenerVTable =
      calloc<UniffiVTableCallbackInterfaceLiveLocationShareListener>();
  liveLocationShareListenerVTable.ref.call =
      liveLocationShareListenerCallNativeCallable.nativeFunction;
  liveLocationShareListenerVTable.ref.uniffiFree =
      liveLocationShareListenerFreePointer;

  rustCall((status) {
    _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_init_callback_vtable_livelocationsharelistener(
      liveLocationShareListenerVTable,
    );
    checkCallStatus(NullRustCallStatusErrorHandler(), status);
  });

  FfiConverterCallbackInterfaceLiveLocationShareListener._vtableInitialized =
      true;
}

class FfiConverterUInt8 {
  static int lift(int value) => value;

  static LiftRetVal<int> read(Uint8List buf) {
    return LiftRetVal(buf.buffer.asByteData(buf.offsetInBytes).getUint8(0), 1);
  }

  static int lower(int value) => value;

  static int allocationSize([int value = 0]) {
    return 1;
  }

  static int write(int value, Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setUint8(0, value);
    return FfiConverterUInt8.allocationSize();
  }
}

abstract class BackupSteadyStateListener {
  void onUpdate(
    BackupUploadState status,
  );
}

class FfiConverterCallbackInterfaceBackupSteadyStateListener {
  static final _handleMap = UniffiHandleMap<BackupSteadyStateListener>();
  static bool _vtableInitialized = false;

  static BackupSteadyStateListener lift(int handle) {
    return _handleMap.get(handle);
  }

  static int lower(BackupSteadyStateListener value) {
    _ensureVTableInitialized();
    return _handleMap.insert(value);
  }

  static void _ensureVTableInitialized() {
    if (!_vtableInitialized) {
      initBackupSteadyStateListenerVTable();
      _vtableInitialized = true;
    }
  }

  static LiftRetVal<BackupSteadyStateListener> read(Uint8List buf) {
    final handle = buf.buffer.asByteData(buf.offsetInBytes).getInt64(0);
    return LiftRetVal(lift(handle), 8);
  }

  static int write(BackupSteadyStateListener value, Uint8List buf) {
    final handle = lower(value);
    buf.buffer.asByteData(buf.offsetInBytes).setInt64(0, handle);
    return 8;
  }

  static int allocationSize(BackupSteadyStateListener value) {
    return 8;
  }
}

typedef UniffiCallbackInterfaceBackupSteadyStateListenerMethod0 = Void Function(
    Uint64, RustBuffer, Pointer<Void>, Pointer<RustCallStatus>);
typedef UniffiCallbackInterfaceBackupSteadyStateListenerMethod0Dart = void
    Function(int, int, Pointer<Void>, Pointer<RustCallStatus>);
typedef UniffiCallbackInterfaceBackupSteadyStateListenerFree = Void Function(
    Uint64);
typedef UniffiCallbackInterfaceBackupSteadyStateListenerFreeDart = void
    Function(int);

final class UniffiVTableCallbackInterfaceBackupSteadyStateListener
    extends Struct {
  external Pointer<
      NativeFunction<
          UniffiCallbackInterfaceBackupSteadyStateListenerMethod0>> onUpdate;
  external Pointer<
          NativeFunction<UniffiCallbackInterfaceBackupSteadyStateListenerFree>>
      uniffiFree;
}

void backupSteadyStateListenerOnUpdate(int uniffiHandle, RustBuffer status,
    Pointer<Void> outReturn, Pointer<RustCallStatus> callStatus) {
  final statusRef = callStatus.ref;
  try {
    final obj = FfiConverterCallbackInterfaceBackupSteadyStateListener
        ._handleMap
        .get(uniffiHandle);
    final arg0 = FfiConverterBackupUploadState.lift(status);
    obj.onUpdate(
      arg0,
    );
    statusRef.code = CALL_SUCCESS;
  } catch (e) {
    statusRef.code = CALL_UNEXPECTED_ERROR;
    statusRef.errorBuf = FfiConverterString.lower(e.toString());
  }
}

final NativeCallable<UniffiCallbackInterfaceBackupSteadyStateListenerMethod0>
    backupSteadyStateListenerOnUpdateNativeCallable = NativeCallable<
            UniffiCallbackInterfaceBackupSteadyStateListenerMethod0>.listener(
        backupSteadyStateListenerOnUpdate);

void backupSteadyStateListenerFreeCallback(int handle) {
  try {
    FfiConverterCallbackInterfaceBackupSteadyStateListener._handleMap
        .remove(handle);
  } catch (e) {}
}

final Pointer<
        NativeFunction<UniffiCallbackInterfaceBackupSteadyStateListenerFree>>
    backupSteadyStateListenerFreePointer =
    Pointer.fromFunction<UniffiCallbackInterfaceBackupSteadyStateListenerFree>(
        backupSteadyStateListenerFreeCallback);
late final Pointer<UniffiVTableCallbackInterfaceBackupSteadyStateListener>
    backupSteadyStateListenerVTable;

void initBackupSteadyStateListenerVTable() {
  if (FfiConverterCallbackInterfaceBackupSteadyStateListener
      ._vtableInitialized) {
    return;
  }

  backupSteadyStateListenerVTable =
      calloc<UniffiVTableCallbackInterfaceBackupSteadyStateListener>();
  backupSteadyStateListenerVTable.ref.onUpdate =
      backupSteadyStateListenerOnUpdateNativeCallable.nativeFunction;
  backupSteadyStateListenerVTable.ref.uniffiFree =
      backupSteadyStateListenerFreePointer;

  rustCall((status) {
    _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_init_callback_vtable_backupsteadystatelistener(
      backupSteadyStateListenerVTable,
    );
    checkCallStatus(NullRustCallStatusErrorHandler(), status);
  });

  FfiConverterCallbackInterfaceBackupSteadyStateListener._vtableInitialized =
      true;
}

class FfiConverterOptionalPowerLevels {
  static PowerLevels? lift(RustBuffer buf) {
    return FfiConverterOptionalPowerLevels.read(buf.asUint8List()).value;
  }

  static LiftRetVal<PowerLevels?> read(Uint8List buf) {
    if (ByteData.view(buf.buffer, buf.offsetInBytes).getInt8(0) == 0) {
      return LiftRetVal(null, 1);
    }
    final result = FfiConverterPowerLevels.read(
        Uint8List.view(buf.buffer, buf.offsetInBytes + 1));
    return LiftRetVal<PowerLevels?>(result.value, result.bytesRead + 1);
  }

  static int allocationSize([PowerLevels? value]) {
    if (value == null) {
      return 1;
    }
    return FfiConverterPowerLevels.allocationSize(value) + 1;
  }

  static RustBuffer lower(PowerLevels? value) {
    if (value == null) {
      return toRustBuffer(Uint8List.fromList([0]));
    }

    final length = FfiConverterOptionalPowerLevels.allocationSize(value);

    final Pointer<Uint8> frameData = calloc<Uint8>(length);
    final buf = frameData.asTypedList(length);

    FfiConverterOptionalPowerLevels.write(value, buf);

    final bytes = calloc<ForeignBytes>();
    bytes.ref.len = length;
    bytes.ref.data = frameData;
    return RustBuffer.fromBytes(bytes.ref);
  }

  static int write(PowerLevels? value, Uint8List buf) {
    if (value == null) {
      buf[0] = 0;
      return 1;
    }

    buf[0] = 1;

    return FfiConverterPowerLevels.write(
            value, Uint8List.view(buf.buffer, buf.offsetInBytes + 1)) +
        1;
  }
}

class FfiConverterOptionalVirtualTimelineItem {
  static VirtualTimelineItem? lift(RustBuffer buf) {
    return FfiConverterOptionalVirtualTimelineItem.read(buf.asUint8List())
        .value;
  }

  static LiftRetVal<VirtualTimelineItem?> read(Uint8List buf) {
    if (ByteData.view(buf.buffer, buf.offsetInBytes).getInt8(0) == 0) {
      return LiftRetVal(null, 1);
    }
    final result = FfiConverterVirtualTimelineItem.read(
        Uint8List.view(buf.buffer, buf.offsetInBytes + 1));
    return LiftRetVal<VirtualTimelineItem?>(result.value, result.bytesRead + 1);
  }

  static int allocationSize([VirtualTimelineItem? value]) {
    if (value == null) {
      return 1;
    }
    return FfiConverterVirtualTimelineItem.allocationSize(value) + 1;
  }

  static RustBuffer lower(VirtualTimelineItem? value) {
    if (value == null) {
      return toRustBuffer(Uint8List.fromList([0]));
    }

    final length =
        FfiConverterOptionalVirtualTimelineItem.allocationSize(value);

    final Pointer<Uint8> frameData = calloc<Uint8>(length);
    final buf = frameData.asTypedList(length);

    FfiConverterOptionalVirtualTimelineItem.write(value, buf);

    final bytes = calloc<ForeignBytes>();
    bytes.ref.len = length;
    bytes.ref.data = frameData;
    return RustBuffer.fromBytes(bytes.ref);
  }

  static int write(VirtualTimelineItem? value, Uint8List buf) {
    if (value == null) {
      buf[0] = 0;
      return 1;
    }

    buf[0] = 1;

    return FfiConverterVirtualTimelineItem.write(
            value, Uint8List.view(buf.buffer, buf.offsetInBytes + 1)) +
        1;
  }
}

typedef Timestamp = int;
typedef FfiConverterTimestamp = FfiConverterUInt64;

class ClientBuildExceptionErrorHandler
    extends UniffiRustCallStatusErrorHandler {
  @override
  Exception lift(RustBuffer errorBuf) {
    return Exception(FfiConverterClientBuildException.lift(errorBuf));
  }
}

final ClientBuildExceptionErrorHandler clientBuildExceptionErrorHandler =
    ClientBuildExceptionErrorHandler();

class ClientExceptionErrorHandler extends UniffiRustCallStatusErrorHandler {
  @override
  Exception lift(RustBuffer errorBuf) {
    return FfiConverterClientException.lift(errorBuf);
  }
}

final ClientExceptionErrorHandler clientExceptionErrorHandler =
    ClientExceptionErrorHandler();

class FocusEventExceptionErrorHandler extends UniffiRustCallStatusErrorHandler {
  @override
  Exception lift(RustBuffer errorBuf) {
    return FfiConverterFocusEventException.lift(errorBuf);
  }
}

final FocusEventExceptionErrorHandler focusEventExceptionErrorHandler =
    FocusEventExceptionErrorHandler();

class HumanQrLoginExceptionErrorHandler
    extends UniffiRustCallStatusErrorHandler {
  @override
  Exception lift(RustBuffer errorBuf) {
    return FfiConverterHumanQrLoginException.lift(errorBuf).toException();
  }
}

final HumanQrLoginExceptionErrorHandler humanQrLoginExceptionErrorHandler =
    HumanQrLoginExceptionErrorHandler();

class MediaInfoExceptionErrorHandler extends UniffiRustCallStatusErrorHandler {
  @override
  Exception lift(RustBuffer errorBuf) {
    return FfiConverterMediaInfoException.lift(errorBuf).toException();
  }
}

final MediaInfoExceptionErrorHandler mediaInfoExceptionErrorHandler =
    MediaInfoExceptionErrorHandler();

class NotificationSettingsExceptionErrorHandler
    extends UniffiRustCallStatusErrorHandler {
  @override
  Exception lift(RustBuffer errorBuf) {
    return FfiConverterNotificationSettingsException.lift(errorBuf);
  }
}

final NotificationSettingsExceptionErrorHandler
    notificationSettingsExceptionErrorHandler =
    NotificationSettingsExceptionErrorHandler();

class OidcExceptionErrorHandler extends UniffiRustCallStatusErrorHandler {
  @override
  Exception lift(RustBuffer errorBuf) {
    return FfiConverterOidcException.lift(errorBuf).toException();
  }
}

final OidcExceptionErrorHandler oidcExceptionErrorHandler =
    OidcExceptionErrorHandler();

class QrCodeDecodeExceptionErrorHandler
    extends UniffiRustCallStatusErrorHandler {
  @override
  Exception lift(RustBuffer errorBuf) {
    return FfiConverterQrCodeDecodeException.lift(errorBuf).toException();
  }
}

final QrCodeDecodeExceptionErrorHandler qrCodeDecodeExceptionErrorHandler =
    QrCodeDecodeExceptionErrorHandler();

class RecoveryExceptionErrorHandler extends UniffiRustCallStatusErrorHandler {
  @override
  Exception lift(RustBuffer errorBuf) {
    return FfiConverterRecoveryException.lift(errorBuf);
  }
}

final RecoveryExceptionErrorHandler recoveryExceptionErrorHandler =
    RecoveryExceptionErrorHandler();

class RoomExceptionErrorHandler extends UniffiRustCallStatusErrorHandler {
  @override
  Exception lift(RustBuffer errorBuf) {
    return Exception(FfiConverterRoomException.lift(errorBuf));
  }
}

final RoomExceptionErrorHandler roomExceptionErrorHandler =
    RoomExceptionErrorHandler();

class RoomListExceptionErrorHandler extends UniffiRustCallStatusErrorHandler {
  @override
  Exception lift(RustBuffer errorBuf) {
    return FfiConverterRoomListException.lift(errorBuf);
  }
}

final RoomListExceptionErrorHandler roomListExceptionErrorHandler =
    RoomListExceptionErrorHandler();

class SsoExceptionErrorHandler extends UniffiRustCallStatusErrorHandler {
  @override
  Exception lift(RustBuffer errorBuf) {
    return Exception(FfiConverterSsoException.lift(errorBuf));
  }
}

final SsoExceptionErrorHandler ssoExceptionErrorHandler =
    SsoExceptionErrorHandler();

class SteadyStateExceptionErrorHandler
    extends UniffiRustCallStatusErrorHandler {
  @override
  Exception lift(RustBuffer errorBuf) {
    return Exception(FfiConverterSteadyStateException.lift(errorBuf));
  }
}

final SteadyStateExceptionErrorHandler steadyStateExceptionErrorHandler =
    SteadyStateExceptionErrorHandler();

const int UNIFFI_RUST_FUTURE_POLL_READY = 0;
const int UNIFFI_RUST_FUTURE_POLL_MAYBE_READY = 1;

typedef UniffiRustFutureContinuationCallback = Void Function(Uint64, Int8);

Future<T> uniffiRustCallAsync<T, F>(
  Pointer<Void> Function() rustFutureFunc,
  void Function(
          Pointer<Void>,
          Pointer<NativeFunction<UniffiRustFutureContinuationCallback>>,
          Pointer<Void>)
      pollFunc,
  F Function(Pointer<Void>, Pointer<RustCallStatus>) completeFunc,
  void Function(Pointer<Void>) freeFunc,
  T Function(F) liftFunc, [
  UniffiRustCallStatusErrorHandler? errorHandler,
]) async {
  final rustFuture = rustFutureFunc();
  final completer = Completer<int>();

  late final NativeCallable<UniffiRustFutureContinuationCallback> callback;

  void poll() {
    pollFunc(
      rustFuture,
      callback.nativeFunction,
      Pointer<Void>.fromAddress(0),
    );
  }

  void onResponse(int _idx, int pollResult) {
    if (pollResult == UNIFFI_RUST_FUTURE_POLL_READY) {
      completer.complete(pollResult);
    } else {
      poll();
    }
  }

  callback =
      NativeCallable<UniffiRustFutureContinuationCallback>.listener(onResponse);

  try {
    poll();
    await completer.future;
    callback.close();

    final status = calloc<RustCallStatus>();
    try {
      final result = completeFunc(rustFuture, status);

      return liftFunc(result);
    } finally {
      calloc.free(status);
    }
  } finally {
    freeFunc(rustFuture);
  }
}

class UniffiHandleMap<T> {
  final Map<int, T> _map = {};
  int _counter = 0;

  int insert(T obj) {
    final handle = _counter++;
    _map[handle] = obj;
    return handle;
  }

  T get(int handle) {
    final obj = _map[handle];
    if (obj == null) {
      throw UniffiInternalError(
          UniffiInternalError.unexpectedStaleHandle, "Handle not found");
    }
    return obj;
  }

  void remove(int handle) {
    if (_map.remove(handle) == null) {
      throw UniffiInternalError(
          UniffiInternalError.unexpectedStaleHandle, "Handle not found");
    }
  }
}

RoomMessageEventContentWithoutRelation contentWithoutRelationFromMessage(
  MessageContent message,
) {
  return rustCall(
      (status) => RoomMessageEventContentWithoutRelation.lift(_UniffiLib
          .instance
          .uniffi_matrix_sdk_ffi_fn_func_content_without_relation_from_message(
              FfiConverterMessageContent.lower(message), status)),
      clientExceptionErrorHandler);
}

EditedContent createCaptionEdit(
  String? caption,
  FormattedBody? formattedCaption,
  Mentions? mentions,
) {
  return rustCall(
      (status) => FfiConverterEditedContent.lift(_UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_func_create_caption_edit(
              FfiConverterOptionalString.lower(caption),
              FfiConverterOptionalFormattedBody.lower(formattedCaption),
              FfiConverterOptionalMentions.lower(mentions),
              status)),
      null);
}

String genTransactionId() {
  return rustCall(
      (status) => FfiConverterString.lift(_UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_func_gen_transaction_id(status)),
      null);
}

Future<String> generateWebviewUrl(
  WidgetSettings widgetSettings,
  Room room,
  ClientProperties props,
) {
  return uniffiRustCallAsync(
    () =>
        _UniffiLib.instance.uniffi_matrix_sdk_ffi_fn_func_generate_webview_url(
      FfiConverterWidgetSettings.lower(widgetSettings),
      Room.lower(room),
      FfiConverterClientProperties.lower(props),
    ),
    _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_poll_rust_buffer,
    _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_complete_rust_buffer,
    _UniffiLib.instance.ffi_matrix_sdk_ffi_rust_future_free_rust_buffer,
    FfiConverterString.lift,
    parseExceptionErrorHandler,
  );
}

WidgetCapabilities getElementCallRequiredPermissions(
  String ownUserId,
  String ownDeviceId,
) {
  return rustCall(
      (status) => FfiConverterWidgetCapabilities.lift(_UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_func_get_element_call_required_permissions(
              FfiConverterString.lower(ownUserId),
              FfiConverterString.lower(ownDeviceId),
              status)),
      null);
}

void initPlatform(
  TracingConfiguration config,
  bool useLightweightTokioRuntime,
) {
  return rustCall((status) {
    _UniffiLib.instance.uniffi_matrix_sdk_ffi_fn_func_init_platform(
        FfiConverterTracingConfiguration.lower(config),
        FfiConverterBool.lower(useLightweightTokioRuntime),
        status);
  }, clientExceptionErrorHandler);
}

bool isRoomAliasFormatValid(
  String alias,
) {
  return rustCall(
      (status) => FfiConverterBool.lift(_UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_func_is_room_alias_format_valid(
              FfiConverterString.lower(alias), status)),
      null);
}

void logEvent(
  String file,
  int? line,
  LogLevel level,
  String target,
  String message,
) {
  return rustCall((status) {
    _UniffiLib.instance.uniffi_matrix_sdk_ffi_fn_func_log_event(
        FfiConverterString.lower(file),
        FfiConverterOptionalUInt32.lower(line),
        FfiConverterLogLevel.lower(level),
        FfiConverterString.lower(target),
        FfiConverterString.lower(message),
        status);
  }, null);
}

WidgetDriverAndHandle makeWidgetDriver(
  WidgetSettings settings,
) {
  return rustCall(
      (status) => FfiConverterWidgetDriverAndHandle.lift(_UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_func_make_widget_driver(
              FfiConverterWidgetSettings.lower(settings), status)),
      parseExceptionErrorHandler);
}

String matrixToRoomAliasPermalink(
  String roomAlias,
) {
  return rustCall(
      (status) => FfiConverterString.lift(_UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_func_matrix_to_room_alias_permalink(
              FfiConverterString.lower(roomAlias), status)),
      clientExceptionErrorHandler);
}

String matrixToUserPermalink(
  String userId,
) {
  return rustCall(
      (status) => FfiConverterString.lift(_UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_func_matrix_to_user_permalink(
              FfiConverterString.lower(userId), status)),
      clientExceptionErrorHandler);
}

RoomMessageEventContentWithoutRelation messageEventContentFromHtml(
  String body,
  String htmlBody,
) {
  return rustCall(
      (status) => RoomMessageEventContentWithoutRelation.lift(_UniffiLib
          .instance
          .uniffi_matrix_sdk_ffi_fn_func_message_event_content_from_html(
              FfiConverterString.lower(body),
              FfiConverterString.lower(htmlBody),
              status)),
      null);
}

RoomMessageEventContentWithoutRelation messageEventContentFromHtmlAsEmote(
  String body,
  String htmlBody,
) {
  return rustCall(
      (status) => RoomMessageEventContentWithoutRelation.lift(_UniffiLib
          .instance
          .uniffi_matrix_sdk_ffi_fn_func_message_event_content_from_html_as_emote(
              FfiConverterString.lower(body),
              FfiConverterString.lower(htmlBody),
              status)),
      null);
}

RoomMessageEventContentWithoutRelation messageEventContentFromMarkdown(
  String md,
) {
  return rustCall(
      (status) => RoomMessageEventContentWithoutRelation.lift(_UniffiLib
          .instance
          .uniffi_matrix_sdk_ffi_fn_func_message_event_content_from_markdown(
              FfiConverterString.lower(md), status)),
      null);
}

RoomMessageEventContentWithoutRelation messageEventContentFromMarkdownAsEmote(
  String md,
) {
  return rustCall(
      (status) => RoomMessageEventContentWithoutRelation.lift(_UniffiLib
          .instance
          .uniffi_matrix_sdk_ffi_fn_func_message_event_content_from_markdown_as_emote(
              FfiConverterString.lower(md), status)),
      null);
}

RoomMessageEventContentWithoutRelation messageEventContentNew(
  MessageType msgtype,
) {
  return rustCall(
      (status) => RoomMessageEventContentWithoutRelation.lift(_UniffiLib
          .instance
          .uniffi_matrix_sdk_ffi_fn_func_message_event_content_new(
              FfiConverterMessageType.lower(msgtype), status)),
      clientExceptionErrorHandler);
}

WidgetSettings newVirtualElementCallWidget(
  VirtualElementCallWidgetOptions props,
) {
  return rustCall(
      (status) => FfiConverterWidgetSettings.lift(_UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_func_new_virtual_element_call_widget(
              FfiConverterVirtualElementCallWidgetOptions.lower(props),
              status)),
      parseExceptionErrorHandler);
}

MatrixEntity? parseMatrixEntityFrom(
  String uri,
) {
  return rustCall(
      (status) => FfiConverterOptionalMatrixEntity.lift(_UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_func_parse_matrix_entity_from(
              FfiConverterString.lower(uri), status)),
      null);
}

void reloadTracingFileWriter(
  TracingFileConfiguration configuration,
) {
  return rustCall((status) {
    _UniffiLib.instance
        .uniffi_matrix_sdk_ffi_fn_func_reload_tracing_file_writer(
            FfiConverterTracingFileConfiguration.lower(configuration), status);
  }, clientExceptionErrorHandler);
}

String roomAliasNameFromRoomDisplayName(
  String roomName,
) {
  return rustCall(
      (status) => FfiConverterString.lift(_UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_func_room_alias_name_from_room_display_name(
              FfiConverterString.lower(roomName), status)),
      null);
}

String sdkGitSha() {
  return rustCall(
      (status) => FfiConverterString.lift(_UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_func_sdk_git_sha(status)),
      null);
}

PowerLevel suggestedPowerLevelForRole(
  RoomMemberRole role,
) {
  return rustCall(
      (status) => FfiConverterPowerLevel.lift(_UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_func_suggested_power_level_for_role(
              FfiConverterRoomMemberRole.lower(role), status)),
      clientExceptionErrorHandler);
}

RoomMemberRole suggestedRoleForPowerLevel(
  PowerLevel powerLevel,
) {
  return rustCall(
      (status) => FfiConverterRoomMemberRole.lift(_UniffiLib.instance
          .uniffi_matrix_sdk_ffi_fn_func_suggested_role_for_power_level(
              FfiConverterPowerLevel.lower(powerLevel), status)),
      clientExceptionErrorHandler);
}

class FfiConverterVirtualElementCallWidgetOptions {
  static VirtualElementCallWidgetOptions lift(RustBuffer buf) {
    return FfiConverterVirtualElementCallWidgetOptions.read(buf.asUint8List())
        .value;
  }

  static RustBuffer lower(VirtualElementCallWidgetOptions value) {
    final total_length = FfiConverterString.allocationSize(
            value.elementCallUrl) +
        FfiConverterString.allocationSize(value.widgetId) +
        FfiConverterOptionalString.allocationSize(value.parentUrl) +
        FfiConverterOptionalHeaderStyle.allocationSize(value.header) +
        FfiConverterOptionalBool.allocationSize(value.hideHeader) +
        FfiConverterOptionalBool.allocationSize(value.preload) +
        FfiConverterOptionalDouble64.allocationSize(value.fontScale) +
        FfiConverterOptionalBool.allocationSize(value.appPrompt) +
        FfiConverterOptionalBool.allocationSize(value.confineToRoom) +
        FfiConverterOptionalString.allocationSize(value.font) +
        FfiConverterEncryptionSystem.allocationSize(value.encryption) +
        FfiConverterOptionalIntent.allocationSize(value.intent) +
        FfiConverterBool.allocationSize(value.hideScreensharing) +
        FfiConverterOptionalString.allocationSize(value.posthogUserId) +
        FfiConverterOptionalString.allocationSize(value.posthogApiHost) +
        FfiConverterOptionalString.allocationSize(value.posthogApiKey) +
        FfiConverterOptionalString.allocationSize(value.rageshakeSubmitUrl) +
        FfiConverterOptionalString.allocationSize(value.sentryDsn) +
        FfiConverterOptionalString.allocationSize(value.sentryEnvironment) +
        FfiConverterBool.allocationSize(value.controlledMediaDevices) +
        FfiConverterOptionalNotificationType.allocationSize(
            value.sendNotificationType) +
        0;
    final buf = Uint8List(total_length);
    write(value, buf);
    return toRustBuffer(buf);
  }

  static LiftRetVal<VirtualElementCallWidgetOptions> read(Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    final elementCallUrl_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final elementCallUrl = elementCallUrl_lifted.value;
    new_offset += elementCallUrl_lifted.bytesRead;
    final widgetId_lifted =
        FfiConverterString.read(Uint8List.view(buf.buffer, new_offset));
    final widgetId = widgetId_lifted.value;
    new_offset += widgetId_lifted.bytesRead;
    final parentUrl_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final parentUrl = parentUrl_lifted.value;
    new_offset += parentUrl_lifted.bytesRead;
    final header_lifted = FfiConverterOptionalHeaderStyle.read(
        Uint8List.view(buf.buffer, new_offset));
    final header = header_lifted.value;
    new_offset += header_lifted.bytesRead;
    final hideHeader_lifted =
        FfiConverterOptionalBool.read(Uint8List.view(buf.buffer, new_offset));
    final hideHeader = hideHeader_lifted.value;
    new_offset += hideHeader_lifted.bytesRead;
    final preload_lifted =
        FfiConverterOptionalBool.read(Uint8List.view(buf.buffer, new_offset));
    final preload = preload_lifted.value;
    new_offset += preload_lifted.bytesRead;
    final fontScale_lifted = FfiConverterOptionalDouble64.read(
        Uint8List.view(buf.buffer, new_offset));
    final fontScale = fontScale_lifted.value;
    new_offset += fontScale_lifted.bytesRead;
    final appPrompt_lifted =
        FfiConverterOptionalBool.read(Uint8List.view(buf.buffer, new_offset));
    final appPrompt = appPrompt_lifted.value;
    new_offset += appPrompt_lifted.bytesRead;
    final confineToRoom_lifted =
        FfiConverterOptionalBool.read(Uint8List.view(buf.buffer, new_offset));
    final confineToRoom = confineToRoom_lifted.value;
    new_offset += confineToRoom_lifted.bytesRead;
    final font_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final font = font_lifted.value;
    new_offset += font_lifted.bytesRead;
    final encryption_lifted = FfiConverterEncryptionSystem.read(
        Uint8List.view(buf.buffer, new_offset));
    final encryption = encryption_lifted.value;
    new_offset += encryption_lifted.bytesRead;
    final intent_lifted =
        FfiConverterOptionalIntent.read(Uint8List.view(buf.buffer, new_offset));
    final intent = intent_lifted.value;
    new_offset += intent_lifted.bytesRead;
    final hideScreensharing_lifted =
        FfiConverterBool.read(Uint8List.view(buf.buffer, new_offset));
    final hideScreensharing = hideScreensharing_lifted.value;
    new_offset += hideScreensharing_lifted.bytesRead;
    final posthogUserId_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final posthogUserId = posthogUserId_lifted.value;
    new_offset += posthogUserId_lifted.bytesRead;
    final posthogApiHost_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final posthogApiHost = posthogApiHost_lifted.value;
    new_offset += posthogApiHost_lifted.bytesRead;
    final posthogApiKey_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final posthogApiKey = posthogApiKey_lifted.value;
    new_offset += posthogApiKey_lifted.bytesRead;
    final rageshakeSubmitUrl_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final rageshakeSubmitUrl = rageshakeSubmitUrl_lifted.value;
    new_offset += rageshakeSubmitUrl_lifted.bytesRead;
    final sentryDsn_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final sentryDsn = sentryDsn_lifted.value;
    new_offset += sentryDsn_lifted.bytesRead;
    final sentryEnvironment_lifted =
        FfiConverterOptionalString.read(Uint8List.view(buf.buffer, new_offset));
    final sentryEnvironment = sentryEnvironment_lifted.value;
    new_offset += sentryEnvironment_lifted.bytesRead;
    final controlledMediaDevices_lifted =
        FfiConverterBool.read(Uint8List.view(buf.buffer, new_offset));
    final controlledMediaDevices = controlledMediaDevices_lifted.value;
    new_offset += controlledMediaDevices_lifted.bytesRead;
    final sendNotificationType_lifted =
        FfiConverterOptionalNotificationType.read(
            Uint8List.view(buf.buffer, new_offset));
    final sendNotificationType = sendNotificationType_lifted.value;
    new_offset += sendNotificationType_lifted.bytesRead;
    return LiftRetVal(
        VirtualElementCallWidgetOptions(
          elementCallUrl: elementCallUrl,
          widgetId: widgetId,
          parentUrl: parentUrl,
          header: header,
          hideHeader: hideHeader,
          preload: preload,
          fontScale: fontScale,
          appPrompt: appPrompt,
          confineToRoom: confineToRoom,
          font: font,
          encryption: encryption,
          intent: intent,
          hideScreensharing: hideScreensharing,
          posthogUserId: posthogUserId,
          posthogApiHost: posthogApiHost,
          posthogApiKey: posthogApiKey,
          rageshakeSubmitUrl: rageshakeSubmitUrl,
          sentryDsn: sentryDsn,
          sentryEnvironment: sentryEnvironment,
          controlledMediaDevices: controlledMediaDevices,
          sendNotificationType: sendNotificationType,
        ),
        new_offset - buf.offsetInBytes);
  }

  static int write(VirtualElementCallWidgetOptions value, Uint8List buf) {
    int new_offset = buf.offsetInBytes;

    new_offset += FfiConverterString.write(
        value.elementCallUrl, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterString.write(
        value.widgetId, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        value.parentUrl, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalHeaderStyle.write(
        value.header, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalBool.write(
        value.hideHeader, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalBool.write(
        value.preload, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalDouble64.write(
        value.fontScale, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalBool.write(
        value.appPrompt, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalBool.write(
        value.confineToRoom, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        value.font, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterEncryptionSystem.write(
        value.encryption, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalIntent.write(
        value.intent, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterBool.write(
        value.hideScreensharing, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        value.posthogUserId, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        value.posthogApiHost, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        value.posthogApiKey, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        value.rageshakeSubmitUrl, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        value.sentryDsn, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalString.write(
        value.sentryEnvironment, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterBool.write(
        value.controlledMediaDevices, Uint8List.view(buf.buffer, new_offset));
    new_offset += FfiConverterOptionalNotificationType.write(
        value.sendNotificationType, Uint8List.view(buf.buffer, new_offset));
    return new_offset - buf.offsetInBytes;
  }

  static int allocationSize(VirtualElementCallWidgetOptions value) {
    return FfiConverterString.allocationSize(value.elementCallUrl) +
        FfiConverterString.allocationSize(value.widgetId) +
        FfiConverterOptionalString.allocationSize(value.parentUrl) +
        FfiConverterOptionalHeaderStyle.allocationSize(value.header) +
        FfiConverterOptionalBool.allocationSize(value.hideHeader) +
        FfiConverterOptionalBool.allocationSize(value.preload) +
        FfiConverterOptionalDouble64.allocationSize(value.fontScale) +
        FfiConverterOptionalBool.allocationSize(value.appPrompt) +
        FfiConverterOptionalBool.allocationSize(value.confineToRoom) +
        FfiConverterOptionalString.allocationSize(value.font) +
        FfiConverterEncryptionSystem.allocationSize(value.encryption) +
        FfiConverterOptionalIntent.allocationSize(value.intent) +
        FfiConverterBool.allocationSize(value.hideScreensharing) +
        FfiConverterOptionalString.allocationSize(value.posthogUserId) +
        FfiConverterOptionalString.allocationSize(value.posthogApiHost) +
        FfiConverterOptionalString.allocationSize(value.posthogApiKey) +
        FfiConverterOptionalString.allocationSize(value.rageshakeSubmitUrl) +
        FfiConverterOptionalString.allocationSize(value.sentryDsn) +
        FfiConverterOptionalString.allocationSize(value.sentryEnvironment) +
        FfiConverterBool.allocationSize(value.controlledMediaDevices) +
        FfiConverterOptionalNotificationType.allocationSize(
            value.sendNotificationType) +
        0;
  }
}

class FfiConverterRoomMemberRole {
  static RoomMemberRole lift(RustBuffer buffer) {
    return FfiConverterRoomMemberRole.read(buffer.asUint8List()).value;
  }

  static LiftRetVal<RoomMemberRole> read(Uint8List buf) {
    final index = buf.buffer.asByteData(buf.offsetInBytes).getInt32(0);
    switch (index) {
      case 1:
        return LiftRetVal(RoomMemberRole.creator, 4);
      case 2:
        return LiftRetVal(RoomMemberRole.administrator, 4);
      case 3:
        return LiftRetVal(RoomMemberRole.moderator, 4);
      case 4:
        return LiftRetVal(RoomMemberRole.user, 4);
      default:
        throw UniffiInternalError(UniffiInternalError.unexpectedEnumCase,
            "Unable to determine enum variant");
    }
  }

  static RustBuffer lower(RoomMemberRole input) {
    return toRustBuffer(createUint8ListFromInt(input.index + 1));
  }

  static int allocationSize(RoomMemberRole value) {
    return 4;
  }

  static int write(RoomMemberRole value, Uint8List buf) {
    buf.buffer.asByteData(buf.offsetInBytes).setInt32(0, value.index + 1);
    return 4;
  }
}

class _UniffiLib {
  _UniffiLib._();

  static final DynamicLibrary _dylib = _open();

  static DynamicLibrary _open() {
    if (Platform.isAndroid)
      return DynamicLibrary.open(
          "${Directory.current.path}/libmatrix_sdk_ffi.so");
    if (Platform.isIOS) return DynamicLibrary.executable();
    if (Platform.isLinux)
      return DynamicLibrary.open(
          "${Directory.current.path}/libmatrix_sdk_ffi.so");
    if (Platform.isMacOS) return DynamicLibrary.open("libmatrix_sdk_ffi.dylib");
    if (Platform.isWindows) return DynamicLibrary.open("matrix_sdk_ffi.dll");
    throw UnsupportedError(
        "Unsupported platform: \${Platform.operatingSystem}");
  }

  static final _UniffiLib instance = _UniffiLib._();

  late final Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_clone_client = _dylib.lookupFunction<
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>),
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_clone_client");
  late final void Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_free_client = _dylib.lookupFunction<
          Void Function(Pointer<Void>, Pointer<RustCallStatus>),
          void Function(Pointer<Void>,
              Pointer<RustCallStatus>)>("uniffi_matrix_sdk_ffi_fn_free_client");
  late final Pointer<Void> Function(
    Pointer<Void>,
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_client_abort_oidc_auth =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
            Pointer<Void>,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
            Pointer<Void>,
          )>("uniffi_matrix_sdk_ffi_fn_method_client_abort_oidc_auth");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_client_account_data = _dylib.lookupFunction<
      Pointer<Void> Function(
        Pointer<Void>,
        RustBuffer,
      ),
      Pointer<Void> Function(
        Pointer<Void>,
        RustBuffer,
      )>("uniffi_matrix_sdk_ffi_fn_method_client_account_data");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_client_account_url = _dylib.lookupFunction<
      Pointer<Void> Function(
        Pointer<Void>,
        RustBuffer,
      ),
      Pointer<Void> Function(
        Pointer<Void>,
        RustBuffer,
      )>("uniffi_matrix_sdk_ffi_fn_method_client_account_url");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_client_available_sliding_sync_versions =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                Pointer<Void>,
              ),
              Pointer<Void> Function(
                Pointer<Void>,
              )>(
          "uniffi_matrix_sdk_ffi_fn_method_client_available_sliding_sync_versions");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_client_avatar_url = _dylib.lookupFunction<
      Pointer<Void> Function(
        Pointer<Void>,
      ),
      Pointer<Void> Function(
        Pointer<Void>,
      )>("uniffi_matrix_sdk_ffi_fn_method_client_avatar_url");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_client_await_room_remote_echo =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
          )>("uniffi_matrix_sdk_ffi_fn_method_client_await_room_remote_echo");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_client_cached_avatar_url =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
          )>("uniffi_matrix_sdk_ffi_fn_method_client_cached_avatar_url");
  late final int Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_client_can_deactivate_account =
      _dylib.lookupFunction<
              Int8 Function(Pointer<Void>, Pointer<RustCallStatus>),
              int Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_client_can_deactivate_account");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_client_clear_caches = _dylib.lookupFunction<
      Pointer<Void> Function(
        Pointer<Void>,
        RustBuffer,
      ),
      Pointer<Void> Function(
        Pointer<Void>,
        RustBuffer,
      )>("uniffi_matrix_sdk_ffi_fn_method_client_clear_caches");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_client_create_room = _dylib.lookupFunction<
      Pointer<Void> Function(
        Pointer<Void>,
        RustBuffer,
      ),
      Pointer<Void> Function(
        Pointer<Void>,
        RustBuffer,
      )>("uniffi_matrix_sdk_ffi_fn_method_client_create_room");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
    RustBuffer,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_client_custom_login_with_jwt =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
            RustBuffer,
            RustBuffer,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
            RustBuffer,
            RustBuffer,
          )>("uniffi_matrix_sdk_ffi_fn_method_client_custom_login_with_jwt");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
    int,
  ) uniffi_matrix_sdk_ffi_fn_method_client_deactivate_account =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
            Int8,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
            int,
          )>("uniffi_matrix_sdk_ffi_fn_method_client_deactivate_account");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_client_delete_pusher =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
          )>("uniffi_matrix_sdk_ffi_fn_method_client_delete_pusher");
  late final RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_client_device_id = _dylib.lookupFunction<
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>),
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_client_device_id");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_client_display_name = _dylib.lookupFunction<
      Pointer<Void> Function(
        Pointer<Void>,
      ),
      Pointer<Void> Function(
        Pointer<Void>,
      )>("uniffi_matrix_sdk_ffi_fn_method_client_display_name");
  late final Pointer<Void> Function(
    Pointer<Void>,
    int,
  ) uniffi_matrix_sdk_ffi_fn_method_client_enable_all_send_queues =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
            Int8,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
            int,
          )>("uniffi_matrix_sdk_ffi_fn_method_client_enable_all_send_queues");
  late final void Function(Pointer<Void>, int, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_client_enable_send_queue_upload_progress =
      _dylib.lookupFunction<
              Void Function(Pointer<Void>, Int8, Pointer<RustCallStatus>),
              void Function(Pointer<Void>, int, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_client_enable_send_queue_upload_progress");
  late final Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_client_encryption = _dylib.lookupFunction<
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>),
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_client_encryption");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_client_fetch_media_preview_config =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                Pointer<Void>,
              ),
              Pointer<Void> Function(
                Pointer<Void>,
              )>(
          "uniffi_matrix_sdk_ffi_fn_method_client_fetch_media_preview_config");
  late final RustBuffer Function(
          Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_client_get_dm_room =
      _dylib.lookupFunction<
              RustBuffer Function(
                  Pointer<Void>, RustBuffer, Pointer<RustCallStatus>),
              RustBuffer Function(
                  Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_client_get_dm_room");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_client_get_invite_avatars_display_policy =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                Pointer<Void>,
              ),
              Pointer<Void> Function(
                Pointer<Void>,
              )>(
          "uniffi_matrix_sdk_ffi_fn_method_client_get_invite_avatars_display_policy");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_client_get_max_media_upload_size =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                Pointer<Void>,
              ),
              Pointer<Void> Function(
                Pointer<Void>,
              )>(
          "uniffi_matrix_sdk_ffi_fn_method_client_get_max_media_upload_size");
  late final Pointer<Void> Function(
    Pointer<Void>,
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_client_get_media_content =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
            Pointer<Void>,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
            Pointer<Void>,
          )>("uniffi_matrix_sdk_ffi_fn_method_client_get_media_content");
  late final Pointer<Void> Function(
    Pointer<Void>,
    Pointer<Void>,
    RustBuffer,
    RustBuffer,
    int,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_client_get_media_file =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
            Pointer<Void>,
            RustBuffer,
            RustBuffer,
            Int8,
            RustBuffer,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
            Pointer<Void>,
            RustBuffer,
            RustBuffer,
            int,
            RustBuffer,
          )>("uniffi_matrix_sdk_ffi_fn_method_client_get_media_file");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_client_get_media_preview_display_policy =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                Pointer<Void>,
              ),
              Pointer<Void> Function(
                Pointer<Void>,
              )>(
          "uniffi_matrix_sdk_ffi_fn_method_client_get_media_preview_display_policy");
  late final Pointer<Void> Function(
    Pointer<Void>,
    Pointer<Void>,
    int,
    int,
  ) uniffi_matrix_sdk_ffi_fn_method_client_get_media_thumbnail =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
            Pointer<Void>,
            Uint64,
            Uint64,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
            Pointer<Void>,
            int,
            int,
          )>("uniffi_matrix_sdk_ffi_fn_method_client_get_media_thumbnail");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_client_get_notification_settings =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                Pointer<Void>,
              ),
              Pointer<Void> Function(
                Pointer<Void>,
              )>(
          "uniffi_matrix_sdk_ffi_fn_method_client_get_notification_settings");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_client_get_profile = _dylib.lookupFunction<
      Pointer<Void> Function(
        Pointer<Void>,
        RustBuffer,
      ),
      Pointer<Void> Function(
        Pointer<Void>,
        RustBuffer,
      )>("uniffi_matrix_sdk_ffi_fn_method_client_get_profile");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_client_get_recently_visited_rooms =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                Pointer<Void>,
              ),
              Pointer<Void> Function(
                Pointer<Void>,
              )>(
          "uniffi_matrix_sdk_ffi_fn_method_client_get_recently_visited_rooms");
  late final RustBuffer Function(
          Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_client_get_room = _dylib.lookupFunction<
              RustBuffer Function(
                  Pointer<Void>, RustBuffer, Pointer<RustCallStatus>),
              RustBuffer Function(
                  Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_client_get_room");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_client_get_room_preview_from_room_alias =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                Pointer<Void>,
                RustBuffer,
              ),
              Pointer<Void> Function(
                Pointer<Void>,
                RustBuffer,
              )>(
          "uniffi_matrix_sdk_ffi_fn_method_client_get_room_preview_from_room_alias");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_client_get_room_preview_from_room_id =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                Pointer<Void>,
                RustBuffer,
                RustBuffer,
              ),
              Pointer<Void> Function(
                Pointer<Void>,
                RustBuffer,
                RustBuffer,
              )>(
          "uniffi_matrix_sdk_ffi_fn_method_client_get_room_preview_from_room_id");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_client_get_session_verification_controller =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                Pointer<Void>,
              ),
              Pointer<Void> Function(
                Pointer<Void>,
              )>(
          "uniffi_matrix_sdk_ffi_fn_method_client_get_session_verification_controller");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_client_get_url = _dylib.lookupFunction<
      Pointer<Void> Function(
        Pointer<Void>,
        RustBuffer,
      ),
      Pointer<Void> Function(
        Pointer<Void>,
        RustBuffer,
      )>("uniffi_matrix_sdk_ffi_fn_method_client_get_url");
  late final RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_client_homeserver = _dylib.lookupFunction<
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>),
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_client_homeserver");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_client_homeserver_login_details =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
          )>("uniffi_matrix_sdk_ffi_fn_method_client_homeserver_login_details");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_client_ignore_user = _dylib.lookupFunction<
      Pointer<Void> Function(
        Pointer<Void>,
        RustBuffer,
      ),
      Pointer<Void> Function(
        Pointer<Void>,
        RustBuffer,
      )>("uniffi_matrix_sdk_ffi_fn_method_client_ignore_user");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_client_ignored_users =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
          )>("uniffi_matrix_sdk_ffi_fn_method_client_ignored_users");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_client_is_livekit_rtc_supported =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
          )>("uniffi_matrix_sdk_ffi_fn_method_client_is_livekit_rtc_supported");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_client_is_report_room_api_supported =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                Pointer<Void>,
              ),
              Pointer<Void> Function(
                Pointer<Void>,
              )>(
          "uniffi_matrix_sdk_ffi_fn_method_client_is_report_room_api_supported");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_client_is_room_alias_available =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
          )>("uniffi_matrix_sdk_ffi_fn_method_client_is_room_alias_available");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_client_join_room_by_id =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
          )>("uniffi_matrix_sdk_ffi_fn_method_client_join_room_by_id");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_client_join_room_by_id_or_alias =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
            RustBuffer,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
            RustBuffer,
          )>("uniffi_matrix_sdk_ffi_fn_method_client_join_room_by_id_or_alias");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
    RustBuffer,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_client_knock = _dylib.lookupFunction<
      Pointer<Void> Function(
        Pointer<Void>,
        RustBuffer,
        RustBuffer,
        RustBuffer,
      ),
      Pointer<Void> Function(
        Pointer<Void>,
        RustBuffer,
        RustBuffer,
        RustBuffer,
      )>("uniffi_matrix_sdk_ffi_fn_method_client_knock");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
    RustBuffer,
    RustBuffer,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_client_login = _dylib.lookupFunction<
      Pointer<Void> Function(
        Pointer<Void>,
        RustBuffer,
        RustBuffer,
        RustBuffer,
        RustBuffer,
      ),
      Pointer<Void> Function(
        Pointer<Void>,
        RustBuffer,
        RustBuffer,
        RustBuffer,
        RustBuffer,
      )>("uniffi_matrix_sdk_ffi_fn_method_client_login");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
    RustBuffer,
    RustBuffer,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_client_login_with_email =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
            RustBuffer,
            RustBuffer,
            RustBuffer,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
            RustBuffer,
            RustBuffer,
            RustBuffer,
          )>("uniffi_matrix_sdk_ffi_fn_method_client_login_with_email");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_client_login_with_oidc_callback =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
          )>("uniffi_matrix_sdk_ffi_fn_method_client_login_with_oidc_callback");
  late final Pointer<Void> Function(
    Pointer<Void>,
    Pointer<Void>,
    RustBuffer,
    int,
  ) uniffi_matrix_sdk_ffi_fn_method_client_login_with_qr_code =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
            Pointer<Void>,
            RustBuffer,
            Uint64,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
            Pointer<Void>,
            RustBuffer,
            int,
          )>("uniffi_matrix_sdk_ffi_fn_method_client_login_with_qr_code");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_client_logout = _dylib.lookupFunction<
      Pointer<Void> Function(
        Pointer<Void>,
      ),
      Pointer<Void> Function(
        Pointer<Void>,
      )>("uniffi_matrix_sdk_ffi_fn_method_client_logout");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_client_notification_client =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
          )>("uniffi_matrix_sdk_ffi_fn_method_client_notification_client");
  late final Pointer<Void> Function(
          Pointer<Void>, RustBuffer, int, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_client_observe_account_data_event =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                  Pointer<Void>, RustBuffer, Uint64, Pointer<RustCallStatus>),
              Pointer<Void> Function(
                  Pointer<Void>, RustBuffer, int, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_client_observe_account_data_event");
  late final Pointer<Void> Function(
          Pointer<Void>, RustBuffer, RustBuffer, int, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_client_observe_room_account_data_event =
      _dylib.lookupFunction<
              Pointer<Void> Function(Pointer<Void>, RustBuffer, RustBuffer, Uint64,
                  Pointer<RustCallStatus>),
              Pointer<Void> Function(Pointer<Void>, RustBuffer, RustBuffer, int,
                  Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_client_observe_room_account_data_event");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_client_remove_avatar =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
          )>("uniffi_matrix_sdk_ffi_fn_method_client_remove_avatar");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_client_reset_server_info =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
          )>("uniffi_matrix_sdk_ffi_fn_method_client_reset_server_info");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_client_resolve_room_alias =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
          )>("uniffi_matrix_sdk_ffi_fn_method_client_resolve_room_alias");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_client_restore_session =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
          )>("uniffi_matrix_sdk_ffi_fn_method_client_restore_session");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_client_restore_session_with =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
            RustBuffer,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
            RustBuffer,
          )>("uniffi_matrix_sdk_ffi_fn_method_client_restore_session_with");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_client_room_alias_exists =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
          )>("uniffi_matrix_sdk_ffi_fn_method_client_room_alias_exists");
  late final Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_client_room_directory_search =
      _dylib.lookupFunction<
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>),
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_client_room_directory_search");
  late final RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_client_rooms = _dylib.lookupFunction<
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>),
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_client_rooms");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
    int,
  ) uniffi_matrix_sdk_ffi_fn_method_client_search_users = _dylib.lookupFunction<
      Pointer<Void> Function(
        Pointer<Void>,
        RustBuffer,
        Uint64,
      ),
      Pointer<Void> Function(
        Pointer<Void>,
        RustBuffer,
        int,
      )>("uniffi_matrix_sdk_ffi_fn_method_client_search_users");
  late final RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_client_server = _dylib.lookupFunction<
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>),
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_client_server");
  late final RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_client_session = _dylib.lookupFunction<
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>),
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_client_session");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_client_set_account_data =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
            RustBuffer,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
            RustBuffer,
          )>("uniffi_matrix_sdk_ffi_fn_method_client_set_account_data");
  late final RustBuffer Function(
          Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_client_set_delegate =
      _dylib.lookupFunction<
              RustBuffer Function(
                  Pointer<Void>, RustBuffer, Pointer<RustCallStatus>),
              RustBuffer Function(
                  Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_client_set_delegate");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_client_set_display_name =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
          )>("uniffi_matrix_sdk_ffi_fn_method_client_set_display_name");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_client_set_invite_avatars_display_policy =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                Pointer<Void>,
                RustBuffer,
              ),
              Pointer<Void> Function(
                Pointer<Void>,
                RustBuffer,
              )>(
          "uniffi_matrix_sdk_ffi_fn_method_client_set_invite_avatars_display_policy");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_client_set_media_preview_display_policy =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                Pointer<Void>,
                RustBuffer,
              ),
              Pointer<Void> Function(
                Pointer<Void>,
                RustBuffer,
              )>(
          "uniffi_matrix_sdk_ffi_fn_method_client_set_media_preview_display_policy");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_client_set_media_retention_policy =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                Pointer<Void>,
                RustBuffer,
              ),
              Pointer<Void> Function(
                Pointer<Void>,
                RustBuffer,
              )>(
          "uniffi_matrix_sdk_ffi_fn_method_client_set_media_retention_policy");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
    RustBuffer,
    RustBuffer,
    RustBuffer,
    RustBuffer,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_client_set_pusher = _dylib.lookupFunction<
      Pointer<Void> Function(
        Pointer<Void>,
        RustBuffer,
        RustBuffer,
        RustBuffer,
        RustBuffer,
        RustBuffer,
        RustBuffer,
      ),
      Pointer<Void> Function(
        Pointer<Void>,
        RustBuffer,
        RustBuffer,
        RustBuffer,
        RustBuffer,
        RustBuffer,
        RustBuffer,
      )>("uniffi_matrix_sdk_ffi_fn_method_client_set_pusher");
  late final Pointer<Void> Function(
    Pointer<Void>,
    int,
  ) uniffi_matrix_sdk_ffi_fn_method_client_set_utd_delegate =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
            Uint64,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
            int,
          )>("uniffi_matrix_sdk_ffi_fn_method_client_set_utd_delegate");
  late final RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_client_sliding_sync_version =
      _dylib.lookupFunction<
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>),
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_client_sliding_sync_version");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_client_start_sso_login =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
            RustBuffer,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
            RustBuffer,
          )>("uniffi_matrix_sdk_ffi_fn_method_client_start_sso_login");
  late final Pointer<Void> Function(Pointer<Void>, int, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_client_subscribe_to_ignored_users =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                  Pointer<Void>, Uint64, Pointer<RustCallStatus>),
              Pointer<Void> Function(
                  Pointer<Void>, int, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_client_subscribe_to_ignored_users");
  late final Pointer<Void> Function(
    Pointer<Void>,
    int,
  ) uniffi_matrix_sdk_ffi_fn_method_client_subscribe_to_media_preview_config =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                Pointer<Void>,
                Uint64,
              ),
              Pointer<Void> Function(
                Pointer<Void>,
                int,
              )>(
          "uniffi_matrix_sdk_ffi_fn_method_client_subscribe_to_media_preview_config");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
    int,
  ) uniffi_matrix_sdk_ffi_fn_method_client_subscribe_to_room_info =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
            Uint64,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
            int,
          )>("uniffi_matrix_sdk_ffi_fn_method_client_subscribe_to_room_info");
  late final Pointer<Void> Function(Pointer<Void>, int, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_client_subscribe_to_send_queue_status =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                  Pointer<Void>, Uint64, Pointer<RustCallStatus>),
              Pointer<Void> Function(
                  Pointer<Void>, int, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_client_subscribe_to_send_queue_status");
  late final Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_client_sync_service =
      _dylib.lookupFunction<
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>),
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_client_sync_service");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_client_track_recently_visited_room =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                Pointer<Void>,
                RustBuffer,
              ),
              Pointer<Void> Function(
                Pointer<Void>,
                RustBuffer,
              )>(
          "uniffi_matrix_sdk_ffi_fn_method_client_track_recently_visited_room");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_client_unignore_user =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
          )>("uniffi_matrix_sdk_ffi_fn_method_client_unignore_user");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_client_upload_avatar =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
            RustBuffer,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
            RustBuffer,
          )>("uniffi_matrix_sdk_ffi_fn_method_client_upload_avatar");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
    RustBuffer,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_client_upload_media = _dylib.lookupFunction<
      Pointer<Void> Function(
        Pointer<Void>,
        RustBuffer,
        RustBuffer,
        RustBuffer,
      ),
      Pointer<Void> Function(
        Pointer<Void>,
        RustBuffer,
        RustBuffer,
        RustBuffer,
      )>("uniffi_matrix_sdk_ffi_fn_method_client_upload_media");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
    RustBuffer,
    RustBuffer,
    RustBuffer,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_client_url_for_oidc = _dylib.lookupFunction<
      Pointer<Void> Function(
        Pointer<Void>,
        RustBuffer,
        RustBuffer,
        RustBuffer,
        RustBuffer,
        RustBuffer,
      ),
      Pointer<Void> Function(
        Pointer<Void>,
        RustBuffer,
        RustBuffer,
        RustBuffer,
        RustBuffer,
        RustBuffer,
      )>("uniffi_matrix_sdk_ffi_fn_method_client_url_for_oidc");
  late final RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_client_user_id = _dylib.lookupFunction<
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>),
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_client_user_id");
  late final RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_client_user_id_server_name =
      _dylib.lookupFunction<
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>),
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_client_user_id_server_name");
  late final Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_clone_clientbuilder = _dylib.lookupFunction<
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>),
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_clone_clientbuilder");
  late final void Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_free_clientbuilder = _dylib.lookupFunction<
              Void Function(Pointer<Void>, Pointer<RustCallStatus>),
              void Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_free_clientbuilder");
  late final Pointer<Void> Function(Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_constructor_clientbuilder_new =
      _dylib.lookupFunction<Pointer<Void> Function(Pointer<RustCallStatus>),
              Pointer<Void> Function(Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_constructor_clientbuilder_new");
  late final Pointer<Void> Function(
          Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_clientbuilder_add_root_certificates =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                  Pointer<Void>, RustBuffer, Pointer<RustCallStatus>),
              Pointer<Void> Function(
                  Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_clientbuilder_add_root_certificates");
  late final Pointer<Void> Function(Pointer<Void>, int, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_clientbuilder_auto_enable_backups =
      _dylib.lookupFunction<
              Pointer<Void> Function(Pointer<Void>, Int8, Pointer<RustCallStatus>),
              Pointer<Void> Function(
                  Pointer<Void>, int, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_clientbuilder_auto_enable_backups");
  late final Pointer<Void> Function(Pointer<Void>, int, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_clientbuilder_auto_enable_cross_signing =
      _dylib.lookupFunction<
              Pointer<Void> Function(Pointer<Void>, Int8, Pointer<RustCallStatus>),
              Pointer<Void> Function(
                  Pointer<Void>, int, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_clientbuilder_auto_enable_cross_signing");
  late final Pointer<Void> Function(
          Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_clientbuilder_backup_download_strategy =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                  Pointer<Void>, RustBuffer, Pointer<RustCallStatus>),
              Pointer<Void> Function(
                  Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_clientbuilder_backup_download_strategy");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_clientbuilder_build = _dylib.lookupFunction<
      Pointer<Void> Function(
        Pointer<Void>,
      ),
      Pointer<Void> Function(
        Pointer<Void>,
      )>("uniffi_matrix_sdk_ffi_fn_method_clientbuilder_build");
  late final Pointer<Void> Function(
          Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_clientbuilder_cross_process_store_locks_holder_name =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                  Pointer<Void>, RustBuffer, Pointer<RustCallStatus>),
              Pointer<Void> Function(
                  Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_clientbuilder_cross_process_store_locks_holder_name");
  late final Pointer<Void> Function(
          Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_clientbuilder_decryption_settings =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                  Pointer<Void>, RustBuffer, Pointer<RustCallStatus>),
              Pointer<Void> Function(
                  Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_clientbuilder_decryption_settings");
  late final Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_clientbuilder_disable_automatic_token_refresh =
      _dylib.lookupFunction<
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>),
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_clientbuilder_disable_automatic_token_refresh");
  late final Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_clientbuilder_disable_built_in_root_certificates =
      _dylib.lookupFunction<
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>),
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_clientbuilder_disable_built_in_root_certificates");
  late final Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_clientbuilder_disable_ssl_verification =
      _dylib.lookupFunction<
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>),
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_clientbuilder_disable_ssl_verification");
  late final Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_clientbuilder_enable_oidc_refresh_lock =
      _dylib.lookupFunction<
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>),
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_clientbuilder_enable_oidc_refresh_lock");
  late final Pointer<Void> Function(Pointer<Void>, int, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_clientbuilder_enable_share_history_on_invite =
      _dylib.lookupFunction<
              Pointer<Void> Function(Pointer<Void>, Int8, Pointer<RustCallStatus>),
              Pointer<Void> Function(
                  Pointer<Void>, int, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_clientbuilder_enable_share_history_on_invite");
  late final Pointer<Void> Function(
          Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_clientbuilder_homeserver_url =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                  Pointer<Void>, RustBuffer, Pointer<RustCallStatus>),
              Pointer<Void> Function(
                  Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_clientbuilder_homeserver_url");
  late final Pointer<Void> Function(
          Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_clientbuilder_proxy =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                  Pointer<Void>, RustBuffer, Pointer<RustCallStatus>),
              Pointer<Void> Function(
                  Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_clientbuilder_proxy");
  late final Pointer<Void> Function(
          Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_clientbuilder_request_config =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                  Pointer<Void>, RustBuffer, Pointer<RustCallStatus>),
              Pointer<Void> Function(
                  Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_clientbuilder_request_config");
  late final Pointer<Void> Function(
          Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_clientbuilder_room_key_recipient_strategy =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                  Pointer<Void>, RustBuffer, Pointer<RustCallStatus>),
              Pointer<Void> Function(
                  Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_clientbuilder_room_key_recipient_strategy");
  late final Pointer<Void> Function(
          Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_clientbuilder_server_name =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                  Pointer<Void>, RustBuffer, Pointer<RustCallStatus>),
              Pointer<Void> Function(
                  Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_clientbuilder_server_name");
  late final Pointer<Void> Function(
          Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_clientbuilder_server_name_or_homeserver_url =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                  Pointer<Void>, RustBuffer, Pointer<RustCallStatus>),
              Pointer<Void> Function(
                  Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_clientbuilder_server_name_or_homeserver_url");
  late final Pointer<Void> Function(
          Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_clientbuilder_session_cache_size =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                  Pointer<Void>, RustBuffer, Pointer<RustCallStatus>),
              Pointer<Void> Function(
                  Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_clientbuilder_session_cache_size");
  late final Pointer<Void> Function(
          Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_clientbuilder_session_journal_size_limit =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                  Pointer<Void>, RustBuffer, Pointer<RustCallStatus>),
              Pointer<Void> Function(
                  Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_clientbuilder_session_journal_size_limit");
  late final Pointer<Void> Function(
          Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_clientbuilder_session_passphrase =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                  Pointer<Void>, RustBuffer, Pointer<RustCallStatus>),
              Pointer<Void> Function(
                  Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_clientbuilder_session_passphrase");
  late final Pointer<Void> Function(
          Pointer<Void>, RustBuffer, RustBuffer, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_clientbuilder_session_paths =
      _dylib.lookupFunction<
              Pointer<Void> Function(Pointer<Void>, RustBuffer, RustBuffer,
                  Pointer<RustCallStatus>),
              Pointer<Void> Function(Pointer<Void>, RustBuffer, RustBuffer,
                  Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_clientbuilder_session_paths");
  late final Pointer<Void> Function(
          Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_clientbuilder_session_pool_max_size =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                  Pointer<Void>, RustBuffer, Pointer<RustCallStatus>),
              Pointer<Void> Function(
                  Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_clientbuilder_session_pool_max_size");
  late final Pointer<Void> Function(Pointer<Void>, int, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_clientbuilder_set_session_delegate =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                  Pointer<Void>, Uint64, Pointer<RustCallStatus>),
              Pointer<Void> Function(
                  Pointer<Void>, int, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_clientbuilder_set_session_delegate");
  late final Pointer<Void> Function(
          Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_clientbuilder_sliding_sync_version_builder =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                  Pointer<Void>, RustBuffer, Pointer<RustCallStatus>),
              Pointer<Void> Function(
                  Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_clientbuilder_sliding_sync_version_builder");
  late final Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_clientbuilder_system_is_memory_constrained =
      _dylib.lookupFunction<
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>),
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_clientbuilder_system_is_memory_constrained");
  late final Pointer<Void> Function(
          Pointer<Void>, int, int, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_clientbuilder_threads_enabled =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                  Pointer<Void>, Int8, Int8, Pointer<RustCallStatus>),
              Pointer<Void> Function(
                  Pointer<Void>, int, int, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_clientbuilder_threads_enabled");
  late final Pointer<Void> Function(
          Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_clientbuilder_user_agent =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                  Pointer<Void>, RustBuffer, Pointer<RustCallStatus>),
              Pointer<Void> Function(
                  Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_clientbuilder_user_agent");
  late final Pointer<Void> Function(
          Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_clientbuilder_username =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                  Pointer<Void>, RustBuffer, Pointer<RustCallStatus>),
              Pointer<Void> Function(
                  Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_clientbuilder_username");
  late final Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_clone_encryption = _dylib.lookupFunction<
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>),
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_clone_encryption");
  late final void Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_free_encryption = _dylib.lookupFunction<
              Void Function(Pointer<Void>, Pointer<RustCallStatus>),
              void Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_free_encryption");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_encryption_backup_exists_on_server =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                Pointer<Void>,
              ),
              Pointer<Void> Function(
                Pointer<Void>,
              )>(
          "uniffi_matrix_sdk_ffi_fn_method_encryption_backup_exists_on_server");
  late final RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_encryption_backup_state =
      _dylib.lookupFunction<
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>),
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_encryption_backup_state");
  late final Pointer<Void> Function(Pointer<Void>, int, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_encryption_backup_state_listener =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                  Pointer<Void>, Uint64, Pointer<RustCallStatus>),
              Pointer<Void> Function(
                  Pointer<Void>, int, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_encryption_backup_state_listener");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_encryption_curve25519_key =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
          )>("uniffi_matrix_sdk_ffi_fn_method_encryption_curve25519_key");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_encryption_disable_recovery =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
          )>("uniffi_matrix_sdk_ffi_fn_method_encryption_disable_recovery");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_encryption_ed25519_key =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
          )>("uniffi_matrix_sdk_ffi_fn_method_encryption_ed25519_key");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_encryption_enable_backups =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
          )>("uniffi_matrix_sdk_ffi_fn_method_encryption_enable_backups");
  late final Pointer<Void> Function(
    Pointer<Void>,
    int,
    RustBuffer,
    int,
  ) uniffi_matrix_sdk_ffi_fn_method_encryption_enable_recovery =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
            Int8,
            RustBuffer,
            Uint64,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
            int,
            RustBuffer,
            int,
          )>("uniffi_matrix_sdk_ffi_fn_method_encryption_enable_recovery");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_encryption_is_last_device =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
          )>("uniffi_matrix_sdk_ffi_fn_method_encryption_is_last_device");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_encryption_recover = _dylib.lookupFunction<
      Pointer<Void> Function(
        Pointer<Void>,
        RustBuffer,
      ),
      Pointer<Void> Function(
        Pointer<Void>,
        RustBuffer,
      )>("uniffi_matrix_sdk_ffi_fn_method_encryption_recover");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_encryption_recover_and_reset =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
          )>("uniffi_matrix_sdk_ffi_fn_method_encryption_recover_and_reset");
  late final RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_encryption_recovery_state =
      _dylib.lookupFunction<
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>),
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_encryption_recovery_state");
  late final Pointer<Void> Function(Pointer<Void>, int, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_encryption_recovery_state_listener =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                  Pointer<Void>, Uint64, Pointer<RustCallStatus>),
              Pointer<Void> Function(
                  Pointer<Void>, int, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_encryption_recovery_state_listener");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_encryption_reset_identity =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
          )>("uniffi_matrix_sdk_ffi_fn_method_encryption_reset_identity");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_encryption_reset_recovery_key =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
          )>("uniffi_matrix_sdk_ffi_fn_method_encryption_reset_recovery_key");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_encryption_user_identity =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
          )>("uniffi_matrix_sdk_ffi_fn_method_encryption_user_identity");
  late final RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_encryption_verification_state =
      _dylib.lookupFunction<
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>),
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_encryption_verification_state");
  late final Pointer<Void> Function(Pointer<Void>, int, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_encryption_verification_state_listener =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                  Pointer<Void>, Uint64, Pointer<RustCallStatus>),
              Pointer<Void> Function(
                  Pointer<Void>, int, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_encryption_verification_state_listener");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_encryption_wait_for_backup_upload_steady_state =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                Pointer<Void>,
                RustBuffer,
              ),
              Pointer<Void> Function(
                Pointer<Void>,
                RustBuffer,
              )>(
          "uniffi_matrix_sdk_ffi_fn_method_encryption_wait_for_backup_upload_steady_state");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_encryption_wait_for_e2ee_initialization_tasks =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                Pointer<Void>,
              ),
              Pointer<Void> Function(
                Pointer<Void>,
              )>(
          "uniffi_matrix_sdk_ffi_fn_method_encryption_wait_for_e2ee_initialization_tasks");
  late final Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_clone_homeserverlogindetails =
      _dylib.lookupFunction<
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>),
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_clone_homeserverlogindetails");
  late final void Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_free_homeserverlogindetails =
      _dylib.lookupFunction<
              Void Function(Pointer<Void>, Pointer<RustCallStatus>),
              void Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_free_homeserverlogindetails");
  late final RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_homeserverlogindetails_sliding_sync_version =
      _dylib.lookupFunction<
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>),
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_homeserverlogindetails_sliding_sync_version");
  late final RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_homeserverlogindetails_supported_oidc_prompts =
      _dylib.lookupFunction<
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>),
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_homeserverlogindetails_supported_oidc_prompts");
  late final int Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_homeserverlogindetails_supports_oidc_login =
      _dylib.lookupFunction<
              Int8 Function(Pointer<Void>, Pointer<RustCallStatus>),
              int Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_homeserverlogindetails_supports_oidc_login");
  late final int Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_homeserverlogindetails_supports_password_login =
      _dylib.lookupFunction<
              Int8 Function(Pointer<Void>, Pointer<RustCallStatus>),
              int Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_homeserverlogindetails_supports_password_login");
  late final int Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_homeserverlogindetails_supports_sso_login =
      _dylib.lookupFunction<
              Int8 Function(Pointer<Void>, Pointer<RustCallStatus>),
              int Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_homeserverlogindetails_supports_sso_login");
  late final RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_homeserverlogindetails_url =
      _dylib.lookupFunction<
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>),
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_homeserverlogindetails_url");
  late final Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_clone_identityresethandle =
      _dylib.lookupFunction<
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>),
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_clone_identityresethandle");
  late final void Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_free_identityresethandle = _dylib.lookupFunction<
              Void Function(Pointer<Void>, Pointer<RustCallStatus>),
              void Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_free_identityresethandle");
  late final RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_identityresethandle_auth_type =
      _dylib.lookupFunction<
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>),
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_identityresethandle_auth_type");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_identityresethandle_cancel =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
          )>("uniffi_matrix_sdk_ffi_fn_method_identityresethandle_cancel");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_identityresethandle_reset =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
          )>("uniffi_matrix_sdk_ffi_fn_method_identityresethandle_reset");
  late final Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_clone_inreplytodetails = _dylib.lookupFunction<
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>),
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_clone_inreplytodetails");
  late final void Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_free_inreplytodetails = _dylib.lookupFunction<
              Void Function(Pointer<Void>, Pointer<RustCallStatus>),
              void Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_free_inreplytodetails");
  late final RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_inreplytodetails_event =
      _dylib.lookupFunction<
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>),
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_inreplytodetails_event");
  late final RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_inreplytodetails_event_id =
      _dylib.lookupFunction<
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>),
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_inreplytodetails_event_id");
  late final Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_clone_knockrequestactions =
      _dylib.lookupFunction<
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>),
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_clone_knockrequestactions");
  late final void Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_free_knockrequestactions = _dylib.lookupFunction<
              Void Function(Pointer<Void>, Pointer<RustCallStatus>),
              void Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_free_knockrequestactions");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_knockrequestactions_accept =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
          )>("uniffi_matrix_sdk_ffi_fn_method_knockrequestactions_accept");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_knockrequestactions_decline =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
          )>("uniffi_matrix_sdk_ffi_fn_method_knockrequestactions_decline");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_knockrequestactions_decline_and_ban =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                Pointer<Void>,
                RustBuffer,
              ),
              Pointer<Void> Function(
                Pointer<Void>,
                RustBuffer,
              )>(
          "uniffi_matrix_sdk_ffi_fn_method_knockrequestactions_decline_and_ban");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_knockrequestactions_mark_as_seen =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                Pointer<Void>,
              ),
              Pointer<Void> Function(
                Pointer<Void>,
              )>(
          "uniffi_matrix_sdk_ffi_fn_method_knockrequestactions_mark_as_seen");
  late final Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_clone_lazytimelineitemprovider =
      _dylib.lookupFunction<
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>),
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_clone_lazytimelineitemprovider");
  late final void Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_free_lazytimelineitemprovider =
      _dylib.lookupFunction<
              Void Function(Pointer<Void>, Pointer<RustCallStatus>),
              void Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_free_lazytimelineitemprovider");
  late final int Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_lazytimelineitemprovider_contains_only_emojis =
      _dylib.lookupFunction<
              Int8 Function(Pointer<Void>, Pointer<RustCallStatus>),
              int Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_lazytimelineitemprovider_contains_only_emojis");
  late final RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_lazytimelineitemprovider_debug_info =
      _dylib.lookupFunction<
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>),
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_lazytimelineitemprovider_debug_info");
  late final RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_lazytimelineitemprovider_get_send_handle =
      _dylib.lookupFunction<
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>),
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_lazytimelineitemprovider_get_send_handle");
  late final RustBuffer Function(Pointer<Void>, int, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_lazytimelineitemprovider_get_shields =
      _dylib.lookupFunction<
              RustBuffer Function(Pointer<Void>, Int8, Pointer<RustCallStatus>),
              RustBuffer Function(Pointer<Void>, int, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_lazytimelineitemprovider_get_shields");
  late final Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_clone_mediafilehandle = _dylib.lookupFunction<
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>),
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_clone_mediafilehandle");
  late final void Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_free_mediafilehandle = _dylib.lookupFunction<
              Void Function(Pointer<Void>, Pointer<RustCallStatus>),
              void Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_free_mediafilehandle");
  late final RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_mediafilehandle_path =
      _dylib.lookupFunction<
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>),
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_mediafilehandle_path");
  late final int Function(Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_mediafilehandle_persist =
      _dylib.lookupFunction<
              Int8 Function(Pointer<Void>, RustBuffer, Pointer<RustCallStatus>),
              int Function(Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_mediafilehandle_persist");
  late final Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_clone_mediasource = _dylib.lookupFunction<
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>),
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_clone_mediasource");
  late final void Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_free_mediasource = _dylib.lookupFunction<
              Void Function(Pointer<Void>, Pointer<RustCallStatus>),
              void Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_free_mediasource");
  late final Pointer<Void> Function(RustBuffer, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_constructor_mediasource_from_json =
      _dylib.lookupFunction<
              Pointer<Void> Function(RustBuffer, Pointer<RustCallStatus>),
              Pointer<Void> Function(RustBuffer, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_constructor_mediasource_from_json");
  late final Pointer<Void> Function(RustBuffer, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_constructor_mediasource_from_url =
      _dylib.lookupFunction<
              Pointer<Void> Function(RustBuffer, Pointer<RustCallStatus>),
              Pointer<Void> Function(RustBuffer, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_constructor_mediasource_from_url");
  late final RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_mediasource_to_json =
      _dylib.lookupFunction<
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>),
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_mediasource_to_json");
  late final RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_mediasource_url = _dylib.lookupFunction<
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>),
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_mediasource_url");
  late final Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_clone_notificationclient = _dylib.lookupFunction<
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>),
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_clone_notificationclient");
  late final void Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_free_notificationclient = _dylib.lookupFunction<
              Void Function(Pointer<Void>, Pointer<RustCallStatus>),
              void Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_free_notificationclient");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_notificationclient_get_notification =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                Pointer<Void>,
                RustBuffer,
                RustBuffer,
              ),
              Pointer<Void> Function(
                Pointer<Void>,
                RustBuffer,
                RustBuffer,
              )>(
          "uniffi_matrix_sdk_ffi_fn_method_notificationclient_get_notification");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_notificationclient_get_notifications =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                Pointer<Void>,
                RustBuffer,
              ),
              Pointer<Void> Function(
                Pointer<Void>,
                RustBuffer,
              )>(
          "uniffi_matrix_sdk_ffi_fn_method_notificationclient_get_notifications");
  late final RustBuffer Function(
          Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_notificationclient_get_room =
      _dylib.lookupFunction<
              RustBuffer Function(
                  Pointer<Void>, RustBuffer, Pointer<RustCallStatus>),
              RustBuffer Function(
                  Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_notificationclient_get_room");
  late final Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_clone_notificationsettings =
      _dylib.lookupFunction<
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>),
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_clone_notificationsettings");
  late final void Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_free_notificationsettings =
      _dylib.lookupFunction<
              Void Function(Pointer<Void>, Pointer<RustCallStatus>),
              void Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_free_notificationsettings");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_notificationsettings_can_homeserver_push_encrypted_event_to_device =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                Pointer<Void>,
              ),
              Pointer<Void> Function(
                Pointer<Void>,
              )>(
          "uniffi_matrix_sdk_ffi_fn_method_notificationsettings_can_homeserver_push_encrypted_event_to_device");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_notificationsettings_can_push_encrypted_event_to_device =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                Pointer<Void>,
              ),
              Pointer<Void> Function(
                Pointer<Void>,
              )>(
          "uniffi_matrix_sdk_ffi_fn_method_notificationsettings_can_push_encrypted_event_to_device");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_notificationsettings_contains_keywords_rules =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                Pointer<Void>,
              ),
              Pointer<Void> Function(
                Pointer<Void>,
              )>(
          "uniffi_matrix_sdk_ffi_fn_method_notificationsettings_contains_keywords_rules");
  late final Pointer<Void> Function(
    Pointer<Void>,
    int,
    int,
  ) uniffi_matrix_sdk_ffi_fn_method_notificationsettings_get_default_room_notification_mode =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                Pointer<Void>,
                Int8,
                Int8,
              ),
              Pointer<Void> Function(
                Pointer<Void>,
                int,
                int,
              )>(
          "uniffi_matrix_sdk_ffi_fn_method_notificationsettings_get_default_room_notification_mode");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
    int,
    int,
  ) uniffi_matrix_sdk_ffi_fn_method_notificationsettings_get_room_notification_settings =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                Pointer<Void>,
                RustBuffer,
                Int8,
                Int8,
              ),
              Pointer<Void> Function(
                Pointer<Void>,
                RustBuffer,
                int,
                int,
              )>(
          "uniffi_matrix_sdk_ffi_fn_method_notificationsettings_get_room_notification_settings");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_notificationsettings_get_rooms_with_user_defined_rules =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                Pointer<Void>,
                RustBuffer,
              ),
              Pointer<Void> Function(
                Pointer<Void>,
                RustBuffer,
              )>(
          "uniffi_matrix_sdk_ffi_fn_method_notificationsettings_get_rooms_with_user_defined_rules");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_notificationsettings_get_user_defined_room_notification_mode =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                Pointer<Void>,
                RustBuffer,
              ),
              Pointer<Void> Function(
                Pointer<Void>,
                RustBuffer,
              )>(
          "uniffi_matrix_sdk_ffi_fn_method_notificationsettings_get_user_defined_room_notification_mode");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_notificationsettings_is_call_enabled =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                Pointer<Void>,
              ),
              Pointer<Void> Function(
                Pointer<Void>,
              )>(
          "uniffi_matrix_sdk_ffi_fn_method_notificationsettings_is_call_enabled");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_notificationsettings_is_invite_for_me_enabled =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                Pointer<Void>,
              ),
              Pointer<Void> Function(
                Pointer<Void>,
              )>(
          "uniffi_matrix_sdk_ffi_fn_method_notificationsettings_is_invite_for_me_enabled");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_notificationsettings_is_room_mention_enabled =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                Pointer<Void>,
              ),
              Pointer<Void> Function(
                Pointer<Void>,
              )>(
          "uniffi_matrix_sdk_ffi_fn_method_notificationsettings_is_room_mention_enabled");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_notificationsettings_is_user_mention_enabled =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                Pointer<Void>,
              ),
              Pointer<Void> Function(
                Pointer<Void>,
              )>(
          "uniffi_matrix_sdk_ffi_fn_method_notificationsettings_is_user_mention_enabled");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_notificationsettings_restore_default_room_notification_mode =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                Pointer<Void>,
                RustBuffer,
              ),
              Pointer<Void> Function(
                Pointer<Void>,
                RustBuffer,
              )>(
          "uniffi_matrix_sdk_ffi_fn_method_notificationsettings_restore_default_room_notification_mode");
  late final Pointer<Void> Function(
    Pointer<Void>,
    int,
  ) uniffi_matrix_sdk_ffi_fn_method_notificationsettings_set_call_enabled =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                Pointer<Void>,
                Int8,
              ),
              Pointer<Void> Function(
                Pointer<Void>,
                int,
              )>(
          "uniffi_matrix_sdk_ffi_fn_method_notificationsettings_set_call_enabled");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
    RustBuffer,
    RustBuffer,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_notificationsettings_set_custom_push_rule =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                Pointer<Void>,
                RustBuffer,
                RustBuffer,
                RustBuffer,
                RustBuffer,
              ),
              Pointer<Void> Function(
                Pointer<Void>,
                RustBuffer,
                RustBuffer,
                RustBuffer,
                RustBuffer,
              )>(
          "uniffi_matrix_sdk_ffi_fn_method_notificationsettings_set_custom_push_rule");
  late final Pointer<Void> Function(
    Pointer<Void>,
    int,
    int,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_notificationsettings_set_default_room_notification_mode =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                Pointer<Void>,
                Int8,
                Int8,
                RustBuffer,
              ),
              Pointer<Void> Function(
                Pointer<Void>,
                int,
                int,
                RustBuffer,
              )>(
          "uniffi_matrix_sdk_ffi_fn_method_notificationsettings_set_default_room_notification_mode");
  late final void Function(Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_notificationsettings_set_delegate =
      _dylib.lookupFunction<
              Void Function(Pointer<Void>, RustBuffer, Pointer<RustCallStatus>),
              void Function(
                  Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_notificationsettings_set_delegate");
  late final Pointer<Void> Function(
    Pointer<Void>,
    int,
  ) uniffi_matrix_sdk_ffi_fn_method_notificationsettings_set_invite_for_me_enabled =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                Pointer<Void>,
                Int8,
              ),
              Pointer<Void> Function(
                Pointer<Void>,
                int,
              )>(
          "uniffi_matrix_sdk_ffi_fn_method_notificationsettings_set_invite_for_me_enabled");
  late final Pointer<Void> Function(
    Pointer<Void>,
    int,
  ) uniffi_matrix_sdk_ffi_fn_method_notificationsettings_set_room_mention_enabled =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                Pointer<Void>,
                Int8,
              ),
              Pointer<Void> Function(
                Pointer<Void>,
                int,
              )>(
          "uniffi_matrix_sdk_ffi_fn_method_notificationsettings_set_room_mention_enabled");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_notificationsettings_set_room_notification_mode =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                Pointer<Void>,
                RustBuffer,
                RustBuffer,
              ),
              Pointer<Void> Function(
                Pointer<Void>,
                RustBuffer,
                RustBuffer,
              )>(
          "uniffi_matrix_sdk_ffi_fn_method_notificationsettings_set_room_notification_mode");
  late final Pointer<Void> Function(
    Pointer<Void>,
    int,
  ) uniffi_matrix_sdk_ffi_fn_method_notificationsettings_set_user_mention_enabled =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                Pointer<Void>,
                Int8,
              ),
              Pointer<Void> Function(
                Pointer<Void>,
                int,
              )>(
          "uniffi_matrix_sdk_ffi_fn_method_notificationsettings_set_user_mention_enabled");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
    int,
    int,
  ) uniffi_matrix_sdk_ffi_fn_method_notificationsettings_unmute_room =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                Pointer<Void>,
                RustBuffer,
                Int8,
                Int8,
              ),
              Pointer<Void> Function(
                Pointer<Void>,
                RustBuffer,
                int,
                int,
              )>(
          "uniffi_matrix_sdk_ffi_fn_method_notificationsettings_unmute_room");
  late final Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_clone_qrcodedata = _dylib.lookupFunction<
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>),
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_clone_qrcodedata");
  late final void Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_free_qrcodedata = _dylib.lookupFunction<
              Void Function(Pointer<Void>, Pointer<RustCallStatus>),
              void Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_free_qrcodedata");
  late final Pointer<Void> Function(RustBuffer, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_constructor_qrcodedata_from_bytes =
      _dylib.lookupFunction<
              Pointer<Void> Function(RustBuffer, Pointer<RustCallStatus>),
              Pointer<Void> Function(RustBuffer, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_constructor_qrcodedata_from_bytes");
  late final RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_qrcodedata_server_name =
      _dylib.lookupFunction<
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>),
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_qrcodedata_server_name");
  late final Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_clone_room = _dylib.lookupFunction<
          Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>),
          Pointer<Void> Function(Pointer<Void>,
              Pointer<RustCallStatus>)>("uniffi_matrix_sdk_ffi_fn_clone_room");
  late final void Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_free_room = _dylib.lookupFunction<
          Void Function(Pointer<Void>, Pointer<RustCallStatus>),
          void Function(Pointer<Void>,
              Pointer<RustCallStatus>)>("uniffi_matrix_sdk_ffi_fn_free_room");
  late final int Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_room_active_members_count =
      _dylib.lookupFunction<
              Uint64 Function(Pointer<Void>, Pointer<RustCallStatus>),
              int Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_room_active_members_count");
  late final RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_room_active_room_call_participants =
      _dylib.lookupFunction<
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>),
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_room_active_room_call_participants");
  late final RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_room_alternative_aliases =
      _dylib.lookupFunction<
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>),
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_room_alternative_aliases");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_room_apply_power_level_changes =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
          )>("uniffi_matrix_sdk_ffi_fn_method_room_apply_power_level_changes");
  late final RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_room_avatar_url = _dylib.lookupFunction<
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>),
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_room_avatar_url");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_room_ban_user = _dylib.lookupFunction<
      Pointer<Void> Function(
        Pointer<Void>,
        RustBuffer,
        RustBuffer,
      ),
      Pointer<Void> Function(
        Pointer<Void>,
        RustBuffer,
        RustBuffer,
      )>("uniffi_matrix_sdk_ffi_fn_method_room_ban_user");
  late final RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_room_canonical_alias =
      _dylib.lookupFunction<
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>),
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_room_canonical_alias");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_room_clear_composer_draft =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
          )>("uniffi_matrix_sdk_ffi_fn_method_room_clear_composer_draft");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_room_clear_event_cache_storage =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
          )>("uniffi_matrix_sdk_ffi_fn_method_room_clear_event_cache_storage");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_room_discard_room_key =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
          )>("uniffi_matrix_sdk_ffi_fn_method_room_discard_room_key");
  late final RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_room_display_name = _dylib.lookupFunction<
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>),
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_room_display_name");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_room_edit = _dylib.lookupFunction<
      Pointer<Void> Function(
        Pointer<Void>,
        RustBuffer,
        Pointer<Void>,
      ),
      Pointer<Void> Function(
        Pointer<Void>,
        RustBuffer,
        Pointer<Void>,
      )>("uniffi_matrix_sdk_ffi_fn_method_room_edit");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_room_enable_encryption =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
          )>("uniffi_matrix_sdk_ffi_fn_method_room_enable_encryption");
  late final void Function(Pointer<Void>, int, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_room_enable_send_queue =
      _dylib.lookupFunction<
              Void Function(Pointer<Void>, Int8, Pointer<RustCallStatus>),
              void Function(Pointer<Void>, int, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_room_enable_send_queue");
  late final RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_room_encryption_state =
      _dylib.lookupFunction<
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>),
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_room_encryption_state");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_room_fetch_thread_subscription =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
          )>("uniffi_matrix_sdk_ffi_fn_method_room_fetch_thread_subscription");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_room_forget = _dylib.lookupFunction<
      Pointer<Void> Function(
        Pointer<Void>,
      ),
      Pointer<Void> Function(
        Pointer<Void>,
      )>("uniffi_matrix_sdk_ffi_fn_method_room_forget");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_room_get_power_levels =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
          )>("uniffi_matrix_sdk_ffi_fn_method_room_get_power_levels");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_room_get_room_visibility =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
          )>("uniffi_matrix_sdk_ffi_fn_method_room_get_room_visibility");
  late final int Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_room_has_active_room_call =
      _dylib.lookupFunction<
              Int8 Function(Pointer<Void>, Pointer<RustCallStatus>),
              int Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_room_has_active_room_call");
  late final RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_room_heroes = _dylib.lookupFunction<
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>),
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_room_heroes");
  late final RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_room_id = _dylib.lookupFunction<
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>),
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_room_id");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_room_ignore_device_trust_and_resend =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                Pointer<Void>,
                RustBuffer,
                Pointer<Void>,
              ),
              Pointer<Void> Function(
                Pointer<Void>,
                RustBuffer,
                Pointer<Void>,
              )>(
          "uniffi_matrix_sdk_ffi_fn_method_room_ignore_device_trust_and_resend");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_room_ignore_user = _dylib.lookupFunction<
      Pointer<Void> Function(
        Pointer<Void>,
        RustBuffer,
      ),
      Pointer<Void> Function(
        Pointer<Void>,
        RustBuffer,
      )>("uniffi_matrix_sdk_ffi_fn_method_room_ignore_user");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_room_invite_user_by_id =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
          )>("uniffi_matrix_sdk_ffi_fn_method_room_invite_user_by_id");
  late final int Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_room_invited_members_count =
      _dylib.lookupFunction<
              Uint64 Function(Pointer<Void>, Pointer<RustCallStatus>),
              int Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_room_invited_members_count");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_room_inviter = _dylib.lookupFunction<
      Pointer<Void> Function(
        Pointer<Void>,
      ),
      Pointer<Void> Function(
        Pointer<Void>,
      )>("uniffi_matrix_sdk_ffi_fn_method_room_inviter");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_room_is_direct = _dylib.lookupFunction<
      Pointer<Void> Function(
        Pointer<Void>,
      ),
      Pointer<Void> Function(
        Pointer<Void>,
      )>("uniffi_matrix_sdk_ffi_fn_method_room_is_direct");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_room_is_encrypted = _dylib.lookupFunction<
      Pointer<Void> Function(
        Pointer<Void>,
      ),
      Pointer<Void> Function(
        Pointer<Void>,
      )>("uniffi_matrix_sdk_ffi_fn_method_room_is_encrypted");
  late final RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_room_is_public = _dylib.lookupFunction<
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>),
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_room_is_public");
  late final int Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_room_is_send_queue_enabled =
      _dylib.lookupFunction<
              Int8 Function(Pointer<Void>, Pointer<RustCallStatus>),
              int Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_room_is_send_queue_enabled");
  late final int Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_room_is_space = _dylib.lookupFunction<
              Int8 Function(Pointer<Void>, Pointer<RustCallStatus>),
              int Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_room_is_space");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_room_join = _dylib.lookupFunction<
      Pointer<Void> Function(
        Pointer<Void>,
      ),
      Pointer<Void> Function(
        Pointer<Void>,
      )>("uniffi_matrix_sdk_ffi_fn_method_room_join");
  late final int Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_room_joined_members_count =
      _dylib.lookupFunction<
              Uint64 Function(Pointer<Void>, Pointer<RustCallStatus>),
              int Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_room_joined_members_count");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_room_kick_user = _dylib.lookupFunction<
      Pointer<Void> Function(
        Pointer<Void>,
        RustBuffer,
        RustBuffer,
      ),
      Pointer<Void> Function(
        Pointer<Void>,
        RustBuffer,
        RustBuffer,
      )>("uniffi_matrix_sdk_ffi_fn_method_room_kick_user");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_room_latest_encryption_state =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
          )>("uniffi_matrix_sdk_ffi_fn_method_room_latest_encryption_state");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_room_latest_event = _dylib.lookupFunction<
      Pointer<Void> Function(
        Pointer<Void>,
      ),
      Pointer<Void> Function(
        Pointer<Void>,
      )>("uniffi_matrix_sdk_ffi_fn_method_room_latest_event");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_room_leave = _dylib.lookupFunction<
      Pointer<Void> Function(
        Pointer<Void>,
      ),
      Pointer<Void> Function(
        Pointer<Void>,
      )>("uniffi_matrix_sdk_ffi_fn_method_room_leave");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_room_load_composer_draft =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
          )>("uniffi_matrix_sdk_ffi_fn_method_room_load_composer_draft");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_room_mark_as_read = _dylib.lookupFunction<
      Pointer<Void> Function(
        Pointer<Void>,
        RustBuffer,
      ),
      Pointer<Void> Function(
        Pointer<Void>,
        RustBuffer,
      )>("uniffi_matrix_sdk_ffi_fn_method_room_mark_as_read");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_room_matrix_to_event_permalink =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
          )>("uniffi_matrix_sdk_ffi_fn_method_room_matrix_to_event_permalink");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_room_matrix_to_permalink =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
          )>("uniffi_matrix_sdk_ffi_fn_method_room_matrix_to_permalink");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_room_member = _dylib.lookupFunction<
      Pointer<Void> Function(
        Pointer<Void>,
        RustBuffer,
      ),
      Pointer<Void> Function(
        Pointer<Void>,
        RustBuffer,
      )>("uniffi_matrix_sdk_ffi_fn_method_room_member");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_room_member_avatar_url =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
          )>("uniffi_matrix_sdk_ffi_fn_method_room_member_avatar_url");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_room_member_display_name =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
          )>("uniffi_matrix_sdk_ffi_fn_method_room_member_display_name");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_room_member_with_sender_info =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
          )>("uniffi_matrix_sdk_ffi_fn_method_room_member_with_sender_info");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_room_members = _dylib.lookupFunction<
      Pointer<Void> Function(
        Pointer<Void>,
      ),
      Pointer<Void> Function(
        Pointer<Void>,
      )>("uniffi_matrix_sdk_ffi_fn_method_room_members");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_room_members_no_sync =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
          )>("uniffi_matrix_sdk_ffi_fn_method_room_members_no_sync");
  late final RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_room_membership = _dylib.lookupFunction<
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>),
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_room_membership");
  late final RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_room_own_user_id = _dylib.lookupFunction<
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>),
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_room_own_user_id");
  late final RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_room_predecessor_room =
      _dylib.lookupFunction<
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>),
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_room_predecessor_room");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_room_preview_room = _dylib.lookupFunction<
      Pointer<Void> Function(
        Pointer<Void>,
        RustBuffer,
      ),
      Pointer<Void> Function(
        Pointer<Void>,
        RustBuffer,
      )>("uniffi_matrix_sdk_ffi_fn_method_room_preview_room");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_room_publish_room_alias_in_room_directory =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                Pointer<Void>,
                RustBuffer,
              ),
              Pointer<Void> Function(
                Pointer<Void>,
                RustBuffer,
              )>(
          "uniffi_matrix_sdk_ffi_fn_method_room_publish_room_alias_in_room_directory");
  late final RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_room_raw_name = _dylib.lookupFunction<
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>),
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_room_raw_name");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_room_redact = _dylib.lookupFunction<
      Pointer<Void> Function(
        Pointer<Void>,
        RustBuffer,
        RustBuffer,
      ),
      Pointer<Void> Function(
        Pointer<Void>,
        RustBuffer,
        RustBuffer,
      )>("uniffi_matrix_sdk_ffi_fn_method_room_redact");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_room_remove_avatar = _dylib.lookupFunction<
      Pointer<Void> Function(
        Pointer<Void>,
      ),
      Pointer<Void> Function(
        Pointer<Void>,
      )>("uniffi_matrix_sdk_ffi_fn_method_room_remove_avatar");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_room_remove_room_alias_from_room_directory =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                Pointer<Void>,
                RustBuffer,
              ),
              Pointer<Void> Function(
                Pointer<Void>,
                RustBuffer,
              )>(
          "uniffi_matrix_sdk_ffi_fn_method_room_remove_room_alias_from_room_directory");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
    RustBuffer,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_room_report_content = _dylib.lookupFunction<
      Pointer<Void> Function(
        Pointer<Void>,
        RustBuffer,
        RustBuffer,
        RustBuffer,
      ),
      Pointer<Void> Function(
        Pointer<Void>,
        RustBuffer,
        RustBuffer,
        RustBuffer,
      )>("uniffi_matrix_sdk_ffi_fn_method_room_report_content");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_room_report_room = _dylib.lookupFunction<
      Pointer<Void> Function(
        Pointer<Void>,
        RustBuffer,
      ),
      Pointer<Void> Function(
        Pointer<Void>,
        RustBuffer,
      )>("uniffi_matrix_sdk_ffi_fn_method_room_report_room");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_room_reset_power_levels =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
          )>("uniffi_matrix_sdk_ffi_fn_method_room_reset_power_levels");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_room_room_events_debug_string =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
          )>("uniffi_matrix_sdk_ffi_fn_method_room_room_events_debug_string");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_room_room_info = _dylib.lookupFunction<
      Pointer<Void> Function(
        Pointer<Void>,
      ),
      Pointer<Void> Function(
        Pointer<Void>,
      )>("uniffi_matrix_sdk_ffi_fn_method_room_room_info");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_room_save_composer_draft =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
            RustBuffer,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
            RustBuffer,
          )>("uniffi_matrix_sdk_ffi_fn_method_room_save_composer_draft");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_room_send_live_location =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
          )>("uniffi_matrix_sdk_ffi_fn_method_room_send_live_location");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_room_send_raw = _dylib.lookupFunction<
      Pointer<Void> Function(
        Pointer<Void>,
        RustBuffer,
        RustBuffer,
      ),
      Pointer<Void> Function(
        Pointer<Void>,
        RustBuffer,
        RustBuffer,
      )>("uniffi_matrix_sdk_ffi_fn_method_room_send_raw");
  late final Pointer<Void> Function(
    Pointer<Void>,
    int,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_room_set_is_favourite =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
            Int8,
            RustBuffer,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
            int,
            RustBuffer,
          )>("uniffi_matrix_sdk_ffi_fn_method_room_set_is_favourite");
  late final Pointer<Void> Function(
    Pointer<Void>,
    int,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_room_set_is_low_priority =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
            Int8,
            RustBuffer,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
            int,
            RustBuffer,
          )>("uniffi_matrix_sdk_ffi_fn_method_room_set_is_low_priority");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_room_set_name = _dylib.lookupFunction<
      Pointer<Void> Function(
        Pointer<Void>,
        RustBuffer,
      ),
      Pointer<Void> Function(
        Pointer<Void>,
        RustBuffer,
      )>("uniffi_matrix_sdk_ffi_fn_method_room_set_name");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
    int,
  ) uniffi_matrix_sdk_ffi_fn_method_room_set_thread_subscription =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
            Int8,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
            int,
          )>("uniffi_matrix_sdk_ffi_fn_method_room_set_thread_subscription");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_room_set_topic = _dylib.lookupFunction<
      Pointer<Void> Function(
        Pointer<Void>,
        RustBuffer,
      ),
      Pointer<Void> Function(
        Pointer<Void>,
        RustBuffer,
      )>("uniffi_matrix_sdk_ffi_fn_method_room_set_topic");
  late final Pointer<Void> Function(
    Pointer<Void>,
    int,
  ) uniffi_matrix_sdk_ffi_fn_method_room_set_unread_flag =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
            Int8,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
            int,
          )>("uniffi_matrix_sdk_ffi_fn_method_room_set_unread_flag");
  late final Pointer<Void> Function(
    Pointer<Void>,
    int,
  ) uniffi_matrix_sdk_ffi_fn_method_room_start_live_location_share =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
            Uint64,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
            int,
          )>("uniffi_matrix_sdk_ffi_fn_method_room_start_live_location_share");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_room_stop_live_location_share =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
          )>("uniffi_matrix_sdk_ffi_fn_method_room_stop_live_location_share");
  late final Pointer<Void> Function(
    Pointer<Void>,
    int,
  ) uniffi_matrix_sdk_ffi_fn_method_room_subscribe_to_identity_status_changes =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                Pointer<Void>,
                Uint64,
              ),
              Pointer<Void> Function(
                Pointer<Void>,
                int,
              )>(
          "uniffi_matrix_sdk_ffi_fn_method_room_subscribe_to_identity_status_changes");
  late final Pointer<Void> Function(
    Pointer<Void>,
    int,
  ) uniffi_matrix_sdk_ffi_fn_method_room_subscribe_to_knock_requests =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                Pointer<Void>,
                Uint64,
              ),
              Pointer<Void> Function(
                Pointer<Void>,
                int,
              )>(
          "uniffi_matrix_sdk_ffi_fn_method_room_subscribe_to_knock_requests");
  late final Pointer<Void> Function(Pointer<Void>, int, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_room_subscribe_to_live_location_shares =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                  Pointer<Void>, Uint64, Pointer<RustCallStatus>),
              Pointer<Void> Function(
                  Pointer<Void>, int, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_room_subscribe_to_live_location_shares");
  late final Pointer<Void> Function(Pointer<Void>, int, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_room_subscribe_to_room_info_updates =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                  Pointer<Void>, Uint64, Pointer<RustCallStatus>),
              Pointer<Void> Function(
                  Pointer<Void>, int, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_room_subscribe_to_room_info_updates");
  late final Pointer<Void> Function(Pointer<Void>, int, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_room_subscribe_to_typing_notifications =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                  Pointer<Void>, Uint64, Pointer<RustCallStatus>),
              Pointer<Void> Function(
                  Pointer<Void>, int, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_room_subscribe_to_typing_notifications");
  late final RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_room_successor_room =
      _dylib.lookupFunction<
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>),
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_room_successor_room");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_room_suggested_role_for_user =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
          )>("uniffi_matrix_sdk_ffi_fn_method_room_suggested_role_for_user");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_room_timeline = _dylib.lookupFunction<
      Pointer<Void> Function(
        Pointer<Void>,
      ),
      Pointer<Void> Function(
        Pointer<Void>,
      )>("uniffi_matrix_sdk_ffi_fn_method_room_timeline");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_room_timeline_with_configuration =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                Pointer<Void>,
                RustBuffer,
              ),
              Pointer<Void> Function(
                Pointer<Void>,
                RustBuffer,
              )>(
          "uniffi_matrix_sdk_ffi_fn_method_room_timeline_with_configuration");
  late final RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_room_topic = _dylib.lookupFunction<
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>),
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_room_topic");
  late final Pointer<Void> Function(
    Pointer<Void>,
    int,
  ) uniffi_matrix_sdk_ffi_fn_method_room_typing_notice = _dylib.lookupFunction<
      Pointer<Void> Function(
        Pointer<Void>,
        Int8,
      ),
      Pointer<Void> Function(
        Pointer<Void>,
        int,
      )>("uniffi_matrix_sdk_ffi_fn_method_room_typing_notice");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_room_unban_user = _dylib.lookupFunction<
      Pointer<Void> Function(
        Pointer<Void>,
        RustBuffer,
        RustBuffer,
      ),
      Pointer<Void> Function(
        Pointer<Void>,
        RustBuffer,
        RustBuffer,
      )>("uniffi_matrix_sdk_ffi_fn_method_room_unban_user");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_room_update_canonical_alias =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
            RustBuffer,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
            RustBuffer,
          )>("uniffi_matrix_sdk_ffi_fn_method_room_update_canonical_alias");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_room_update_history_visibility =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
          )>("uniffi_matrix_sdk_ffi_fn_method_room_update_history_visibility");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_room_update_join_rules =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
          )>("uniffi_matrix_sdk_ffi_fn_method_room_update_join_rules");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_room_update_power_levels_for_users =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                Pointer<Void>,
                RustBuffer,
              ),
              Pointer<Void> Function(
                Pointer<Void>,
                RustBuffer,
              )>(
          "uniffi_matrix_sdk_ffi_fn_method_room_update_power_levels_for_users");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_room_update_room_visibility =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
          )>("uniffi_matrix_sdk_ffi_fn_method_room_update_room_visibility");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
    RustBuffer,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_room_upload_avatar = _dylib.lookupFunction<
      Pointer<Void> Function(
        Pointer<Void>,
        RustBuffer,
        RustBuffer,
        RustBuffer,
      ),
      Pointer<Void> Function(
        Pointer<Void>,
        RustBuffer,
        RustBuffer,
        RustBuffer,
      )>("uniffi_matrix_sdk_ffi_fn_method_room_upload_avatar");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_room_withdraw_verification_and_resend =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                Pointer<Void>,
                RustBuffer,
                Pointer<Void>,
              ),
              Pointer<Void> Function(
                Pointer<Void>,
                RustBuffer,
                Pointer<Void>,
              )>(
          "uniffi_matrix_sdk_ffi_fn_method_room_withdraw_verification_and_resend");
  late final Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_clone_roomdirectorysearch =
      _dylib.lookupFunction<
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>),
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_clone_roomdirectorysearch");
  late final void Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_free_roomdirectorysearch = _dylib.lookupFunction<
              Void Function(Pointer<Void>, Pointer<RustCallStatus>),
              void Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_free_roomdirectorysearch");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_roomdirectorysearch_is_at_last_page =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                Pointer<Void>,
              ),
              Pointer<Void> Function(
                Pointer<Void>,
              )>(
          "uniffi_matrix_sdk_ffi_fn_method_roomdirectorysearch_is_at_last_page");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_roomdirectorysearch_loaded_pages =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                Pointer<Void>,
              ),
              Pointer<Void> Function(
                Pointer<Void>,
              )>(
          "uniffi_matrix_sdk_ffi_fn_method_roomdirectorysearch_loaded_pages");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_roomdirectorysearch_next_page =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
          )>("uniffi_matrix_sdk_ffi_fn_method_roomdirectorysearch_next_page");
  late final Pointer<Void> Function(
    Pointer<Void>,
    int,
  ) uniffi_matrix_sdk_ffi_fn_method_roomdirectorysearch_results =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
            Uint64,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
            int,
          )>("uniffi_matrix_sdk_ffi_fn_method_roomdirectorysearch_results");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
    int,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_roomdirectorysearch_search =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
            Uint32,
            RustBuffer,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
            int,
            RustBuffer,
          )>("uniffi_matrix_sdk_ffi_fn_method_roomdirectorysearch_search");
  late final Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_clone_roomlist = _dylib.lookupFunction<
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>),
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_clone_roomlist");
  late final void Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_free_roomlist = _dylib.lookupFunction<
              Void Function(Pointer<Void>, Pointer<RustCallStatus>),
              void Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_free_roomlist");
  late final Pointer<Void> Function(
          Pointer<Void>, int, int, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_roomlist_entries_with_dynamic_adapters =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                  Pointer<Void>, Uint32, Uint64, Pointer<RustCallStatus>),
              Pointer<Void> Function(
                  Pointer<Void>, int, int, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_roomlist_entries_with_dynamic_adapters");
  late final RustBuffer Function(Pointer<Void>, int, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_roomlist_loading_state = _dylib
          .lookupFunction<
                  RustBuffer Function(
                      Pointer<Void>, Uint64, Pointer<RustCallStatus>),
                  RustBuffer Function(
                      Pointer<Void>, int, Pointer<RustCallStatus>)>(
              "uniffi_matrix_sdk_ffi_fn_method_roomlist_loading_state");
  late final Pointer<Void> Function(
          Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_roomlist_room = _dylib.lookupFunction<
              Pointer<Void> Function(
                  Pointer<Void>, RustBuffer, Pointer<RustCallStatus>),
              Pointer<Void> Function(
                  Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_roomlist_room");
  late final Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_clone_roomlistdynamicentriescontroller =
      _dylib.lookupFunction<
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>),
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_clone_roomlistdynamicentriescontroller");
  late final void Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_free_roomlistdynamicentriescontroller =
      _dylib.lookupFunction<
              Void Function(Pointer<Void>, Pointer<RustCallStatus>),
              void Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_free_roomlistdynamicentriescontroller");
  late final void Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_roomlistdynamicentriescontroller_add_one_page =
      _dylib.lookupFunction<
              Void Function(Pointer<Void>, Pointer<RustCallStatus>),
              void Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_roomlistdynamicentriescontroller_add_one_page");
  late final void Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_roomlistdynamicentriescontroller_reset_to_one_page =
      _dylib.lookupFunction<
              Void Function(Pointer<Void>, Pointer<RustCallStatus>),
              void Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_roomlistdynamicentriescontroller_reset_to_one_page");
  late final int Function(Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_roomlistdynamicentriescontroller_set_filter =
      _dylib.lookupFunction<
              Int8 Function(Pointer<Void>, RustBuffer, Pointer<RustCallStatus>),
              int Function(Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_roomlistdynamicentriescontroller_set_filter");
  late final Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_clone_roomlistentrieswithdynamicadaptersresult =
      _dylib.lookupFunction<
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>),
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_clone_roomlistentrieswithdynamicadaptersresult");
  late final void Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_free_roomlistentrieswithdynamicadaptersresult =
      _dylib.lookupFunction<
              Void Function(Pointer<Void>, Pointer<RustCallStatus>),
              void Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_free_roomlistentrieswithdynamicadaptersresult");
  late final Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_roomlistentrieswithdynamicadaptersresult_controller =
      _dylib.lookupFunction<
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>),
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_roomlistentrieswithdynamicadaptersresult_controller");
  late final Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_roomlistentrieswithdynamicadaptersresult_entries_stream =
      _dylib.lookupFunction<
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>),
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_roomlistentrieswithdynamicadaptersresult_entries_stream");
  late final Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_clone_roomlistservice = _dylib.lookupFunction<
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>),
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_clone_roomlistservice");
  late final void Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_free_roomlistservice = _dylib.lookupFunction<
              Void Function(Pointer<Void>, Pointer<RustCallStatus>),
              void Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_free_roomlistservice");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_roomlistservice_all_rooms =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
          )>("uniffi_matrix_sdk_ffi_fn_method_roomlistservice_all_rooms");
  late final Pointer<Void> Function(
          Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_roomlistservice_room =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                  Pointer<Void>, RustBuffer, Pointer<RustCallStatus>),
              Pointer<Void> Function(
                  Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_roomlistservice_room");
  late final Pointer<Void> Function(Pointer<Void>, int, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_roomlistservice_state =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                  Pointer<Void>, Uint64, Pointer<RustCallStatus>),
              Pointer<Void> Function(
                  Pointer<Void>, int, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_roomlistservice_state");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_roomlistservice_subscribe_to_rooms =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                Pointer<Void>,
                RustBuffer,
              ),
              Pointer<Void> Function(
                Pointer<Void>,
                RustBuffer,
              )>(
          "uniffi_matrix_sdk_ffi_fn_method_roomlistservice_subscribe_to_rooms");
  late final Pointer<Void> Function(
          Pointer<Void>, int, int, int, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_roomlistservice_sync_indicator =
      _dylib.lookupFunction<
              Pointer<Void> Function(Pointer<Void>, Uint32, Uint32, Uint64,
                  Pointer<RustCallStatus>),
              Pointer<Void> Function(
                  Pointer<Void>, int, int, int, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_roomlistservice_sync_indicator");
  late final Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_clone_roommembersiterator =
      _dylib.lookupFunction<
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>),
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_clone_roommembersiterator");
  late final void Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_free_roommembersiterator = _dylib.lookupFunction<
              Void Function(Pointer<Void>, Pointer<RustCallStatus>),
              void Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_free_roommembersiterator");
  late final int Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_roommembersiterator_len =
      _dylib.lookupFunction<
              Uint32 Function(Pointer<Void>, Pointer<RustCallStatus>),
              int Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_roommembersiterator_len");
  late final RustBuffer Function(Pointer<Void>, int, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_roommembersiterator_next_chunk = _dylib
          .lookupFunction<
                  RustBuffer Function(
                      Pointer<Void>, Uint32, Pointer<RustCallStatus>),
                  RustBuffer Function(
                      Pointer<Void>, int, Pointer<RustCallStatus>)>(
              "uniffi_matrix_sdk_ffi_fn_method_roommembersiterator_next_chunk");
  late final Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_clone_roommessageeventcontentwithoutrelation =
      _dylib.lookupFunction<
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>),
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_clone_roommessageeventcontentwithoutrelation");
  late final void Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_free_roommessageeventcontentwithoutrelation =
      _dylib.lookupFunction<
              Void Function(Pointer<Void>, Pointer<RustCallStatus>),
              void Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_free_roommessageeventcontentwithoutrelation");
  late final Pointer<Void> Function(
          Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_roommessageeventcontentwithoutrelation_with_mentions =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                  Pointer<Void>, RustBuffer, Pointer<RustCallStatus>),
              Pointer<Void> Function(
                  Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_roommessageeventcontentwithoutrelation_with_mentions");
  late final Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_clone_roompowerlevels = _dylib.lookupFunction<
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>),
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_clone_roompowerlevels");
  late final void Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_free_roompowerlevels = _dylib.lookupFunction<
              Void Function(Pointer<Void>, Pointer<RustCallStatus>),
              void Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_free_roompowerlevels");
  late final int Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_roompowerlevels_can_own_user_ban =
      _dylib.lookupFunction<
              Int8 Function(Pointer<Void>, Pointer<RustCallStatus>),
              int Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_roompowerlevels_can_own_user_ban");
  late final int Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_roompowerlevels_can_own_user_invite =
      _dylib.lookupFunction<
              Int8 Function(Pointer<Void>, Pointer<RustCallStatus>),
              int Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_roompowerlevels_can_own_user_invite");
  late final int Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_roompowerlevels_can_own_user_kick =
      _dylib.lookupFunction<
              Int8 Function(Pointer<Void>, Pointer<RustCallStatus>),
              int Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_roompowerlevels_can_own_user_kick");
  late final int Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_roompowerlevels_can_own_user_pin_unpin =
      _dylib.lookupFunction<
              Int8 Function(Pointer<Void>, Pointer<RustCallStatus>),
              int Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_roompowerlevels_can_own_user_pin_unpin");
  late final int Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_roompowerlevels_can_own_user_redact_other =
      _dylib.lookupFunction<
              Int8 Function(Pointer<Void>, Pointer<RustCallStatus>),
              int Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_roompowerlevels_can_own_user_redact_other");
  late final int Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_roompowerlevels_can_own_user_redact_own =
      _dylib.lookupFunction<
              Int8 Function(Pointer<Void>, Pointer<RustCallStatus>),
              int Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_roompowerlevels_can_own_user_redact_own");
  late final int Function(Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_roompowerlevels_can_own_user_send_message =
      _dylib.lookupFunction<
              Int8 Function(Pointer<Void>, RustBuffer, Pointer<RustCallStatus>),
              int Function(Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_roompowerlevels_can_own_user_send_message");
  late final int Function(Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_roompowerlevels_can_own_user_send_state =
      _dylib.lookupFunction<
              Int8 Function(Pointer<Void>, RustBuffer, Pointer<RustCallStatus>),
              int Function(Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_roompowerlevels_can_own_user_send_state");
  late final int Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_roompowerlevels_can_own_user_trigger_room_notification =
      _dylib.lookupFunction<
              Int8 Function(Pointer<Void>, Pointer<RustCallStatus>),
              int Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_roompowerlevels_can_own_user_trigger_room_notification");
  late final int Function(Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_roompowerlevels_can_user_ban =
      _dylib.lookupFunction<
              Int8 Function(Pointer<Void>, RustBuffer, Pointer<RustCallStatus>),
              int Function(Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_roompowerlevels_can_user_ban");
  late final int Function(Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_roompowerlevels_can_user_invite =
      _dylib.lookupFunction<
              Int8 Function(Pointer<Void>, RustBuffer, Pointer<RustCallStatus>),
              int Function(Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_roompowerlevels_can_user_invite");
  late final int Function(Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_roompowerlevels_can_user_kick =
      _dylib.lookupFunction<
              Int8 Function(Pointer<Void>, RustBuffer, Pointer<RustCallStatus>),
              int Function(Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_roompowerlevels_can_user_kick");
  late final int Function(Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_roompowerlevels_can_user_pin_unpin =
      _dylib.lookupFunction<
              Int8 Function(Pointer<Void>, RustBuffer, Pointer<RustCallStatus>),
              int Function(Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_roompowerlevels_can_user_pin_unpin");
  late final int Function(Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_roompowerlevels_can_user_redact_other =
      _dylib.lookupFunction<
              Int8 Function(Pointer<Void>, RustBuffer, Pointer<RustCallStatus>),
              int Function(Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_roompowerlevels_can_user_redact_other");
  late final int Function(Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_roompowerlevels_can_user_redact_own =
      _dylib.lookupFunction<
              Int8 Function(Pointer<Void>, RustBuffer, Pointer<RustCallStatus>),
              int Function(Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_roompowerlevels_can_user_redact_own");
  late final int Function(
          Pointer<Void>, RustBuffer, RustBuffer, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_roompowerlevels_can_user_send_message =
      _dylib.lookupFunction<
              Int8 Function(Pointer<Void>, RustBuffer, RustBuffer,
                  Pointer<RustCallStatus>),
              int Function(Pointer<Void>, RustBuffer, RustBuffer,
                  Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_roompowerlevels_can_user_send_message");
  late final int Function(
          Pointer<Void>, RustBuffer, RustBuffer, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_roompowerlevels_can_user_send_state =
      _dylib.lookupFunction<
              Int8 Function(Pointer<Void>, RustBuffer, RustBuffer,
                  Pointer<RustCallStatus>),
              int Function(Pointer<Void>, RustBuffer, RustBuffer,
                  Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_roompowerlevels_can_user_send_state");
  late final int Function(Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_roompowerlevels_can_user_trigger_room_notification =
      _dylib.lookupFunction<
              Int8 Function(Pointer<Void>, RustBuffer, Pointer<RustCallStatus>),
              int Function(Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_roompowerlevels_can_user_trigger_room_notification");
  late final RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_roompowerlevels_user_power_levels =
      _dylib.lookupFunction<
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>),
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_roompowerlevels_user_power_levels");
  late final RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_roompowerlevels_values =
      _dylib.lookupFunction<
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>),
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_roompowerlevels_values");
  late final Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_clone_roompreview = _dylib.lookupFunction<
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>),
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_clone_roompreview");
  late final void Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_free_roompreview = _dylib.lookupFunction<
              Void Function(Pointer<Void>, Pointer<RustCallStatus>),
              void Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_free_roompreview");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_roompreview_forget = _dylib.lookupFunction<
      Pointer<Void> Function(
        Pointer<Void>,
      ),
      Pointer<Void> Function(
        Pointer<Void>,
      )>("uniffi_matrix_sdk_ffi_fn_method_roompreview_forget");
  late final RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_roompreview_info = _dylib.lookupFunction<
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>),
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_roompreview_info");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_roompreview_inviter = _dylib.lookupFunction<
      Pointer<Void> Function(
        Pointer<Void>,
      ),
      Pointer<Void> Function(
        Pointer<Void>,
      )>("uniffi_matrix_sdk_ffi_fn_method_roompreview_inviter");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_roompreview_leave = _dylib.lookupFunction<
      Pointer<Void> Function(
        Pointer<Void>,
      ),
      Pointer<Void> Function(
        Pointer<Void>,
      )>("uniffi_matrix_sdk_ffi_fn_method_roompreview_leave");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_roompreview_own_membership_details =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                Pointer<Void>,
              ),
              Pointer<Void> Function(
                Pointer<Void>,
              )>(
          "uniffi_matrix_sdk_ffi_fn_method_roompreview_own_membership_details");
  late final Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_clone_sendattachmentjoinhandle =
      _dylib.lookupFunction<
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>),
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_clone_sendattachmentjoinhandle");
  late final void Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_free_sendattachmentjoinhandle =
      _dylib.lookupFunction<
              Void Function(Pointer<Void>, Pointer<RustCallStatus>),
              void Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_free_sendattachmentjoinhandle");
  late final void Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_sendattachmentjoinhandle_cancel =
      _dylib.lookupFunction<
              Void Function(Pointer<Void>, Pointer<RustCallStatus>),
              void Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_sendattachmentjoinhandle_cancel");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_sendattachmentjoinhandle_join =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
          )>("uniffi_matrix_sdk_ffi_fn_method_sendattachmentjoinhandle_join");
  late final Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_clone_sendgalleryjoinhandle =
      _dylib.lookupFunction<
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>),
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_clone_sendgalleryjoinhandle");
  late final void Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_free_sendgalleryjoinhandle =
      _dylib.lookupFunction<
              Void Function(Pointer<Void>, Pointer<RustCallStatus>),
              void Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_free_sendgalleryjoinhandle");
  late final void Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_sendgalleryjoinhandle_cancel =
      _dylib.lookupFunction<
              Void Function(Pointer<Void>, Pointer<RustCallStatus>),
              void Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_sendgalleryjoinhandle_cancel");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_sendgalleryjoinhandle_join =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
          )>("uniffi_matrix_sdk_ffi_fn_method_sendgalleryjoinhandle_join");
  late final Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_clone_sendhandle = _dylib.lookupFunction<
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>),
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_clone_sendhandle");
  late final void Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_free_sendhandle = _dylib.lookupFunction<
              Void Function(Pointer<Void>, Pointer<RustCallStatus>),
              void Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_free_sendhandle");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_sendhandle_abort = _dylib.lookupFunction<
      Pointer<Void> Function(
        Pointer<Void>,
      ),
      Pointer<Void> Function(
        Pointer<Void>,
      )>("uniffi_matrix_sdk_ffi_fn_method_sendhandle_abort");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_sendhandle_try_resend =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
          )>("uniffi_matrix_sdk_ffi_fn_method_sendhandle_try_resend");
  late final Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_clone_sessionverificationcontroller =
      _dylib.lookupFunction<
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>),
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_clone_sessionverificationcontroller");
  late final void Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_free_sessionverificationcontroller =
      _dylib.lookupFunction<
              Void Function(Pointer<Void>, Pointer<RustCallStatus>),
              void Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_free_sessionverificationcontroller");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_sessionverificationcontroller_accept_verification_request =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                Pointer<Void>,
              ),
              Pointer<Void> Function(
                Pointer<Void>,
              )>(
          "uniffi_matrix_sdk_ffi_fn_method_sessionverificationcontroller_accept_verification_request");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_sessionverificationcontroller_acknowledge_verification_request =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                Pointer<Void>,
                RustBuffer,
                RustBuffer,
              ),
              Pointer<Void> Function(
                Pointer<Void>,
                RustBuffer,
                RustBuffer,
              )>(
          "uniffi_matrix_sdk_ffi_fn_method_sessionverificationcontroller_acknowledge_verification_request");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_sessionverificationcontroller_approve_verification =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                Pointer<Void>,
              ),
              Pointer<Void> Function(
                Pointer<Void>,
              )>(
          "uniffi_matrix_sdk_ffi_fn_method_sessionverificationcontroller_approve_verification");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_sessionverificationcontroller_cancel_verification =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                Pointer<Void>,
              ),
              Pointer<Void> Function(
                Pointer<Void>,
              )>(
          "uniffi_matrix_sdk_ffi_fn_method_sessionverificationcontroller_cancel_verification");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_sessionverificationcontroller_decline_verification =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                Pointer<Void>,
              ),
              Pointer<Void> Function(
                Pointer<Void>,
              )>(
          "uniffi_matrix_sdk_ffi_fn_method_sessionverificationcontroller_decline_verification");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_sessionverificationcontroller_request_device_verification =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                Pointer<Void>,
              ),
              Pointer<Void> Function(
                Pointer<Void>,
              )>(
          "uniffi_matrix_sdk_ffi_fn_method_sessionverificationcontroller_request_device_verification");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_sessionverificationcontroller_request_user_verification =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                Pointer<Void>,
                RustBuffer,
              ),
              Pointer<Void> Function(
                Pointer<Void>,
                RustBuffer,
              )>(
          "uniffi_matrix_sdk_ffi_fn_method_sessionverificationcontroller_request_user_verification");
  late final void Function(Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_sessionverificationcontroller_set_delegate =
      _dylib.lookupFunction<
              Void Function(Pointer<Void>, RustBuffer, Pointer<RustCallStatus>),
              void Function(
                  Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_sessionverificationcontroller_set_delegate");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_sessionverificationcontroller_start_sas_verification =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                Pointer<Void>,
              ),
              Pointer<Void> Function(
                Pointer<Void>,
              )>(
          "uniffi_matrix_sdk_ffi_fn_method_sessionverificationcontroller_start_sas_verification");
  late final Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_clone_sessionverificationemoji =
      _dylib.lookupFunction<
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>),
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_clone_sessionverificationemoji");
  late final void Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_free_sessionverificationemoji =
      _dylib.lookupFunction<
              Void Function(Pointer<Void>, Pointer<RustCallStatus>),
              void Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_free_sessionverificationemoji");
  late final RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_sessionverificationemoji_description =
      _dylib.lookupFunction<
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>),
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_sessionverificationemoji_description");
  late final RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_sessionverificationemoji_symbol =
      _dylib.lookupFunction<
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>),
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_sessionverificationemoji_symbol");
  late final Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_clone_span = _dylib.lookupFunction<
          Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>),
          Pointer<Void> Function(Pointer<Void>,
              Pointer<RustCallStatus>)>("uniffi_matrix_sdk_ffi_fn_clone_span");
  late final void Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_free_span = _dylib.lookupFunction<
          Void Function(Pointer<Void>, Pointer<RustCallStatus>),
          void Function(Pointer<Void>,
              Pointer<RustCallStatus>)>("uniffi_matrix_sdk_ffi_fn_free_span");
  late final Pointer<Void> Function(Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_constructor_span_current = _dylib.lookupFunction<
              Pointer<Void> Function(Pointer<RustCallStatus>),
              Pointer<Void> Function(Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_constructor_span_current");
  late final Pointer<Void> Function(RustBuffer, RustBuffer, RustBuffer,
          RustBuffer, RustBuffer, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_constructor_span_new = _dylib.lookupFunction<
              Pointer<Void> Function(RustBuffer, RustBuffer, RustBuffer, RustBuffer,
                  RustBuffer, Pointer<RustCallStatus>),
              Pointer<Void> Function(RustBuffer, RustBuffer, RustBuffer,
                  RustBuffer, RustBuffer, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_constructor_span_new");
  late final void Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_span_enter = _dylib.lookupFunction<
              Void Function(Pointer<Void>, Pointer<RustCallStatus>),
              void Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_span_enter");
  late final void Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_span_exit = _dylib.lookupFunction<
              Void Function(Pointer<Void>, Pointer<RustCallStatus>),
              void Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_span_exit");
  late final int Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_span_is_none = _dylib.lookupFunction<
              Int8 Function(Pointer<Void>, Pointer<RustCallStatus>),
              int Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_span_is_none");
  late final Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_clone_ssohandler = _dylib.lookupFunction<
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>),
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_clone_ssohandler");
  late final void Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_free_ssohandler = _dylib.lookupFunction<
              Void Function(Pointer<Void>, Pointer<RustCallStatus>),
              void Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_free_ssohandler");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_ssohandler_finish = _dylib.lookupFunction<
      Pointer<Void> Function(
        Pointer<Void>,
        RustBuffer,
      ),
      Pointer<Void> Function(
        Pointer<Void>,
        RustBuffer,
      )>("uniffi_matrix_sdk_ffi_fn_method_ssohandler_finish");
  late final RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_ssohandler_url = _dylib.lookupFunction<
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>),
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_ssohandler_url");
  late final Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_clone_syncservice = _dylib.lookupFunction<
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>),
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_clone_syncservice");
  late final void Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_free_syncservice = _dylib.lookupFunction<
              Void Function(Pointer<Void>, Pointer<RustCallStatus>),
              void Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_free_syncservice");
  late final Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_syncservice_room_list_service =
      _dylib.lookupFunction<
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>),
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_syncservice_room_list_service");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_syncservice_start = _dylib.lookupFunction<
      Pointer<Void> Function(
        Pointer<Void>,
      ),
      Pointer<Void> Function(
        Pointer<Void>,
      )>("uniffi_matrix_sdk_ffi_fn_method_syncservice_start");
  late final Pointer<Void> Function(Pointer<Void>, int, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_syncservice_state = _dylib.lookupFunction<
              Pointer<Void> Function(
                  Pointer<Void>, Uint64, Pointer<RustCallStatus>),
              Pointer<Void> Function(
                  Pointer<Void>, int, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_syncservice_state");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_syncservice_stop = _dylib.lookupFunction<
      Pointer<Void> Function(
        Pointer<Void>,
      ),
      Pointer<Void> Function(
        Pointer<Void>,
      )>("uniffi_matrix_sdk_ffi_fn_method_syncservice_stop");
  late final Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_clone_syncservicebuilder = _dylib.lookupFunction<
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>),
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_clone_syncservicebuilder");
  late final void Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_free_syncservicebuilder = _dylib.lookupFunction<
              Void Function(Pointer<Void>, Pointer<RustCallStatus>),
              void Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_free_syncservicebuilder");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_syncservicebuilder_finish =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
          )>("uniffi_matrix_sdk_ffi_fn_method_syncservicebuilder_finish");
  late final Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_syncservicebuilder_with_cross_process_lock =
      _dylib.lookupFunction<
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>),
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_syncservicebuilder_with_cross_process_lock");
  late final Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_syncservicebuilder_with_offline_mode =
      _dylib.lookupFunction<
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>),
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_syncservicebuilder_with_offline_mode");
  late final Pointer<Void> Function(Pointer<Void>, int, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_syncservicebuilder_with_share_pos =
      _dylib.lookupFunction<
              Pointer<Void> Function(Pointer<Void>, Int8, Pointer<RustCallStatus>),
              Pointer<Void> Function(
                  Pointer<Void>, int, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_syncservicebuilder_with_share_pos");
  late final Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_clone_taskhandle = _dylib.lookupFunction<
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>),
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_clone_taskhandle");
  late final void Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_free_taskhandle = _dylib.lookupFunction<
              Void Function(Pointer<Void>, Pointer<RustCallStatus>),
              void Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_free_taskhandle");
  late final void Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_taskhandle_cancel = _dylib.lookupFunction<
              Void Function(Pointer<Void>, Pointer<RustCallStatus>),
              void Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_taskhandle_cancel");
  late final int Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_taskhandle_is_finished =
      _dylib.lookupFunction<
              Int8 Function(Pointer<Void>, Pointer<RustCallStatus>),
              int Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_taskhandle_is_finished");
  late final Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_clone_threadsummary = _dylib.lookupFunction<
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>),
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_clone_threadsummary");
  late final void Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_free_threadsummary = _dylib.lookupFunction<
              Void Function(Pointer<Void>, Pointer<RustCallStatus>),
              void Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_free_threadsummary");
  late final RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_threadsummary_latest_event =
      _dylib.lookupFunction<
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>),
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_threadsummary_latest_event");
  late final int Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_threadsummary_num_replies =
      _dylib.lookupFunction<
              Uint64 Function(Pointer<Void>, Pointer<RustCallStatus>),
              int Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_threadsummary_num_replies");
  late final Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_clone_timeline = _dylib.lookupFunction<
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>),
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_clone_timeline");
  late final void Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_free_timeline = _dylib.lookupFunction<
              Void Function(Pointer<Void>, Pointer<RustCallStatus>),
              void Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_free_timeline");
  late final Pointer<Void> Function(
    Pointer<Void>,
    int,
  ) uniffi_matrix_sdk_ffi_fn_method_timeline_add_listener =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
            Uint64,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
            int,
          )>("uniffi_matrix_sdk_ffi_fn_method_timeline_add_listener");
  late final RustBuffer Function(
          Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_timeline_create_message_content =
      _dylib.lookupFunction<
              RustBuffer Function(
                  Pointer<Void>, RustBuffer, Pointer<RustCallStatus>),
              RustBuffer Function(
                  Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_timeline_create_message_content");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
    RustBuffer,
    int,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_timeline_create_poll =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
            RustBuffer,
            Uint8,
            RustBuffer,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
            RustBuffer,
            int,
            RustBuffer,
          )>("uniffi_matrix_sdk_ffi_fn_method_timeline_create_poll");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_timeline_edit = _dylib.lookupFunction<
      Pointer<Void> Function(
        Pointer<Void>,
        RustBuffer,
        RustBuffer,
      ),
      Pointer<Void> Function(
        Pointer<Void>,
        RustBuffer,
        RustBuffer,
      )>("uniffi_matrix_sdk_ffi_fn_method_timeline_edit");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_timeline_end_poll = _dylib.lookupFunction<
      Pointer<Void> Function(
        Pointer<Void>,
        RustBuffer,
        RustBuffer,
      ),
      Pointer<Void> Function(
        Pointer<Void>,
        RustBuffer,
        RustBuffer,
      )>("uniffi_matrix_sdk_ffi_fn_method_timeline_end_poll");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_timeline_fetch_details_for_event =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                Pointer<Void>,
                RustBuffer,
              ),
              Pointer<Void> Function(
                Pointer<Void>,
                RustBuffer,
              )>(
          "uniffi_matrix_sdk_ffi_fn_method_timeline_fetch_details_for_event");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_timeline_fetch_members =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
          )>("uniffi_matrix_sdk_ffi_fn_method_timeline_fetch_members");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_timeline_get_event_timeline_item_by_event_id =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                Pointer<Void>,
                RustBuffer,
              ),
              Pointer<Void> Function(
                Pointer<Void>,
                RustBuffer,
              )>(
          "uniffi_matrix_sdk_ffi_fn_method_timeline_get_event_timeline_item_by_event_id");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_timeline_load_reply_details =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
          )>("uniffi_matrix_sdk_ffi_fn_method_timeline_load_reply_details");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_timeline_mark_as_read =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
          )>("uniffi_matrix_sdk_ffi_fn_method_timeline_mark_as_read");
  late final Pointer<Void> Function(
    Pointer<Void>,
    int,
  ) uniffi_matrix_sdk_ffi_fn_method_timeline_paginate_backwards =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
            Uint16,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
            int,
          )>("uniffi_matrix_sdk_ffi_fn_method_timeline_paginate_backwards");
  late final Pointer<Void> Function(
    Pointer<Void>,
    int,
  ) uniffi_matrix_sdk_ffi_fn_method_timeline_paginate_forwards =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
            Uint16,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
            int,
          )>("uniffi_matrix_sdk_ffi_fn_method_timeline_paginate_forwards");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_timeline_pin_event = _dylib.lookupFunction<
      Pointer<Void> Function(
        Pointer<Void>,
        RustBuffer,
      ),
      Pointer<Void> Function(
        Pointer<Void>,
        RustBuffer,
      )>("uniffi_matrix_sdk_ffi_fn_method_timeline_pin_event");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_timeline_redact_event =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
            RustBuffer,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
            RustBuffer,
          )>("uniffi_matrix_sdk_ffi_fn_method_timeline_redact_event");
  late final void Function(Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_timeline_retry_decryption =
      _dylib.lookupFunction<
              Void Function(Pointer<Void>, RustBuffer, Pointer<RustCallStatus>),
              void Function(
                  Pointer<Void>, RustBuffer, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_timeline_retry_decryption");
  late final Pointer<Void> Function(
    Pointer<Void>,
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_timeline_send = _dylib.lookupFunction<
      Pointer<Void> Function(
        Pointer<Void>,
        Pointer<Void>,
      ),
      Pointer<Void> Function(
        Pointer<Void>,
        Pointer<Void>,
      )>("uniffi_matrix_sdk_ffi_fn_method_timeline_send");
  late final Pointer<Void> Function(Pointer<Void>, RustBuffer, RustBuffer,
          RustBuffer, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_timeline_send_audio =
      _dylib.lookupFunction<
              Pointer<Void> Function(Pointer<Void>, RustBuffer, RustBuffer,
                  RustBuffer, Pointer<RustCallStatus>),
              Pointer<Void> Function(Pointer<Void>, RustBuffer, RustBuffer,
                  RustBuffer, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_timeline_send_audio");
  late final Pointer<Void> Function(Pointer<Void>, RustBuffer, RustBuffer,
          RustBuffer, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_timeline_send_file =
      _dylib.lookupFunction<
              Pointer<Void> Function(Pointer<Void>, RustBuffer, RustBuffer,
                  RustBuffer, Pointer<RustCallStatus>),
              Pointer<Void> Function(Pointer<Void>, RustBuffer, RustBuffer,
                  RustBuffer, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_timeline_send_file");
  late final Pointer<Void> Function(
          Pointer<Void>, RustBuffer, RustBuffer, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_timeline_send_gallery =
      _dylib.lookupFunction<
              Pointer<Void> Function(Pointer<Void>, RustBuffer, RustBuffer,
                  Pointer<RustCallStatus>),
              Pointer<Void> Function(Pointer<Void>, RustBuffer, RustBuffer,
                  Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_timeline_send_gallery");
  late final Pointer<Void> Function(Pointer<Void>, RustBuffer, RustBuffer,
          RustBuffer, RustBuffer, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_timeline_send_image =
      _dylib.lookupFunction<
              Pointer<Void> Function(Pointer<Void>, RustBuffer, RustBuffer,
                  RustBuffer, RustBuffer, Pointer<RustCallStatus>),
              Pointer<Void> Function(Pointer<Void>, RustBuffer, RustBuffer,
                  RustBuffer, RustBuffer, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_timeline_send_image");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
    RustBuffer,
    RustBuffer,
    RustBuffer,
    RustBuffer,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_timeline_send_location =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
            RustBuffer,
            RustBuffer,
            RustBuffer,
            RustBuffer,
            RustBuffer,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
            RustBuffer,
            RustBuffer,
            RustBuffer,
            RustBuffer,
            RustBuffer,
          )>("uniffi_matrix_sdk_ffi_fn_method_timeline_send_location");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_timeline_send_poll_response =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
            RustBuffer,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
            RustBuffer,
          )>("uniffi_matrix_sdk_ffi_fn_method_timeline_send_poll_response");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_timeline_send_read_receipt =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
            RustBuffer,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
            RustBuffer,
          )>("uniffi_matrix_sdk_ffi_fn_method_timeline_send_read_receipt");
  late final Pointer<Void> Function(
    Pointer<Void>,
    Pointer<Void>,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_timeline_send_reply = _dylib.lookupFunction<
      Pointer<Void> Function(
        Pointer<Void>,
        Pointer<Void>,
        RustBuffer,
      ),
      Pointer<Void> Function(
        Pointer<Void>,
        Pointer<Void>,
        RustBuffer,
      )>("uniffi_matrix_sdk_ffi_fn_method_timeline_send_reply");
  late final Pointer<Void> Function(Pointer<Void>, RustBuffer, RustBuffer,
          RustBuffer, RustBuffer, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_timeline_send_video =
      _dylib.lookupFunction<
              Pointer<Void> Function(Pointer<Void>, RustBuffer, RustBuffer,
                  RustBuffer, RustBuffer, Pointer<RustCallStatus>),
              Pointer<Void> Function(Pointer<Void>, RustBuffer, RustBuffer,
                  RustBuffer, RustBuffer, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_timeline_send_video");
  late final Pointer<Void> Function(Pointer<Void>, RustBuffer, RustBuffer,
          RustBuffer, RustBuffer, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_timeline_send_voice_message =
      _dylib.lookupFunction<
              Pointer<Void> Function(Pointer<Void>, RustBuffer, RustBuffer,
                  RustBuffer, RustBuffer, Pointer<RustCallStatus>),
              Pointer<Void> Function(Pointer<Void>, RustBuffer, RustBuffer,
                  RustBuffer, RustBuffer, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_timeline_send_voice_message");
  late final Pointer<Void> Function(
    Pointer<Void>,
    int,
  ) uniffi_matrix_sdk_ffi_fn_method_timeline_subscribe_to_back_pagination_status =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                Pointer<Void>,
                Uint64,
              ),
              Pointer<Void> Function(
                Pointer<Void>,
                int,
              )>(
          "uniffi_matrix_sdk_ffi_fn_method_timeline_subscribe_to_back_pagination_status");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_timeline_toggle_reaction =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
            RustBuffer,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
            RustBuffer,
          )>("uniffi_matrix_sdk_ffi_fn_method_timeline_toggle_reaction");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_timeline_unpin_event =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
          )>("uniffi_matrix_sdk_ffi_fn_method_timeline_unpin_event");
  late final Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_clone_timelineevent = _dylib.lookupFunction<
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>),
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_clone_timelineevent");
  late final void Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_free_timelineevent = _dylib.lookupFunction<
              Void Function(Pointer<Void>, Pointer<RustCallStatus>),
              void Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_free_timelineevent");
  late final RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_timelineevent_event_id =
      _dylib.lookupFunction<
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>),
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_timelineevent_event_id");
  late final RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_timelineevent_event_type =
      _dylib.lookupFunction<
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>),
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_timelineevent_event_type");
  late final RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_timelineevent_sender_id =
      _dylib.lookupFunction<
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>),
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_timelineevent_sender_id");
  late final int Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_timelineevent_timestamp =
      _dylib.lookupFunction<
              Uint64 Function(Pointer<Void>, Pointer<RustCallStatus>),
              int Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_timelineevent_timestamp");
  late final Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_clone_timelineeventtypefilter =
      _dylib.lookupFunction<
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>),
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_clone_timelineeventtypefilter");
  late final void Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_free_timelineeventtypefilter =
      _dylib.lookupFunction<
              Void Function(Pointer<Void>, Pointer<RustCallStatus>),
              void Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_free_timelineeventtypefilter");
  late final Pointer<Void> Function(RustBuffer, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_constructor_timelineeventtypefilter_exclude =
      _dylib.lookupFunction<
              Pointer<Void> Function(RustBuffer, Pointer<RustCallStatus>),
              Pointer<Void> Function(RustBuffer, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_constructor_timelineeventtypefilter_exclude");
  late final Pointer<Void> Function(RustBuffer, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_constructor_timelineeventtypefilter_include =
      _dylib.lookupFunction<
              Pointer<Void> Function(RustBuffer, Pointer<RustCallStatus>),
              Pointer<Void> Function(RustBuffer, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_constructor_timelineeventtypefilter_include");
  late final Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_clone_timelineitem = _dylib.lookupFunction<
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>),
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_clone_timelineitem");
  late final void Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_free_timelineitem = _dylib.lookupFunction<
              Void Function(Pointer<Void>, Pointer<RustCallStatus>),
              void Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_free_timelineitem");
  late final RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_timelineitem_as_event =
      _dylib.lookupFunction<
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>),
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_timelineitem_as_event");
  late final RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_timelineitem_as_virtual =
      _dylib.lookupFunction<
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>),
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_timelineitem_as_virtual");
  late final RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_timelineitem_fmt_debug =
      _dylib.lookupFunction<
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>),
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_timelineitem_fmt_debug");
  late final RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_timelineitem_unique_id =
      _dylib.lookupFunction<
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>),
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_timelineitem_unique_id");
  late final Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_clone_unreadnotificationscount =
      _dylib.lookupFunction<
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>),
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_clone_unreadnotificationscount");
  late final void Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_free_unreadnotificationscount =
      _dylib.lookupFunction<
              Void Function(Pointer<Void>, Pointer<RustCallStatus>),
              void Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_free_unreadnotificationscount");
  late final int Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_unreadnotificationscount_has_notifications =
      _dylib.lookupFunction<
              Int8 Function(Pointer<Void>, Pointer<RustCallStatus>),
              int Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_unreadnotificationscount_has_notifications");
  late final int Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_unreadnotificationscount_highlight_count =
      _dylib.lookupFunction<
              Uint32 Function(Pointer<Void>, Pointer<RustCallStatus>),
              int Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_unreadnotificationscount_highlight_count");
  late final int Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_unreadnotificationscount_notification_count =
      _dylib.lookupFunction<
              Uint32 Function(Pointer<Void>, Pointer<RustCallStatus>),
              int Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_unreadnotificationscount_notification_count");
  late final Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_clone_useridentity = _dylib.lookupFunction<
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>),
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_clone_useridentity");
  late final void Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_free_useridentity = _dylib.lookupFunction<
              Void Function(Pointer<Void>, Pointer<RustCallStatus>),
              void Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_free_useridentity");
  late final int Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_useridentity_has_verification_violation =
      _dylib.lookupFunction<
              Int8 Function(Pointer<Void>, Pointer<RustCallStatus>),
              int Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_useridentity_has_verification_violation");
  late final int Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_useridentity_is_verified =
      _dylib.lookupFunction<
              Int8 Function(Pointer<Void>, Pointer<RustCallStatus>),
              int Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_useridentity_is_verified");
  late final RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_useridentity_master_key =
      _dylib.lookupFunction<
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>),
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_useridentity_master_key");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_useridentity_pin = _dylib.lookupFunction<
      Pointer<Void> Function(
        Pointer<Void>,
      ),
      Pointer<Void> Function(
        Pointer<Void>,
      )>("uniffi_matrix_sdk_ffi_fn_method_useridentity_pin");
  late final int Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_method_useridentity_was_previously_verified =
      _dylib.lookupFunction<
              Int8 Function(Pointer<Void>, Pointer<RustCallStatus>),
              int Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_method_useridentity_was_previously_verified");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_useridentity_withdraw_verification =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                Pointer<Void>,
              ),
              Pointer<Void> Function(
                Pointer<Void>,
              )>(
          "uniffi_matrix_sdk_ffi_fn_method_useridentity_withdraw_verification");
  late final Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_clone_widgetdriver = _dylib.lookupFunction<
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>),
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_clone_widgetdriver");
  late final void Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_free_widgetdriver = _dylib.lookupFunction<
              Void Function(Pointer<Void>, Pointer<RustCallStatus>),
              void Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_free_widgetdriver");
  late final Pointer<Void> Function(
    Pointer<Void>,
    Pointer<Void>,
    int,
  ) uniffi_matrix_sdk_ffi_fn_method_widgetdriver_run = _dylib.lookupFunction<
      Pointer<Void> Function(
        Pointer<Void>,
        Pointer<Void>,
        Uint64,
      ),
      Pointer<Void> Function(
        Pointer<Void>,
        Pointer<Void>,
        int,
      )>("uniffi_matrix_sdk_ffi_fn_method_widgetdriver_run");
  late final Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_clone_widgetdriverhandle = _dylib.lookupFunction<
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>),
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_clone_widgetdriverhandle");
  late final void Function(Pointer<Void>, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_free_widgetdriverhandle = _dylib.lookupFunction<
              Void Function(Pointer<Void>, Pointer<RustCallStatus>),
              void Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_free_widgetdriverhandle");
  late final Pointer<Void> Function(
    Pointer<Void>,
  ) uniffi_matrix_sdk_ffi_fn_method_widgetdriverhandle_recv =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
          )>("uniffi_matrix_sdk_ffi_fn_method_widgetdriverhandle_recv");
  late final Pointer<Void> Function(
    Pointer<Void>,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_method_widgetdriverhandle_send =
      _dylib.lookupFunction<
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
          ),
          Pointer<Void> Function(
            Pointer<Void>,
            RustBuffer,
          )>("uniffi_matrix_sdk_ffi_fn_method_widgetdriverhandle_send");
  late final void Function(
    Pointer<UniffiVTableCallbackInterfaceAccountDataListener>,
  ) uniffi_matrix_sdk_ffi_fn_init_callback_vtable_accountdatalistener =
      _dylib.lookupFunction<
              Void Function(
                Pointer<UniffiVTableCallbackInterfaceAccountDataListener>,
              ),
              void Function(
                Pointer<UniffiVTableCallbackInterfaceAccountDataListener>,
              )>(
          "uniffi_matrix_sdk_ffi_fn_init_callback_vtable_accountdatalistener");
  late final void Function(
    Pointer<UniffiVTableCallbackInterfaceBackupStateListener>,
  ) uniffi_matrix_sdk_ffi_fn_init_callback_vtable_backupstatelistener =
      _dylib.lookupFunction<
              Void Function(
                Pointer<UniffiVTableCallbackInterfaceBackupStateListener>,
              ),
              void Function(
                Pointer<UniffiVTableCallbackInterfaceBackupStateListener>,
              )>(
          "uniffi_matrix_sdk_ffi_fn_init_callback_vtable_backupstatelistener");
  late final void Function(
    Pointer<UniffiVTableCallbackInterfaceBackupSteadyStateListener>,
  ) uniffi_matrix_sdk_ffi_fn_init_callback_vtable_backupsteadystatelistener =
      _dylib.lookupFunction<
              Void Function(
                Pointer<UniffiVTableCallbackInterfaceBackupSteadyStateListener>,
              ),
              void Function(
                Pointer<UniffiVTableCallbackInterfaceBackupSteadyStateListener>,
              )>(
          "uniffi_matrix_sdk_ffi_fn_init_callback_vtable_backupsteadystatelistener");
  late final void Function(
    Pointer<UniffiVTableCallbackInterfaceClientDelegate>,
  ) uniffi_matrix_sdk_ffi_fn_init_callback_vtable_clientdelegate =
      _dylib.lookupFunction<
          Void Function(
            Pointer<UniffiVTableCallbackInterfaceClientDelegate>,
          ),
          void Function(
            Pointer<UniffiVTableCallbackInterfaceClientDelegate>,
          )>("uniffi_matrix_sdk_ffi_fn_init_callback_vtable_clientdelegate");
  late final void Function(
    Pointer<UniffiVTableCallbackInterfaceClientSessionDelegate>,
  ) uniffi_matrix_sdk_ffi_fn_init_callback_vtable_clientsessiondelegate =
      _dylib.lookupFunction<
              Void Function(
                Pointer<UniffiVTableCallbackInterfaceClientSessionDelegate>,
              ),
              void Function(
                Pointer<UniffiVTableCallbackInterfaceClientSessionDelegate>,
              )>(
          "uniffi_matrix_sdk_ffi_fn_init_callback_vtable_clientsessiondelegate");
  late final void Function(
    Pointer<UniffiVTableCallbackInterfaceEnableRecoveryProgressListener>,
  ) uniffi_matrix_sdk_ffi_fn_init_callback_vtable_enablerecoveryprogresslistener =
      _dylib.lookupFunction<
              Void Function(
                Pointer<
                    UniffiVTableCallbackInterfaceEnableRecoveryProgressListener>,
              ),
              void Function(
                Pointer<
                    UniffiVTableCallbackInterfaceEnableRecoveryProgressListener>,
              )>(
          "uniffi_matrix_sdk_ffi_fn_init_callback_vtable_enablerecoveryprogresslistener");
  late final void Function(
    Pointer<UniffiVTableCallbackInterfaceIdentityStatusChangeListener>,
  ) uniffi_matrix_sdk_ffi_fn_init_callback_vtable_identitystatuschangelistener =
      _dylib.lookupFunction<
              Void Function(
                Pointer<
                    UniffiVTableCallbackInterfaceIdentityStatusChangeListener>,
              ),
              void Function(
                Pointer<
                    UniffiVTableCallbackInterfaceIdentityStatusChangeListener>,
              )>(
          "uniffi_matrix_sdk_ffi_fn_init_callback_vtable_identitystatuschangelistener");
  late final void Function(
    Pointer<UniffiVTableCallbackInterfaceIgnoredUsersListener>,
  ) uniffi_matrix_sdk_ffi_fn_init_callback_vtable_ignoreduserslistener =
      _dylib.lookupFunction<
              Void Function(
                Pointer<UniffiVTableCallbackInterfaceIgnoredUsersListener>,
              ),
              void Function(
                Pointer<UniffiVTableCallbackInterfaceIgnoredUsersListener>,
              )>(
          "uniffi_matrix_sdk_ffi_fn_init_callback_vtable_ignoreduserslistener");
  late final void Function(
    Pointer<UniffiVTableCallbackInterfaceKnockRequestsListener>,
  ) uniffi_matrix_sdk_ffi_fn_init_callback_vtable_knockrequestslistener =
      _dylib.lookupFunction<
              Void Function(
                Pointer<UniffiVTableCallbackInterfaceKnockRequestsListener>,
              ),
              void Function(
                Pointer<UniffiVTableCallbackInterfaceKnockRequestsListener>,
              )>(
          "uniffi_matrix_sdk_ffi_fn_init_callback_vtable_knockrequestslistener");
  late final void Function(
    Pointer<UniffiVTableCallbackInterfaceLiveLocationShareListener>,
  ) uniffi_matrix_sdk_ffi_fn_init_callback_vtable_livelocationsharelistener =
      _dylib.lookupFunction<
              Void Function(
                Pointer<UniffiVTableCallbackInterfaceLiveLocationShareListener>,
              ),
              void Function(
                Pointer<UniffiVTableCallbackInterfaceLiveLocationShareListener>,
              )>(
          "uniffi_matrix_sdk_ffi_fn_init_callback_vtable_livelocationsharelistener");
  late final void Function(
    Pointer<UniffiVTableCallbackInterfaceMediaPreviewConfigListener>,
  ) uniffi_matrix_sdk_ffi_fn_init_callback_vtable_mediapreviewconfiglistener =
      _dylib.lookupFunction<
              Void Function(
                Pointer<
                    UniffiVTableCallbackInterfaceMediaPreviewConfigListener>,
              ),
              void Function(
                Pointer<
                    UniffiVTableCallbackInterfaceMediaPreviewConfigListener>,
              )>(
          "uniffi_matrix_sdk_ffi_fn_init_callback_vtable_mediapreviewconfiglistener");
  late final void Function(
    Pointer<UniffiVTableCallbackInterfaceNotificationSettingsDelegate>,
  ) uniffi_matrix_sdk_ffi_fn_init_callback_vtable_notificationsettingsdelegate =
      _dylib.lookupFunction<
              Void Function(
                Pointer<
                    UniffiVTableCallbackInterfaceNotificationSettingsDelegate>,
              ),
              void Function(
                Pointer<
                    UniffiVTableCallbackInterfaceNotificationSettingsDelegate>,
              )>(
          "uniffi_matrix_sdk_ffi_fn_init_callback_vtable_notificationsettingsdelegate");
  late final void Function(
    Pointer<UniffiVTableCallbackInterfacePaginationStatusListener>,
  ) uniffi_matrix_sdk_ffi_fn_init_callback_vtable_paginationstatuslistener =
      _dylib.lookupFunction<
              Void Function(
                Pointer<UniffiVTableCallbackInterfacePaginationStatusListener>,
              ),
              void Function(
                Pointer<UniffiVTableCallbackInterfacePaginationStatusListener>,
              )>(
          "uniffi_matrix_sdk_ffi_fn_init_callback_vtable_paginationstatuslistener");
  late final void Function(
    Pointer<UniffiVTableCallbackInterfaceProgressWatcher>,
  ) uniffi_matrix_sdk_ffi_fn_init_callback_vtable_progresswatcher =
      _dylib.lookupFunction<
          Void Function(
            Pointer<UniffiVTableCallbackInterfaceProgressWatcher>,
          ),
          void Function(
            Pointer<UniffiVTableCallbackInterfaceProgressWatcher>,
          )>("uniffi_matrix_sdk_ffi_fn_init_callback_vtable_progresswatcher");
  late final void Function(
    Pointer<UniffiVTableCallbackInterfaceQrLoginProgressListener>,
  ) uniffi_matrix_sdk_ffi_fn_init_callback_vtable_qrloginprogresslistener =
      _dylib.lookupFunction<
              Void Function(
                Pointer<UniffiVTableCallbackInterfaceQrLoginProgressListener>,
              ),
              void Function(
                Pointer<UniffiVTableCallbackInterfaceQrLoginProgressListener>,
              )>(
          "uniffi_matrix_sdk_ffi_fn_init_callback_vtable_qrloginprogresslistener");
  late final void Function(
    Pointer<UniffiVTableCallbackInterfaceRecoveryStateListener>,
  ) uniffi_matrix_sdk_ffi_fn_init_callback_vtable_recoverystatelistener =
      _dylib.lookupFunction<
              Void Function(
                Pointer<UniffiVTableCallbackInterfaceRecoveryStateListener>,
              ),
              void Function(
                Pointer<UniffiVTableCallbackInterfaceRecoveryStateListener>,
              )>(
          "uniffi_matrix_sdk_ffi_fn_init_callback_vtable_recoverystatelistener");
  late final void Function(
    Pointer<UniffiVTableCallbackInterfaceRoomAccountDataListener>,
  ) uniffi_matrix_sdk_ffi_fn_init_callback_vtable_roomaccountdatalistener =
      _dylib.lookupFunction<
              Void Function(
                Pointer<UniffiVTableCallbackInterfaceRoomAccountDataListener>,
              ),
              void Function(
                Pointer<UniffiVTableCallbackInterfaceRoomAccountDataListener>,
              )>(
          "uniffi_matrix_sdk_ffi_fn_init_callback_vtable_roomaccountdatalistener");
  late final void Function(
    Pointer<UniffiVTableCallbackInterfaceRoomDirectorySearchEntriesListener>,
  ) uniffi_matrix_sdk_ffi_fn_init_callback_vtable_roomdirectorysearchentrieslistener =
      _dylib.lookupFunction<
              Void Function(
                Pointer<
                    UniffiVTableCallbackInterfaceRoomDirectorySearchEntriesListener>,
              ),
              void Function(
                Pointer<
                    UniffiVTableCallbackInterfaceRoomDirectorySearchEntriesListener>,
              )>(
          "uniffi_matrix_sdk_ffi_fn_init_callback_vtable_roomdirectorysearchentrieslistener");
  late final void Function(
    Pointer<UniffiVTableCallbackInterfaceRoomInfoListener>,
  ) uniffi_matrix_sdk_ffi_fn_init_callback_vtable_roominfolistener =
      _dylib.lookupFunction<
          Void Function(
            Pointer<UniffiVTableCallbackInterfaceRoomInfoListener>,
          ),
          void Function(
            Pointer<UniffiVTableCallbackInterfaceRoomInfoListener>,
          )>("uniffi_matrix_sdk_ffi_fn_init_callback_vtable_roominfolistener");
  late final void Function(
    Pointer<UniffiVTableCallbackInterfaceRoomListEntriesListener>,
  ) uniffi_matrix_sdk_ffi_fn_init_callback_vtable_roomlistentrieslistener =
      _dylib.lookupFunction<
              Void Function(
                Pointer<UniffiVTableCallbackInterfaceRoomListEntriesListener>,
              ),
              void Function(
                Pointer<UniffiVTableCallbackInterfaceRoomListEntriesListener>,
              )>(
          "uniffi_matrix_sdk_ffi_fn_init_callback_vtable_roomlistentrieslistener");
  late final void Function(
    Pointer<UniffiVTableCallbackInterfaceRoomListLoadingStateListener>,
  ) uniffi_matrix_sdk_ffi_fn_init_callback_vtable_roomlistloadingstatelistener =
      _dylib.lookupFunction<
              Void Function(
                Pointer<
                    UniffiVTableCallbackInterfaceRoomListLoadingStateListener>,
              ),
              void Function(
                Pointer<
                    UniffiVTableCallbackInterfaceRoomListLoadingStateListener>,
              )>(
          "uniffi_matrix_sdk_ffi_fn_init_callback_vtable_roomlistloadingstatelistener");
  late final void Function(
    Pointer<UniffiVTableCallbackInterfaceRoomListServiceStateListener>,
  ) uniffi_matrix_sdk_ffi_fn_init_callback_vtable_roomlistservicestatelistener =
      _dylib.lookupFunction<
              Void Function(
                Pointer<
                    UniffiVTableCallbackInterfaceRoomListServiceStateListener>,
              ),
              void Function(
                Pointer<
                    UniffiVTableCallbackInterfaceRoomListServiceStateListener>,
              )>(
          "uniffi_matrix_sdk_ffi_fn_init_callback_vtable_roomlistservicestatelistener");
  late final void Function(
    Pointer<UniffiVTableCallbackInterfaceRoomListServiceSyncIndicatorListener>,
  ) uniffi_matrix_sdk_ffi_fn_init_callback_vtable_roomlistservicesyncindicatorlistener =
      _dylib.lookupFunction<
              Void Function(
                Pointer<
                    UniffiVTableCallbackInterfaceRoomListServiceSyncIndicatorListener>,
              ),
              void Function(
                Pointer<
                    UniffiVTableCallbackInterfaceRoomListServiceSyncIndicatorListener>,
              )>(
          "uniffi_matrix_sdk_ffi_fn_init_callback_vtable_roomlistservicesyncindicatorlistener");
  late final void Function(
    Pointer<UniffiVTableCallbackInterfaceSendQueueRoomErrorListener>,
  ) uniffi_matrix_sdk_ffi_fn_init_callback_vtable_sendqueueroomerrorlistener =
      _dylib.lookupFunction<
              Void Function(
                Pointer<
                    UniffiVTableCallbackInterfaceSendQueueRoomErrorListener>,
              ),
              void Function(
                Pointer<
                    UniffiVTableCallbackInterfaceSendQueueRoomErrorListener>,
              )>(
          "uniffi_matrix_sdk_ffi_fn_init_callback_vtable_sendqueueroomerrorlistener");
  late final void Function(
    Pointer<UniffiVTableCallbackInterfaceSessionVerificationControllerDelegate>,
  ) uniffi_matrix_sdk_ffi_fn_init_callback_vtable_sessionverificationcontrollerdelegate =
      _dylib.lookupFunction<
              Void Function(
                Pointer<
                    UniffiVTableCallbackInterfaceSessionVerificationControllerDelegate>,
              ),
              void Function(
                Pointer<
                    UniffiVTableCallbackInterfaceSessionVerificationControllerDelegate>,
              )>(
          "uniffi_matrix_sdk_ffi_fn_init_callback_vtable_sessionverificationcontrollerdelegate");
  late final void Function(
    Pointer<UniffiVTableCallbackInterfaceSyncServiceStateObserver>,
  ) uniffi_matrix_sdk_ffi_fn_init_callback_vtable_syncservicestateobserver =
      _dylib.lookupFunction<
              Void Function(
                Pointer<UniffiVTableCallbackInterfaceSyncServiceStateObserver>,
              ),
              void Function(
                Pointer<UniffiVTableCallbackInterfaceSyncServiceStateObserver>,
              )>(
          "uniffi_matrix_sdk_ffi_fn_init_callback_vtable_syncservicestateobserver");
  late final void Function(
    Pointer<UniffiVTableCallbackInterfaceTimelineListener>,
  ) uniffi_matrix_sdk_ffi_fn_init_callback_vtable_timelinelistener =
      _dylib.lookupFunction<
          Void Function(
            Pointer<UniffiVTableCallbackInterfaceTimelineListener>,
          ),
          void Function(
            Pointer<UniffiVTableCallbackInterfaceTimelineListener>,
          )>("uniffi_matrix_sdk_ffi_fn_init_callback_vtable_timelinelistener");
  late final void Function(
    Pointer<UniffiVTableCallbackInterfaceTypingNotificationsListener>,
  ) uniffi_matrix_sdk_ffi_fn_init_callback_vtable_typingnotificationslistener =
      _dylib.lookupFunction<
              Void Function(
                Pointer<
                    UniffiVTableCallbackInterfaceTypingNotificationsListener>,
              ),
              void Function(
                Pointer<
                    UniffiVTableCallbackInterfaceTypingNotificationsListener>,
              )>(
          "uniffi_matrix_sdk_ffi_fn_init_callback_vtable_typingnotificationslistener");
  late final void Function(
    Pointer<UniffiVTableCallbackInterfaceUnableToDecryptDelegate>,
  ) uniffi_matrix_sdk_ffi_fn_init_callback_vtable_unabletodecryptdelegate =
      _dylib.lookupFunction<
              Void Function(
                Pointer<UniffiVTableCallbackInterfaceUnableToDecryptDelegate>,
              ),
              void Function(
                Pointer<UniffiVTableCallbackInterfaceUnableToDecryptDelegate>,
              )>(
          "uniffi_matrix_sdk_ffi_fn_init_callback_vtable_unabletodecryptdelegate");
  late final void Function(
    Pointer<UniffiVTableCallbackInterfaceVerificationStateListener>,
  ) uniffi_matrix_sdk_ffi_fn_init_callback_vtable_verificationstatelistener =
      _dylib.lookupFunction<
              Void Function(
                Pointer<UniffiVTableCallbackInterfaceVerificationStateListener>,
              ),
              void Function(
                Pointer<UniffiVTableCallbackInterfaceVerificationStateListener>,
              )>(
          "uniffi_matrix_sdk_ffi_fn_init_callback_vtable_verificationstatelistener");
  late final void Function(
    Pointer<UniffiVTableCallbackInterfaceWidgetCapabilitiesProvider>,
  ) uniffi_matrix_sdk_ffi_fn_init_callback_vtable_widgetcapabilitiesprovider =
      _dylib.lookupFunction<
              Void Function(
                Pointer<
                    UniffiVTableCallbackInterfaceWidgetCapabilitiesProvider>,
              ),
              void Function(
                Pointer<
                    UniffiVTableCallbackInterfaceWidgetCapabilitiesProvider>,
              )>(
          "uniffi_matrix_sdk_ffi_fn_init_callback_vtable_widgetcapabilitiesprovider");
  late final Pointer<Void> Function(RustBuffer, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_func_content_without_relation_from_message =
      _dylib.lookupFunction<
              Pointer<Void> Function(RustBuffer, Pointer<RustCallStatus>),
              Pointer<Void> Function(RustBuffer, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_func_content_without_relation_from_message");
  late final RustBuffer Function(
          RustBuffer, RustBuffer, RustBuffer, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_func_create_caption_edit = _dylib.lookupFunction<
              RustBuffer Function(
                  RustBuffer, RustBuffer, RustBuffer, Pointer<RustCallStatus>),
              RustBuffer Function(
                  RustBuffer, RustBuffer, RustBuffer, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_func_create_caption_edit");
  late final RustBuffer Function(Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_func_gen_transaction_id = _dylib.lookupFunction<
              RustBuffer Function(Pointer<RustCallStatus>),
              RustBuffer Function(Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_func_gen_transaction_id");
  late final Pointer<Void> Function(
    RustBuffer,
    Pointer<Void>,
    RustBuffer,
  ) uniffi_matrix_sdk_ffi_fn_func_generate_webview_url = _dylib.lookupFunction<
      Pointer<Void> Function(
        RustBuffer,
        Pointer<Void>,
        RustBuffer,
      ),
      Pointer<Void> Function(
        RustBuffer,
        Pointer<Void>,
        RustBuffer,
      )>("uniffi_matrix_sdk_ffi_fn_func_generate_webview_url");
  late final RustBuffer Function(
          RustBuffer, RustBuffer, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_func_get_element_call_required_permissions =
      _dylib.lookupFunction<
              RustBuffer Function(RustBuffer, RustBuffer, Pointer<RustCallStatus>),
              RustBuffer Function(
                  RustBuffer, RustBuffer, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_func_get_element_call_required_permissions");
  late final void Function(RustBuffer, int, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_func_init_platform = _dylib.lookupFunction<
              Void Function(RustBuffer, Int8, Pointer<RustCallStatus>),
              void Function(RustBuffer, int, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_func_init_platform");
  late final int Function(RustBuffer, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_func_is_room_alias_format_valid =
      _dylib.lookupFunction<Int8 Function(RustBuffer, Pointer<RustCallStatus>),
              int Function(RustBuffer, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_func_is_room_alias_format_valid");
  late final void Function(RustBuffer, RustBuffer, RustBuffer, RustBuffer,
          RustBuffer, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_func_log_event = _dylib.lookupFunction<
              Void Function(RustBuffer, RustBuffer, RustBuffer, RustBuffer,
                  RustBuffer, Pointer<RustCallStatus>),
              void Function(RustBuffer, RustBuffer, RustBuffer, RustBuffer,
                  RustBuffer, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_func_log_event");
  late final RustBuffer Function(RustBuffer, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_func_make_widget_driver = _dylib.lookupFunction<
              RustBuffer Function(RustBuffer, Pointer<RustCallStatus>),
              RustBuffer Function(RustBuffer, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_func_make_widget_driver");
  late final RustBuffer Function(RustBuffer, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_func_matrix_to_room_alias_permalink =
      _dylib.lookupFunction<
              RustBuffer Function(RustBuffer, Pointer<RustCallStatus>),
              RustBuffer Function(RustBuffer, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_func_matrix_to_room_alias_permalink");
  late final RustBuffer Function(RustBuffer, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_func_matrix_to_user_permalink =
      _dylib.lookupFunction<
              RustBuffer Function(RustBuffer, Pointer<RustCallStatus>),
              RustBuffer Function(RustBuffer, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_func_matrix_to_user_permalink");
  late final Pointer<Void> Function(
          RustBuffer, RustBuffer, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_func_message_event_content_from_html =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                  RustBuffer, RustBuffer, Pointer<RustCallStatus>),
              Pointer<Void> Function(
                  RustBuffer, RustBuffer, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_func_message_event_content_from_html");
  late final Pointer<Void> Function(
          RustBuffer, RustBuffer, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_func_message_event_content_from_html_as_emote =
      _dylib.lookupFunction<
              Pointer<Void> Function(
                  RustBuffer, RustBuffer, Pointer<RustCallStatus>),
              Pointer<Void> Function(
                  RustBuffer, RustBuffer, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_func_message_event_content_from_html_as_emote");
  late final Pointer<Void> Function(RustBuffer, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_func_message_event_content_from_markdown =
      _dylib.lookupFunction<
              Pointer<Void> Function(RustBuffer, Pointer<RustCallStatus>),
              Pointer<Void> Function(RustBuffer, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_func_message_event_content_from_markdown");
  late final Pointer<Void> Function(RustBuffer, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_func_message_event_content_from_markdown_as_emote =
      _dylib.lookupFunction<
              Pointer<Void> Function(RustBuffer, Pointer<RustCallStatus>),
              Pointer<Void> Function(RustBuffer, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_func_message_event_content_from_markdown_as_emote");
  late final Pointer<Void> Function(RustBuffer, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_func_message_event_content_new =
      _dylib.lookupFunction<
              Pointer<Void> Function(RustBuffer, Pointer<RustCallStatus>),
              Pointer<Void> Function(RustBuffer, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_func_message_event_content_new");
  late final RustBuffer Function(RustBuffer, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_func_new_virtual_element_call_widget =
      _dylib.lookupFunction<
              RustBuffer Function(RustBuffer, Pointer<RustCallStatus>),
              RustBuffer Function(RustBuffer, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_func_new_virtual_element_call_widget");
  late final RustBuffer Function(RustBuffer, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_func_parse_matrix_entity_from =
      _dylib.lookupFunction<
              RustBuffer Function(RustBuffer, Pointer<RustCallStatus>),
              RustBuffer Function(RustBuffer, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_func_parse_matrix_entity_from");
  late final void Function(RustBuffer, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_func_reload_tracing_file_writer =
      _dylib.lookupFunction<Void Function(RustBuffer, Pointer<RustCallStatus>),
              void Function(RustBuffer, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_func_reload_tracing_file_writer");
  late final RustBuffer Function(RustBuffer, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_func_room_alias_name_from_room_display_name =
      _dylib.lookupFunction<
              RustBuffer Function(RustBuffer, Pointer<RustCallStatus>),
              RustBuffer Function(RustBuffer, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_func_room_alias_name_from_room_display_name");
  late final RustBuffer Function(Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_func_sdk_git_sha = _dylib.lookupFunction<
              RustBuffer Function(Pointer<RustCallStatus>),
              RustBuffer Function(Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_func_sdk_git_sha");
  late final RustBuffer Function(RustBuffer, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_func_suggested_power_level_for_role =
      _dylib.lookupFunction<
              RustBuffer Function(RustBuffer, Pointer<RustCallStatus>),
              RustBuffer Function(RustBuffer, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_func_suggested_power_level_for_role");
  late final RustBuffer Function(RustBuffer, Pointer<RustCallStatus>)
      uniffi_matrix_sdk_ffi_fn_func_suggested_role_for_power_level =
      _dylib.lookupFunction<
              RustBuffer Function(RustBuffer, Pointer<RustCallStatus>),
              RustBuffer Function(RustBuffer, Pointer<RustCallStatus>)>(
          "uniffi_matrix_sdk_ffi_fn_func_suggested_role_for_power_level");
  late final RustBuffer Function(int, Pointer<RustCallStatus>)
      ffi_matrix_sdk_ffi_rustbuffer_alloc = _dylib.lookupFunction<
          RustBuffer Function(Uint64, Pointer<RustCallStatus>),
          RustBuffer Function(int,
              Pointer<RustCallStatus>)>("ffi_matrix_sdk_ffi_rustbuffer_alloc");
  late final RustBuffer Function(ForeignBytes, Pointer<RustCallStatus>)
      ffi_matrix_sdk_ffi_rustbuffer_from_bytes = _dylib.lookupFunction<
              RustBuffer Function(ForeignBytes, Pointer<RustCallStatus>),
              RustBuffer Function(ForeignBytes, Pointer<RustCallStatus>)>(
          "ffi_matrix_sdk_ffi_rustbuffer_from_bytes");
  late final void Function(RustBuffer, Pointer<RustCallStatus>)
      ffi_matrix_sdk_ffi_rustbuffer_free = _dylib.lookupFunction<
          Void Function(RustBuffer, Pointer<RustCallStatus>),
          void Function(RustBuffer,
              Pointer<RustCallStatus>)>("ffi_matrix_sdk_ffi_rustbuffer_free");
  late final RustBuffer Function(RustBuffer, int, Pointer<RustCallStatus>)
      ffi_matrix_sdk_ffi_rustbuffer_reserve = _dylib.lookupFunction<
              RustBuffer Function(RustBuffer, Uint64, Pointer<RustCallStatus>),
              RustBuffer Function(RustBuffer, int, Pointer<RustCallStatus>)>(
          "ffi_matrix_sdk_ffi_rustbuffer_reserve");
  late final void Function(
    Pointer<Void>,
    Pointer<NativeFunction<UniffiRustFutureContinuationCallback>>,
    Pointer<Void>,
  ) ffi_matrix_sdk_ffi_rust_future_poll_u8 = _dylib.lookupFunction<
      Void Function(
        Pointer<Void>,
        Pointer<NativeFunction<UniffiRustFutureContinuationCallback>>,
        Pointer<Void>,
      ),
      void Function(
        Pointer<Void>,
        Pointer<NativeFunction<UniffiRustFutureContinuationCallback>>,
        Pointer<Void>,
      )>("ffi_matrix_sdk_ffi_rust_future_poll_u8");
  late final void Function(
    Pointer<Void>,
  ) ffi_matrix_sdk_ffi_rust_future_cancel_u8 = _dylib.lookupFunction<
      Void Function(
        Pointer<Void>,
      ),
      void Function(
        Pointer<Void>,
      )>("ffi_matrix_sdk_ffi_rust_future_cancel_u8");
  late final void Function(
    Pointer<Void>,
  ) ffi_matrix_sdk_ffi_rust_future_free_u8 = _dylib.lookupFunction<
      Void Function(
        Pointer<Void>,
      ),
      void Function(
        Pointer<Void>,
      )>("ffi_matrix_sdk_ffi_rust_future_free_u8");
  late final int Function(Pointer<Void>, Pointer<RustCallStatus>)
      ffi_matrix_sdk_ffi_rust_future_complete_u8 = _dylib.lookupFunction<
              Uint8 Function(Pointer<Void>, Pointer<RustCallStatus>),
              int Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "ffi_matrix_sdk_ffi_rust_future_complete_u8");
  late final void Function(
    Pointer<Void>,
    Pointer<NativeFunction<UniffiRustFutureContinuationCallback>>,
    Pointer<Void>,
  ) ffi_matrix_sdk_ffi_rust_future_poll_i8 = _dylib.lookupFunction<
      Void Function(
        Pointer<Void>,
        Pointer<NativeFunction<UniffiRustFutureContinuationCallback>>,
        Pointer<Void>,
      ),
      void Function(
        Pointer<Void>,
        Pointer<NativeFunction<UniffiRustFutureContinuationCallback>>,
        Pointer<Void>,
      )>("ffi_matrix_sdk_ffi_rust_future_poll_i8");
  late final void Function(
    Pointer<Void>,
  ) ffi_matrix_sdk_ffi_rust_future_cancel_i8 = _dylib.lookupFunction<
      Void Function(
        Pointer<Void>,
      ),
      void Function(
        Pointer<Void>,
      )>("ffi_matrix_sdk_ffi_rust_future_cancel_i8");
  late final void Function(
    Pointer<Void>,
  ) ffi_matrix_sdk_ffi_rust_future_free_i8 = _dylib.lookupFunction<
      Void Function(
        Pointer<Void>,
      ),
      void Function(
        Pointer<Void>,
      )>("ffi_matrix_sdk_ffi_rust_future_free_i8");
  late final int Function(Pointer<Void>, Pointer<RustCallStatus>)
      ffi_matrix_sdk_ffi_rust_future_complete_i8 = _dylib.lookupFunction<
              Int8 Function(Pointer<Void>, Pointer<RustCallStatus>),
              int Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "ffi_matrix_sdk_ffi_rust_future_complete_i8");
  late final void Function(
    Pointer<Void>,
    Pointer<NativeFunction<UniffiRustFutureContinuationCallback>>,
    Pointer<Void>,
  ) ffi_matrix_sdk_ffi_rust_future_poll_u16 = _dylib.lookupFunction<
      Void Function(
        Pointer<Void>,
        Pointer<NativeFunction<UniffiRustFutureContinuationCallback>>,
        Pointer<Void>,
      ),
      void Function(
        Pointer<Void>,
        Pointer<NativeFunction<UniffiRustFutureContinuationCallback>>,
        Pointer<Void>,
      )>("ffi_matrix_sdk_ffi_rust_future_poll_u16");
  late final void Function(
    Pointer<Void>,
  ) ffi_matrix_sdk_ffi_rust_future_cancel_u16 = _dylib.lookupFunction<
      Void Function(
        Pointer<Void>,
      ),
      void Function(
        Pointer<Void>,
      )>("ffi_matrix_sdk_ffi_rust_future_cancel_u16");
  late final void Function(
    Pointer<Void>,
  ) ffi_matrix_sdk_ffi_rust_future_free_u16 = _dylib.lookupFunction<
      Void Function(
        Pointer<Void>,
      ),
      void Function(
        Pointer<Void>,
      )>("ffi_matrix_sdk_ffi_rust_future_free_u16");
  late final int Function(Pointer<Void>, Pointer<RustCallStatus>)
      ffi_matrix_sdk_ffi_rust_future_complete_u16 = _dylib.lookupFunction<
              Uint16 Function(Pointer<Void>, Pointer<RustCallStatus>),
              int Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "ffi_matrix_sdk_ffi_rust_future_complete_u16");
  late final void Function(
    Pointer<Void>,
    Pointer<NativeFunction<UniffiRustFutureContinuationCallback>>,
    Pointer<Void>,
  ) ffi_matrix_sdk_ffi_rust_future_poll_i16 = _dylib.lookupFunction<
      Void Function(
        Pointer<Void>,
        Pointer<NativeFunction<UniffiRustFutureContinuationCallback>>,
        Pointer<Void>,
      ),
      void Function(
        Pointer<Void>,
        Pointer<NativeFunction<UniffiRustFutureContinuationCallback>>,
        Pointer<Void>,
      )>("ffi_matrix_sdk_ffi_rust_future_poll_i16");
  late final void Function(
    Pointer<Void>,
  ) ffi_matrix_sdk_ffi_rust_future_cancel_i16 = _dylib.lookupFunction<
      Void Function(
        Pointer<Void>,
      ),
      void Function(
        Pointer<Void>,
      )>("ffi_matrix_sdk_ffi_rust_future_cancel_i16");
  late final void Function(
    Pointer<Void>,
  ) ffi_matrix_sdk_ffi_rust_future_free_i16 = _dylib.lookupFunction<
      Void Function(
        Pointer<Void>,
      ),
      void Function(
        Pointer<Void>,
      )>("ffi_matrix_sdk_ffi_rust_future_free_i16");
  late final int Function(Pointer<Void>, Pointer<RustCallStatus>)
      ffi_matrix_sdk_ffi_rust_future_complete_i16 = _dylib.lookupFunction<
              Int16 Function(Pointer<Void>, Pointer<RustCallStatus>),
              int Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "ffi_matrix_sdk_ffi_rust_future_complete_i16");
  late final void Function(
    Pointer<Void>,
    Pointer<NativeFunction<UniffiRustFutureContinuationCallback>>,
    Pointer<Void>,
  ) ffi_matrix_sdk_ffi_rust_future_poll_u32 = _dylib.lookupFunction<
      Void Function(
        Pointer<Void>,
        Pointer<NativeFunction<UniffiRustFutureContinuationCallback>>,
        Pointer<Void>,
      ),
      void Function(
        Pointer<Void>,
        Pointer<NativeFunction<UniffiRustFutureContinuationCallback>>,
        Pointer<Void>,
      )>("ffi_matrix_sdk_ffi_rust_future_poll_u32");
  late final void Function(
    Pointer<Void>,
  ) ffi_matrix_sdk_ffi_rust_future_cancel_u32 = _dylib.lookupFunction<
      Void Function(
        Pointer<Void>,
      ),
      void Function(
        Pointer<Void>,
      )>("ffi_matrix_sdk_ffi_rust_future_cancel_u32");
  late final void Function(
    Pointer<Void>,
  ) ffi_matrix_sdk_ffi_rust_future_free_u32 = _dylib.lookupFunction<
      Void Function(
        Pointer<Void>,
      ),
      void Function(
        Pointer<Void>,
      )>("ffi_matrix_sdk_ffi_rust_future_free_u32");
  late final int Function(Pointer<Void>, Pointer<RustCallStatus>)
      ffi_matrix_sdk_ffi_rust_future_complete_u32 = _dylib.lookupFunction<
              Uint32 Function(Pointer<Void>, Pointer<RustCallStatus>),
              int Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "ffi_matrix_sdk_ffi_rust_future_complete_u32");
  late final void Function(
    Pointer<Void>,
    Pointer<NativeFunction<UniffiRustFutureContinuationCallback>>,
    Pointer<Void>,
  ) ffi_matrix_sdk_ffi_rust_future_poll_i32 = _dylib.lookupFunction<
      Void Function(
        Pointer<Void>,
        Pointer<NativeFunction<UniffiRustFutureContinuationCallback>>,
        Pointer<Void>,
      ),
      void Function(
        Pointer<Void>,
        Pointer<NativeFunction<UniffiRustFutureContinuationCallback>>,
        Pointer<Void>,
      )>("ffi_matrix_sdk_ffi_rust_future_poll_i32");
  late final void Function(
    Pointer<Void>,
  ) ffi_matrix_sdk_ffi_rust_future_cancel_i32 = _dylib.lookupFunction<
      Void Function(
        Pointer<Void>,
      ),
      void Function(
        Pointer<Void>,
      )>("ffi_matrix_sdk_ffi_rust_future_cancel_i32");
  late final void Function(
    Pointer<Void>,
  ) ffi_matrix_sdk_ffi_rust_future_free_i32 = _dylib.lookupFunction<
      Void Function(
        Pointer<Void>,
      ),
      void Function(
        Pointer<Void>,
      )>("ffi_matrix_sdk_ffi_rust_future_free_i32");
  late final int Function(Pointer<Void>, Pointer<RustCallStatus>)
      ffi_matrix_sdk_ffi_rust_future_complete_i32 = _dylib.lookupFunction<
              Int32 Function(Pointer<Void>, Pointer<RustCallStatus>),
              int Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "ffi_matrix_sdk_ffi_rust_future_complete_i32");
  late final void Function(
    Pointer<Void>,
    Pointer<NativeFunction<UniffiRustFutureContinuationCallback>>,
    Pointer<Void>,
  ) ffi_matrix_sdk_ffi_rust_future_poll_u64 = _dylib.lookupFunction<
      Void Function(
        Pointer<Void>,
        Pointer<NativeFunction<UniffiRustFutureContinuationCallback>>,
        Pointer<Void>,
      ),
      void Function(
        Pointer<Void>,
        Pointer<NativeFunction<UniffiRustFutureContinuationCallback>>,
        Pointer<Void>,
      )>("ffi_matrix_sdk_ffi_rust_future_poll_u64");
  late final void Function(
    Pointer<Void>,
  ) ffi_matrix_sdk_ffi_rust_future_cancel_u64 = _dylib.lookupFunction<
      Void Function(
        Pointer<Void>,
      ),
      void Function(
        Pointer<Void>,
      )>("ffi_matrix_sdk_ffi_rust_future_cancel_u64");
  late final void Function(
    Pointer<Void>,
  ) ffi_matrix_sdk_ffi_rust_future_free_u64 = _dylib.lookupFunction<
      Void Function(
        Pointer<Void>,
      ),
      void Function(
        Pointer<Void>,
      )>("ffi_matrix_sdk_ffi_rust_future_free_u64");
  late final int Function(Pointer<Void>, Pointer<RustCallStatus>)
      ffi_matrix_sdk_ffi_rust_future_complete_u64 = _dylib.lookupFunction<
              Uint64 Function(Pointer<Void>, Pointer<RustCallStatus>),
              int Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "ffi_matrix_sdk_ffi_rust_future_complete_u64");
  late final void Function(
    Pointer<Void>,
    Pointer<NativeFunction<UniffiRustFutureContinuationCallback>>,
    Pointer<Void>,
  ) ffi_matrix_sdk_ffi_rust_future_poll_i64 = _dylib.lookupFunction<
      Void Function(
        Pointer<Void>,
        Pointer<NativeFunction<UniffiRustFutureContinuationCallback>>,
        Pointer<Void>,
      ),
      void Function(
        Pointer<Void>,
        Pointer<NativeFunction<UniffiRustFutureContinuationCallback>>,
        Pointer<Void>,
      )>("ffi_matrix_sdk_ffi_rust_future_poll_i64");
  late final void Function(
    Pointer<Void>,
  ) ffi_matrix_sdk_ffi_rust_future_cancel_i64 = _dylib.lookupFunction<
      Void Function(
        Pointer<Void>,
      ),
      void Function(
        Pointer<Void>,
      )>("ffi_matrix_sdk_ffi_rust_future_cancel_i64");
  late final void Function(
    Pointer<Void>,
  ) ffi_matrix_sdk_ffi_rust_future_free_i64 = _dylib.lookupFunction<
      Void Function(
        Pointer<Void>,
      ),
      void Function(
        Pointer<Void>,
      )>("ffi_matrix_sdk_ffi_rust_future_free_i64");
  late final int Function(Pointer<Void>, Pointer<RustCallStatus>)
      ffi_matrix_sdk_ffi_rust_future_complete_i64 = _dylib.lookupFunction<
              Int64 Function(Pointer<Void>, Pointer<RustCallStatus>),
              int Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "ffi_matrix_sdk_ffi_rust_future_complete_i64");
  late final void Function(
    Pointer<Void>,
    Pointer<NativeFunction<UniffiRustFutureContinuationCallback>>,
    Pointer<Void>,
  ) ffi_matrix_sdk_ffi_rust_future_poll_f32 = _dylib.lookupFunction<
      Void Function(
        Pointer<Void>,
        Pointer<NativeFunction<UniffiRustFutureContinuationCallback>>,
        Pointer<Void>,
      ),
      void Function(
        Pointer<Void>,
        Pointer<NativeFunction<UniffiRustFutureContinuationCallback>>,
        Pointer<Void>,
      )>("ffi_matrix_sdk_ffi_rust_future_poll_f32");
  late final void Function(
    Pointer<Void>,
  ) ffi_matrix_sdk_ffi_rust_future_cancel_f32 = _dylib.lookupFunction<
      Void Function(
        Pointer<Void>,
      ),
      void Function(
        Pointer<Void>,
      )>("ffi_matrix_sdk_ffi_rust_future_cancel_f32");
  late final void Function(
    Pointer<Void>,
  ) ffi_matrix_sdk_ffi_rust_future_free_f32 = _dylib.lookupFunction<
      Void Function(
        Pointer<Void>,
      ),
      void Function(
        Pointer<Void>,
      )>("ffi_matrix_sdk_ffi_rust_future_free_f32");
  late final double Function(Pointer<Void>, Pointer<RustCallStatus>)
      ffi_matrix_sdk_ffi_rust_future_complete_f32 = _dylib.lookupFunction<
              Float Function(Pointer<Void>, Pointer<RustCallStatus>),
              double Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "ffi_matrix_sdk_ffi_rust_future_complete_f32");
  late final void Function(
    Pointer<Void>,
    Pointer<NativeFunction<UniffiRustFutureContinuationCallback>>,
    Pointer<Void>,
  ) ffi_matrix_sdk_ffi_rust_future_poll_f64 = _dylib.lookupFunction<
      Void Function(
        Pointer<Void>,
        Pointer<NativeFunction<UniffiRustFutureContinuationCallback>>,
        Pointer<Void>,
      ),
      void Function(
        Pointer<Void>,
        Pointer<NativeFunction<UniffiRustFutureContinuationCallback>>,
        Pointer<Void>,
      )>("ffi_matrix_sdk_ffi_rust_future_poll_f64");
  late final void Function(
    Pointer<Void>,
  ) ffi_matrix_sdk_ffi_rust_future_cancel_f64 = _dylib.lookupFunction<
      Void Function(
        Pointer<Void>,
      ),
      void Function(
        Pointer<Void>,
      )>("ffi_matrix_sdk_ffi_rust_future_cancel_f64");
  late final void Function(
    Pointer<Void>,
  ) ffi_matrix_sdk_ffi_rust_future_free_f64 = _dylib.lookupFunction<
      Void Function(
        Pointer<Void>,
      ),
      void Function(
        Pointer<Void>,
      )>("ffi_matrix_sdk_ffi_rust_future_free_f64");
  late final double Function(Pointer<Void>, Pointer<RustCallStatus>)
      ffi_matrix_sdk_ffi_rust_future_complete_f64 = _dylib.lookupFunction<
              Double Function(Pointer<Void>, Pointer<RustCallStatus>),
              double Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "ffi_matrix_sdk_ffi_rust_future_complete_f64");
  late final void Function(
    Pointer<Void>,
    Pointer<NativeFunction<UniffiRustFutureContinuationCallback>>,
    Pointer<Void>,
  ) ffi_matrix_sdk_ffi_rust_future_poll_pointer = _dylib.lookupFunction<
      Void Function(
        Pointer<Void>,
        Pointer<NativeFunction<UniffiRustFutureContinuationCallback>>,
        Pointer<Void>,
      ),
      void Function(
        Pointer<Void>,
        Pointer<NativeFunction<UniffiRustFutureContinuationCallback>>,
        Pointer<Void>,
      )>("ffi_matrix_sdk_ffi_rust_future_poll_pointer");
  late final void Function(
    Pointer<Void>,
  ) ffi_matrix_sdk_ffi_rust_future_cancel_pointer = _dylib.lookupFunction<
      Void Function(
        Pointer<Void>,
      ),
      void Function(
        Pointer<Void>,
      )>("ffi_matrix_sdk_ffi_rust_future_cancel_pointer");
  late final void Function(
    Pointer<Void>,
  ) ffi_matrix_sdk_ffi_rust_future_free_pointer = _dylib.lookupFunction<
      Void Function(
        Pointer<Void>,
      ),
      void Function(
        Pointer<Void>,
      )>("ffi_matrix_sdk_ffi_rust_future_free_pointer");
  late final Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)
      ffi_matrix_sdk_ffi_rust_future_complete_pointer = _dylib.lookupFunction<
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>),
              Pointer<Void> Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "ffi_matrix_sdk_ffi_rust_future_complete_pointer");
  late final void Function(
    Pointer<Void>,
    Pointer<NativeFunction<UniffiRustFutureContinuationCallback>>,
    Pointer<Void>,
  ) ffi_matrix_sdk_ffi_rust_future_poll_rust_buffer = _dylib.lookupFunction<
      Void Function(
        Pointer<Void>,
        Pointer<NativeFunction<UniffiRustFutureContinuationCallback>>,
        Pointer<Void>,
      ),
      void Function(
        Pointer<Void>,
        Pointer<NativeFunction<UniffiRustFutureContinuationCallback>>,
        Pointer<Void>,
      )>("ffi_matrix_sdk_ffi_rust_future_poll_rust_buffer");
  late final void Function(
    Pointer<Void>,
  ) ffi_matrix_sdk_ffi_rust_future_cancel_rust_buffer = _dylib.lookupFunction<
      Void Function(
        Pointer<Void>,
      ),
      void Function(
        Pointer<Void>,
      )>("ffi_matrix_sdk_ffi_rust_future_cancel_rust_buffer");
  late final void Function(
    Pointer<Void>,
  ) ffi_matrix_sdk_ffi_rust_future_free_rust_buffer = _dylib.lookupFunction<
      Void Function(
        Pointer<Void>,
      ),
      void Function(
        Pointer<Void>,
      )>("ffi_matrix_sdk_ffi_rust_future_free_rust_buffer");
  late final RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)
      ffi_matrix_sdk_ffi_rust_future_complete_rust_buffer =
      _dylib.lookupFunction<
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>),
              RustBuffer Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "ffi_matrix_sdk_ffi_rust_future_complete_rust_buffer");
  late final void Function(
    Pointer<Void>,
    Pointer<NativeFunction<UniffiRustFutureContinuationCallback>>,
    Pointer<Void>,
  ) ffi_matrix_sdk_ffi_rust_future_poll_void = _dylib.lookupFunction<
      Void Function(
        Pointer<Void>,
        Pointer<NativeFunction<UniffiRustFutureContinuationCallback>>,
        Pointer<Void>,
      ),
      void Function(
        Pointer<Void>,
        Pointer<NativeFunction<UniffiRustFutureContinuationCallback>>,
        Pointer<Void>,
      )>("ffi_matrix_sdk_ffi_rust_future_poll_void");
  late final void Function(
    Pointer<Void>,
  ) ffi_matrix_sdk_ffi_rust_future_cancel_void = _dylib.lookupFunction<
      Void Function(
        Pointer<Void>,
      ),
      void Function(
        Pointer<Void>,
      )>("ffi_matrix_sdk_ffi_rust_future_cancel_void");
  late final void Function(
    Pointer<Void>,
  ) ffi_matrix_sdk_ffi_rust_future_free_void = _dylib.lookupFunction<
      Void Function(
        Pointer<Void>,
      ),
      void Function(
        Pointer<Void>,
      )>("ffi_matrix_sdk_ffi_rust_future_free_void");
  late final void Function(Pointer<Void>, Pointer<RustCallStatus>)
      ffi_matrix_sdk_ffi_rust_future_complete_void = _dylib.lookupFunction<
              Void Function(Pointer<Void>, Pointer<RustCallStatus>),
              void Function(Pointer<Void>, Pointer<RustCallStatus>)>(
          "ffi_matrix_sdk_ffi_rust_future_complete_void");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_func_content_without_relation_from_message =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_func_content_without_relation_from_message");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_func_create_caption_edit =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_func_create_caption_edit");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_func_gen_transaction_id =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_func_gen_transaction_id");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_func_generate_webview_url =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_func_generate_webview_url");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_func_get_element_call_required_permissions =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_func_get_element_call_required_permissions");
  late final int Function() uniffi_matrix_sdk_ffi_checksum_func_init_platform =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_func_init_platform");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_func_is_room_alias_format_valid =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_func_is_room_alias_format_valid");
  late final int Function() uniffi_matrix_sdk_ffi_checksum_func_log_event =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_func_log_event");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_func_make_widget_driver =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_func_make_widget_driver");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_func_matrix_to_room_alias_permalink =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_func_matrix_to_room_alias_permalink");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_func_matrix_to_user_permalink =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_func_matrix_to_user_permalink");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_func_message_event_content_from_html =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_func_message_event_content_from_html");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_func_message_event_content_from_html_as_emote =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_func_message_event_content_from_html_as_emote");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_func_message_event_content_from_markdown =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_func_message_event_content_from_markdown");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_func_message_event_content_from_markdown_as_emote =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_func_message_event_content_from_markdown_as_emote");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_func_message_event_content_new =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_func_message_event_content_new");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_func_new_virtual_element_call_widget =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_func_new_virtual_element_call_widget");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_func_parse_matrix_entity_from =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_func_parse_matrix_entity_from");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_func_reload_tracing_file_writer =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_func_reload_tracing_file_writer");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_func_room_alias_name_from_room_display_name =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_func_room_alias_name_from_room_display_name");
  late final int Function() uniffi_matrix_sdk_ffi_checksum_func_sdk_git_sha =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_func_sdk_git_sha");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_func_suggested_power_level_for_role =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_func_suggested_power_level_for_role");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_func_suggested_role_for_power_level =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_func_suggested_role_for_power_level");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_abort_oidc_auth =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_abort_oidc_auth");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_account_data =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_account_data");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_account_url =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_account_url");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_available_sliding_sync_versions =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_available_sliding_sync_versions");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_avatar_url =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_avatar_url");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_await_room_remote_echo =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_await_room_remote_echo");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_cached_avatar_url =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_cached_avatar_url");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_can_deactivate_account =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_can_deactivate_account");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_clear_caches =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_clear_caches");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_create_room =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_create_room");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_custom_login_with_jwt =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_custom_login_with_jwt");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_deactivate_account =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_deactivate_account");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_delete_pusher =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_delete_pusher");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_device_id =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_device_id");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_display_name =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_display_name");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_enable_all_send_queues =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_enable_all_send_queues");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_enable_send_queue_upload_progress =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_enable_send_queue_upload_progress");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_encryption =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_encryption");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_fetch_media_preview_config =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_fetch_media_preview_config");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_get_dm_room =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_get_dm_room");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_get_invite_avatars_display_policy =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_get_invite_avatars_display_policy");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_get_max_media_upload_size =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_get_max_media_upload_size");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_get_media_content =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_get_media_content");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_get_media_file =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_get_media_file");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_get_media_preview_display_policy =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_get_media_preview_display_policy");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_get_media_thumbnail =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_get_media_thumbnail");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_get_notification_settings =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_get_notification_settings");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_get_profile =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_get_profile");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_get_recently_visited_rooms =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_get_recently_visited_rooms");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_get_room =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_get_room");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_get_room_preview_from_room_alias =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_get_room_preview_from_room_alias");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_get_room_preview_from_room_id =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_get_room_preview_from_room_id");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_get_session_verification_controller =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_get_session_verification_controller");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_get_url =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_get_url");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_homeserver =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_homeserver");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_homeserver_login_details =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_homeserver_login_details");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_ignore_user =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_ignore_user");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_ignored_users =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_ignored_users");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_is_livekit_rtc_supported =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_is_livekit_rtc_supported");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_is_report_room_api_supported =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_is_report_room_api_supported");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_is_room_alias_available =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_is_room_alias_available");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_join_room_by_id =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_join_room_by_id");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_join_room_by_id_or_alias =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_join_room_by_id_or_alias");
  late final int Function() uniffi_matrix_sdk_ffi_checksum_method_client_knock =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_knock");
  late final int Function() uniffi_matrix_sdk_ffi_checksum_method_client_login =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_login");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_login_with_email =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_login_with_email");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_login_with_oidc_callback =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_login_with_oidc_callback");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_login_with_qr_code =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_login_with_qr_code");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_logout =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_logout");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_notification_client =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_notification_client");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_observe_account_data_event =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_observe_account_data_event");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_observe_room_account_data_event =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_observe_room_account_data_event");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_remove_avatar =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_remove_avatar");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_reset_server_info =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_reset_server_info");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_resolve_room_alias =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_resolve_room_alias");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_restore_session =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_restore_session");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_restore_session_with =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_restore_session_with");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_room_alias_exists =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_room_alias_exists");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_room_directory_search =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_room_directory_search");
  late final int Function() uniffi_matrix_sdk_ffi_checksum_method_client_rooms =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_rooms");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_search_users =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_search_users");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_server =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_server");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_session =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_session");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_set_account_data =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_set_account_data");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_set_delegate =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_set_delegate");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_set_display_name =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_set_display_name");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_set_invite_avatars_display_policy =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_set_invite_avatars_display_policy");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_set_media_preview_display_policy =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_set_media_preview_display_policy");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_set_media_retention_policy =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_set_media_retention_policy");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_set_pusher =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_set_pusher");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_set_utd_delegate =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_set_utd_delegate");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_sliding_sync_version =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_sliding_sync_version");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_start_sso_login =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_start_sso_login");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_subscribe_to_ignored_users =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_subscribe_to_ignored_users");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_subscribe_to_media_preview_config =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_subscribe_to_media_preview_config");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_subscribe_to_room_info =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_subscribe_to_room_info");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_subscribe_to_send_queue_status =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_subscribe_to_send_queue_status");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_sync_service =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_sync_service");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_track_recently_visited_room =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_track_recently_visited_room");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_unignore_user =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_unignore_user");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_upload_avatar =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_upload_avatar");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_upload_media =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_upload_media");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_url_for_oidc =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_url_for_oidc");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_user_id =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_user_id");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_client_user_id_server_name =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_client_user_id_server_name");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_add_root_certificates =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_add_root_certificates");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_auto_enable_backups =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_auto_enable_backups");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_auto_enable_cross_signing =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_auto_enable_cross_signing");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_backup_download_strategy =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_backup_download_strategy");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_build =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_build");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_cross_process_store_locks_holder_name =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_cross_process_store_locks_holder_name");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_decryption_settings =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_decryption_settings");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_disable_automatic_token_refresh =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_disable_automatic_token_refresh");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_disable_built_in_root_certificates =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_disable_built_in_root_certificates");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_disable_ssl_verification =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_disable_ssl_verification");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_enable_oidc_refresh_lock =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_enable_oidc_refresh_lock");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_enable_share_history_on_invite =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_enable_share_history_on_invite");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_homeserver_url =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_homeserver_url");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_proxy =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_proxy");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_request_config =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_request_config");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_room_key_recipient_strategy =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_room_key_recipient_strategy");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_server_name =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_server_name");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_server_name_or_homeserver_url =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_server_name_or_homeserver_url");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_session_cache_size =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_session_cache_size");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_session_journal_size_limit =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_session_journal_size_limit");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_session_passphrase =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_session_passphrase");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_session_paths =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_session_paths");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_session_pool_max_size =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_session_pool_max_size");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_set_session_delegate =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_set_session_delegate");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_sliding_sync_version_builder =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_sliding_sync_version_builder");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_system_is_memory_constrained =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_system_is_memory_constrained");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_threads_enabled =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_threads_enabled");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_user_agent =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_user_agent");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_username =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_username");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_encryption_backup_exists_on_server =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_encryption_backup_exists_on_server");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_encryption_backup_state =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_encryption_backup_state");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_encryption_backup_state_listener =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_encryption_backup_state_listener");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_encryption_curve25519_key =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_encryption_curve25519_key");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_encryption_disable_recovery =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_encryption_disable_recovery");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_encryption_ed25519_key =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_encryption_ed25519_key");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_encryption_enable_backups =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_encryption_enable_backups");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_encryption_enable_recovery =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_encryption_enable_recovery");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_encryption_is_last_device =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_encryption_is_last_device");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_encryption_recover =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_encryption_recover");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_encryption_recover_and_reset =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_encryption_recover_and_reset");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_encryption_recovery_state =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_encryption_recovery_state");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_encryption_recovery_state_listener =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_encryption_recovery_state_listener");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_encryption_reset_identity =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_encryption_reset_identity");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_encryption_reset_recovery_key =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_encryption_reset_recovery_key");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_encryption_user_identity =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_encryption_user_identity");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_encryption_verification_state =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_encryption_verification_state");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_encryption_verification_state_listener =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_encryption_verification_state_listener");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_encryption_wait_for_backup_upload_steady_state =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_encryption_wait_for_backup_upload_steady_state");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_encryption_wait_for_e2ee_initialization_tasks =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_encryption_wait_for_e2ee_initialization_tasks");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_homeserverlogindetails_sliding_sync_version =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_homeserverlogindetails_sliding_sync_version");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_homeserverlogindetails_supported_oidc_prompts =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_homeserverlogindetails_supported_oidc_prompts");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_homeserverlogindetails_supports_oidc_login =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_homeserverlogindetails_supports_oidc_login");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_homeserverlogindetails_supports_password_login =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_homeserverlogindetails_supports_password_login");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_homeserverlogindetails_supports_sso_login =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_homeserverlogindetails_supports_sso_login");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_homeserverlogindetails_url =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_homeserverlogindetails_url");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_identityresethandle_auth_type =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_identityresethandle_auth_type");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_identityresethandle_cancel =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_identityresethandle_cancel");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_identityresethandle_reset =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_identityresethandle_reset");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_inreplytodetails_event =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_inreplytodetails_event");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_inreplytodetails_event_id =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_inreplytodetails_event_id");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_knockrequestactions_accept =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_knockrequestactions_accept");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_knockrequestactions_decline =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_knockrequestactions_decline");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_knockrequestactions_decline_and_ban =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_knockrequestactions_decline_and_ban");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_knockrequestactions_mark_as_seen =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_knockrequestactions_mark_as_seen");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_lazytimelineitemprovider_contains_only_emojis =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_lazytimelineitemprovider_contains_only_emojis");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_lazytimelineitemprovider_debug_info =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_lazytimelineitemprovider_debug_info");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_lazytimelineitemprovider_get_send_handle =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_lazytimelineitemprovider_get_send_handle");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_lazytimelineitemprovider_get_shields =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_lazytimelineitemprovider_get_shields");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_mediafilehandle_path =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_mediafilehandle_path");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_mediafilehandle_persist =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_mediafilehandle_persist");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_mediasource_to_json =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_mediasource_to_json");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_mediasource_url =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_mediasource_url");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_notificationclient_get_notification =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_notificationclient_get_notification");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_notificationclient_get_notifications =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_notificationclient_get_notifications");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_notificationclient_get_room =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_notificationclient_get_room");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_can_homeserver_push_encrypted_event_to_device =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_can_homeserver_push_encrypted_event_to_device");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_can_push_encrypted_event_to_device =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_can_push_encrypted_event_to_device");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_contains_keywords_rules =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_contains_keywords_rules");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_get_default_room_notification_mode =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_get_default_room_notification_mode");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_get_room_notification_settings =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_get_room_notification_settings");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_get_rooms_with_user_defined_rules =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_get_rooms_with_user_defined_rules");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_get_user_defined_room_notification_mode =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_get_user_defined_room_notification_mode");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_is_call_enabled =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_is_call_enabled");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_is_invite_for_me_enabled =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_is_invite_for_me_enabled");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_is_room_mention_enabled =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_is_room_mention_enabled");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_is_user_mention_enabled =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_is_user_mention_enabled");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_restore_default_room_notification_mode =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_restore_default_room_notification_mode");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_set_call_enabled =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_set_call_enabled");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_set_custom_push_rule =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_set_custom_push_rule");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_set_default_room_notification_mode =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_set_default_room_notification_mode");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_set_delegate =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_set_delegate");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_set_invite_for_me_enabled =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_set_invite_for_me_enabled");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_set_room_mention_enabled =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_set_room_mention_enabled");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_set_room_notification_mode =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_set_room_notification_mode");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_set_user_mention_enabled =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_set_user_mention_enabled");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_unmute_room =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_unmute_room");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_qrcodedata_server_name =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_qrcodedata_server_name");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_active_members_count =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_active_members_count");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_active_room_call_participants =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_active_room_call_participants");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_alternative_aliases =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_alternative_aliases");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_apply_power_level_changes =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_apply_power_level_changes");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_avatar_url =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_avatar_url");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_ban_user =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_ban_user");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_canonical_alias =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_canonical_alias");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_clear_composer_draft =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_clear_composer_draft");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_clear_event_cache_storage =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_clear_event_cache_storage");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_discard_room_key =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_discard_room_key");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_display_name =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_display_name");
  late final int Function() uniffi_matrix_sdk_ffi_checksum_method_room_edit =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_edit");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_enable_encryption =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_enable_encryption");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_enable_send_queue =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_enable_send_queue");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_encryption_state =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_encryption_state");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_fetch_thread_subscription =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_fetch_thread_subscription");
  late final int Function() uniffi_matrix_sdk_ffi_checksum_method_room_forget =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_forget");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_get_power_levels =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_get_power_levels");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_get_room_visibility =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_get_room_visibility");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_has_active_room_call =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_has_active_room_call");
  late final int Function() uniffi_matrix_sdk_ffi_checksum_method_room_heroes =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_heroes");
  late final int Function() uniffi_matrix_sdk_ffi_checksum_method_room_id =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_id");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_ignore_device_trust_and_resend =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_ignore_device_trust_and_resend");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_ignore_user =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_ignore_user");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_invite_user_by_id =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_invite_user_by_id");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_invited_members_count =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_invited_members_count");
  late final int Function() uniffi_matrix_sdk_ffi_checksum_method_room_inviter =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_inviter");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_is_direct =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_is_direct");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_is_encrypted =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_is_encrypted");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_is_public =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_is_public");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_is_send_queue_enabled =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_is_send_queue_enabled");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_is_space =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_is_space");
  late final int Function() uniffi_matrix_sdk_ffi_checksum_method_room_join =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_join");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_joined_members_count =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_joined_members_count");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_kick_user =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_kick_user");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_latest_encryption_state =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_latest_encryption_state");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_latest_event =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_latest_event");
  late final int Function() uniffi_matrix_sdk_ffi_checksum_method_room_leave =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_leave");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_load_composer_draft =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_load_composer_draft");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_mark_as_read =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_mark_as_read");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_matrix_to_event_permalink =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_matrix_to_event_permalink");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_matrix_to_permalink =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_matrix_to_permalink");
  late final int Function() uniffi_matrix_sdk_ffi_checksum_method_room_member =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_member");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_member_avatar_url =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_member_avatar_url");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_member_display_name =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_member_display_name");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_member_with_sender_info =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_member_with_sender_info");
  late final int Function() uniffi_matrix_sdk_ffi_checksum_method_room_members =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_members");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_members_no_sync =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_members_no_sync");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_membership =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_membership");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_own_user_id =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_own_user_id");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_predecessor_room =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_predecessor_room");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_preview_room =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_preview_room");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_publish_room_alias_in_room_directory =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_publish_room_alias_in_room_directory");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_raw_name =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_raw_name");
  late final int Function() uniffi_matrix_sdk_ffi_checksum_method_room_redact =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_redact");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_remove_avatar =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_remove_avatar");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_remove_room_alias_from_room_directory =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_remove_room_alias_from_room_directory");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_report_content =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_report_content");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_report_room =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_report_room");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_reset_power_levels =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_reset_power_levels");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_room_events_debug_string =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_room_events_debug_string");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_room_info =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_room_info");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_save_composer_draft =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_save_composer_draft");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_send_live_location =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_send_live_location");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_send_raw =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_send_raw");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_set_is_favourite =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_set_is_favourite");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_set_is_low_priority =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_set_is_low_priority");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_set_name =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_set_name");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_set_thread_subscription =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_set_thread_subscription");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_set_topic =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_set_topic");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_set_unread_flag =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_set_unread_flag");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_start_live_location_share =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_start_live_location_share");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_stop_live_location_share =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_stop_live_location_share");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_subscribe_to_identity_status_changes =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_subscribe_to_identity_status_changes");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_subscribe_to_knock_requests =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_subscribe_to_knock_requests");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_subscribe_to_live_location_shares =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_subscribe_to_live_location_shares");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_subscribe_to_room_info_updates =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_subscribe_to_room_info_updates");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_subscribe_to_typing_notifications =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_subscribe_to_typing_notifications");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_successor_room =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_successor_room");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_suggested_role_for_user =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_suggested_role_for_user");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_timeline =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_timeline");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_timeline_with_configuration =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_timeline_with_configuration");
  late final int Function() uniffi_matrix_sdk_ffi_checksum_method_room_topic =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_topic");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_typing_notice =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_typing_notice");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_unban_user =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_unban_user");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_update_canonical_alias =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_update_canonical_alias");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_update_history_visibility =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_update_history_visibility");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_update_join_rules =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_update_join_rules");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_update_power_levels_for_users =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_update_power_levels_for_users");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_update_room_visibility =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_update_room_visibility");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_upload_avatar =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_upload_avatar");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_room_withdraw_verification_and_resend =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_room_withdraw_verification_and_resend");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_roomdirectorysearch_is_at_last_page =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_roomdirectorysearch_is_at_last_page");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_roomdirectorysearch_loaded_pages =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_roomdirectorysearch_loaded_pages");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_roomdirectorysearch_next_page =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_roomdirectorysearch_next_page");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_roomdirectorysearch_results =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_roomdirectorysearch_results");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_roomdirectorysearch_search =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_roomdirectorysearch_search");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_roomlist_entries_with_dynamic_adapters =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_roomlist_entries_with_dynamic_adapters");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_roomlist_loading_state =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_roomlist_loading_state");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_roomlist_room =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_roomlist_room");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_roomlistdynamicentriescontroller_add_one_page =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_roomlistdynamicentriescontroller_add_one_page");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_roomlistdynamicentriescontroller_reset_to_one_page =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_roomlistdynamicentriescontroller_reset_to_one_page");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_roomlistdynamicentriescontroller_set_filter =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_roomlistdynamicentriescontroller_set_filter");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_roomlistentrieswithdynamicadaptersresult_controller =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_roomlistentrieswithdynamicadaptersresult_controller");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_roomlistentrieswithdynamicadaptersresult_entries_stream =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_roomlistentrieswithdynamicadaptersresult_entries_stream");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_roomlistservice_all_rooms =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_roomlistservice_all_rooms");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_roomlistservice_room =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_roomlistservice_room");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_roomlistservice_state =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_roomlistservice_state");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_roomlistservice_subscribe_to_rooms =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_roomlistservice_subscribe_to_rooms");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_roomlistservice_sync_indicator =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_roomlistservice_sync_indicator");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_roommembersiterator_len =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_roommembersiterator_len");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_roommembersiterator_next_chunk =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_roommembersiterator_next_chunk");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_roommessageeventcontentwithoutrelation_with_mentions =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_roommessageeventcontentwithoutrelation_with_mentions");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_roompowerlevels_can_own_user_ban =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_roompowerlevels_can_own_user_ban");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_roompowerlevels_can_own_user_invite =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_roompowerlevels_can_own_user_invite");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_roompowerlevels_can_own_user_kick =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_roompowerlevels_can_own_user_kick");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_roompowerlevels_can_own_user_pin_unpin =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_roompowerlevels_can_own_user_pin_unpin");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_roompowerlevels_can_own_user_redact_other =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_roompowerlevels_can_own_user_redact_other");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_roompowerlevels_can_own_user_redact_own =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_roompowerlevels_can_own_user_redact_own");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_roompowerlevels_can_own_user_send_message =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_roompowerlevels_can_own_user_send_message");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_roompowerlevels_can_own_user_send_state =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_roompowerlevels_can_own_user_send_state");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_roompowerlevels_can_own_user_trigger_room_notification =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_roompowerlevels_can_own_user_trigger_room_notification");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_roompowerlevels_can_user_ban =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_roompowerlevels_can_user_ban");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_roompowerlevels_can_user_invite =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_roompowerlevels_can_user_invite");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_roompowerlevels_can_user_kick =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_roompowerlevels_can_user_kick");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_roompowerlevels_can_user_pin_unpin =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_roompowerlevels_can_user_pin_unpin");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_roompowerlevels_can_user_redact_other =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_roompowerlevels_can_user_redact_other");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_roompowerlevels_can_user_redact_own =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_roompowerlevels_can_user_redact_own");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_roompowerlevels_can_user_send_message =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_roompowerlevels_can_user_send_message");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_roompowerlevels_can_user_send_state =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_roompowerlevels_can_user_send_state");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_roompowerlevels_can_user_trigger_room_notification =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_roompowerlevels_can_user_trigger_room_notification");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_roompowerlevels_user_power_levels =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_roompowerlevels_user_power_levels");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_roompowerlevels_values =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_roompowerlevels_values");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_roompreview_forget =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_roompreview_forget");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_roompreview_info =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_roompreview_info");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_roompreview_inviter =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_roompreview_inviter");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_roompreview_leave =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_roompreview_leave");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_roompreview_own_membership_details =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_roompreview_own_membership_details");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_sendattachmentjoinhandle_cancel =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_sendattachmentjoinhandle_cancel");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_sendattachmentjoinhandle_join =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_sendattachmentjoinhandle_join");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_sendgalleryjoinhandle_cancel =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_sendgalleryjoinhandle_cancel");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_sendgalleryjoinhandle_join =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_sendgalleryjoinhandle_join");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_sendhandle_abort =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_sendhandle_abort");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_sendhandle_try_resend =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_sendhandle_try_resend");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontroller_accept_verification_request =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontroller_accept_verification_request");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontroller_acknowledge_verification_request =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontroller_acknowledge_verification_request");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontroller_approve_verification =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontroller_approve_verification");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontroller_cancel_verification =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontroller_cancel_verification");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontroller_decline_verification =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontroller_decline_verification");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontroller_request_device_verification =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontroller_request_device_verification");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontroller_request_user_verification =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontroller_request_user_verification");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontroller_set_delegate =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontroller_set_delegate");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontroller_start_sas_verification =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontroller_start_sas_verification");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_sessionverificationemoji_description =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_sessionverificationemoji_description");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_sessionverificationemoji_symbol =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_sessionverificationemoji_symbol");
  late final int Function() uniffi_matrix_sdk_ffi_checksum_method_span_enter =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_span_enter");
  late final int Function() uniffi_matrix_sdk_ffi_checksum_method_span_exit =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_span_exit");
  late final int Function() uniffi_matrix_sdk_ffi_checksum_method_span_is_none =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_span_is_none");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_ssohandler_finish =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_ssohandler_finish");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_ssohandler_url =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_ssohandler_url");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_syncservice_room_list_service =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_syncservice_room_list_service");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_syncservice_start =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_syncservice_start");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_syncservice_state =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_syncservice_state");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_syncservice_stop =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_syncservice_stop");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_syncservicebuilder_finish =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_syncservicebuilder_finish");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_syncservicebuilder_with_cross_process_lock =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_syncservicebuilder_with_cross_process_lock");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_syncservicebuilder_with_offline_mode =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_syncservicebuilder_with_offline_mode");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_syncservicebuilder_with_share_pos =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_syncservicebuilder_with_share_pos");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_taskhandle_cancel =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_taskhandle_cancel");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_taskhandle_is_finished =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_taskhandle_is_finished");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_threadsummary_latest_event =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_threadsummary_latest_event");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_threadsummary_num_replies =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_threadsummary_num_replies");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_timeline_add_listener =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_timeline_add_listener");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_timeline_create_message_content =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_timeline_create_message_content");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_timeline_create_poll =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_timeline_create_poll");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_timeline_edit =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_timeline_edit");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_timeline_end_poll =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_timeline_end_poll");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_timeline_fetch_details_for_event =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_timeline_fetch_details_for_event");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_timeline_fetch_members =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_timeline_fetch_members");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_timeline_get_event_timeline_item_by_event_id =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_timeline_get_event_timeline_item_by_event_id");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_timeline_load_reply_details =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_timeline_load_reply_details");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_timeline_mark_as_read =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_timeline_mark_as_read");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_timeline_paginate_backwards =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_timeline_paginate_backwards");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_timeline_paginate_forwards =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_timeline_paginate_forwards");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_timeline_pin_event =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_timeline_pin_event");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_timeline_redact_event =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_timeline_redact_event");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_timeline_retry_decryption =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_timeline_retry_decryption");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_timeline_send =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_timeline_send");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_timeline_send_audio =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_timeline_send_audio");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_timeline_send_file =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_timeline_send_file");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_timeline_send_gallery =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_timeline_send_gallery");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_timeline_send_image =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_timeline_send_image");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_timeline_send_location =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_timeline_send_location");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_timeline_send_poll_response =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_timeline_send_poll_response");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_timeline_send_read_receipt =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_timeline_send_read_receipt");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_timeline_send_reply =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_timeline_send_reply");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_timeline_send_video =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_timeline_send_video");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_timeline_send_voice_message =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_timeline_send_voice_message");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_timeline_subscribe_to_back_pagination_status =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_timeline_subscribe_to_back_pagination_status");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_timeline_toggle_reaction =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_timeline_toggle_reaction");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_timeline_unpin_event =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_timeline_unpin_event");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_timelineevent_event_id =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_timelineevent_event_id");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_timelineevent_event_type =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_timelineevent_event_type");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_timelineevent_sender_id =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_timelineevent_sender_id");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_timelineevent_timestamp =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_timelineevent_timestamp");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_timelineitem_as_event =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_timelineitem_as_event");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_timelineitem_as_virtual =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_timelineitem_as_virtual");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_timelineitem_fmt_debug =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_timelineitem_fmt_debug");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_timelineitem_unique_id =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_timelineitem_unique_id");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_unreadnotificationscount_has_notifications =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_unreadnotificationscount_has_notifications");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_unreadnotificationscount_highlight_count =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_unreadnotificationscount_highlight_count");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_unreadnotificationscount_notification_count =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_unreadnotificationscount_notification_count");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_useridentity_has_verification_violation =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_useridentity_has_verification_violation");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_useridentity_is_verified =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_useridentity_is_verified");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_useridentity_master_key =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_useridentity_master_key");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_useridentity_pin =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_useridentity_pin");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_useridentity_was_previously_verified =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_useridentity_was_previously_verified");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_useridentity_withdraw_verification =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_useridentity_withdraw_verification");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_widgetdriver_run =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_widgetdriver_run");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_widgetdriverhandle_recv =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_widgetdriverhandle_recv");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_widgetdriverhandle_send =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_widgetdriverhandle_send");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_constructor_clientbuilder_new =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_constructor_clientbuilder_new");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_constructor_mediasource_from_json =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_constructor_mediasource_from_json");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_constructor_mediasource_from_url =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_constructor_mediasource_from_url");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_constructor_qrcodedata_from_bytes =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_constructor_qrcodedata_from_bytes");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_constructor_span_current =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_constructor_span_current");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_constructor_span_new =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_constructor_span_new");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_constructor_timelineeventtypefilter_exclude =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_constructor_timelineeventtypefilter_exclude");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_constructor_timelineeventtypefilter_include =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_constructor_timelineeventtypefilter_include");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_accountdatalistener_on_change =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_accountdatalistener_on_change");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_backupstatelistener_on_update =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_backupstatelistener_on_update");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_backupsteadystatelistener_on_update =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_backupsteadystatelistener_on_update");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_clientdelegate_did_receive_auth_error =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_clientdelegate_did_receive_auth_error");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_clientsessiondelegate_retrieve_session_from_keychain =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_clientsessiondelegate_retrieve_session_from_keychain");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_clientsessiondelegate_save_session_in_keychain =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_clientsessiondelegate_save_session_in_keychain");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_enablerecoveryprogresslistener_on_update =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_enablerecoveryprogresslistener_on_update");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_identitystatuschangelistener_call =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_identitystatuschangelistener_call");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_ignoreduserslistener_call =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_ignoreduserslistener_call");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_knockrequestslistener_call =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_knockrequestslistener_call");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_livelocationsharelistener_call =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_livelocationsharelistener_call");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_mediapreviewconfiglistener_on_change =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_mediapreviewconfiglistener_on_change");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_notificationsettingsdelegate_settings_did_change =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_notificationsettingsdelegate_settings_did_change");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_paginationstatuslistener_on_update =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_paginationstatuslistener_on_update");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_progresswatcher_transmission_progress =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_progresswatcher_transmission_progress");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_qrloginprogresslistener_on_update =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_qrloginprogresslistener_on_update");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_recoverystatelistener_on_update =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_recoverystatelistener_on_update");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_roomaccountdatalistener_on_change =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_roomaccountdatalistener_on_change");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_roomdirectorysearchentrieslistener_on_update =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_roomdirectorysearchentrieslistener_on_update");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_roominfolistener_call =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_roominfolistener_call");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_roomlistentrieslistener_on_update =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_roomlistentrieslistener_on_update");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_roomlistloadingstatelistener_on_update =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_roomlistloadingstatelistener_on_update");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_roomlistservicestatelistener_on_update =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_roomlistservicestatelistener_on_update");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_roomlistservicesyncindicatorlistener_on_update =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_roomlistservicesyncindicatorlistener_on_update");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_sendqueueroomerrorlistener_on_error =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_sendqueueroomerrorlistener_on_error");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontrollerdelegate_did_receive_verification_request =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontrollerdelegate_did_receive_verification_request");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontrollerdelegate_did_accept_verification_request =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontrollerdelegate_did_accept_verification_request");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontrollerdelegate_did_start_sas_verification =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontrollerdelegate_did_start_sas_verification");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontrollerdelegate_did_receive_verification_data =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontrollerdelegate_did_receive_verification_data");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontrollerdelegate_did_fail =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontrollerdelegate_did_fail");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontrollerdelegate_did_cancel =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontrollerdelegate_did_cancel");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontrollerdelegate_did_finish =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontrollerdelegate_did_finish");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_syncservicestateobserver_on_update =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_syncservicestateobserver_on_update");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_timelinelistener_on_update =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_timelinelistener_on_update");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_typingnotificationslistener_call =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_typingnotificationslistener_call");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_unabletodecryptdelegate_on_utd =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_unabletodecryptdelegate_on_utd");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_verificationstatelistener_on_update =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_verificationstatelistener_on_update");
  late final int Function()
      uniffi_matrix_sdk_ffi_checksum_method_widgetcapabilitiesprovider_acquire_capabilities =
      _dylib.lookupFunction<Uint16 Function(), int Function()>(
          "uniffi_matrix_sdk_ffi_checksum_method_widgetcapabilitiesprovider_acquire_capabilities");
  late final int Function() ffi_matrix_sdk_ffi_uniffi_contract_version =
      _dylib.lookupFunction<Uint32 Function(), int Function()>(
          "ffi_matrix_sdk_ffi_uniffi_contract_version");

  static void _checkApiVersion() {
    final bindingsVersion = 26;
    final scaffoldingVersion =
        _UniffiLib.instance.ffi_matrix_sdk_ffi_uniffi_contract_version();
    if (bindingsVersion != scaffoldingVersion) {
      throw UniffiInternalError.panicked(
          "UniFFI contract version mismatch: bindings version \$bindingsVersion, scaffolding version \$scaffoldingVersion");
    }
  }

  static void _checkApiChecksums() {
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_func_content_without_relation_from_message() !=
        1366) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_func_create_caption_edit() !=
        33992) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_func_gen_transaction_id() !=
        15808) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_func_generate_webview_url() !=
        48529) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_func_get_element_call_required_permissions() !=
        30181) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_func_init_platform() !=
        11113) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_func_is_room_alias_format_valid() !=
        54845) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance.uniffi_matrix_sdk_ffi_checksum_func_log_event() !=
        55646) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_func_make_widget_driver() !=
        34206) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_func_matrix_to_room_alias_permalink() !=
        13776) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_func_matrix_to_user_permalink() !=
        46473) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_func_message_event_content_from_html() !=
        37203) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_func_message_event_content_from_html_as_emote() !=
        8938) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_func_message_event_content_from_markdown() !=
        58385) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_func_message_event_content_from_markdown_as_emote() !=
        20152) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_func_message_event_content_new() !=
        57839) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_func_new_virtual_element_call_widget() !=
        61776) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_func_parse_matrix_entity_from() !=
        49710) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_func_reload_tracing_file_writer() !=
        1447) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_func_room_alias_name_from_room_display_name() !=
        65010) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance.uniffi_matrix_sdk_ffi_checksum_func_sdk_git_sha() !=
        4038) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_func_suggested_power_level_for_role() !=
        29703) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_func_suggested_role_for_power_level() !=
        13856) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_abort_oidc_auth() !=
        53440) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_account_data() !=
        50433) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_account_url() !=
        42373) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_available_sliding_sync_versions() !=
        35296) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_avatar_url() !=
        27867) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_await_room_remote_echo() !=
        18126) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_cached_avatar_url() !=
        50226) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_can_deactivate_account() !=
        39890) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_clear_caches() !=
        55711) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_create_room() !=
        52700) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_custom_login_with_jwt() !=
        19710) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_deactivate_account() !=
        20658) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_delete_pusher() !=
        45990) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_device_id() !=
        44340) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_display_name() !=
        56259) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_enable_all_send_queues() !=
        30834) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_enable_send_queue_upload_progress() !=
        10688) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_encryption() !=
        9657) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_fetch_media_preview_config() !=
        15595) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_get_dm_room() !=
        5137) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_get_invite_avatars_display_policy() !=
        46953) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_get_max_media_upload_size() !=
        12661) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_get_media_content() !=
        40308) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_get_media_file() !=
        20094) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_get_media_preview_display_policy() !=
        19264) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_get_media_thumbnail() !=
        52601) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_get_notification_settings() !=
        49769) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_get_profile() !=
        60062) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_get_recently_visited_rooms() !=
        22399) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_get_room() !=
        30376) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_get_room_preview_from_room_alias() !=
        7674) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_get_room_preview_from_room_id() !=
        36348) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_get_session_verification_controller() !=
        55934) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_get_url() !=
        32541) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_homeserver() !=
        26427) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_homeserver_login_details() !=
        63487) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_ignore_user() !=
        14588) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_ignored_users() !=
        49620) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_is_livekit_rtc_supported() !=
        34863) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_is_report_room_api_supported() !=
        17934) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_is_room_alias_available() !=
        23322) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_join_room_by_id() !=
        64032) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_join_room_by_id_or_alias() !=
        18521) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_knock() !=
        48652) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_login() !=
        33276) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_login_with_email() !=
        11789) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_login_with_oidc_callback() !=
        32591) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_login_with_qr_code() !=
        3481) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_logout() !=
        42911) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_notification_client() !=
        37308) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_observe_account_data_event() !=
        13906) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_observe_room_account_data_event() !=
        15699) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_remove_avatar() !=
        29033) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_reset_server_info() !=
        16333) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_resolve_room_alias() !=
        3551) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_restore_session() !=
        56125) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_restore_session_with() !=
        20927) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_room_alias_exists() !=
        20359) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_room_directory_search() !=
        39855) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_rooms() !=
        29558) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_search_users() !=
        42927) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_server() !=
        63276) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_session() !=
        8085) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_set_account_data() !=
        18256) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_set_delegate() !=
        46437) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_set_display_name() !=
        15292) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_set_invite_avatars_display_policy() !=
        48457) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_set_media_preview_display_policy() !=
        24080) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_set_media_retention_policy() !=
        2414) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_set_pusher() !=
        41975) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_set_utd_delegate() !=
        37720) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_sliding_sync_version() !=
        4957) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_start_sso_login() !=
        34571) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_subscribe_to_ignored_users() !=
        23285) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_subscribe_to_media_preview_config() !=
        47047) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_subscribe_to_room_info() !=
        41103) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_subscribe_to_send_queue_status() !=
        57403) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_sync_service() !=
        52812) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_track_recently_visited_room() !=
        56986) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_unignore_user() !=
        8489) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_upload_avatar() !=
        64486) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_upload_media() !=
        51195) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_url_for_oidc() !=
        19369) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_user_id() !=
        40531) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_client_user_id_server_name() !=
        57725) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_add_root_certificates() !=
        14763) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_auto_enable_backups() !=
        44502) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_auto_enable_cross_signing() !=
        37167) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_backup_download_strategy() !=
        11959) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_build() !=
        56018) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_cross_process_store_locks_holder_name() !=
        46627) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_decryption_settings() !=
        34715) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_disable_automatic_token_refresh() !=
        43839) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_disable_built_in_root_certificates() !=
        47525) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_disable_ssl_verification() !=
        2334) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_enable_oidc_refresh_lock() !=
        42214) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_enable_share_history_on_invite() !=
        3856) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_homeserver_url() !=
        28347) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_proxy() !=
        5659) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_request_config() !=
        58783) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_room_key_recipient_strategy() !=
        41183) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_server_name() !=
        29096) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_server_name_or_homeserver_url() !=
        30022) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_session_cache_size() !=
        32604) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_session_journal_size_limit() !=
        21378) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_session_passphrase() !=
        55403) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_session_paths() !=
        54230) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_session_pool_max_size() !=
        6011) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_set_session_delegate() !=
        8576) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_sliding_sync_version_builder() !=
        39381) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_system_is_memory_constrained() !=
        6898) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_threads_enabled() !=
        23935) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_user_agent() !=
        13719) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_clientbuilder_username() !=
        45302) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_encryption_backup_exists_on_server() !=
        45490) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_encryption_backup_state() !=
        51049) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_encryption_backup_state_listener() !=
        14246) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_encryption_curve25519_key() !=
        58425) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_encryption_disable_recovery() !=
        18699) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_encryption_ed25519_key() !=
        11864) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_encryption_enable_backups() !=
        55446) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_encryption_enable_recovery() !=
        64351) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_encryption_is_last_device() !=
        27955) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_encryption_recover() !=
        33712) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_encryption_recover_and_reset() !=
        12902) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_encryption_recovery_state() !=
        54051) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_encryption_recovery_state_listener() !=
        36612) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_encryption_reset_identity() !=
        13780) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_encryption_reset_recovery_key() !=
        20380) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_encryption_user_identity() !=
        20644) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_encryption_verification_state() !=
        29114) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_encryption_verification_state_listener() !=
        59806) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_encryption_wait_for_backup_upload_steady_state() !=
        37503) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_encryption_wait_for_e2ee_initialization_tasks() !=
        41585) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_homeserverlogindetails_sliding_sync_version() !=
        36573) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_homeserverlogindetails_supported_oidc_prompts() !=
        63396) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_homeserverlogindetails_supports_oidc_login() !=
        46090) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_homeserverlogindetails_supports_password_login() !=
        33501) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_homeserverlogindetails_supports_sso_login() !=
        37773) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_homeserverlogindetails_url() !=
        61326) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_identityresethandle_auth_type() !=
        43501) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_identityresethandle_cancel() !=
        57622) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_identityresethandle_reset() !=
        11997) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_inreplytodetails_event() !=
        36106) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_inreplytodetails_event_id() !=
        5876) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_knockrequestactions_accept() !=
        25656) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_knockrequestactions_decline() !=
        65054) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_knockrequestactions_decline_and_ban() !=
        26242) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_knockrequestactions_mark_as_seen() !=
        36036) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_lazytimelineitemprovider_contains_only_emojis() !=
        5211) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_lazytimelineitemprovider_debug_info() !=
        55450) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_lazytimelineitemprovider_get_send_handle() !=
        46057) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_lazytimelineitemprovider_get_shields() !=
        12518) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_mediafilehandle_path() !=
        16357) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_mediafilehandle_persist() !=
        12883) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_mediasource_to_json() !=
        23306) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_mediasource_url() !=
        62692) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_notificationclient_get_notification() !=
        52873) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_notificationclient_get_notifications() !=
        64372) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_notificationclient_get_room() !=
        26581) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_can_homeserver_push_encrypted_event_to_device() !=
        37323) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_can_push_encrypted_event_to_device() !=
        21251) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_contains_keywords_rules() !=
        60025) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_get_default_room_notification_mode() !=
        36211) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_get_room_notification_settings() !=
        55295) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_get_rooms_with_user_defined_rules() !=
        19849) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_get_user_defined_room_notification_mode() !=
        18228) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_is_call_enabled() !=
        12210) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_is_invite_for_me_enabled() !=
        533) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_is_room_mention_enabled() !=
        13304) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_is_user_mention_enabled() !=
        49857) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_restore_default_room_notification_mode() !=
        35399) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_set_call_enabled() !=
        16823) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_set_custom_push_rule() !=
        465) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_set_default_room_notification_mode() !=
        9426) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_set_delegate() !=
        57636) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_set_invite_for_me_enabled() !=
        11988) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_set_room_mention_enabled() !=
        31650) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_set_room_notification_mode() !=
        4135) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_set_user_mention_enabled() !=
        56594) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_notificationsettings_unmute_room() !=
        47580) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_qrcodedata_server_name() !=
        30173) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_active_members_count() !=
        61905) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_active_room_call_participants() !=
        41533) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_alternative_aliases() !=
        28555) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_apply_power_level_changes() !=
        44206) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_avatar_url() !=
        34637) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_ban_user() !=
        35046) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_canonical_alias() !=
        19786) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_clear_composer_draft() !=
        59182) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_clear_event_cache_storage() !=
        13838) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_discard_room_key() !=
        18081) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_display_name() !=
        64194) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance.uniffi_matrix_sdk_ffi_checksum_method_room_edit() !=
        61956) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_enable_encryption() !=
        14669) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_enable_send_queue() !=
        23914) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_encryption_state() !=
        9101) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_fetch_thread_subscription() !=
        51696) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_forget() !=
        37840) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_get_power_levels() !=
        47640) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_get_room_visibility() !=
        412) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_has_active_room_call() !=
        33588) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_heroes() !=
        22313) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance.uniffi_matrix_sdk_ffi_checksum_method_room_id() !=
        61990) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_ignore_device_trust_and_resend() !=
        39984) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_ignore_user() !=
        62239) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_invite_user_by_id() !=
        41133) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_invited_members_count() !=
        1023) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_inviter() !=
        18103) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_is_direct() !=
        10462) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_is_encrypted() !=
        63995) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_is_public() !=
        57746) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_is_send_queue_enabled() !=
        36591) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_is_space() !=
        16919) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance.uniffi_matrix_sdk_ffi_checksum_method_room_join() !=
        9240) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_joined_members_count() !=
        55835) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_kick_user() !=
        28600) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_latest_encryption_state() !=
        16843) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_latest_event() !=
        39083) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_leave() !=
        63688) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_load_composer_draft() !=
        62856) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_mark_as_read() !=
        57806) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_matrix_to_event_permalink() !=
        36705) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_matrix_to_permalink() !=
        47781) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_member() !=
        48980) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_member_avatar_url() !=
        29492) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_member_display_name() !=
        33206) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_member_with_sender_info() !=
        64964) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_members() !=
        42691) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_members_no_sync() !=
        3255) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_membership() !=
        45951) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_own_user_id() !=
        39510) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_predecessor_room() !=
        22093) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_preview_room() !=
        60431) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_publish_room_alias_in_room_directory() !=
        13924) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_raw_name() !=
        15453) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_redact() !=
        45810) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_remove_avatar() !=
        7230) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_remove_room_alias_from_room_directory() !=
        16926) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_report_content() !=
        16529) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_report_room() !=
        6449) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_reset_power_levels() !=
        5060) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_room_events_debug_string() !=
        37832) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_room_info() !=
        41146) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_save_composer_draft() !=
        27585) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_send_live_location() !=
        34248) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_send_raw() !=
        20486) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_set_is_favourite() !=
        64403) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_set_is_low_priority() !=
        48070) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_set_name() !=
        52127) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_set_thread_subscription() !=
        48337) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_set_topic() !=
        5576) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_set_unread_flag() !=
        2381) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_start_live_location_share() !=
        11488) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_stop_live_location_share() !=
        19983) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_subscribe_to_identity_status_changes() !=
        8526) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_subscribe_to_knock_requests() !=
        30649) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_subscribe_to_live_location_shares() !=
        57037) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_subscribe_to_room_info_updates() !=
        48209) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_subscribe_to_typing_notifications() !=
        38524) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_successor_room() !=
        27360) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_suggested_role_for_user() !=
        47787) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_timeline() !=
        51477) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_timeline_with_configuration() !=
        35159) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_topic() !=
        59745) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_typing_notice() !=
        28642) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_unban_user() !=
        1803) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_update_canonical_alias() !=
        25065) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_update_history_visibility() !=
        26248) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_update_join_rules() !=
        49303) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_update_power_levels_for_users() !=
        52057) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_update_room_visibility() !=
        64724) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_upload_avatar() !=
        19069) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_room_withdraw_verification_and_resend() !=
        33485) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_roomdirectorysearch_is_at_last_page() !=
        34221) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_roomdirectorysearch_loaded_pages() !=
        2923) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_roomdirectorysearch_next_page() !=
        29305) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_roomdirectorysearch_results() !=
        30207) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_roomdirectorysearch_search() !=
        24438) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_roomlist_entries_with_dynamic_adapters() !=
        36097) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_roomlist_loading_state() !=
        21585) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_roomlist_room() !=
        62491) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_roomlistdynamicentriescontroller_add_one_page() !=
        47748) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_roomlistdynamicentriescontroller_reset_to_one_page() !=
        61352) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_roomlistdynamicentriescontroller_set_filter() !=
        61202) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_roomlistentrieswithdynamicadaptersresult_controller() !=
        36258) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_roomlistentrieswithdynamicadaptersresult_entries_stream() !=
        56632) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_roomlistservice_all_rooms() !=
        49704) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_roomlistservice_room() !=
        60695) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_roomlistservice_state() !=
        64650) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_roomlistservice_subscribe_to_rooms() !=
        5528) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_roomlistservice_sync_indicator() !=
        16821) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_roommembersiterator_len() !=
        39835) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_roommembersiterator_next_chunk() !=
        23186) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_roommessageeventcontentwithoutrelation_with_mentions() !=
        8867) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_roompowerlevels_can_own_user_ban() !=
        7183) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_roompowerlevels_can_own_user_invite() !=
        57708) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_roompowerlevels_can_own_user_kick() !=
        461) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_roompowerlevels_can_own_user_pin_unpin() !=
        52852) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_roompowerlevels_can_own_user_redact_other() !=
        60699) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_roompowerlevels_can_own_user_redact_own() !=
        32905) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_roompowerlevels_can_own_user_send_message() !=
        2424) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_roompowerlevels_can_own_user_send_state() !=
        33539) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_roompowerlevels_can_own_user_trigger_room_notification() !=
        64150) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_roompowerlevels_can_user_ban() !=
        57457) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_roompowerlevels_can_user_invite() !=
        41275) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_roompowerlevels_can_user_kick() !=
        51066) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_roompowerlevels_can_user_pin_unpin() !=
        4609) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_roompowerlevels_can_user_redact_other() !=
        52543) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_roompowerlevels_can_user_redact_own() !=
        2983) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_roompowerlevels_can_user_send_message() !=
        48291) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_roompowerlevels_can_user_send_state() !=
        14792) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_roompowerlevels_can_user_trigger_room_notification() !=
        26319) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_roompowerlevels_user_power_levels() !=
        16221) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_roompowerlevels_values() !=
        38774) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_roompreview_forget() !=
        18179) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_roompreview_info() !=
        50237) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_roompreview_inviter() !=
        1297) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_roompreview_leave() !=
        21886) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_roompreview_own_membership_details() !=
        46321) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_sendattachmentjoinhandle_cancel() !=
        62384) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_sendattachmentjoinhandle_join() !=
        1903) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_sendgalleryjoinhandle_cancel() !=
        7014) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_sendgalleryjoinhandle_join() !=
        57901) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_sendhandle_abort() !=
        11570) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_sendhandle_try_resend() !=
        28691) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontroller_accept_verification_request() !=
        53466) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontroller_acknowledge_verification_request() !=
        37982) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontroller_approve_verification() !=
        27140) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontroller_cancel_verification() !=
        32994) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontroller_decline_verification() !=
        64345) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontroller_request_device_verification() !=
        4777) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontroller_request_user_verification() !=
        26149) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontroller_set_delegate() !=
        42324) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontroller_start_sas_verification() !=
        16328) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_sessionverificationemoji_description() !=
        21346) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_sessionverificationemoji_symbol() !=
        46075) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_span_enter() !=
        8900) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance.uniffi_matrix_sdk_ffi_checksum_method_span_exit() !=
        47924) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_span_is_none() !=
        33327) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_ssohandler_finish() !=
        64706) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_ssohandler_url() !=
        10889) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_syncservice_room_list_service() !=
        26426) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_syncservice_start() !=
        16010) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_syncservice_state() !=
        61806) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_syncservice_stop() !=
        42435) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_syncservicebuilder_finish() !=
        22814) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_syncservicebuilder_with_cross_process_lock() !=
        56326) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_syncservicebuilder_with_offline_mode() !=
        16958) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_syncservicebuilder_with_share_pos() !=
        18892) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_taskhandle_cancel() !=
        9124) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_taskhandle_is_finished() !=
        29008) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_threadsummary_latest_event() !=
        52917) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_threadsummary_num_replies() !=
        10634) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_timeline_add_listener() !=
        18746) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_timeline_create_message_content() !=
        21811) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_timeline_create_poll() !=
        37925) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_timeline_edit() !=
        42189) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_timeline_end_poll() !=
        32659) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_timeline_fetch_details_for_event() !=
        54068) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_timeline_fetch_members() !=
        37994) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_timeline_get_event_timeline_item_by_event_id() !=
        33999) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_timeline_load_reply_details() !=
        54225) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_timeline_mark_as_read() !=
        16621) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_timeline_paginate_backwards() !=
        36829) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_timeline_paginate_forwards() !=
        30268) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_timeline_pin_event() !=
        41687) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_timeline_redact_event() !=
        48707) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_timeline_retry_decryption() !=
        21112) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_timeline_send() !=
        9553) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_timeline_send_audio() !=
        22559) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_timeline_send_file() !=
        4588) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_timeline_send_gallery() !=
        61071) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_timeline_send_image() !=
        25436) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_timeline_send_location() !=
        39080) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_timeline_send_poll_response() !=
        7453) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_timeline_send_read_receipt() !=
        37532) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_timeline_send_reply() !=
        11149) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_timeline_send_video() !=
        1445) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_timeline_send_voice_message() !=
        50042) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_timeline_subscribe_to_back_pagination_status() !=
        46161) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_timeline_toggle_reaction() !=
        29303) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_timeline_unpin_event() !=
        52414) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_timelineevent_event_id() !=
        11088) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_timelineevent_event_type() !=
        12922) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_timelineevent_sender_id() !=
        18142) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_timelineevent_timestamp() !=
        50929) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_timelineitem_as_event() !=
        6106) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_timelineitem_as_virtual() !=
        50960) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_timelineitem_fmt_debug() !=
        38094) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_timelineitem_unique_id() !=
        39945) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_unreadnotificationscount_has_notifications() !=
        33024) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_unreadnotificationscount_highlight_count() !=
        35997) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_unreadnotificationscount_notification_count() !=
        35655) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_useridentity_has_verification_violation() !=
        2948) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_useridentity_is_verified() !=
        61954) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_useridentity_master_key() !=
        4041) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_useridentity_pin() !=
        62925) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_useridentity_was_previously_verified() !=
        41686) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_useridentity_withdraw_verification() !=
        3578) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_widgetdriver_run() !=
        7519) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_widgetdriverhandle_recv() !=
        2662) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_widgetdriverhandle_send() !=
        18689) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_constructor_clientbuilder_new() !=
        27991) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_constructor_mediasource_from_json() !=
        10564) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_constructor_mediasource_from_url() !=
        11983) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_constructor_qrcodedata_from_bytes() !=
        32675) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_constructor_span_current() !=
        53698) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_constructor_span_new() !=
        14105) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_constructor_timelineeventtypefilter_exclude() !=
        53805) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_constructor_timelineeventtypefilter_include() !=
        25498) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_accountdatalistener_on_change() !=
        16189) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_backupstatelistener_on_update() !=
        12849) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_backupsteadystatelistener_on_update() !=
        41052) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_clientdelegate_did_receive_auth_error() !=
        26350) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_clientsessiondelegate_retrieve_session_from_keychain() !=
        43954) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_clientsessiondelegate_save_session_in_keychain() !=
        53223) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_enablerecoveryprogresslistener_on_update() !=
        13538) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_identitystatuschangelistener_call() !=
        57311) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_ignoreduserslistener_call() !=
        47519) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_knockrequestslistener_call() !=
        10077) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_livelocationsharelistener_call() !=
        34519) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_mediapreviewconfiglistener_on_change() !=
        14770) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_notificationsettingsdelegate_settings_did_change() !=
        51708) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_paginationstatuslistener_on_update() !=
        65318) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_progresswatcher_transmission_progress() !=
        41133) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_qrloginprogresslistener_on_update() !=
        9758) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_recoverystatelistener_on_update() !=
        64575) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_roomaccountdatalistener_on_change() !=
        58105) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_roomdirectorysearchentrieslistener_on_update() !=
        41968) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_roominfolistener_call() !=
        44934) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_roomlistentrieslistener_on_update() !=
        12576) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_roomlistloadingstatelistener_on_update() !=
        23169) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_roomlistservicestatelistener_on_update() !=
        24823) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_roomlistservicesyncindicatorlistener_on_update() !=
        36937) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_sendqueueroomerrorlistener_on_error() !=
        38224) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontrollerdelegate_did_receive_verification_request() !=
        3417) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontrollerdelegate_did_accept_verification_request() !=
        3733) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontrollerdelegate_did_start_sas_verification() !=
        56833) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontrollerdelegate_did_receive_verification_data() !=
        30840) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontrollerdelegate_did_fail() !=
        32164) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontrollerdelegate_did_cancel() !=
        3367) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_sessionverificationcontrollerdelegate_did_finish() !=
        37905) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_syncservicestateobserver_on_update() !=
        62231) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_timelinelistener_on_update() !=
        53990) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_typingnotificationslistener_call() !=
        64299) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_unabletodecryptdelegate_on_utd() !=
        61791) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_verificationstatelistener_on_update() !=
        38998) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
    if (_UniffiLib.instance
            .uniffi_matrix_sdk_ffi_checksum_method_widgetcapabilitiesprovider_acquire_capabilities() !=
        12846) {
      throw UniffiInternalError.panicked("UniFFI API checksum mismatch");
    }
  }
}

void initialize() {
  _UniffiLib._open();
}

void ensureInitialized() {
  _UniffiLib._checkApiVersion();
  _UniffiLib._checkApiChecksums();
}
